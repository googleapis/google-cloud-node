// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/api_gateway_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './api_gateway_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The API Gateway Service is the interface for managing API Gateways.
 * @class
 * @memberof v1
 */
export class ApiGatewayServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  apiGatewayServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ApiGatewayServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ApiGatewayServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ApiGatewayServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      apiPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/global/apis/{api}'
      ),
      apiConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/global/apis/{api}/configs/{api_config}'
      ),
      gatewayPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/gateways/{gateway}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listGateways: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'gateways'
      ),
      listApis: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'apis'
      ),
      listApiConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'apiConfigs'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/gateways/*}:getIamPolicy',
          additional_bindings: [
            {get: '/v1/{resource=projects/*/locations/*/apis/*}:getIamPolicy'},
            {
              get: '/v1/{resource=projects/*/locations/*/apis/*/configs/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/gateways/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/apis/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/apis/*/configs/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/gateways/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/apis/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/apis/*/configs/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createGatewayResponse = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.Gateway'
    ) as gax.protobuf.Type;
    const createGatewayMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateGatewayResponse = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.Gateway'
    ) as gax.protobuf.Type;
    const updateGatewayMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteGatewayResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteGatewayMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createApiResponse = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.Api'
    ) as gax.protobuf.Type;
    const createApiMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateApiResponse = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.Api'
    ) as gax.protobuf.Type;
    const updateApiMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteApiResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteApiMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createApiConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.ApiConfig'
    ) as gax.protobuf.Type;
    const createApiConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateApiConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.ApiConfig'
    ) as gax.protobuf.Type;
    const updateApiConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteApiConfigResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteApiConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.apigateway.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createGateway: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createGatewayResponse.decode.bind(createGatewayResponse),
        createGatewayMetadata.decode.bind(createGatewayMetadata)
      ),
      updateGateway: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateGatewayResponse.decode.bind(updateGatewayResponse),
        updateGatewayMetadata.decode.bind(updateGatewayMetadata)
      ),
      deleteGateway: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteGatewayResponse.decode.bind(deleteGatewayResponse),
        deleteGatewayMetadata.decode.bind(deleteGatewayMetadata)
      ),
      createApi: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createApiResponse.decode.bind(createApiResponse),
        createApiMetadata.decode.bind(createApiMetadata)
      ),
      updateApi: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateApiResponse.decode.bind(updateApiResponse),
        updateApiMetadata.decode.bind(updateApiMetadata)
      ),
      deleteApi: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteApiResponse.decode.bind(deleteApiResponse),
        deleteApiMetadata.decode.bind(deleteApiMetadata)
      ),
      createApiConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createApiConfigResponse.decode.bind(createApiConfigResponse),
        createApiConfigMetadata.decode.bind(createApiConfigMetadata)
      ),
      updateApiConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateApiConfigResponse.decode.bind(updateApiConfigResponse),
        updateApiConfigMetadata.decode.bind(updateApiConfigMetadata)
      ),
      deleteApiConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteApiConfigResponse.decode.bind(deleteApiConfigResponse),
        deleteApiConfigMetadata.decode.bind(deleteApiConfigMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.apigateway.v1.ApiGatewayService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.apiGatewayServiceStub) {
      return this.apiGatewayServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.apigateway.v1.ApiGatewayService.
    this.apiGatewayServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.apigateway.v1.ApiGatewayService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.apigateway.v1.ApiGatewayService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const apiGatewayServiceStubMethods = [
      'listGateways',
      'getGateway',
      'createGateway',
      'updateGateway',
      'deleteGateway',
      'listApis',
      'getApi',
      'createApi',
      'updateApi',
      'deleteApi',
      'listApiConfigs',
      'getApiConfig',
      'createApiConfig',
      'updateApiConfig',
      'deleteApiConfig',
    ];
    for (const methodName of apiGatewayServiceStubMethods) {
      const callPromise = this.apiGatewayServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.apiGatewayServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'apigateway.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'apigateway.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single Gateway.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the form:
   *   `projects/* /locations/* /gateways/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Gateway]{@link google.cloud.apigateway.v1.Gateway}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.get_gateway.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_GetGateway_async
   */
  getGateway(
    request?: protos.google.cloud.apigateway.v1.IGetGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IGateway,
      protos.google.cloud.apigateway.v1.IGetGatewayRequest | undefined,
      {} | undefined
    ]
  >;
  getGateway(
    request: protos.google.cloud.apigateway.v1.IGetGatewayRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.apigateway.v1.IGateway,
      protos.google.cloud.apigateway.v1.IGetGatewayRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getGateway(
    request: protos.google.cloud.apigateway.v1.IGetGatewayRequest,
    callback: Callback<
      protos.google.cloud.apigateway.v1.IGateway,
      protos.google.cloud.apigateway.v1.IGetGatewayRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getGateway(
    request?: protos.google.cloud.apigateway.v1.IGetGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.apigateway.v1.IGateway,
          | protos.google.cloud.apigateway.v1.IGetGatewayRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.apigateway.v1.IGateway,
      protos.google.cloud.apigateway.v1.IGetGatewayRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IGateway,
      protos.google.cloud.apigateway.v1.IGetGatewayRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGateway(request, options, callback);
  }
  /**
   * Gets details of a single Api.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the form:
   *   `projects/* /locations/global/apis/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Api]{@link google.cloud.apigateway.v1.Api}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.get_api.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_GetApi_async
   */
  getApi(
    request?: protos.google.cloud.apigateway.v1.IGetApiRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IApi,
      protos.google.cloud.apigateway.v1.IGetApiRequest | undefined,
      {} | undefined
    ]
  >;
  getApi(
    request: protos.google.cloud.apigateway.v1.IGetApiRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.apigateway.v1.IApi,
      protos.google.cloud.apigateway.v1.IGetApiRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getApi(
    request: protos.google.cloud.apigateway.v1.IGetApiRequest,
    callback: Callback<
      protos.google.cloud.apigateway.v1.IApi,
      protos.google.cloud.apigateway.v1.IGetApiRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getApi(
    request?: protos.google.cloud.apigateway.v1.IGetApiRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.apigateway.v1.IApi,
          protos.google.cloud.apigateway.v1.IGetApiRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.apigateway.v1.IApi,
      protos.google.cloud.apigateway.v1.IGetApiRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IApi,
      protos.google.cloud.apigateway.v1.IGetApiRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getApi(request, options, callback);
  }
  /**
   * Gets details of a single ApiConfig.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the form:
   *   `projects/* /locations/global/apis/* /configs/*`
   * @param {google.cloud.apigateway.v1.GetApiConfigRequest.ConfigView} request.view
   *   Specifies which fields of the API Config are returned in the response.
   *   Defaults to `BASIC` view.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ApiConfig]{@link google.cloud.apigateway.v1.ApiConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.get_api_config.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_GetApiConfig_async
   */
  getApiConfig(
    request?: protos.google.cloud.apigateway.v1.IGetApiConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IApiConfig,
      protos.google.cloud.apigateway.v1.IGetApiConfigRequest | undefined,
      {} | undefined
    ]
  >;
  getApiConfig(
    request: protos.google.cloud.apigateway.v1.IGetApiConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.apigateway.v1.IApiConfig,
      protos.google.cloud.apigateway.v1.IGetApiConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getApiConfig(
    request: protos.google.cloud.apigateway.v1.IGetApiConfigRequest,
    callback: Callback<
      protos.google.cloud.apigateway.v1.IApiConfig,
      protos.google.cloud.apigateway.v1.IGetApiConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getApiConfig(
    request?: protos.google.cloud.apigateway.v1.IGetApiConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.apigateway.v1.IApiConfig,
          | protos.google.cloud.apigateway.v1.IGetApiConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.apigateway.v1.IApiConfig,
      protos.google.cloud.apigateway.v1.IGetApiConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IApiConfig,
      protos.google.cloud.apigateway.v1.IGetApiConfigRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getApiConfig(request, options, callback);
  }

  /**
   * Creates a new Gateway in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the Gateway, of the form:
   *   `projects/* /locations/*`
   * @param {string} request.gatewayId
   *   Required. Identifier to assign to the Gateway. Must be unique within scope of
   *   the parent resource.
   * @param {google.cloud.apigateway.v1.Gateway} request.gateway
   *   Required. Gateway resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.create_gateway.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_CreateGateway_async
   */
  createGateway(
    request?: protos.google.cloud.apigateway.v1.ICreateGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createGateway(
    request: protos.google.cloud.apigateway.v1.ICreateGatewayRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGateway(
    request: protos.google.cloud.apigateway.v1.ICreateGatewayRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGateway(
    request?: protos.google.cloud.apigateway.v1.ICreateGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.apigateway.v1.IGateway,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createGateway(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createGateway()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.create_gateway.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_CreateGateway_async
   */
  async checkCreateGatewayProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.apigateway.v1.Gateway,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createGateway,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.apigateway.v1.Gateway,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Gateway.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask is used to specify the fields to be overwritten in the
   *   Gateway resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.apigateway.v1.Gateway} request.gateway
   *   Required. Gateway resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.update_gateway.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateGateway_async
   */
  updateGateway(
    request?: protos.google.cloud.apigateway.v1.IUpdateGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateGateway(
    request: protos.google.cloud.apigateway.v1.IUpdateGatewayRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGateway(
    request: protos.google.cloud.apigateway.v1.IUpdateGatewayRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGateway(
    request?: protos.google.cloud.apigateway.v1.IUpdateGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.apigateway.v1.IGateway,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'gateway.name': request.gateway!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateGateway(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateGateway()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.update_gateway.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateGateway_async
   */
  async checkUpdateGatewayProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.apigateway.v1.Gateway,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateGateway,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.apigateway.v1.Gateway,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Gateway.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the form:
   *   `projects/* /locations/* /gateways/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.delete_gateway.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteGateway_async
   */
  deleteGateway(
    request?: protos.google.cloud.apigateway.v1.IDeleteGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteGateway(
    request: protos.google.cloud.apigateway.v1.IDeleteGatewayRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGateway(
    request: protos.google.cloud.apigateway.v1.IDeleteGatewayRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGateway(
    request?: protos.google.cloud.apigateway.v1.IDeleteGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteGateway(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteGateway()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.delete_gateway.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteGateway_async
   */
  async checkDeleteGatewayProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteGateway,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Api in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the API, of the form:
   *   `projects/* /locations/global`
   * @param {string} request.apiId
   *   Required. Identifier to assign to the API. Must be unique within scope of
   *   the parent resource.
   * @param {google.cloud.apigateway.v1.Api} request.api
   *   Required. API resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.create_api.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_CreateApi_async
   */
  createApi(
    request?: protos.google.cloud.apigateway.v1.ICreateApiRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createApi(
    request: protos.google.cloud.apigateway.v1.ICreateApiRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createApi(
    request: protos.google.cloud.apigateway.v1.ICreateApiRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createApi(
    request?: protos.google.cloud.apigateway.v1.ICreateApiRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.apigateway.v1.IApi,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createApi(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createApi()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.create_api.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_CreateApi_async
   */
  async checkCreateApiProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.apigateway.v1.Api,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createApi,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.apigateway.v1.Api,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Api.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask is used to specify the fields to be overwritten in the
   *   Api resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.apigateway.v1.Api} request.api
   *   Required. API resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.update_api.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateApi_async
   */
  updateApi(
    request?: protos.google.cloud.apigateway.v1.IUpdateApiRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateApi(
    request: protos.google.cloud.apigateway.v1.IUpdateApiRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateApi(
    request: protos.google.cloud.apigateway.v1.IUpdateApiRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateApi(
    request?: protos.google.cloud.apigateway.v1.IUpdateApiRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.apigateway.v1.IApi,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'api.name': request.api!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateApi(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateApi()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.update_api.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateApi_async
   */
  async checkUpdateApiProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.apigateway.v1.Api,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateApi,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.apigateway.v1.Api,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Api.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the form:
   *   `projects/* /locations/global/apis/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.delete_api.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteApi_async
   */
  deleteApi(
    request?: protos.google.cloud.apigateway.v1.IDeleteApiRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteApi(
    request: protos.google.cloud.apigateway.v1.IDeleteApiRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteApi(
    request: protos.google.cloud.apigateway.v1.IDeleteApiRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteApi(
    request?: protos.google.cloud.apigateway.v1.IDeleteApiRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteApi(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteApi()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.delete_api.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteApi_async
   */
  async checkDeleteApiProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteApi,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new ApiConfig in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the API Config, of the form:
   *   `projects/* /locations/global/apis/*`
   * @param {string} request.apiConfigId
   *   Required. Identifier to assign to the API Config. Must be unique within scope of
   *   the parent resource.
   * @param {google.cloud.apigateway.v1.ApiConfig} request.apiConfig
   *   Required. API resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.create_api_config.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_CreateApiConfig_async
   */
  createApiConfig(
    request?: protos.google.cloud.apigateway.v1.ICreateApiConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createApiConfig(
    request: protos.google.cloud.apigateway.v1.ICreateApiConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createApiConfig(
    request: protos.google.cloud.apigateway.v1.ICreateApiConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createApiConfig(
    request?: protos.google.cloud.apigateway.v1.ICreateApiConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.apigateway.v1.IApiConfig,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createApiConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createApiConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.create_api_config.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_CreateApiConfig_async
   */
  async checkCreateApiConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.apigateway.v1.ApiConfig,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createApiConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.apigateway.v1.ApiConfig,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single ApiConfig.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask is used to specify the fields to be overwritten in the
   *   ApiConfig resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.apigateway.v1.ApiConfig} request.apiConfig
   *   Required. API Config resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.update_api_config.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateApiConfig_async
   */
  updateApiConfig(
    request?: protos.google.cloud.apigateway.v1.IUpdateApiConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateApiConfig(
    request: protos.google.cloud.apigateway.v1.IUpdateApiConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateApiConfig(
    request: protos.google.cloud.apigateway.v1.IUpdateApiConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateApiConfig(
    request?: protos.google.cloud.apigateway.v1.IUpdateApiConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.apigateway.v1.IApiConfig,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'api_config.name': request.apiConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateApiConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateApiConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.update_api_config.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateApiConfig_async
   */
  async checkUpdateApiConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.apigateway.v1.ApiConfig,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateApiConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.apigateway.v1.ApiConfig,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single ApiConfig.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the form:
   *   `projects/* /locations/global/apis/* /configs/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.delete_api_config.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteApiConfig_async
   */
  deleteApiConfig(
    request?: protos.google.cloud.apigateway.v1.IDeleteApiConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteApiConfig(
    request: protos.google.cloud.apigateway.v1.IDeleteApiConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteApiConfig(
    request: protos.google.cloud.apigateway.v1.IDeleteApiConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteApiConfig(
    request?: protos.google.cloud.apigateway.v1.IDeleteApiConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.apigateway.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteApiConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteApiConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.delete_api_config.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteApiConfig_async
   */
  async checkDeleteApiConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteApiConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.apigateway.v1.OperationMetadata
    >;
  }
  /**
   * Lists Gateways in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the Gateway, of the form:
   *   `projects/* /locations/*`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Gateway]{@link google.cloud.apigateway.v1.Gateway}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGatewaysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listGateways(
    request?: protos.google.cloud.apigateway.v1.IListGatewaysRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IGateway[],
      protos.google.cloud.apigateway.v1.IListGatewaysRequest | null,
      protos.google.cloud.apigateway.v1.IListGatewaysResponse
    ]
  >;
  listGateways(
    request: protos.google.cloud.apigateway.v1.IListGatewaysRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListGatewaysRequest,
      | protos.google.cloud.apigateway.v1.IListGatewaysResponse
      | null
      | undefined,
      protos.google.cloud.apigateway.v1.IGateway
    >
  ): void;
  listGateways(
    request: protos.google.cloud.apigateway.v1.IListGatewaysRequest,
    callback: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListGatewaysRequest,
      | protos.google.cloud.apigateway.v1.IListGatewaysResponse
      | null
      | undefined,
      protos.google.cloud.apigateway.v1.IGateway
    >
  ): void;
  listGateways(
    request?: protos.google.cloud.apigateway.v1.IListGatewaysRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.apigateway.v1.IListGatewaysRequest,
          | protos.google.cloud.apigateway.v1.IListGatewaysResponse
          | null
          | undefined,
          protos.google.cloud.apigateway.v1.IGateway
        >,
    callback?: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListGatewaysRequest,
      | protos.google.cloud.apigateway.v1.IListGatewaysResponse
      | null
      | undefined,
      protos.google.cloud.apigateway.v1.IGateway
    >
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IGateway[],
      protos.google.cloud.apigateway.v1.IListGatewaysRequest | null,
      protos.google.cloud.apigateway.v1.IListGatewaysResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGateways(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the Gateway, of the form:
   *   `projects/* /locations/*`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Gateway]{@link google.cloud.apigateway.v1.Gateway} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGatewaysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listGatewaysStream(
    request?: protos.google.cloud.apigateway.v1.IListGatewaysRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGateways'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGateways.createStream(
      this.innerApiCalls.listGateways as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGateways`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the Gateway, of the form:
   *   `projects/* /locations/*`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Gateway]{@link google.cloud.apigateway.v1.Gateway}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.list_gateways.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_ListGateways_async
   */
  listGatewaysAsync(
    request?: protos.google.cloud.apigateway.v1.IListGatewaysRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.apigateway.v1.IGateway> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGateways'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGateways.asyncIterate(
      this.innerApiCalls['listGateways'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.apigateway.v1.IGateway>;
  }
  /**
   * Lists Apis in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the API, of the form:
   *   `projects/* /locations/global`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Api]{@link google.cloud.apigateway.v1.Api}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listApisAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listApis(
    request?: protos.google.cloud.apigateway.v1.IListApisRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IApi[],
      protos.google.cloud.apigateway.v1.IListApisRequest | null,
      protos.google.cloud.apigateway.v1.IListApisResponse
    ]
  >;
  listApis(
    request: protos.google.cloud.apigateway.v1.IListApisRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListApisRequest,
      protos.google.cloud.apigateway.v1.IListApisResponse | null | undefined,
      protos.google.cloud.apigateway.v1.IApi
    >
  ): void;
  listApis(
    request: protos.google.cloud.apigateway.v1.IListApisRequest,
    callback: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListApisRequest,
      protos.google.cloud.apigateway.v1.IListApisResponse | null | undefined,
      protos.google.cloud.apigateway.v1.IApi
    >
  ): void;
  listApis(
    request?: protos.google.cloud.apigateway.v1.IListApisRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.apigateway.v1.IListApisRequest,
          | protos.google.cloud.apigateway.v1.IListApisResponse
          | null
          | undefined,
          protos.google.cloud.apigateway.v1.IApi
        >,
    callback?: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListApisRequest,
      protos.google.cloud.apigateway.v1.IListApisResponse | null | undefined,
      protos.google.cloud.apigateway.v1.IApi
    >
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IApi[],
      protos.google.cloud.apigateway.v1.IListApisRequest | null,
      protos.google.cloud.apigateway.v1.IListApisResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listApis(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the API, of the form:
   *   `projects/* /locations/global`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Api]{@link google.cloud.apigateway.v1.Api} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listApisAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listApisStream(
    request?: protos.google.cloud.apigateway.v1.IListApisRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listApis'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listApis.createStream(
      this.innerApiCalls.listApis as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listApis`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the API, of the form:
   *   `projects/* /locations/global`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Api]{@link google.cloud.apigateway.v1.Api}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.list_apis.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_ListApis_async
   */
  listApisAsync(
    request?: protos.google.cloud.apigateway.v1.IListApisRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.apigateway.v1.IApi> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listApis'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listApis.asyncIterate(
      this.innerApiCalls['listApis'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.apigateway.v1.IApi>;
  }
  /**
   * Lists ApiConfigs in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the API Config, of the form:
   *   `projects/* /locations/global/apis/*`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ApiConfig]{@link google.cloud.apigateway.v1.ApiConfig}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listApiConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listApiConfigs(
    request?: protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IApiConfig[],
      protos.google.cloud.apigateway.v1.IListApiConfigsRequest | null,
      protos.google.cloud.apigateway.v1.IListApiConfigsResponse
    ]
  >;
  listApiConfigs(
    request: protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
      | protos.google.cloud.apigateway.v1.IListApiConfigsResponse
      | null
      | undefined,
      protos.google.cloud.apigateway.v1.IApiConfig
    >
  ): void;
  listApiConfigs(
    request: protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
    callback: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
      | protos.google.cloud.apigateway.v1.IListApiConfigsResponse
      | null
      | undefined,
      protos.google.cloud.apigateway.v1.IApiConfig
    >
  ): void;
  listApiConfigs(
    request?: protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
          | protos.google.cloud.apigateway.v1.IListApiConfigsResponse
          | null
          | undefined,
          protos.google.cloud.apigateway.v1.IApiConfig
        >,
    callback?: PaginationCallback<
      protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
      | protos.google.cloud.apigateway.v1.IListApiConfigsResponse
      | null
      | undefined,
      protos.google.cloud.apigateway.v1.IApiConfig
    >
  ): Promise<
    [
      protos.google.cloud.apigateway.v1.IApiConfig[],
      protos.google.cloud.apigateway.v1.IListApiConfigsRequest | null,
      protos.google.cloud.apigateway.v1.IListApiConfigsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listApiConfigs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the API Config, of the form:
   *   `projects/* /locations/global/apis/*`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ApiConfig]{@link google.cloud.apigateway.v1.ApiConfig} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listApiConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listApiConfigsStream(
    request?: protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listApiConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listApiConfigs.createStream(
      this.innerApiCalls.listApiConfigs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listApiConfigs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource of the API Config, of the form:
   *   `projects/* /locations/global/apis/*`
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {string} request.filter
   *   Filter.
   * @param {string} request.orderBy
   *   Order by parameters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [ApiConfig]{@link google.cloud.apigateway.v1.ApiConfig}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_gateway_service.list_api_configs.js</caption>
   * region_tag:apigateway_v1_generated_ApiGatewayService_ListApiConfigs_async
   */
  listApiConfigsAsync(
    request?: protos.google.cloud.apigateway.v1.IListApiConfigsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.apigateway.v1.IApiConfig> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listApiConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listApiConfigs.asyncIterate(
      this.innerApiCalls['listApiConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.apigateway.v1.IApiConfig>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified api resource name string.
   *
   * @param {string} project
   * @param {string} api
   * @returns {string} Resource name string.
   */
  apiPath(project: string, api: string) {
    return this.pathTemplates.apiPathTemplate.render({
      project: project,
      api: api,
    });
  }

  /**
   * Parse the project from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).project;
  }

  /**
   * Parse the api from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).api;
  }

  /**
   * Return a fully-qualified apiConfig resource name string.
   *
   * @param {string} project
   * @param {string} api
   * @param {string} api_config
   * @returns {string} Resource name string.
   */
  apiConfigPath(project: string, api: string, apiConfig: string) {
    return this.pathTemplates.apiConfigPathTemplate.render({
      project: project,
      api: api,
      api_config: apiConfig,
    });
  }

  /**
   * Parse the project from ApiConfig resource.
   *
   * @param {string} apiConfigName
   *   A fully-qualified path representing ApiConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiConfigName(apiConfigName: string) {
    return this.pathTemplates.apiConfigPathTemplate.match(apiConfigName)
      .project;
  }

  /**
   * Parse the api from ApiConfig resource.
   *
   * @param {string} apiConfigName
   *   A fully-qualified path representing ApiConfig resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiConfigName(apiConfigName: string) {
    return this.pathTemplates.apiConfigPathTemplate.match(apiConfigName).api;
  }

  /**
   * Parse the api_config from ApiConfig resource.
   *
   * @param {string} apiConfigName
   *   A fully-qualified path representing ApiConfig resource.
   * @returns {string} A string representing the api_config.
   */
  matchApiConfigFromApiConfigName(apiConfigName: string) {
    return this.pathTemplates.apiConfigPathTemplate.match(apiConfigName)
      .api_config;
  }

  /**
   * Return a fully-qualified gateway resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} gateway
   * @returns {string} Resource name string.
   */
  gatewayPath(project: string, location: string, gateway: string) {
    return this.pathTemplates.gatewayPathTemplate.render({
      project: project,
      location: location,
      gateway: gateway,
    });
  }

  /**
   * Parse the project from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).project;
  }

  /**
   * Parse the location from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).location;
  }

  /**
   * Parse the gateway from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the gateway.
   */
  matchGatewayFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).gateway;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.apiGatewayServiceStub && !this._terminated) {
      return this.apiGatewayServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
