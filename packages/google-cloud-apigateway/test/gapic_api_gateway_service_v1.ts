// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as apigatewayserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.ApiGatewayServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        apigatewayserviceModule.v1.ApiGatewayServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        apigatewayserviceModule.v1.ApiGatewayServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = apigatewayserviceModule.v1.ApiGatewayServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.apiGatewayServiceStub, undefined);
      await client.initialize();
      assert(client.apiGatewayServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.apiGatewayServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.apiGatewayServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getGateway', () => {
    it('invokes getGateway without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetGatewayRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.Gateway()
      );
      client.innerApiCalls.getGateway = stubSimpleCall(expectedResponse);
      const [response] = await client.getGateway(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGateway without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetGatewayRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.Gateway()
      );
      client.innerApiCalls.getGateway =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGateway(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apigateway.v1.IGateway | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGateway with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetGatewayRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGateway = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getGateway(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGateway with closed client', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetGatewayRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getGateway(request), expectedError);
    });
  });

  describe('getApi', () => {
    it('invokes getApi without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetApiRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.Api()
      );
      client.innerApiCalls.getApi = stubSimpleCall(expectedResponse);
      const [response] = await client.getApi(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getApi as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApi without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetApiRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.Api()
      );
      client.innerApiCalls.getApi =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getApi(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apigateway.v1.IApi | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getApi as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApi with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetApiRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getApi = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getApi(request), expectedError);
      const actualRequest = (client.innerApiCalls.getApi as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApi with closed client', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetApiRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getApi(request), expectedError);
    });
  });

  describe('getApiConfig', () => {
    it('invokes getApiConfig without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetApiConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ApiConfig()
      );
      client.innerApiCalls.getApiConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.getApiConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApiConfig without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetApiConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ApiConfig()
      );
      client.innerApiCalls.getApiConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getApiConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apigateway.v1.IApiConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApiConfig with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetApiConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getApiConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getApiConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApiConfig with closed client', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.GetApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.GetApiConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getApiConfig(request), expectedError);
    });
  });

  describe('createGateway', () => {
    it('invokes createGateway without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateGatewayRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGateway =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createGateway(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGateway without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateGatewayRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGateway =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createGateway(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apigateway.v1.IGateway,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGateway with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateGatewayRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGateway = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createGateway(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGateway with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateGatewayRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGateway = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createGateway(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateGatewayProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateGatewayProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateGatewayProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateGatewayProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateGateway', () => {
    it('invokes updateGateway without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateGatewayRequest()
      );
      request.gateway ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateGatewayRequest',
        ['gateway', 'name']
      );
      request.gateway.name = defaultValue1;
      const expectedHeaderRequestParams = `gateway.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateGateway =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateGateway(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGateway without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateGatewayRequest()
      );
      request.gateway ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateGatewayRequest',
        ['gateway', 'name']
      );
      request.gateway.name = defaultValue1;
      const expectedHeaderRequestParams = `gateway.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateGateway =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateGateway(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apigateway.v1.IGateway,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGateway with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateGatewayRequest()
      );
      request.gateway ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateGatewayRequest',
        ['gateway', 'name']
      );
      request.gateway.name = defaultValue1;
      const expectedHeaderRequestParams = `gateway.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGateway = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateGateway(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGateway with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateGatewayRequest()
      );
      request.gateway ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateGatewayRequest',
        ['gateway', 'name']
      );
      request.gateway.name = defaultValue1;
      const expectedHeaderRequestParams = `gateway.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGateway = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateGateway(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateGatewayProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateGatewayProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateGatewayProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateGatewayProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteGateway', () => {
    it('invokes deleteGateway without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteGatewayRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGateway =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteGateway(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGateway without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteGatewayRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGateway =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteGateway(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGateway with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteGatewayRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGateway = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteGateway(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGateway with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteGatewayRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteGatewayRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGateway = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteGateway(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGateway as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGateway as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteGatewayProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteGatewayProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteGatewayProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteGatewayProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createApi', () => {
    it('invokes createApi without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateApiRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createApi = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createApi(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApi without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateApiRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createApi =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createApi(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apigateway.v1.IApi,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApi with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateApiRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createApi = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createApi(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApi with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateApiRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createApi = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createApi(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateApiProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateApiProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateApiProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateApiProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateApi', () => {
    it('invokes updateApi without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateApiRequest()
      );
      request.api ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateApiRequest',
        ['api', 'name']
      );
      request.api.name = defaultValue1;
      const expectedHeaderRequestParams = `api.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateApi = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateApi(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApi without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateApiRequest()
      );
      request.api ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateApiRequest',
        ['api', 'name']
      );
      request.api.name = defaultValue1;
      const expectedHeaderRequestParams = `api.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateApi =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateApi(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apigateway.v1.IApi,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApi with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateApiRequest()
      );
      request.api ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateApiRequest',
        ['api', 'name']
      );
      request.api.name = defaultValue1;
      const expectedHeaderRequestParams = `api.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateApi = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateApi(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApi with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateApiRequest()
      );
      request.api ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateApiRequest',
        ['api', 'name']
      );
      request.api.name = defaultValue1;
      const expectedHeaderRequestParams = `api.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateApi = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateApi(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateApiProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateApiProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateApiProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateApiProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteApi', () => {
    it('invokes deleteApi without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteApiRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteApi = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteApi(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApi without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteApiRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteApi =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteApi(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApi with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteApiRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteApi = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteApi(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApi with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteApiRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteApiRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteApi = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteApi(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteApi as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApi as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteApiProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteApiProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteApiProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteApiProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createApiConfig', () => {
    it('invokes createApiConfig without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateApiConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createApiConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createApiConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApiConfig without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateApiConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createApiConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createApiConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apigateway.v1.IApiConfig,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApiConfig with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateApiConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createApiConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createApiConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApiConfig with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.CreateApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.CreateApiConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createApiConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createApiConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateApiConfigProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateApiConfigProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateApiConfigProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateApiConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateApiConfig', () => {
    it('invokes updateApiConfig without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateApiConfigRequest()
      );
      request.apiConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateApiConfigRequest',
        ['apiConfig', 'name']
      );
      request.apiConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `api_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateApiConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateApiConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApiConfig without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateApiConfigRequest()
      );
      request.apiConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateApiConfigRequest',
        ['apiConfig', 'name']
      );
      request.apiConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `api_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateApiConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateApiConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apigateway.v1.IApiConfig,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApiConfig with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateApiConfigRequest()
      );
      request.apiConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateApiConfigRequest',
        ['apiConfig', 'name']
      );
      request.apiConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `api_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateApiConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateApiConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApiConfig with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.UpdateApiConfigRequest()
      );
      request.apiConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.UpdateApiConfigRequest',
        ['apiConfig', 'name']
      );
      request.apiConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `api_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateApiConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateApiConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateApiConfigProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateApiConfigProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateApiConfigProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateApiConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteApiConfig', () => {
    it('invokes deleteApiConfig without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteApiConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteApiConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteApiConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApiConfig without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteApiConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteApiConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteApiConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.apigateway.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apigateway.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApiConfig with call error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteApiConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteApiConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteApiConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApiConfig with LRO error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.DeleteApiConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.DeleteApiConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteApiConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteApiConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteApiConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApiConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteApiConfigProgress without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteApiConfigProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteApiConfigProgress with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteApiConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listGateways', () => {
    it('invokes listGateways without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListGatewaysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListGatewaysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
      ];
      client.innerApiCalls.listGateways = stubSimpleCall(expectedResponse);
      const [response] = await client.listGateways(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGateways as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGateways as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGateways without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListGatewaysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListGatewaysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
      ];
      client.innerApiCalls.listGateways =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listGateways(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apigateway.v1.IGateway[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGateways as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGateways as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGateways with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListGatewaysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListGatewaysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listGateways = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listGateways(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listGateways as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGateways as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGatewaysStream without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListGatewaysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListGatewaysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
      ];
      client.descriptors.page.listGateways.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listGatewaysStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apigateway.v1.Gateway[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apigateway.v1.Gateway) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listGateways.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGateways, request)
      );
      assert(
        (client.descriptors.page.listGateways.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listGatewaysStream with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListGatewaysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListGatewaysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGateways.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listGatewaysStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apigateway.v1.Gateway[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apigateway.v1.Gateway) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listGateways.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGateways, request)
      );
      assert(
        (client.descriptors.page.listGateways.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGateways without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListGatewaysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListGatewaysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
      ];
      client.descriptors.page.listGateways.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apigateway.v1.IGateway[] = [];
      const iterable = client.listGatewaysAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGateways.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGateways.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGateways with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListGatewaysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListGatewaysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGateways.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listGatewaysAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apigateway.v1.IGateway[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGateways.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGateways.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listApis', () => {
    it('invokes listApis without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
      ];
      client.innerApiCalls.listApis = stubSimpleCall(expectedResponse);
      const [response] = await client.listApis(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listApis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApis without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
      ];
      client.innerApiCalls.listApis =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listApis(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apigateway.v1.IApi[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listApis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApis with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listApis = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listApis(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listApis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApisStream without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
      ];
      client.descriptors.page.listApis.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listApisStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apigateway.v1.Api[] = [];
        stream.on('data', (response: protos.google.cloud.apigateway.v1.Api) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listApis.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listApis, request)
      );
      assert(
        (client.descriptors.page.listApis.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listApisStream with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listApis.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listApisStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apigateway.v1.Api[] = [];
        stream.on('data', (response: protos.google.cloud.apigateway.v1.Api) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listApis.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listApis, request)
      );
      assert(
        (client.descriptors.page.listApis.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listApis without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
        generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
      ];
      client.descriptors.page.listApis.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apigateway.v1.IApi[] = [];
      const iterable = client.listApisAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listApis.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listApis.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listApis with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listApis.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listApisAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apigateway.v1.IApi[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listApis.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listApis.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listApiConfigs', () => {
    it('invokes listApiConfigs without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApiConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApiConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
      ];
      client.innerApiCalls.listApiConfigs = stubSimpleCall(expectedResponse);
      const [response] = await client.listApiConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listApiConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApiConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApiConfigs without error using callback', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApiConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApiConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
      ];
      client.innerApiCalls.listApiConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listApiConfigs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apigateway.v1.IApiConfig[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listApiConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApiConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApiConfigs with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApiConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApiConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listApiConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listApiConfigs(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listApiConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApiConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApiConfigsStream without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApiConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApiConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
      ];
      client.descriptors.page.listApiConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listApiConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apigateway.v1.ApiConfig[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apigateway.v1.ApiConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listApiConfigs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listApiConfigs, request)
      );
      assert(
        (client.descriptors.page.listApiConfigs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listApiConfigsStream with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApiConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApiConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listApiConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listApiConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apigateway.v1.ApiConfig[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apigateway.v1.ApiConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listApiConfigs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listApiConfigs, request)
      );
      assert(
        (client.descriptors.page.listApiConfigs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listApiConfigs without error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApiConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApiConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.apigateway.v1.ApiConfig()
        ),
      ];
      client.descriptors.page.listApiConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apigateway.v1.IApiConfig[] = [];
      const iterable = client.listApiConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listApiConfigs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listApiConfigs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listApiConfigs with error', async () => {
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apigateway.v1.ListApiConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apigateway.v1.ListApiConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listApiConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listApiConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apigateway.v1.IApiConfig[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listApiConfigs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listApiConfigs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('api', () => {
      const fakePath = '/rendered/path/api';
      const expectedParameters = {
        project: 'projectValue',
        api: 'apiValue',
      };
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.apiPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.apiPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('apiPath', () => {
        const result = client.apiPath('projectValue', 'apiValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.apiPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromApiName', () => {
        const result = client.matchProjectFromApiName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.apiPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiFromApiName', () => {
        const result = client.matchApiFromApiName(fakePath);
        assert.strictEqual(result, 'apiValue');
        assert(
          (client.pathTemplates.apiPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('apiConfig', () => {
      const fakePath = '/rendered/path/apiConfig';
      const expectedParameters = {
        project: 'projectValue',
        api: 'apiValue',
        api_config: 'apiConfigValue',
      };
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.apiConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.apiConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('apiConfigPath', () => {
        const result = client.apiConfigPath(
          'projectValue',
          'apiValue',
          'apiConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.apiConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromApiConfigName', () => {
        const result = client.matchProjectFromApiConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.apiConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiFromApiConfigName', () => {
        const result = client.matchApiFromApiConfigName(fakePath);
        assert.strictEqual(result, 'apiValue');
        assert(
          (client.pathTemplates.apiConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiConfigFromApiConfigName', () => {
        const result = client.matchApiConfigFromApiConfigName(fakePath);
        assert.strictEqual(result, 'apiConfigValue');
        assert(
          (client.pathTemplates.apiConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('gateway', () => {
      const fakePath = '/rendered/path/gateway';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        gateway: 'gatewayValue',
      };
      const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.gatewayPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.gatewayPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('gatewayPath', () => {
        const result = client.gatewayPath(
          'projectValue',
          'locationValue',
          'gatewayValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.gatewayPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGatewayName', () => {
        const result = client.matchProjectFromGatewayName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.gatewayPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGatewayName', () => {
        const result = client.matchLocationFromGatewayName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.gatewayPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGatewayFromGatewayName', () => {
        const result = client.matchGatewayFromGatewayName(fakePath);
        assert.strictEqual(result, 'gatewayValue');
        assert(
          (client.pathTemplates.gatewayPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
