// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/service_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './service_manager_client_config.json';
const version = require('../../../package.json').version;

/**
 *  [Google Service Management
 *  API](https://cloud.google.com/service-infrastructure/docs/overview)
 * @class
 * @memberof v1
 */
export class ServiceManagerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  operationsClient: gax.OperationsClient;
  serviceManagerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ServiceManagerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ServiceManagerClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ServiceManagerClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listServices: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'services'
      ),
      listServiceConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'serviceConfigs'
      ),
      listServiceRollouts: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'rollouts'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          post: '/v1/{resource=services/*}:getIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=services/*/consumers/*}:getIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=services/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=services/*/consumers/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=services/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=services/*/consumers/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createServiceResponse = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.ManagedService'
    ) as gax.protobuf.Type;
    const createServiceMetadata = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteServiceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteServiceMetadata = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const undeleteServiceResponse = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.UndeleteServiceResponse'
    ) as gax.protobuf.Type;
    const undeleteServiceMetadata = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const submitConfigSourceResponse = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.SubmitConfigSourceResponse'
    ) as gax.protobuf.Type;
    const submitConfigSourceMetadata = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createServiceRolloutResponse = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.Rollout'
    ) as gax.protobuf.Type;
    const createServiceRolloutMetadata = protoFilesRoot.lookup(
      '.google.api.servicemanagement.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createServiceResponse.decode.bind(createServiceResponse),
        createServiceMetadata.decode.bind(createServiceMetadata)
      ),
      deleteService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteServiceResponse.decode.bind(deleteServiceResponse),
        deleteServiceMetadata.decode.bind(deleteServiceMetadata)
      ),
      undeleteService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeleteServiceResponse.decode.bind(undeleteServiceResponse),
        undeleteServiceMetadata.decode.bind(undeleteServiceMetadata)
      ),
      submitConfigSource: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        submitConfigSourceResponse.decode.bind(submitConfigSourceResponse),
        submitConfigSourceMetadata.decode.bind(submitConfigSourceMetadata)
      ),
      createServiceRollout: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createServiceRolloutResponse.decode.bind(createServiceRolloutResponse),
        createServiceRolloutMetadata.decode.bind(createServiceRolloutMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.api.servicemanagement.v1.ServiceManager',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.serviceManagerStub) {
      return this.serviceManagerStub;
    }

    // Put together the "service stub" for
    // google.api.servicemanagement.v1.ServiceManager.
    this.serviceManagerStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.api.servicemanagement.v1.ServiceManager'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.api.servicemanagement.v1.ServiceManager,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const serviceManagerStubMethods = [
      'listServices',
      'getService',
      'createService',
      'deleteService',
      'undeleteService',
      'listServiceConfigs',
      'getServiceConfig',
      'createServiceConfig',
      'submitConfigSource',
      'listServiceRollouts',
      'getServiceRollout',
      'createServiceRollout',
      'generateConfigReport',
    ];
    for (const methodName of serviceManagerStubMethods) {
      const callPromise = this.serviceManagerStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.serviceManagerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'servicemanagement.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'servicemanagement.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/service.management',
      'https://www.googleapis.com/auth/service.management.readonly',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a managed service. Authentication is required unless the service is
   * public.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the `ServiceManager` overview for
   *   naming requirements.  For example: `example.googleapis.com`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ManagedService]{@link google.api.servicemanagement.v1.ManagedService}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.get_service.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_GetService_async
   */
  getService(
    request?: protos.google.api.servicemanagement.v1.IGetServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IManagedService,
      protos.google.api.servicemanagement.v1.IGetServiceRequest | undefined,
      {} | undefined
    ]
  >;
  getService(
    request: protos.google.api.servicemanagement.v1.IGetServiceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.servicemanagement.v1.IManagedService,
      | protos.google.api.servicemanagement.v1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getService(
    request: protos.google.api.servicemanagement.v1.IGetServiceRequest,
    callback: Callback<
      protos.google.api.servicemanagement.v1.IManagedService,
      | protos.google.api.servicemanagement.v1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getService(
    request?: protos.google.api.servicemanagement.v1.IGetServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.servicemanagement.v1.IManagedService,
          | protos.google.api.servicemanagement.v1.IGetServiceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.servicemanagement.v1.IManagedService,
      | protos.google.api.servicemanagement.v1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IManagedService,
      protos.google.api.servicemanagement.v1.IGetServiceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getService(request, options, callback);
  }
  /**
   * Gets a service configuration (version) for a managed service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {string} request.configId
   *   Required. The id of the service configuration resource.
   *
   *   This field must be specified for the server to return all fields, including
   *   `SourceInfo`.
   * @param {google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView} request.view
   *   Specifies which parts of the Service Config should be returned in the
   *   response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Service]{@link google.api.Service}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.get_service_config.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_GetServiceConfig_async
   */
  getServiceConfig(
    request?: protos.google.api.servicemanagement.v1.IGetServiceConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.IService,
      (
        | protos.google.api.servicemanagement.v1.IGetServiceConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getServiceConfig(
    request: protos.google.api.servicemanagement.v1.IGetServiceConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.IService,
      | protos.google.api.servicemanagement.v1.IGetServiceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getServiceConfig(
    request: protos.google.api.servicemanagement.v1.IGetServiceConfigRequest,
    callback: Callback<
      protos.google.api.IService,
      | protos.google.api.servicemanagement.v1.IGetServiceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getServiceConfig(
    request?: protos.google.api.servicemanagement.v1.IGetServiceConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.IService,
          | protos.google.api.servicemanagement.v1.IGetServiceConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.IService,
      | protos.google.api.servicemanagement.v1.IGetServiceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.IService,
      (
        | protos.google.api.servicemanagement.v1.IGetServiceConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
        config_id: request.configId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getServiceConfig(request, options, callback);
  }
  /**
   * Creates a new service configuration (version) for a managed service.
   * This method only stores the service configuration. To roll out the service
   * configuration to backend systems please call
   * {@link google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout|CreateServiceRollout}.
   *
   * Only the 100 most recent service configurations and ones referenced by
   * existing rollouts are kept for each service. The rest will be deleted
   * eventually.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {google.api.Service} request.serviceConfig
   *   Required. The service configuration resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Service]{@link google.api.Service}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.create_service_config.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_CreateServiceConfig_async
   */
  createServiceConfig(
    request?: protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.IService,
      (
        | protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createServiceConfig(
    request: protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.IService,
      | protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createServiceConfig(
    request: protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest,
    callback: Callback<
      protos.google.api.IService,
      | protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createServiceConfig(
    request?: protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.IService,
          | protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.IService,
      | protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.IService,
      (
        | protos.google.api.servicemanagement.v1.ICreateServiceConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createServiceConfig(request, options, callback);
  }
  /**
   * Gets a service configuration
   * {@link google.api.servicemanagement.v1.Rollout|rollout}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {string} request.rolloutId
   *   Required. The id of the rollout resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Rollout]{@link google.api.servicemanagement.v1.Rollout}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.get_service_rollout.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_GetServiceRollout_async
   */
  getServiceRollout(
    request?: protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IRollout,
      (
        | protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getServiceRollout(
    request: protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.servicemanagement.v1.IRollout,
      | protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getServiceRollout(
    request: protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest,
    callback: Callback<
      protos.google.api.servicemanagement.v1.IRollout,
      | protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getServiceRollout(
    request?: protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.servicemanagement.v1.IRollout,
          | protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.servicemanagement.v1.IRollout,
      | protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IRollout,
      (
        | protos.google.api.servicemanagement.v1.IGetServiceRolloutRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
        rollout_id: request.rolloutId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getServiceRollout(request, options, callback);
  }
  /**
   * Generates and returns a report (errors, warnings and changes from
   * existing configurations) associated with
   * GenerateConfigReportRequest.new_value
   *
   * If GenerateConfigReportRequest.old_value is specified,
   * GenerateConfigReportRequest will contain a single ChangeReport based on the
   * comparison between GenerateConfigReportRequest.new_value and
   * GenerateConfigReportRequest.old_value.
   * If GenerateConfigReportRequest.old_value is not specified, this method
   * will compare GenerateConfigReportRequest.new_value with the last pushed
   * service configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.Any} request.newConfig
   *   Required. Service configuration for which we want to generate the report.
   *   For this version of API, the supported types are
   *   {@link google.api.servicemanagement.v1.ConfigRef|google.api.servicemanagement.v1.ConfigRef},
   *   {@link google.api.servicemanagement.v1.ConfigSource|google.api.servicemanagement.v1.ConfigSource},
   *   and {@link google.api.Service|google.api.Service}
   * @param {google.protobuf.Any} [request.oldConfig]
   *   Optional. Service configuration against which the comparison will be done.
   *   For this version of API, the supported types are
   *   {@link google.api.servicemanagement.v1.ConfigRef|google.api.servicemanagement.v1.ConfigRef},
   *   {@link google.api.servicemanagement.v1.ConfigSource|google.api.servicemanagement.v1.ConfigSource},
   *   and {@link google.api.Service|google.api.Service}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GenerateConfigReportResponse]{@link google.api.servicemanagement.v1.GenerateConfigReportResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.generate_config_report.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_GenerateConfigReport_async
   */
  generateConfigReport(
    request?: protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IGenerateConfigReportResponse,
      (
        | protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  generateConfigReport(
    request: protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.servicemanagement.v1.IGenerateConfigReportResponse,
      | protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateConfigReport(
    request: protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest,
    callback: Callback<
      protos.google.api.servicemanagement.v1.IGenerateConfigReportResponse,
      | protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateConfigReport(
    request?: protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.servicemanagement.v1.IGenerateConfigReportResponse,
          | protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.servicemanagement.v1.IGenerateConfigReportResponse,
      | protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IGenerateConfigReportResponse,
      (
        | protos.google.api.servicemanagement.v1.IGenerateConfigReportRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.generateConfigReport(request, options, callback);
  }

  /**
   * Creates a new managed service.
   *
   * A managed service is immutable, and is subject to mandatory 30-day
   * data retention. You cannot move a service or recreate it within 30 days
   * after deletion.
   *
   * One producer project can own no more than 500 services. For security and
   * reliability purposes, a production service should be hosted in a
   * dedicated producer project.
   *
   * Operation<response: ManagedService>
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.api.servicemanagement.v1.ManagedService} request.service
   *   Required. Initial values for the service resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.create_service.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_CreateService_async
   */
  createService(
    request?: protos.google.api.servicemanagement.v1.ICreateServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.servicemanagement.v1.IManagedService,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createService(
    request: protos.google.api.servicemanagement.v1.ICreateServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IManagedService,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createService(
    request: protos.google.api.servicemanagement.v1.ICreateServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IManagedService,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createService(
    request?: protos.google.api.servicemanagement.v1.ICreateServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.servicemanagement.v1.IManagedService,
            protos.google.api.servicemanagement.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IManagedService,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.servicemanagement.v1.IManagedService,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.create_service.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_CreateService_async
   */
  async checkCreateServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.servicemanagement.v1.ManagedService,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.servicemanagement.v1.ManagedService,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a managed service. This method will change the service to the
   * `Soft-Delete` state for 30 days. Within this period, service producers may
   * call
   * {@link google.api.servicemanagement.v1.ServiceManager.UndeleteService|UndeleteService}
   * to restore the service. After 30 days, the service will be permanently
   * deleted.
   *
   * Operation<response: google.protobuf.Empty>
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.delete_service.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_DeleteService_async
   */
  deleteService(
    request?: protos.google.api.servicemanagement.v1.IDeleteServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteService(
    request: protos.google.api.servicemanagement.v1.IDeleteServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteService(
    request: protos.google.api.servicemanagement.v1.IDeleteServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteService(
    request?: protos.google.api.servicemanagement.v1.IDeleteServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.api.servicemanagement.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.delete_service.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_DeleteService_async
   */
  async checkDeleteServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >;
  }
  /**
   * Revives a previously deleted managed service. The method restores the
   * service using the configuration at the time the service was deleted.
   * The target service must exist and must have been deleted within the
   * last 30 days.
   *
   * Operation<response: UndeleteServiceResponse>
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service. See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements. For
   *   example: `example.googleapis.com`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.undelete_service.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_UndeleteService_async
   */
  undeleteService(
    request?: protos.google.api.servicemanagement.v1.IUndeleteServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.servicemanagement.v1.IUndeleteServiceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  undeleteService(
    request: protos.google.api.servicemanagement.v1.IUndeleteServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IUndeleteServiceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  undeleteService(
    request: protos.google.api.servicemanagement.v1.IUndeleteServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IUndeleteServiceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  undeleteService(
    request?: protos.google.api.servicemanagement.v1.IUndeleteServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.servicemanagement.v1.IUndeleteServiceResponse,
            protos.google.api.servicemanagement.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IUndeleteServiceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.servicemanagement.v1.IUndeleteServiceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.undeleteService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `undeleteService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.undelete_service.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_UndeleteService_async
   */
  async checkUndeleteServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.servicemanagement.v1.UndeleteServiceResponse,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.undeleteService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.servicemanagement.v1.UndeleteServiceResponse,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new service configuration (version) for a managed service based
   * on
   * user-supplied configuration source files (for example: OpenAPI
   * Specification). This method stores the source configurations as well as the
   * generated service configuration. To rollout the service configuration to
   * other services,
   * please call
   * {@link google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout|CreateServiceRollout}.
   *
   * Only the 100 most recent configuration sources and ones referenced by
   * existing service configurtions are kept for each service. The rest will be
   * deleted eventually.
   *
   * Operation<response: SubmitConfigSourceResponse>
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {google.api.servicemanagement.v1.ConfigSource} request.configSource
   *   Required. The source configuration for the service.
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, this will result in the generation of a
   *   `google.api.Service` configuration based on the `ConfigSource` provided,
   *   but the generated config and the sources will NOT be persisted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.submit_config_source.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_SubmitConfigSource_async
   */
  submitConfigSource(
    request?: protos.google.api.servicemanagement.v1.ISubmitConfigSourceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.servicemanagement.v1.ISubmitConfigSourceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  submitConfigSource(
    request: protos.google.api.servicemanagement.v1.ISubmitConfigSourceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.ISubmitConfigSourceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitConfigSource(
    request: protos.google.api.servicemanagement.v1.ISubmitConfigSourceRequest,
    callback: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.ISubmitConfigSourceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitConfigSource(
    request?: protos.google.api.servicemanagement.v1.ISubmitConfigSourceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.servicemanagement.v1.ISubmitConfigSourceResponse,
            protos.google.api.servicemanagement.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.ISubmitConfigSourceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.servicemanagement.v1.ISubmitConfigSourceResponse,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.submitConfigSource(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `submitConfigSource()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.submit_config_source.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_SubmitConfigSource_async
   */
  async checkSubmitConfigSourceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.servicemanagement.v1.SubmitConfigSourceResponse,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.submitConfigSource,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.servicemanagement.v1.SubmitConfigSourceResponse,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new service configuration rollout. Based on rollout, the
   * Google Service Management will roll out the service configurations to
   * different backend services. For example, the logging configuration will be
   * pushed to Google Cloud Logging.
   *
   * Please note that any previous pending and running Rollouts and associated
   * Operations will be automatically cancelled so that the latest Rollout will
   * not be blocked by previous Rollouts.
   *
   * Only the 100 most recent (in any state) and the last 10 successful (if not
   * already part of the set of 100 most recent) rollouts are kept for each
   * service. The rest will be deleted eventually.
   *
   * Operation<response: Rollout>
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {google.api.servicemanagement.v1.Rollout} request.rollout
   *   Required. The rollout resource. The `service_name` field is output only.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.create_service_rollout.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_CreateServiceRollout_async
   */
  createServiceRollout(
    request?: protos.google.api.servicemanagement.v1.ICreateServiceRolloutRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.servicemanagement.v1.IRollout,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createServiceRollout(
    request: protos.google.api.servicemanagement.v1.ICreateServiceRolloutRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IRollout,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createServiceRollout(
    request: protos.google.api.servicemanagement.v1.ICreateServiceRolloutRequest,
    callback: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IRollout,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createServiceRollout(
    request?: protos.google.api.servicemanagement.v1.ICreateServiceRolloutRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.servicemanagement.v1.IRollout,
            protos.google.api.servicemanagement.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.servicemanagement.v1.IRollout,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.servicemanagement.v1.IRollout,
        protos.google.api.servicemanagement.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createServiceRollout(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createServiceRollout()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.create_service_rollout.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_CreateServiceRollout_async
   */
  async checkCreateServiceRolloutProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.servicemanagement.v1.Rollout,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createServiceRollout,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.servicemanagement.v1.Rollout,
      protos.google.api.servicemanagement.v1.OperationMetadata
    >;
  }
  /**
   * Lists managed services.
   *
   * Returns all public services. For authenticated users, also returns all
   * services the calling user has "servicemanagement.services.get" permission
   * for.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.producerProjectId
   *   Include services produced by the specified project.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {string} request.consumerId
   *   Include services consumed by the specified consumer.
   *
   *   The Google Service Management implementation accepts the following
   *   forms:
   *   - project:<project_id>
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ManagedService]{@link google.api.servicemanagement.v1.ManagedService}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listServicesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listServices(
    request?: protos.google.api.servicemanagement.v1.IListServicesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IManagedService[],
      protos.google.api.servicemanagement.v1.IListServicesRequest | null,
      protos.google.api.servicemanagement.v1.IListServicesResponse
    ]
  >;
  listServices(
    request: protos.google.api.servicemanagement.v1.IListServicesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServicesRequest,
      | protos.google.api.servicemanagement.v1.IListServicesResponse
      | null
      | undefined,
      protos.google.api.servicemanagement.v1.IManagedService
    >
  ): void;
  listServices(
    request: protos.google.api.servicemanagement.v1.IListServicesRequest,
    callback: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServicesRequest,
      | protos.google.api.servicemanagement.v1.IListServicesResponse
      | null
      | undefined,
      protos.google.api.servicemanagement.v1.IManagedService
    >
  ): void;
  listServices(
    request?: protos.google.api.servicemanagement.v1.IListServicesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.api.servicemanagement.v1.IListServicesRequest,
          | protos.google.api.servicemanagement.v1.IListServicesResponse
          | null
          | undefined,
          protos.google.api.servicemanagement.v1.IManagedService
        >,
    callback?: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServicesRequest,
      | protos.google.api.servicemanagement.v1.IListServicesResponse
      | null
      | undefined,
      protos.google.api.servicemanagement.v1.IManagedService
    >
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IManagedService[],
      protos.google.api.servicemanagement.v1.IListServicesRequest | null,
      protos.google.api.servicemanagement.v1.IListServicesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listServices(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.producerProjectId
   *   Include services produced by the specified project.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {string} request.consumerId
   *   Include services consumed by the specified consumer.
   *
   *   The Google Service Management implementation accepts the following
   *   forms:
   *   - project:<project_id>
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ManagedService]{@link google.api.servicemanagement.v1.ManagedService} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listServicesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listServicesStream(
    request?: protos.google.api.servicemanagement.v1.IListServicesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listServices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServices.createStream(
      this.innerApiCalls.listServices as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listServices`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.producerProjectId
   *   Include services produced by the specified project.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {string} request.consumerId
   *   Include services consumed by the specified consumer.
   *
   *   The Google Service Management implementation accepts the following
   *   forms:
   *   - project:<project_id>
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [ManagedService]{@link google.api.servicemanagement.v1.ManagedService}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.list_services.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_ListServices_async
   */
  listServicesAsync(
    request?: protos.google.api.servicemanagement.v1.IListServicesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.api.servicemanagement.v1.IManagedService> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listServices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServices.asyncIterate(
      this.innerApiCalls['listServices'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.api.servicemanagement.v1.IManagedService>;
  }
  /**
   * Lists the history of the service configuration for a managed service,
   * from the newest to the oldest.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {string} request.pageToken
   *   The token of the page to retrieve.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Service]{@link google.api.Service}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listServiceConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listServiceConfigs(
    request?: protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.IService[],
      protos.google.api.servicemanagement.v1.IListServiceConfigsRequest | null,
      protos.google.api.servicemanagement.v1.IListServiceConfigsResponse
    ]
  >;
  listServiceConfigs(
    request: protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
      | protos.google.api.servicemanagement.v1.IListServiceConfigsResponse
      | null
      | undefined,
      protos.google.api.IService
    >
  ): void;
  listServiceConfigs(
    request: protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
    callback: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
      | protos.google.api.servicemanagement.v1.IListServiceConfigsResponse
      | null
      | undefined,
      protos.google.api.IService
    >
  ): void;
  listServiceConfigs(
    request?: protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
          | protos.google.api.servicemanagement.v1.IListServiceConfigsResponse
          | null
          | undefined,
          protos.google.api.IService
        >,
    callback?: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
      | protos.google.api.servicemanagement.v1.IListServiceConfigsResponse
      | null
      | undefined,
      protos.google.api.IService
    >
  ): Promise<
    [
      protos.google.api.IService[],
      protos.google.api.servicemanagement.v1.IListServiceConfigsRequest | null,
      protos.google.api.servicemanagement.v1.IListServiceConfigsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listServiceConfigs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {string} request.pageToken
   *   The token of the page to retrieve.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Service]{@link google.api.Service} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listServiceConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listServiceConfigsStream(
    request?: protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    const defaultCallSettings = this._defaults['listServiceConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServiceConfigs.createStream(
      this.innerApiCalls.listServiceConfigs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listServiceConfigs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {string} request.pageToken
   *   The token of the page to retrieve.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Service]{@link google.api.Service}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.list_service_configs.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_ListServiceConfigs_async
   */
  listServiceConfigsAsync(
    request?: protos.google.api.servicemanagement.v1.IListServiceConfigsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.api.IService> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    const defaultCallSettings = this._defaults['listServiceConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServiceConfigs.asyncIterate(
      this.innerApiCalls['listServiceConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.api.IService>;
  }
  /**
   * Lists the history of the service configuration rollouts for a managed
   * service, from the newest to the oldest.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {string} request.pageToken
   *   The token of the page to retrieve.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {string} request.filter
   *   Required. Use `filter` to return subset of rollouts.
   *   The following filters are supported:
   *     -- To limit the results to only those in
   *        status (google.api.servicemanagement.v1.RolloutStatus) 'SUCCESS',
   *        use filter='status=SUCCESS'
   *     -- To limit the results to those in
   *        status (google.api.servicemanagement.v1.RolloutStatus) 'CANCELLED'
   *        or 'FAILED', use filter='status=CANCELLED OR status=FAILED'
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Rollout]{@link google.api.servicemanagement.v1.Rollout}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listServiceRolloutsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listServiceRollouts(
    request?: protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IRollout[],
      protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest | null,
      protos.google.api.servicemanagement.v1.IListServiceRolloutsResponse
    ]
  >;
  listServiceRollouts(
    request: protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
      | protos.google.api.servicemanagement.v1.IListServiceRolloutsResponse
      | null
      | undefined,
      protos.google.api.servicemanagement.v1.IRollout
    >
  ): void;
  listServiceRollouts(
    request: protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
    callback: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
      | protos.google.api.servicemanagement.v1.IListServiceRolloutsResponse
      | null
      | undefined,
      protos.google.api.servicemanagement.v1.IRollout
    >
  ): void;
  listServiceRollouts(
    request?: protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
          | protos.google.api.servicemanagement.v1.IListServiceRolloutsResponse
          | null
          | undefined,
          protos.google.api.servicemanagement.v1.IRollout
        >,
    callback?: PaginationCallback<
      protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
      | protos.google.api.servicemanagement.v1.IListServiceRolloutsResponse
      | null
      | undefined,
      protos.google.api.servicemanagement.v1.IRollout
    >
  ): Promise<
    [
      protos.google.api.servicemanagement.v1.IRollout[],
      protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest | null,
      protos.google.api.servicemanagement.v1.IListServiceRolloutsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listServiceRollouts(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {string} request.pageToken
   *   The token of the page to retrieve.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {string} request.filter
   *   Required. Use `filter` to return subset of rollouts.
   *   The following filters are supported:
   *     -- To limit the results to only those in
   *        status (google.api.servicemanagement.v1.RolloutStatus) 'SUCCESS',
   *        use filter='status=SUCCESS'
   *     -- To limit the results to those in
   *        status (google.api.servicemanagement.v1.RolloutStatus) 'CANCELLED'
   *        or 'FAILED', use filter='status=CANCELLED OR status=FAILED'
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Rollout]{@link google.api.servicemanagement.v1.Rollout} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listServiceRolloutsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listServiceRolloutsStream(
    request?: protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    const defaultCallSettings = this._defaults['listServiceRollouts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServiceRollouts.createStream(
      this.innerApiCalls.listServiceRollouts as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listServiceRollouts`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.serviceName
   *   Required. The name of the service.  See the
   *   [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
   *   example: `example.googleapis.com`.
   * @param {string} request.pageToken
   *   The token of the page to retrieve.
   * @param {number} request.pageSize
   *   The max number of items to include in the response list. Page size is 50
   *   if not specified. Maximum value is 100.
   * @param {string} request.filter
   *   Required. Use `filter` to return subset of rollouts.
   *   The following filters are supported:
   *     -- To limit the results to only those in
   *        status (google.api.servicemanagement.v1.RolloutStatus) 'SUCCESS',
   *        use filter='status=SUCCESS'
   *     -- To limit the results to those in
   *        status (google.api.servicemanagement.v1.RolloutStatus) 'CANCELLED'
   *        or 'FAILED', use filter='status=CANCELLED OR status=FAILED'
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Rollout]{@link google.api.servicemanagement.v1.Rollout}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_manager.list_service_rollouts.js</caption>
   * region_tag:servicemanagement_v1_generated_ServiceManager_ListServiceRollouts_async
   */
  listServiceRolloutsAsync(
    request?: protos.google.api.servicemanagement.v1.IListServiceRolloutsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.api.servicemanagement.v1.IRollout> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service_name: request.serviceName ?? '',
      });
    const defaultCallSettings = this._defaults['listServiceRollouts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServiceRollouts.asyncIterate(
      this.innerApiCalls['listServiceRollouts'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.api.servicemanagement.v1.IRollout>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.serviceManagerStub && !this._terminated) {
      return this.serviceManagerStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
