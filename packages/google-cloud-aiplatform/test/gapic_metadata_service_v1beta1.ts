// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as metadataserviceModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.MetadataServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        metadataserviceModule.v1beta1.MetadataServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        metadataserviceModule.v1beta1.MetadataServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = metadataserviceModule.v1beta1.MetadataServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.metadataServiceStub, undefined);
      await client.initialize();
      assert(client.metadataServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.metadataServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.metadataServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getMetadataStore', () => {
    it('invokes getMetadataStore without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetMetadataStoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
      );
      client.innerApiCalls.getMetadataStore = stubSimpleCall(expectedResponse);
      const [response] = await client.getMetadataStore(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataStore without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetMetadataStoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
      );
      client.innerApiCalls.getMetadataStore =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getMetadataStore(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IMetadataStore | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataStore with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetMetadataStoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getMetadataStore = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getMetadataStore(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataStore with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetMetadataStoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getMetadataStore(request), expectedError);
    });
  });

  describe('createArtifact', () => {
    it('invokes createArtifact without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateArtifactRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Artifact()
      );
      client.innerApiCalls.createArtifact = stubSimpleCall(expectedResponse);
      const [response] = await client.createArtifact(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createArtifact without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateArtifactRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Artifact()
      );
      client.innerApiCalls.createArtifact =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createArtifact(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IArtifact | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createArtifact with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateArtifactRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createArtifact = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createArtifact(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createArtifact with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateArtifactRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createArtifact(request), expectedError);
    });
  });

  describe('getArtifact', () => {
    it('invokes getArtifact without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetArtifactRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Artifact()
      );
      client.innerApiCalls.getArtifact = stubSimpleCall(expectedResponse);
      const [response] = await client.getArtifact(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getArtifact without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetArtifactRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Artifact()
      );
      client.innerApiCalls.getArtifact =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getArtifact(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IArtifact | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getArtifact with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetArtifactRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getArtifact = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getArtifact(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getArtifact with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetArtifactRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getArtifact(request), expectedError);
    });
  });

  describe('updateArtifact', () => {
    it('invokes updateArtifact without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateArtifactRequest()
      );
      request.artifact ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateArtifactRequest',
        ['artifact', 'name']
      );
      request.artifact.name = defaultValue1;
      const expectedHeaderRequestParams = `artifact.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Artifact()
      );
      client.innerApiCalls.updateArtifact = stubSimpleCall(expectedResponse);
      const [response] = await client.updateArtifact(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateArtifact without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateArtifactRequest()
      );
      request.artifact ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateArtifactRequest',
        ['artifact', 'name']
      );
      request.artifact.name = defaultValue1;
      const expectedHeaderRequestParams = `artifact.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Artifact()
      );
      client.innerApiCalls.updateArtifact =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateArtifact(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IArtifact | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateArtifact with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateArtifactRequest()
      );
      request.artifact ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateArtifactRequest',
        ['artifact', 'name']
      );
      request.artifact.name = defaultValue1;
      const expectedHeaderRequestParams = `artifact.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateArtifact = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateArtifact(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateArtifact with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateArtifactRequest()
      );
      request.artifact ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateArtifactRequest',
        ['artifact', 'name']
      );
      request.artifact.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateArtifact(request), expectedError);
    });
  });

  describe('createContext', () => {
    it('invokes createContext without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateContextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Context()
      );
      client.innerApiCalls.createContext = stubSimpleCall(expectedResponse);
      const [response] = await client.createContext(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createContext without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateContextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Context()
      );
      client.innerApiCalls.createContext =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createContext(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IContext | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createContext with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateContextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createContext = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createContext(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createContext with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateContextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createContext(request), expectedError);
    });
  });

  describe('getContext', () => {
    it('invokes getContext without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetContextRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Context()
      );
      client.innerApiCalls.getContext = stubSimpleCall(expectedResponse);
      const [response] = await client.getContext(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getContext without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetContextRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Context()
      );
      client.innerApiCalls.getContext =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getContext(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IContext | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getContext with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetContextRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getContext = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getContext(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getContext with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetContextRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getContext(request), expectedError);
    });
  });

  describe('updateContext', () => {
    it('invokes updateContext without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateContextRequest()
      );
      request.context ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateContextRequest',
        ['context', 'name']
      );
      request.context.name = defaultValue1;
      const expectedHeaderRequestParams = `context.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Context()
      );
      client.innerApiCalls.updateContext = stubSimpleCall(expectedResponse);
      const [response] = await client.updateContext(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateContext without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateContextRequest()
      );
      request.context ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateContextRequest',
        ['context', 'name']
      );
      request.context.name = defaultValue1;
      const expectedHeaderRequestParams = `context.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Context()
      );
      client.innerApiCalls.updateContext =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateContext(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IContext | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateContext with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateContextRequest()
      );
      request.context ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateContextRequest',
        ['context', 'name']
      );
      request.context.name = defaultValue1;
      const expectedHeaderRequestParams = `context.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateContext = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateContext(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateContext with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateContextRequest()
      );
      request.context ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateContextRequest',
        ['context', 'name']
      );
      request.context.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateContext(request), expectedError);
    });
  });

  describe('addContextArtifactsAndExecutions', () => {
    it('invokes addContextArtifactsAndExecutions without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsResponse()
      );
      client.innerApiCalls.addContextArtifactsAndExecutions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.addContextArtifactsAndExecutions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.addContextArtifactsAndExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addContextArtifactsAndExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addContextArtifactsAndExecutions without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsResponse()
      );
      client.innerApiCalls.addContextArtifactsAndExecutions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.addContextArtifactsAndExecutions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.addContextArtifactsAndExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addContextArtifactsAndExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addContextArtifactsAndExecutions with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.addContextArtifactsAndExecutions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.addContextArtifactsAndExecutions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.addContextArtifactsAndExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addContextArtifactsAndExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addContextArtifactsAndExecutions with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.addContextArtifactsAndExecutions(request),
        expectedError
      );
    });
  });

  describe('addContextChildren', () => {
    it('invokes addContextChildren without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextChildrenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddContextChildrenRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextChildrenResponse()
      );
      client.innerApiCalls.addContextChildren =
        stubSimpleCall(expectedResponse);
      const [response] = await client.addContextChildren(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.addContextChildren as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addContextChildren as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addContextChildren without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextChildrenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddContextChildrenRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextChildrenResponse()
      );
      client.innerApiCalls.addContextChildren =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.addContextChildren(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.addContextChildren as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addContextChildren as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addContextChildren with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextChildrenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddContextChildrenRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.addContextChildren = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.addContextChildren(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.addContextChildren as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addContextChildren as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addContextChildren with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddContextChildrenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddContextChildrenRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.addContextChildren(request), expectedError);
    });
  });

  describe('removeContextChildren', () => {
    it('invokes removeContextChildren without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.RemoveContextChildrenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.RemoveContextChildrenRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.RemoveContextChildrenResponse()
      );
      client.innerApiCalls.removeContextChildren =
        stubSimpleCall(expectedResponse);
      const [response] = await client.removeContextChildren(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.removeContextChildren as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.removeContextChildren as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes removeContextChildren without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.RemoveContextChildrenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.RemoveContextChildrenRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.RemoveContextChildrenResponse()
      );
      client.innerApiCalls.removeContextChildren =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.removeContextChildren(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.removeContextChildren as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.removeContextChildren as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes removeContextChildren with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.RemoveContextChildrenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.RemoveContextChildrenRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.removeContextChildren = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.removeContextChildren(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.removeContextChildren as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.removeContextChildren as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes removeContextChildren with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.RemoveContextChildrenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.RemoveContextChildrenRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.removeContextChildren(request),
        expectedError
      );
    });
  });

  describe('queryContextLineageSubgraph', () => {
    it('invokes queryContextLineageSubgraph without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryContextLineageSubgraphRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryContextLineageSubgraphRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.LineageSubgraph()
      );
      client.innerApiCalls.queryContextLineageSubgraph =
        stubSimpleCall(expectedResponse);
      const [response] = await client.queryContextLineageSubgraph(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryContextLineageSubgraph as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryContextLineageSubgraph as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryContextLineageSubgraph without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryContextLineageSubgraphRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryContextLineageSubgraphRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.LineageSubgraph()
      );
      client.innerApiCalls.queryContextLineageSubgraph =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.queryContextLineageSubgraph(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryContextLineageSubgraph as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryContextLineageSubgraph as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryContextLineageSubgraph with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryContextLineageSubgraphRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryContextLineageSubgraphRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedHeaderRequestParams = `context=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.queryContextLineageSubgraph = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.queryContextLineageSubgraph(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.queryContextLineageSubgraph as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryContextLineageSubgraph as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryContextLineageSubgraph with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryContextLineageSubgraphRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryContextLineageSubgraphRequest',
        ['context']
      );
      request.context = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.queryContextLineageSubgraph(request),
        expectedError
      );
    });
  });

  describe('createExecution', () => {
    it('invokes createExecution without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateExecutionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Execution()
      );
      client.innerApiCalls.createExecution = stubSimpleCall(expectedResponse);
      const [response] = await client.createExecution(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createExecution without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateExecutionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Execution()
      );
      client.innerApiCalls.createExecution =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createExecution(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IExecution | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createExecution with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateExecutionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createExecution = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createExecution(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createExecution with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateExecutionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createExecution(request), expectedError);
    });
  });

  describe('getExecution', () => {
    it('invokes getExecution without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetExecutionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Execution()
      );
      client.innerApiCalls.getExecution = stubSimpleCall(expectedResponse);
      const [response] = await client.getExecution(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getExecution without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetExecutionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Execution()
      );
      client.innerApiCalls.getExecution =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getExecution(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IExecution | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getExecution with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetExecutionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getExecution = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getExecution(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getExecution with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetExecutionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getExecution(request), expectedError);
    });
  });

  describe('updateExecution', () => {
    it('invokes updateExecution without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateExecutionRequest()
      );
      request.execution ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateExecutionRequest',
        ['execution', 'name']
      );
      request.execution.name = defaultValue1;
      const expectedHeaderRequestParams = `execution.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Execution()
      );
      client.innerApiCalls.updateExecution = stubSimpleCall(expectedResponse);
      const [response] = await client.updateExecution(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateExecution without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateExecutionRequest()
      );
      request.execution ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateExecutionRequest',
        ['execution', 'name']
      );
      request.execution.name = defaultValue1;
      const expectedHeaderRequestParams = `execution.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.Execution()
      );
      client.innerApiCalls.updateExecution =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateExecution(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IExecution | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateExecution with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateExecutionRequest()
      );
      request.execution ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateExecutionRequest',
        ['execution', 'name']
      );
      request.execution.name = defaultValue1;
      const expectedHeaderRequestParams = `execution.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateExecution = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateExecution(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateExecution with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateExecutionRequest()
      );
      request.execution ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.UpdateExecutionRequest',
        ['execution', 'name']
      );
      request.execution.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateExecution(request), expectedError);
    });
  });

  describe('addExecutionEvents', () => {
    it('invokes addExecutionEvents without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddExecutionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddExecutionEventsRequest',
        ['execution']
      );
      request.execution = defaultValue1;
      const expectedHeaderRequestParams = `execution=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddExecutionEventsResponse()
      );
      client.innerApiCalls.addExecutionEvents =
        stubSimpleCall(expectedResponse);
      const [response] = await client.addExecutionEvents(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.addExecutionEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addExecutionEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addExecutionEvents without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddExecutionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddExecutionEventsRequest',
        ['execution']
      );
      request.execution = defaultValue1;
      const expectedHeaderRequestParams = `execution=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddExecutionEventsResponse()
      );
      client.innerApiCalls.addExecutionEvents =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.addExecutionEvents(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.addExecutionEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addExecutionEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addExecutionEvents with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddExecutionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddExecutionEventsRequest',
        ['execution']
      );
      request.execution = defaultValue1;
      const expectedHeaderRequestParams = `execution=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.addExecutionEvents = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.addExecutionEvents(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.addExecutionEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addExecutionEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addExecutionEvents with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.AddExecutionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.AddExecutionEventsRequest',
        ['execution']
      );
      request.execution = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.addExecutionEvents(request), expectedError);
    });
  });

  describe('queryExecutionInputsAndOutputs', () => {
    it('invokes queryExecutionInputsAndOutputs without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryExecutionInputsAndOutputsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryExecutionInputsAndOutputsRequest',
        ['execution']
      );
      request.execution = defaultValue1;
      const expectedHeaderRequestParams = `execution=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.LineageSubgraph()
      );
      client.innerApiCalls.queryExecutionInputsAndOutputs =
        stubSimpleCall(expectedResponse);
      const [response] = await client.queryExecutionInputsAndOutputs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryExecutionInputsAndOutputs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryExecutionInputsAndOutputs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryExecutionInputsAndOutputs without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryExecutionInputsAndOutputsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryExecutionInputsAndOutputsRequest',
        ['execution']
      );
      request.execution = defaultValue1;
      const expectedHeaderRequestParams = `execution=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.LineageSubgraph()
      );
      client.innerApiCalls.queryExecutionInputsAndOutputs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.queryExecutionInputsAndOutputs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryExecutionInputsAndOutputs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryExecutionInputsAndOutputs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryExecutionInputsAndOutputs with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryExecutionInputsAndOutputsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryExecutionInputsAndOutputsRequest',
        ['execution']
      );
      request.execution = defaultValue1;
      const expectedHeaderRequestParams = `execution=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.queryExecutionInputsAndOutputs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.queryExecutionInputsAndOutputs(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.queryExecutionInputsAndOutputs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryExecutionInputsAndOutputs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryExecutionInputsAndOutputs with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryExecutionInputsAndOutputsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryExecutionInputsAndOutputsRequest',
        ['execution']
      );
      request.execution = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.queryExecutionInputsAndOutputs(request),
        expectedError
      );
    });
  });

  describe('createMetadataSchema', () => {
    it('invokes createMetadataSchema without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateMetadataSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateMetadataSchemaRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
      );
      client.innerApiCalls.createMetadataSchema =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createMetadataSchema(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMetadataSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataSchema without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateMetadataSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateMetadataSchemaRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
      );
      client.innerApiCalls.createMetadataSchema =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createMetadataSchema(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IMetadataSchema | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMetadataSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataSchema with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateMetadataSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateMetadataSchemaRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMetadataSchema = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createMetadataSchema(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMetadataSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataSchema with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateMetadataSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateMetadataSchemaRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createMetadataSchema(request), expectedError);
    });
  });

  describe('getMetadataSchema', () => {
    it('invokes getMetadataSchema without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetMetadataSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetMetadataSchemaRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
      );
      client.innerApiCalls.getMetadataSchema = stubSimpleCall(expectedResponse);
      const [response] = await client.getMetadataSchema(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMetadataSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataSchema without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetMetadataSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetMetadataSchemaRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
      );
      client.innerApiCalls.getMetadataSchema =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getMetadataSchema(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IMetadataSchema | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMetadataSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataSchema with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetMetadataSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetMetadataSchemaRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getMetadataSchema = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getMetadataSchema(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getMetadataSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataSchema with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetMetadataSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.GetMetadataSchemaRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getMetadataSchema(request), expectedError);
    });
  });

  describe('queryArtifactLineageSubgraph', () => {
    it('invokes queryArtifactLineageSubgraph without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryArtifactLineageSubgraphRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryArtifactLineageSubgraphRequest',
        ['artifact']
      );
      request.artifact = defaultValue1;
      const expectedHeaderRequestParams = `artifact=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.LineageSubgraph()
      );
      client.innerApiCalls.queryArtifactLineageSubgraph =
        stubSimpleCall(expectedResponse);
      const [response] = await client.queryArtifactLineageSubgraph(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryArtifactLineageSubgraph as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryArtifactLineageSubgraph as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryArtifactLineageSubgraph without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryArtifactLineageSubgraphRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryArtifactLineageSubgraphRequest',
        ['artifact']
      );
      request.artifact = defaultValue1;
      const expectedHeaderRequestParams = `artifact=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.LineageSubgraph()
      );
      client.innerApiCalls.queryArtifactLineageSubgraph =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.queryArtifactLineageSubgraph(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryArtifactLineageSubgraph as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryArtifactLineageSubgraph as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryArtifactLineageSubgraph with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryArtifactLineageSubgraphRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryArtifactLineageSubgraphRequest',
        ['artifact']
      );
      request.artifact = defaultValue1;
      const expectedHeaderRequestParams = `artifact=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.queryArtifactLineageSubgraph = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.queryArtifactLineageSubgraph(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.queryArtifactLineageSubgraph as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryArtifactLineageSubgraph as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryArtifactLineageSubgraph with closed client', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.QueryArtifactLineageSubgraphRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.QueryArtifactLineageSubgraphRequest',
        ['artifact']
      );
      request.artifact = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.queryArtifactLineageSubgraph(request),
        expectedError
      );
    });
  });

  describe('createMetadataStore', () => {
    it('invokes createMetadataStore without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateMetadataStoreRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createMetadataStore =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createMetadataStore(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataStore without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateMetadataStoreRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createMetadataStore =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createMetadataStore(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
              protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
        protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataStore with call error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateMetadataStoreRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMetadataStore = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createMetadataStore(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataStore with LRO error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.CreateMetadataStoreRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMetadataStore = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createMetadataStore(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateMetadataStoreProgress without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateMetadataStoreProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateMetadataStoreProgress with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateMetadataStoreProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteMetadataStore', () => {
    it('invokes deleteMetadataStore without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteMetadataStore =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteMetadataStore(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMetadataStore without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteMetadataStore =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteMetadataStore(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMetadataStore with call error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteMetadataStore = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteMetadataStore(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMetadataStore with LRO error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteMetadataStore = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteMetadataStore(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteMetadataStore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMetadataStore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteMetadataStoreProgress without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteMetadataStoreProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteMetadataStoreProgress with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteMetadataStoreProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteArtifact', () => {
    it('invokes deleteArtifact without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteArtifactRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteArtifact =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteArtifact(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteArtifact without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteArtifactRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteArtifact =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteArtifact(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteArtifact with call error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteArtifactRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteArtifact = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteArtifact(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteArtifact with LRO error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteArtifactRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteArtifactRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteArtifact = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteArtifact(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteArtifact as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteArtifact as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteArtifactProgress without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteArtifactProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteArtifactProgress with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteArtifactProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('purgeArtifacts', () => {
    it('invokes purgeArtifacts without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.purgeArtifacts =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.purgeArtifacts(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.purgeArtifacts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeArtifacts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeArtifacts without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.purgeArtifacts =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.purgeArtifacts(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsResponse,
              protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.purgeArtifacts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeArtifacts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeArtifacts with call error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.purgeArtifacts = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.purgeArtifacts(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.purgeArtifacts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeArtifacts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeArtifacts with LRO error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.purgeArtifacts = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.purgeArtifacts(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.purgeArtifacts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeArtifacts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkPurgeArtifactsProgress without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkPurgeArtifactsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkPurgeArtifactsProgress with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkPurgeArtifactsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteContext', () => {
    it('invokes deleteContext without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteContextRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteContext =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteContext(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteContext without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteContextRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteContext =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteContext(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteContext with call error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteContextRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteContext = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteContext(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteContext with LRO error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteContextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteContextRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteContext = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteContext(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteContext as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteContext as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteContextProgress without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteContextProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteContextProgress with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteContextProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('purgeContexts', () => {
    it('invokes purgeContexts without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.purgeContexts =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.purgeContexts(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.purgeContexts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeContexts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeContexts without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.purgeContexts =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.purgeContexts(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.aiplatform.v1beta1.IPurgeContextsResponse,
              protos.google.cloud.aiplatform.v1beta1.IPurgeContextsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.purgeContexts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeContexts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeContexts with call error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.purgeContexts = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.purgeContexts(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.purgeContexts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeContexts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeContexts with LRO error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.purgeContexts = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.purgeContexts(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.purgeContexts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeContexts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkPurgeContextsProgress without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkPurgeContextsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkPurgeContextsProgress with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkPurgeContextsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteExecution', () => {
    it('invokes deleteExecution without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteExecutionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteExecution =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteExecution(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteExecution without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteExecutionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteExecution =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteExecution(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteExecution with call error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteExecutionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteExecution = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteExecution(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteExecution with LRO error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteExecutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.DeleteExecutionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteExecution = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteExecution(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteExecution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteExecution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteExecutionProgress without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteExecutionProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteExecutionProgress with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteExecutionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('purgeExecutions', () => {
    it('invokes purgeExecutions without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.purgeExecutions =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.purgeExecutions(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.purgeExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeExecutions without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.purgeExecutions =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.purgeExecutions(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsResponse,
              protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.purgeExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeExecutions with call error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.purgeExecutions = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.purgeExecutions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.purgeExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes purgeExecutions with LRO error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.PurgeExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.PurgeExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.purgeExecutions = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.purgeExecutions(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.purgeExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.purgeExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkPurgeExecutionsProgress without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkPurgeExecutionsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkPurgeExecutionsProgress with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkPurgeExecutionsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listMetadataStores', () => {
    it('invokes listMetadataStores without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
      ];
      client.innerApiCalls.listMetadataStores =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listMetadataStores(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMetadataStores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataStores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataStores without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
      ];
      client.innerApiCalls.listMetadataStores =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listMetadataStores(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.aiplatform.v1beta1.IMetadataStore[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMetadataStores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataStores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataStores with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listMetadataStores = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listMetadataStores(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listMetadataStores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataStores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataStoresStream without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
      ];
      client.descriptors.page.listMetadataStores.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listMetadataStoresStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.MetadataStore[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.MetadataStore) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listMetadataStores.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMetadataStores, request)
      );
      assert(
        (client.descriptors.page.listMetadataStores.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listMetadataStoresStream with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMetadataStores.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listMetadataStoresStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.MetadataStore[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.MetadataStore) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listMetadataStores.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMetadataStores, request)
      );
      assert(
        (client.descriptors.page.listMetadataStores.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMetadataStores without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataStore()
        ),
      ];
      client.descriptors.page.listMetadataStores.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.aiplatform.v1beta1.IMetadataStore[] =
        [];
      const iterable = client.listMetadataStoresAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMetadataStores.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMetadataStores.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMetadataStores with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMetadataStores.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listMetadataStoresAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.aiplatform.v1beta1.IMetadataStore[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMetadataStores.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMetadataStores.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listArtifacts', () => {
    it('invokes listArtifacts without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
      ];
      client.innerApiCalls.listArtifacts = stubSimpleCall(expectedResponse);
      const [response] = await client.listArtifacts(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listArtifacts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listArtifacts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listArtifacts without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
      ];
      client.innerApiCalls.listArtifacts =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listArtifacts(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IArtifact[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listArtifacts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listArtifacts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listArtifacts with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listArtifacts = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listArtifacts(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listArtifacts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listArtifacts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listArtifactsStream without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
      ];
      client.descriptors.page.listArtifacts.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listArtifactsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.Artifact[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.Artifact) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listArtifacts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listArtifacts, request)
      );
      assert(
        (client.descriptors.page.listArtifacts.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listArtifactsStream with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listArtifacts.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listArtifactsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.Artifact[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.Artifact) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listArtifacts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listArtifacts, request)
      );
      assert(
        (client.descriptors.page.listArtifacts.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listArtifacts without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Artifact()
        ),
      ];
      client.descriptors.page.listArtifacts.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.aiplatform.v1beta1.IArtifact[] = [];
      const iterable = client.listArtifactsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listArtifacts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listArtifacts.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listArtifacts with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListArtifactsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListArtifactsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listArtifacts.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listArtifactsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.aiplatform.v1beta1.IArtifact[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listArtifacts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listArtifacts.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listContexts', () => {
    it('invokes listContexts without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
      ];
      client.innerApiCalls.listContexts = stubSimpleCall(expectedResponse);
      const [response] = await client.listContexts(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listContexts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listContexts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listContexts without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
      ];
      client.innerApiCalls.listContexts =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listContexts(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IContext[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listContexts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listContexts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listContexts with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listContexts = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listContexts(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listContexts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listContexts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listContextsStream without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
      ];
      client.descriptors.page.listContexts.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listContextsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.Context[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.Context) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listContexts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listContexts, request)
      );
      assert(
        (client.descriptors.page.listContexts.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listContextsStream with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listContexts.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listContextsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.Context[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.Context) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listContexts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listContexts, request)
      );
      assert(
        (client.descriptors.page.listContexts.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listContexts without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Context()
        ),
      ];
      client.descriptors.page.listContexts.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.aiplatform.v1beta1.IContext[] = [];
      const iterable = client.listContextsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listContexts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listContexts.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listContexts with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListContextsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListContextsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listContexts.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listContextsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.aiplatform.v1beta1.IContext[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listContexts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listContexts.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listExecutions', () => {
    it('invokes listExecutions without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
      ];
      client.innerApiCalls.listExecutions = stubSimpleCall(expectedResponse);
      const [response] = await client.listExecutions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listExecutions without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
      ];
      client.innerApiCalls.listExecutions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listExecutions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.IExecution[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listExecutions with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listExecutions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listExecutions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listExecutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listExecutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listExecutionsStream without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
      ];
      client.descriptors.page.listExecutions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listExecutionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.Execution[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.Execution) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listExecutions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listExecutions, request)
      );
      assert(
        (client.descriptors.page.listExecutions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listExecutionsStream with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listExecutions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listExecutionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.Execution[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.Execution) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listExecutions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listExecutions, request)
      );
      assert(
        (client.descriptors.page.listExecutions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listExecutions without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.Execution()
        ),
      ];
      client.descriptors.page.listExecutions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.aiplatform.v1beta1.IExecution[] = [];
      const iterable = client.listExecutionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listExecutions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listExecutions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listExecutions with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListExecutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListExecutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listExecutions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listExecutionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.aiplatform.v1beta1.IExecution[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listExecutions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listExecutions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listMetadataSchemas', () => {
    it('invokes listMetadataSchemas without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
      ];
      client.innerApiCalls.listMetadataSchemas =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listMetadataSchemas(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMetadataSchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataSchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataSchemas without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
      ];
      client.innerApiCalls.listMetadataSchemas =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listMetadataSchemas(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.aiplatform.v1beta1.IMetadataSchema[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMetadataSchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataSchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataSchemas with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listMetadataSchemas = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listMetadataSchemas(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listMetadataSchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataSchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataSchemasStream without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
      ];
      client.descriptors.page.listMetadataSchemas.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listMetadataSchemasStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.MetadataSchema[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.MetadataSchema) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listMetadataSchemas.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMetadataSchemas, request)
      );
      assert(
        (client.descriptors.page.listMetadataSchemas.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listMetadataSchemasStream with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMetadataSchemas.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listMetadataSchemasStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.MetadataSchema[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.MetadataSchema) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listMetadataSchemas.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMetadataSchemas, request)
      );
      assert(
        (client.descriptors.page.listMetadataSchemas.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMetadataSchemas without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.MetadataSchema()
        ),
      ];
      client.descriptors.page.listMetadataSchemas.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.aiplatform.v1beta1.IMetadataSchema[] =
        [];
      const iterable = client.listMetadataSchemasAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMetadataSchemas.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMetadataSchemas.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMetadataSchemas with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMetadataSchemas.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listMetadataSchemasAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.aiplatform.v1beta1.IMetadataSchema[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMetadataSchemas.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMetadataSchemas.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('annotation', () => {
      const fakePath = '/rendered/path/annotation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        data_item: 'dataItemValue',
        annotation: 'annotationValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.annotationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.annotationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('annotationPath', () => {
        const result = client.annotationPath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'dataItemValue',
          'annotationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.annotationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAnnotationName', () => {
        const result = client.matchProjectFromAnnotationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAnnotationName', () => {
        const result = client.matchLocationFromAnnotationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAnnotationName', () => {
        const result = client.matchDatasetFromAnnotationName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataItemFromAnnotationName', () => {
        const result = client.matchDataItemFromAnnotationName(fakePath);
        assert.strictEqual(result, 'dataItemValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnnotationFromAnnotationName', () => {
        const result = client.matchAnnotationFromAnnotationName(fakePath);
        assert.strictEqual(result, 'annotationValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('annotationSpec', () => {
      const fakePath = '/rendered/path/annotationSpec';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        annotation_spec: 'annotationSpecValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.annotationSpecPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.annotationSpecPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('annotationSpecPath', () => {
        const result = client.annotationSpecPath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'annotationSpecValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAnnotationSpecName', () => {
        const result = client.matchProjectFromAnnotationSpecName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAnnotationSpecName', () => {
        const result = client.matchLocationFromAnnotationSpecName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAnnotationSpecName', () => {
        const result = client.matchDatasetFromAnnotationSpecName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnnotationSpecFromAnnotationSpecName', () => {
        const result =
          client.matchAnnotationSpecFromAnnotationSpecName(fakePath);
        assert.strictEqual(result, 'annotationSpecValue');
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('artifact', () => {
      const fakePath = '/rendered/path/artifact';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        metadata_store: 'metadataStoreValue',
        artifact: 'artifactValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.artifactPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.artifactPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('artifactPath', () => {
        const result = client.artifactPath(
          'projectValue',
          'locationValue',
          'metadataStoreValue',
          'artifactValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.artifactPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromArtifactName', () => {
        const result = client.matchProjectFromArtifactName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.artifactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromArtifactName', () => {
        const result = client.matchLocationFromArtifactName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.artifactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMetadataStoreFromArtifactName', () => {
        const result = client.matchMetadataStoreFromArtifactName(fakePath);
        assert.strictEqual(result, 'metadataStoreValue');
        assert(
          (client.pathTemplates.artifactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchArtifactFromArtifactName', () => {
        const result = client.matchArtifactFromArtifactName(fakePath);
        assert.strictEqual(result, 'artifactValue');
        assert(
          (client.pathTemplates.artifactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('batchPredictionJob', () => {
      const fakePath = '/rendered/path/batchPredictionJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        batch_prediction_job: 'batchPredictionJobValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.batchPredictionJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.batchPredictionJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('batchPredictionJobPath', () => {
        const result = client.batchPredictionJobPath(
          'projectValue',
          'locationValue',
          'batchPredictionJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.batchPredictionJobPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBatchPredictionJobName', () => {
        const result = client.matchProjectFromBatchPredictionJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.batchPredictionJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBatchPredictionJobName', () => {
        const result = client.matchLocationFromBatchPredictionJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.batchPredictionJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBatchPredictionJobFromBatchPredictionJobName', () => {
        const result =
          client.matchBatchPredictionJobFromBatchPredictionJobName(fakePath);
        assert.strictEqual(result, 'batchPredictionJobValue');
        assert(
          (
            client.pathTemplates.batchPredictionJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('context', () => {
      const fakePath = '/rendered/path/context';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        metadata_store: 'metadataStoreValue',
        context: 'contextValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.contextPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.contextPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('contextPath', () => {
        const result = client.contextPath(
          'projectValue',
          'locationValue',
          'metadataStoreValue',
          'contextValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.contextPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromContextName', () => {
        const result = client.matchProjectFromContextName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.contextPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromContextName', () => {
        const result = client.matchLocationFromContextName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.contextPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMetadataStoreFromContextName', () => {
        const result = client.matchMetadataStoreFromContextName(fakePath);
        assert.strictEqual(result, 'metadataStoreValue');
        assert(
          (client.pathTemplates.contextPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchContextFromContextName', () => {
        const result = client.matchContextFromContextName(fakePath);
        assert.strictEqual(result, 'contextValue');
        assert(
          (client.pathTemplates.contextPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customJob', () => {
      const fakePath = '/rendered/path/customJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        custom_job: 'customJobValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.customJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customJobPath', () => {
        const result = client.customJobPath(
          'projectValue',
          'locationValue',
          'customJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.customJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCustomJobName', () => {
        const result = client.matchProjectFromCustomJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.customJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCustomJobName', () => {
        const result = client.matchLocationFromCustomJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.customJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomJobFromCustomJobName', () => {
        const result = client.matchCustomJobFromCustomJobName(fakePath);
        assert.strictEqual(result, 'customJobValue');
        assert(
          (client.pathTemplates.customJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataItem', () => {
      const fakePath = '/rendered/path/dataItem';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        data_item: 'dataItemValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dataItemPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataItemPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataItemPath', () => {
        const result = client.dataItemPath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'dataItemValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataItemPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataItemName', () => {
        const result = client.matchProjectFromDataItemName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataItemPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataItemName', () => {
        const result = client.matchLocationFromDataItemName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataItemPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromDataItemName', () => {
        const result = client.matchDatasetFromDataItemName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.dataItemPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataItemFromDataItemName', () => {
        const result = client.matchDataItemFromDataItemName(fakePath);
        assert.strictEqual(result, 'dataItemValue');
        assert(
          (client.pathTemplates.dataItemPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataLabelingJob', () => {
      const fakePath = '/rendered/path/dataLabelingJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_labeling_job: 'dataLabelingJobValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dataLabelingJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataLabelingJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataLabelingJobPath', () => {
        const result = client.dataLabelingJobPath(
          'projectValue',
          'locationValue',
          'dataLabelingJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataLabelingJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataLabelingJobName', () => {
        const result = client.matchProjectFromDataLabelingJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataLabelingJobName', () => {
        const result = client.matchLocationFromDataLabelingJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataLabelingJobFromDataLabelingJobName', () => {
        const result =
          client.matchDataLabelingJobFromDataLabelingJobName(fakePath);
        assert.strictEqual(result, 'dataLabelingJobValue');
        assert(
          (client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataset', () => {
      const fakePath = '/rendered/path/dataset';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.datasetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.datasetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('datasetPath', () => {
        const result = client.datasetPath(
          'projectValue',
          'locationValue',
          'datasetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.datasetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDatasetName', () => {
        const result = client.matchProjectFromDatasetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDatasetName', () => {
        const result = client.matchLocationFromDatasetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromDatasetName', () => {
        const result = client.matchDatasetFromDatasetName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('deploymentResourcePool', () => {
      const fakePath = '/rendered/path/deploymentResourcePool';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        deployment_resource_pool: 'deploymentResourcePoolValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.deploymentResourcePoolPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.deploymentResourcePoolPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('deploymentResourcePoolPath', () => {
        const result = client.deploymentResourcePoolPath(
          'projectValue',
          'locationValue',
          'deploymentResourcePoolValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.deploymentResourcePoolPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDeploymentResourcePoolName', () => {
        const result =
          client.matchProjectFromDeploymentResourcePoolName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.deploymentResourcePoolPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDeploymentResourcePoolName', () => {
        const result =
          client.matchLocationFromDeploymentResourcePoolName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.deploymentResourcePoolPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDeploymentResourcePoolFromDeploymentResourcePoolName', () => {
        const result =
          client.matchDeploymentResourcePoolFromDeploymentResourcePoolName(
            fakePath
          );
        assert.strictEqual(result, 'deploymentResourcePoolValue');
        assert(
          (
            client.pathTemplates.deploymentResourcePoolPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('endpoint', () => {
      const fakePath = '/rendered/path/endpoint';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        endpoint: 'endpointValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.endpointPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.endpointPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('endpointPath', () => {
        const result = client.endpointPath(
          'projectValue',
          'locationValue',
          'endpointValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.endpointPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEndpointName', () => {
        const result = client.matchProjectFromEndpointName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.endpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEndpointName', () => {
        const result = client.matchLocationFromEndpointName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.endpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEndpointFromEndpointName', () => {
        const result = client.matchEndpointFromEndpointName(fakePath);
        assert.strictEqual(result, 'endpointValue');
        assert(
          (client.pathTemplates.endpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entityType', () => {
      const fakePath = '/rendered/path/entityType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        featurestore: 'featurestoreValue',
        entity_type: 'entityTypeValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entityTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entityTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entityTypePath', () => {
        const result = client.entityTypePath(
          'projectValue',
          'locationValue',
          'featurestoreValue',
          'entityTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entityTypePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntityTypeName', () => {
        const result = client.matchProjectFromEntityTypeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entityTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntityTypeName', () => {
        const result = client.matchLocationFromEntityTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entityTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFeaturestoreFromEntityTypeName', () => {
        const result = client.matchFeaturestoreFromEntityTypeName(fakePath);
        assert.strictEqual(result, 'featurestoreValue');
        assert(
          (client.pathTemplates.entityTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityTypeFromEntityTypeName', () => {
        const result = client.matchEntityTypeFromEntityTypeName(fakePath);
        assert.strictEqual(result, 'entityTypeValue');
        assert(
          (client.pathTemplates.entityTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('execution', () => {
      const fakePath = '/rendered/path/execution';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        metadata_store: 'metadataStoreValue',
        execution: 'executionValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.executionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.executionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('executionPath', () => {
        const result = client.executionPath(
          'projectValue',
          'locationValue',
          'metadataStoreValue',
          'executionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.executionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromExecutionName', () => {
        const result = client.matchProjectFromExecutionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.executionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromExecutionName', () => {
        const result = client.matchLocationFromExecutionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.executionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMetadataStoreFromExecutionName', () => {
        const result = client.matchMetadataStoreFromExecutionName(fakePath);
        assert.strictEqual(result, 'metadataStoreValue');
        assert(
          (client.pathTemplates.executionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExecutionFromExecutionName', () => {
        const result = client.matchExecutionFromExecutionName(fakePath);
        assert.strictEqual(result, 'executionValue');
        assert(
          (client.pathTemplates.executionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('feature', () => {
      const fakePath = '/rendered/path/feature';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        featurestore: 'featurestoreValue',
        entity_type: 'entityTypeValue',
        feature: 'featureValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.featurePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.featurePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('featurePath', () => {
        const result = client.featurePath(
          'projectValue',
          'locationValue',
          'featurestoreValue',
          'entityTypeValue',
          'featureValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.featurePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromFeatureName', () => {
        const result = client.matchProjectFromFeatureName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.featurePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFeatureName', () => {
        const result = client.matchLocationFromFeatureName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.featurePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFeaturestoreFromFeatureName', () => {
        const result = client.matchFeaturestoreFromFeatureName(fakePath);
        assert.strictEqual(result, 'featurestoreValue');
        assert(
          (client.pathTemplates.featurePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityTypeFromFeatureName', () => {
        const result = client.matchEntityTypeFromFeatureName(fakePath);
        assert.strictEqual(result, 'entityTypeValue');
        assert(
          (client.pathTemplates.featurePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFeatureFromFeatureName', () => {
        const result = client.matchFeatureFromFeatureName(fakePath);
        assert.strictEqual(result, 'featureValue');
        assert(
          (client.pathTemplates.featurePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('featurestore', () => {
      const fakePath = '/rendered/path/featurestore';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        featurestore: 'featurestoreValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.featurestorePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.featurestorePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('featurestorePath', () => {
        const result = client.featurestorePath(
          'projectValue',
          'locationValue',
          'featurestoreValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.featurestorePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromFeaturestoreName', () => {
        const result = client.matchProjectFromFeaturestoreName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.featurestorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFeaturestoreName', () => {
        const result = client.matchLocationFromFeaturestoreName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.featurestorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFeaturestoreFromFeaturestoreName', () => {
        const result = client.matchFeaturestoreFromFeaturestoreName(fakePath);
        assert.strictEqual(result, 'featurestoreValue');
        assert(
          (client.pathTemplates.featurestorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('hyperparameterTuningJob', () => {
      const fakePath = '/rendered/path/hyperparameterTuningJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        hyperparameter_tuning_job: 'hyperparameterTuningJobValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.hyperparameterTuningJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.hyperparameterTuningJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('hyperparameterTuningJobPath', () => {
        const result = client.hyperparameterTuningJobPath(
          'projectValue',
          'locationValue',
          'hyperparameterTuningJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.hyperparameterTuningJobPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromHyperparameterTuningJobName', () => {
        const result =
          client.matchProjectFromHyperparameterTuningJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.hyperparameterTuningJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromHyperparameterTuningJobName', () => {
        const result =
          client.matchLocationFromHyperparameterTuningJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.hyperparameterTuningJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHyperparameterTuningJobFromHyperparameterTuningJobName', () => {
        const result =
          client.matchHyperparameterTuningJobFromHyperparameterTuningJobName(
            fakePath
          );
        assert.strictEqual(result, 'hyperparameterTuningJobValue');
        assert(
          (
            client.pathTemplates.hyperparameterTuningJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('index', () => {
      const fakePath = '/rendered/path/index';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        index: 'indexValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.indexPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.indexPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('indexPath', () => {
        const result = client.indexPath(
          'projectValue',
          'locationValue',
          'indexValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.indexPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromIndexName', () => {
        const result = client.matchProjectFromIndexName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.indexPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromIndexName', () => {
        const result = client.matchLocationFromIndexName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.indexPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIndexFromIndexName', () => {
        const result = client.matchIndexFromIndexName(fakePath);
        assert.strictEqual(result, 'indexValue');
        assert(
          (client.pathTemplates.indexPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('indexEndpoint', () => {
      const fakePath = '/rendered/path/indexEndpoint';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        index_endpoint: 'indexEndpointValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.indexEndpointPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.indexEndpointPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('indexEndpointPath', () => {
        const result = client.indexEndpointPath(
          'projectValue',
          'locationValue',
          'indexEndpointValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.indexEndpointPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromIndexEndpointName', () => {
        const result = client.matchProjectFromIndexEndpointName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.indexEndpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromIndexEndpointName', () => {
        const result = client.matchLocationFromIndexEndpointName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.indexEndpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIndexEndpointFromIndexEndpointName', () => {
        const result = client.matchIndexEndpointFromIndexEndpointName(fakePath);
        assert.strictEqual(result, 'indexEndpointValue');
        assert(
          (client.pathTemplates.indexEndpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('metadataSchema', () => {
      const fakePath = '/rendered/path/metadataSchema';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        metadata_store: 'metadataStoreValue',
        metadata_schema: 'metadataSchemaValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.metadataSchemaPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.metadataSchemaPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('metadataSchemaPath', () => {
        const result = client.metadataSchemaPath(
          'projectValue',
          'locationValue',
          'metadataStoreValue',
          'metadataSchemaValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.metadataSchemaPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromMetadataSchemaName', () => {
        const result = client.matchProjectFromMetadataSchemaName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.metadataSchemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromMetadataSchemaName', () => {
        const result = client.matchLocationFromMetadataSchemaName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.metadataSchemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMetadataStoreFromMetadataSchemaName', () => {
        const result =
          client.matchMetadataStoreFromMetadataSchemaName(fakePath);
        assert.strictEqual(result, 'metadataStoreValue');
        assert(
          (client.pathTemplates.metadataSchemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMetadataSchemaFromMetadataSchemaName', () => {
        const result =
          client.matchMetadataSchemaFromMetadataSchemaName(fakePath);
        assert.strictEqual(result, 'metadataSchemaValue');
        assert(
          (client.pathTemplates.metadataSchemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('metadataStore', () => {
      const fakePath = '/rendered/path/metadataStore';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        metadata_store: 'metadataStoreValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.metadataStorePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.metadataStorePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('metadataStorePath', () => {
        const result = client.metadataStorePath(
          'projectValue',
          'locationValue',
          'metadataStoreValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.metadataStorePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromMetadataStoreName', () => {
        const result = client.matchProjectFromMetadataStoreName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.metadataStorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromMetadataStoreName', () => {
        const result = client.matchLocationFromMetadataStoreName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.metadataStorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMetadataStoreFromMetadataStoreName', () => {
        const result = client.matchMetadataStoreFromMetadataStoreName(fakePath);
        assert.strictEqual(result, 'metadataStoreValue');
        assert(
          (client.pathTemplates.metadataStorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('model', () => {
      const fakePath = '/rendered/path/model';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        model: 'modelValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.modelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelPath', () => {
        const result = client.modelPath(
          'projectValue',
          'locationValue',
          'modelValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelName', () => {
        const result = client.matchProjectFromModelName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelName', () => {
        const result = client.matchLocationFromModelName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelFromModelName', () => {
        const result = client.matchModelFromModelName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('modelDeploymentMonitoringJob', () => {
      const fakePath = '/rendered/path/modelDeploymentMonitoringJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        model_deployment_monitoring_job: 'modelDeploymentMonitoringJobValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.modelDeploymentMonitoringJobPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('modelDeploymentMonitoringJobPath', () => {
        const result = client.modelDeploymentMonitoringJobPath(
          'projectValue',
          'locationValue',
          'modelDeploymentMonitoringJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.modelDeploymentMonitoringJobPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelDeploymentMonitoringJobName', () => {
        const result =
          client.matchProjectFromModelDeploymentMonitoringJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.modelDeploymentMonitoringJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelDeploymentMonitoringJobName', () => {
        const result =
          client.matchLocationFromModelDeploymentMonitoringJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.modelDeploymentMonitoringJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelDeploymentMonitoringJobFromModelDeploymentMonitoringJobName', () => {
        const result =
          client.matchModelDeploymentMonitoringJobFromModelDeploymentMonitoringJobName(
            fakePath
          );
        assert.strictEqual(result, 'modelDeploymentMonitoringJobValue');
        assert(
          (
            client.pathTemplates.modelDeploymentMonitoringJobPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('modelEvaluation', () => {
      const fakePath = '/rendered/path/modelEvaluation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        model: 'modelValue',
        evaluation: 'evaluationValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.modelEvaluationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelEvaluationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelEvaluationPath', () => {
        const result = client.modelEvaluationPath(
          'projectValue',
          'locationValue',
          'modelValue',
          'evaluationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelEvaluationName', () => {
        const result = client.matchProjectFromModelEvaluationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelEvaluationName', () => {
        const result = client.matchLocationFromModelEvaluationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelFromModelEvaluationName', () => {
        const result = client.matchModelFromModelEvaluationName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEvaluationFromModelEvaluationName', () => {
        const result = client.matchEvaluationFromModelEvaluationName(fakePath);
        assert.strictEqual(result, 'evaluationValue');
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('modelEvaluationSlice', () => {
      const fakePath = '/rendered/path/modelEvaluationSlice';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        model: 'modelValue',
        evaluation: 'evaluationValue',
        slice: 'sliceValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.modelEvaluationSlicePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelEvaluationSlicePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelEvaluationSlicePath', () => {
        const result = client.modelEvaluationSlicePath(
          'projectValue',
          'locationValue',
          'modelValue',
          'evaluationValue',
          'sliceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.modelEvaluationSlicePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelEvaluationSliceName', () => {
        const result =
          client.matchProjectFromModelEvaluationSliceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.modelEvaluationSlicePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelEvaluationSliceName', () => {
        const result =
          client.matchLocationFromModelEvaluationSliceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.modelEvaluationSlicePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelFromModelEvaluationSliceName', () => {
        const result = client.matchModelFromModelEvaluationSliceName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (
            client.pathTemplates.modelEvaluationSlicePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEvaluationFromModelEvaluationSliceName', () => {
        const result =
          client.matchEvaluationFromModelEvaluationSliceName(fakePath);
        assert.strictEqual(result, 'evaluationValue');
        assert(
          (
            client.pathTemplates.modelEvaluationSlicePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSliceFromModelEvaluationSliceName', () => {
        const result = client.matchSliceFromModelEvaluationSliceName(fakePath);
        assert.strictEqual(result, 'sliceValue');
        assert(
          (
            client.pathTemplates.modelEvaluationSlicePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('pipelineJob', () => {
      const fakePath = '/rendered/path/pipelineJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        pipeline_job: 'pipelineJobValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.pipelineJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.pipelineJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('pipelineJobPath', () => {
        const result = client.pipelineJobPath(
          'projectValue',
          'locationValue',
          'pipelineJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.pipelineJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPipelineJobName', () => {
        const result = client.matchProjectFromPipelineJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.pipelineJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPipelineJobName', () => {
        const result = client.matchLocationFromPipelineJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.pipelineJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPipelineJobFromPipelineJobName', () => {
        const result = client.matchPipelineJobFromPipelineJobName(fakePath);
        assert.strictEqual(result, 'pipelineJobValue');
        assert(
          (client.pathTemplates.pipelineJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('savedQuery', () => {
      const fakePath = '/rendered/path/savedQuery';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        saved_query: 'savedQueryValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.savedQueryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.savedQueryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('savedQueryPath', () => {
        const result = client.savedQueryPath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'savedQueryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.savedQueryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSavedQueryName', () => {
        const result = client.matchProjectFromSavedQueryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.savedQueryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSavedQueryName', () => {
        const result = client.matchLocationFromSavedQueryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.savedQueryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromSavedQueryName', () => {
        const result = client.matchDatasetFromSavedQueryName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.savedQueryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSavedQueryFromSavedQueryName', () => {
        const result = client.matchSavedQueryFromSavedQueryName(fakePath);
        assert.strictEqual(result, 'savedQueryValue');
        assert(
          (client.pathTemplates.savedQueryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('specialistPool', () => {
      const fakePath = '/rendered/path/specialistPool';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        specialist_pool: 'specialistPoolValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.specialistPoolPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.specialistPoolPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('specialistPoolPath', () => {
        const result = client.specialistPoolPath(
          'projectValue',
          'locationValue',
          'specialistPoolValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.specialistPoolPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSpecialistPoolName', () => {
        const result = client.matchProjectFromSpecialistPoolName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.specialistPoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSpecialistPoolName', () => {
        const result = client.matchLocationFromSpecialistPoolName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.specialistPoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSpecialistPoolFromSpecialistPoolName', () => {
        const result =
          client.matchSpecialistPoolFromSpecialistPoolName(fakePath);
        assert.strictEqual(result, 'specialistPoolValue');
        assert(
          (client.pathTemplates.specialistPoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('study', () => {
      const fakePath = '/rendered/path/study';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        study: 'studyValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.studyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.studyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('studyPath', () => {
        const result = client.studyPath(
          'projectValue',
          'locationValue',
          'studyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.studyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromStudyName', () => {
        const result = client.matchProjectFromStudyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.studyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromStudyName', () => {
        const result = client.matchLocationFromStudyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.studyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchStudyFromStudyName', () => {
        const result = client.matchStudyFromStudyName(fakePath);
        assert.strictEqual(result, 'studyValue');
        assert(
          (client.pathTemplates.studyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tensorboard', () => {
      const fakePath = '/rendered/path/tensorboard';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        tensorboard: 'tensorboardValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tensorboardPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tensorboardPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tensorboardPath', () => {
        const result = client.tensorboardPath(
          'projectValue',
          'locationValue',
          'tensorboardValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tensorboardPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTensorboardName', () => {
        const result = client.matchProjectFromTensorboardName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.tensorboardPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTensorboardName', () => {
        const result = client.matchLocationFromTensorboardName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.tensorboardPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTensorboardFromTensorboardName', () => {
        const result = client.matchTensorboardFromTensorboardName(fakePath);
        assert.strictEqual(result, 'tensorboardValue');
        assert(
          (client.pathTemplates.tensorboardPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tensorboardExperiment', () => {
      const fakePath = '/rendered/path/tensorboardExperiment';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        tensorboard: 'tensorboardValue',
        experiment: 'experimentValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tensorboardExperimentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tensorboardExperimentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tensorboardExperimentPath', () => {
        const result = client.tensorboardExperimentPath(
          'projectValue',
          'locationValue',
          'tensorboardValue',
          'experimentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.tensorboardExperimentPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTensorboardExperimentName', () => {
        const result =
          client.matchProjectFromTensorboardExperimentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.tensorboardExperimentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTensorboardExperimentName', () => {
        const result =
          client.matchLocationFromTensorboardExperimentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.tensorboardExperimentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTensorboardFromTensorboardExperimentName', () => {
        const result =
          client.matchTensorboardFromTensorboardExperimentName(fakePath);
        assert.strictEqual(result, 'tensorboardValue');
        assert(
          (
            client.pathTemplates.tensorboardExperimentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExperimentFromTensorboardExperimentName', () => {
        const result =
          client.matchExperimentFromTensorboardExperimentName(fakePath);
        assert.strictEqual(result, 'experimentValue');
        assert(
          (
            client.pathTemplates.tensorboardExperimentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tensorboardRun', () => {
      const fakePath = '/rendered/path/tensorboardRun';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        tensorboard: 'tensorboardValue',
        experiment: 'experimentValue',
        run: 'runValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tensorboardRunPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tensorboardRunPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tensorboardRunPath', () => {
        const result = client.tensorboardRunPath(
          'projectValue',
          'locationValue',
          'tensorboardValue',
          'experimentValue',
          'runValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tensorboardRunPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTensorboardRunName', () => {
        const result = client.matchProjectFromTensorboardRunName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.tensorboardRunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTensorboardRunName', () => {
        const result = client.matchLocationFromTensorboardRunName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.tensorboardRunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTensorboardFromTensorboardRunName', () => {
        const result = client.matchTensorboardFromTensorboardRunName(fakePath);
        assert.strictEqual(result, 'tensorboardValue');
        assert(
          (client.pathTemplates.tensorboardRunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExperimentFromTensorboardRunName', () => {
        const result = client.matchExperimentFromTensorboardRunName(fakePath);
        assert.strictEqual(result, 'experimentValue');
        assert(
          (client.pathTemplates.tensorboardRunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRunFromTensorboardRunName', () => {
        const result = client.matchRunFromTensorboardRunName(fakePath);
        assert.strictEqual(result, 'runValue');
        assert(
          (client.pathTemplates.tensorboardRunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tensorboardTimeSeries', () => {
      const fakePath = '/rendered/path/tensorboardTimeSeries';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        tensorboard: 'tensorboardValue',
        experiment: 'experimentValue',
        run: 'runValue',
        time_series: 'timeSeriesValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tensorboardTimeSeriesPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tensorboardTimeSeriesPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tensorboardTimeSeriesPath', () => {
        const result = client.tensorboardTimeSeriesPath(
          'projectValue',
          'locationValue',
          'tensorboardValue',
          'experimentValue',
          'runValue',
          'timeSeriesValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.tensorboardTimeSeriesPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTensorboardTimeSeriesName', () => {
        const result =
          client.matchProjectFromTensorboardTimeSeriesName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.tensorboardTimeSeriesPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTensorboardTimeSeriesName', () => {
        const result =
          client.matchLocationFromTensorboardTimeSeriesName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.tensorboardTimeSeriesPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTensorboardFromTensorboardTimeSeriesName', () => {
        const result =
          client.matchTensorboardFromTensorboardTimeSeriesName(fakePath);
        assert.strictEqual(result, 'tensorboardValue');
        assert(
          (
            client.pathTemplates.tensorboardTimeSeriesPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExperimentFromTensorboardTimeSeriesName', () => {
        const result =
          client.matchExperimentFromTensorboardTimeSeriesName(fakePath);
        assert.strictEqual(result, 'experimentValue');
        assert(
          (
            client.pathTemplates.tensorboardTimeSeriesPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRunFromTensorboardTimeSeriesName', () => {
        const result = client.matchRunFromTensorboardTimeSeriesName(fakePath);
        assert.strictEqual(result, 'runValue');
        assert(
          (
            client.pathTemplates.tensorboardTimeSeriesPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTimeSeriesFromTensorboardTimeSeriesName', () => {
        const result =
          client.matchTimeSeriesFromTensorboardTimeSeriesName(fakePath);
        assert.strictEqual(result, 'timeSeriesValue');
        assert(
          (
            client.pathTemplates.tensorboardTimeSeriesPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('trainingPipeline', () => {
      const fakePath = '/rendered/path/trainingPipeline';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        training_pipeline: 'trainingPipelineValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.trainingPipelinePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.trainingPipelinePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('trainingPipelinePath', () => {
        const result = client.trainingPipelinePath(
          'projectValue',
          'locationValue',
          'trainingPipelineValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.trainingPipelinePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTrainingPipelineName', () => {
        const result = client.matchProjectFromTrainingPipelineName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.trainingPipelinePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTrainingPipelineName', () => {
        const result = client.matchLocationFromTrainingPipelineName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.trainingPipelinePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTrainingPipelineFromTrainingPipelineName', () => {
        const result =
          client.matchTrainingPipelineFromTrainingPipelineName(fakePath);
        assert.strictEqual(result, 'trainingPipelineValue');
        assert(
          (client.pathTemplates.trainingPipelinePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('trial', () => {
      const fakePath = '/rendered/path/trial';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        study: 'studyValue',
        trial: 'trialValue',
      };
      const client = new metadataserviceModule.v1beta1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.trialPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.trialPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('trialPath', () => {
        const result = client.trialPath(
          'projectValue',
          'locationValue',
          'studyValue',
          'trialValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.trialPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTrialName', () => {
        const result = client.matchProjectFromTrialName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.trialPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTrialName', () => {
        const result = client.matchLocationFromTrialName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.trialPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchStudyFromTrialName', () => {
        const result = client.matchStudyFromTrialName(fakePath);
        assert.strictEqual(result, 'studyValue');
        assert(
          (client.pathTemplates.trialPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTrialFromTrialName', () => {
        const result = client.matchTrialFromTrialName(fakePath);
        assert.strictEqual(result, 'trialValue');
        assert(
          (client.pathTemplates.trialPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
