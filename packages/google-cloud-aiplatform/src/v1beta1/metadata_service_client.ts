// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/metadata_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './metadata_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for reading and writing metadata entries.
 * @class
 * @memberof v1beta1
 */
export class MetadataServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  metadataServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of MetadataServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new MetadataServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof MetadataServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'aiplatform.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'
      ),
      annotationSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'
      ),
      artifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'
      ),
      batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'
      ),
      contextPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'
      ),
      customJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/customJobs/{custom_job}'
      ),
      dataItemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'
      ),
      dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'
      ),
      datasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
      datasetVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}'
      ),
      deploymentResourcePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}'
      ),
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'
      ),
      extensionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/extensions/{extension}'
      ),
      featureGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}'
      ),
      featureOnlineStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}'
      ),
      featureViewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}'
      ),
      featureViewSyncPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/feature_view_sync'
      ),
      featurestorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}'
      ),
      hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'
      ),
      indexPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexes/{index}'
      ),
      indexEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      metadataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/metadataSchemas/{metadata_schema}'
      ),
      metadataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}'
      ),
      modelDeploymentMonitoringJobPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}'
        ),
      modelEvaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'
      ),
      modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'
      ),
      modelMonitorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelMonitors/{model_monitor}'
      ),
      modelMonitoringJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelMonitors/{model_monitor}/modelMonitoringJobs/{model_monitoring_job}'
      ),
      nasJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}'
      ),
      nasTrialDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}/nasTrialDetails/{nas_trial_detail}'
      ),
      notebookExecutionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookExecutionJobs/{notebook_execution_job}'
      ),
      notebookRuntimePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimes/{notebook_runtime}'
      ),
      notebookRuntimeTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimeTemplates/{notebook_runtime_template}'
      ),
      persistentResourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/persistentResources/{persistent_resource}'
      ),
      pipelineJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpoints/{endpoint}'
      ),
      projectLocationFeatureGroupFeaturePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}'
        ),
      projectLocationFeaturestoreEntityTypeFeaturePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}'
        ),
      projectLocationPublisherModelPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/publishers/{publisher}/models/{model}'
        ),
      publisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'publishers/{publisher}/models/{model}'
      ),
      ragCorpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}'
      ),
      ragFilePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}/ragFiles/{rag_file}'
      ),
      reasoningEnginePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}'
      ),
      savedQueryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}'
      ),
      schedulePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/schedules/{schedule}'
      ),
      specialistPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/specialistPools/{specialist_pool}'
      ),
      studyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}'
      ),
      tensorboardPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}'
      ),
      tensorboardExperimentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}'
      ),
      tensorboardRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}'
      ),
      tensorboardTimeSeriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}'
      ),
      trainingPipelinePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'
      ),
      trialPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}/trials/{trial}'
      ),
      tuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tuningJobs/{tuning_job}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listMetadataStores: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'metadataStores'
      ),
      listArtifacts: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'artifacts'
      ),
      listContexts: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'contexts'
      ),
      listExecutions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'executions'
      ),
      listMetadataSchemas: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'metadataSchemas'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/ui/{name=projects/*/locations/*}',
          additional_bindings: [
            {get: '/v1beta1/{name=projects/*/locations/*}'},
          ],
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/ui/{name=projects/*}/locations',
          additional_bindings: [{get: '/v1beta1/{name=projects/*}/locations'}],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/models/*}:getIamPolicy',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:getIamPolicy',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/publishers/*/models/*}:getIamPolicy',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/models/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/endpoints/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/publishers/*/models/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/models/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/models/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/endpoints/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/models/*}:testIamPermissions',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:testIamPermissions',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',
            },
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/models/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/endpoints/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/ui/{name=projects/*/locations/*/operations/*}:cancel',
          additional_bindings: [
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/ui/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/extensions/*}/operations',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {delete: '/ui/{name=projects/*/locations/*/models/*/operations/*}'},
            {
              delete:
                '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/studies/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/schedules/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',
            },
            {delete: '/v1beta1/{name=projects/*/locations/*/operations/*}'},
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/solvers/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/ui/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {get: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/edgeDeploymentJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/models/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/studies/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',
            },
            {get: '/v1beta1/{name=projects/*/locations/*/operations/*}'},
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/solvers/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/ui/{name=projects/*/locations/*}/operations',
          additional_bindings: [
            {get: '/ui/{name=projects/*/locations/*/datasets/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/edgeDevices/*}/operations'},
            {get: '/ui/{name=projects/*/locations/*/endpoints/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/extensions/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/customJobs/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/tuningJobs/*}/operations'},
            {get: '/ui/{name=projects/*/locations/*/indexes/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/indexEndpoints/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelMonitors/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/migratableResources/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/models/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/studies/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/studies/*/trials/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/trainingPipelines/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/persistentResources/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/pipelineJobs/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/schedules/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/specialistPools/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',
            },
            {get: '/v1beta1/{name=projects/*/locations/*}/operations'},
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/endpoints/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/exampleStores/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/extensions/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/customJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/indexes/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/migratableResources/*}/operations',
            },
            {get: '/v1beta1/{name=projects/*/locations/*/models/*}/operations'},
            {
              get: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/persistentResources/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/solvers/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/studies/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/schedules/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/specialistPools/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*}/operations',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.WaitOperation',
          post: '/ui/{name=projects/*/locations/*/operations/*}:wait',
          additional_bindings: [
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',
            },
            {post: '/v1beta1/{name=projects/*/locations/*/operations/*}:wait'},
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',
            },
          ],
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createMetadataStoreResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.MetadataStore'
    ) as gax.protobuf.Type;
    const createMetadataStoreMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.CreateMetadataStoreOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteMetadataStoreResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteMetadataStoreMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteArtifactResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteArtifactMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const purgeArtifactsResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.PurgeArtifactsResponse'
    ) as gax.protobuf.Type;
    const purgeArtifactsMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.PurgeArtifactsMetadata'
    ) as gax.protobuf.Type;
    const deleteContextResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteContextMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const purgeContextsResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.PurgeContextsResponse'
    ) as gax.protobuf.Type;
    const purgeContextsMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.PurgeContextsMetadata'
    ) as gax.protobuf.Type;
    const deleteExecutionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteExecutionMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const purgeExecutionsResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.PurgeExecutionsResponse'
    ) as gax.protobuf.Type;
    const purgeExecutionsMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.PurgeExecutionsMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createMetadataStore: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createMetadataStoreResponse.decode.bind(createMetadataStoreResponse),
        createMetadataStoreMetadata.decode.bind(createMetadataStoreMetadata)
      ),
      deleteMetadataStore: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteMetadataStoreResponse.decode.bind(deleteMetadataStoreResponse),
        deleteMetadataStoreMetadata.decode.bind(deleteMetadataStoreMetadata)
      ),
      deleteArtifact: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteArtifactResponse.decode.bind(deleteArtifactResponse),
        deleteArtifactMetadata.decode.bind(deleteArtifactMetadata)
      ),
      purgeArtifacts: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        purgeArtifactsResponse.decode.bind(purgeArtifactsResponse),
        purgeArtifactsMetadata.decode.bind(purgeArtifactsMetadata)
      ),
      deleteContext: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteContextResponse.decode.bind(deleteContextResponse),
        deleteContextMetadata.decode.bind(deleteContextMetadata)
      ),
      purgeContexts: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        purgeContextsResponse.decode.bind(purgeContextsResponse),
        purgeContextsMetadata.decode.bind(purgeContextsMetadata)
      ),
      deleteExecution: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteExecutionResponse.decode.bind(deleteExecutionResponse),
        deleteExecutionMetadata.decode.bind(deleteExecutionMetadata)
      ),
      purgeExecutions: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        purgeExecutionsResponse.decode.bind(purgeExecutionsResponse),
        purgeExecutionsMetadata.decode.bind(purgeExecutionsMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.aiplatform.v1beta1.MetadataService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.metadataServiceStub) {
      return this.metadataServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.aiplatform.v1beta1.MetadataService.
    this.metadataServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.aiplatform.v1beta1.MetadataService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.aiplatform.v1beta1.MetadataService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const metadataServiceStubMethods = [
      'createMetadataStore',
      'getMetadataStore',
      'listMetadataStores',
      'deleteMetadataStore',
      'createArtifact',
      'getArtifact',
      'listArtifacts',
      'updateArtifact',
      'deleteArtifact',
      'purgeArtifacts',
      'createContext',
      'getContext',
      'listContexts',
      'updateContext',
      'deleteContext',
      'purgeContexts',
      'addContextArtifactsAndExecutions',
      'addContextChildren',
      'removeContextChildren',
      'queryContextLineageSubgraph',
      'createExecution',
      'getExecution',
      'listExecutions',
      'updateExecution',
      'deleteExecution',
      'purgeExecutions',
      'addExecutionEvents',
      'queryExecutionInputsAndOutputs',
      'createMetadataSchema',
      'getMetadataSchema',
      'listMetadataSchemas',
      'queryArtifactLineageSubgraph',
    ];
    for (const methodName of metadataServiceStubMethods) {
      const callPromise = this.metadataServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.metadataServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Retrieves a specific MetadataStore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the MetadataStore to retrieve.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.MetadataStore|MetadataStore}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.get_metadata_store.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_GetMetadataStore_async
   */
  getMetadataStore(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getMetadataStore(
    request: protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
      | protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMetadataStore(
    request: protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
      | protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMetadataStore(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
          | protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
      | protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetMetadataStoreRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMetadataStore(request, options, callback);
  }
  /**
   * Creates an Artifact associated with a MetadataStore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the MetadataStore where the Artifact should
   *   be created.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {google.cloud.aiplatform.v1beta1.Artifact} request.artifact
   *   Required. The Artifact to create.
   * @param {string} request.artifactId
   *   The {artifact} portion of the resource name with the format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   *   If not provided, the Artifact's ID will be a UUID generated by the service.
   *   Must be 4-128 characters in length. Valid characters are `/{@link protos.0-9|a-z}-/`.
   *   Must be unique across all Artifacts in the parent MetadataStore. (Otherwise
   *   the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the
   *   caller can't view the preexisting Artifact.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Artifact|Artifact}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.create_artifact.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_CreateArtifact_async
   */
  createArtifact(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest | undefined,
      {} | undefined,
    ]
  >;
  createArtifact(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createArtifact(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createArtifact(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IArtifact,
          | protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      protos.google.cloud.aiplatform.v1beta1.ICreateArtifactRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createArtifact(request, options, callback);
  }
  /**
   * Retrieves a specific Artifact.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Artifact to retrieve.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Artifact|Artifact}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.get_artifact.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_GetArtifact_async
   */
  getArtifact(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest | undefined,
      {} | undefined,
    ]
  >;
  getArtifact(
    request: protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getArtifact(
    request: protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getArtifact(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IArtifact,
          | protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      protos.google.cloud.aiplatform.v1beta1.IGetArtifactRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getArtifact(request, options, callback);
  }
  /**
   * Updates a stored Artifact.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.aiplatform.v1beta1.Artifact} request.artifact
   *   Required. The Artifact containing updates.
   *   The Artifact's
   *   {@link protos.google.cloud.aiplatform.v1beta1.Artifact.name|Artifact.name} field is
   *   used to identify the Artifact to be updated. Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. A FieldMask indicating which fields should be updated.
   * @param {boolean} request.allowMissing
   *   If set to true, and the
   *   {@link protos.google.cloud.aiplatform.v1beta1.Artifact|Artifact} is not found, a new
   *   {@link protos.google.cloud.aiplatform.v1beta1.Artifact|Artifact} is created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Artifact|Artifact}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.update_artifact.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_UpdateArtifact_async
   */
  updateArtifact(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest | undefined,
      {} | undefined,
    ]
  >;
  updateArtifact(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateArtifact(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateArtifact(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IArtifact,
          | protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IArtifact,
      protos.google.cloud.aiplatform.v1beta1.IUpdateArtifactRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'artifact.name': request.artifact!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateArtifact(request, options, callback);
  }
  /**
   * Creates a Context associated with a MetadataStore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the MetadataStore where the Context should
   *   be created. Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {google.cloud.aiplatform.v1beta1.Context} request.context
   *   Required. The Context to create.
   * @param {string} request.contextId
   *   The {context} portion of the resource name with the format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`.
   *   If not provided, the Context's ID will be a UUID generated by the service.
   *   Must be 4-128 characters in length. Valid characters are `/{@link protos.0-9|a-z}-/`.
   *   Must be unique across all Contexts in the parent MetadataStore. (Otherwise
   *   the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the
   *   caller can't view the preexisting Context.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Context|Context}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.create_context.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_CreateContext_async
   */
  createContext(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IContext,
      protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest | undefined,
      {} | undefined,
    ]
  >;
  createContext(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createContext(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createContext(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IContext,
          | protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IContext,
      protos.google.cloud.aiplatform.v1beta1.ICreateContextRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createContext(request, options, callback);
  }
  /**
   * Retrieves a specific Context.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Context to retrieve.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Context|Context}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.get_context.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_GetContext_async
   */
  getContext(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetContextRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IContext,
      protos.google.cloud.aiplatform.v1beta1.IGetContextRequest | undefined,
      {} | undefined,
    ]
  >;
  getContext(
    request: protos.google.cloud.aiplatform.v1beta1.IGetContextRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.IGetContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getContext(
    request: protos.google.cloud.aiplatform.v1beta1.IGetContextRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.IGetContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getContext(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetContextRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IContext,
          | protos.google.cloud.aiplatform.v1beta1.IGetContextRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.IGetContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IContext,
      protos.google.cloud.aiplatform.v1beta1.IGetContextRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getContext(request, options, callback);
  }
  /**
   * Updates a stored Context.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.aiplatform.v1beta1.Context} request.context
   *   Required. The Context containing updates.
   *   The Context's {@link protos.google.cloud.aiplatform.v1beta1.Context.name|Context.name}
   *   field is used to identify the Context to be updated. Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. A FieldMask indicating which fields should be updated.
   * @param {boolean} request.allowMissing
   *   If set to true, and the {@link protos.google.cloud.aiplatform.v1beta1.Context|Context}
   *   is not found, a new {@link protos.google.cloud.aiplatform.v1beta1.Context|Context} is
   *   created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Context|Context}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.update_context.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_UpdateContext_async
   */
  updateContext(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IContext,
      protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest | undefined,
      {} | undefined,
    ]
  >;
  updateContext(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateContext(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateContext(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IContext,
          | protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IContext,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IContext,
      protos.google.cloud.aiplatform.v1beta1.IUpdateContextRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'context.name': request.context!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateContext(request, options, callback);
  }
  /**
   * Adds a set of Artifacts and Executions to a Context. If any of the
   * Artifacts or Executions have already been added to a Context, they are
   * simply skipped.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.context
   *   Required. The resource name of the Context that the Artifacts and
   *   Executions belong to. Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   * @param {string[]} request.artifacts
   *   The resource names of the Artifacts to attribute to the Context.
   *
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   * @param {string[]} request.executions
   *   The resource names of the Executions to associate with the
   *   Context.
   *
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsResponse|AddContextArtifactsAndExecutionsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.add_context_artifacts_and_executions.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_AddContextArtifactsAndExecutions_async
   */
  addContextArtifactsAndExecutions(
    request?: protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  addContextArtifactsAndExecutions(
    request: protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  addContextArtifactsAndExecutions(
    request: protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  addContextArtifactsAndExecutions(
    request?: protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsResponse,
          | protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IAddContextArtifactsAndExecutionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        context: request.context ?? '',
      });
    this.initialize();
    return this.innerApiCalls.addContextArtifactsAndExecutions(
      request,
      options,
      callback
    );
  }
  /**
   * Adds a set of Contexts as children to a parent Context. If any of the
   * child Contexts have already been added to the parent Context, they are
   * simply skipped. If this call would create a cycle or cause any Context to
   * have more than 10 parents, the request will fail with an INVALID_ARGUMENT
   * error.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.context
   *   Required. The resource name of the parent Context.
   *
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   * @param {string[]} request.childContexts
   *   The resource names of the child Contexts.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.AddContextChildrenResponse|AddContextChildrenResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.add_context_children.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_AddContextChildren_async
   */
  addContextChildren(
    request?: protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  addContextChildren(
    request: protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  addContextChildren(
    request: protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  addContextChildren(
    request?: protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenResponse,
          | protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IAddContextChildrenRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        context: request.context ?? '',
      });
    this.initialize();
    return this.innerApiCalls.addContextChildren(request, options, callback);
  }
  /**
   * Remove a set of children contexts from a parent Context. If any of the
   * child Contexts were NOT added to the parent Context, they are
   * simply skipped.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.context
   *   Required. The resource name of the parent Context.
   *
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   * @param {string[]} request.childContexts
   *   The resource names of the child Contexts.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.RemoveContextChildrenResponse|RemoveContextChildrenResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.remove_context_children.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_RemoveContextChildren_async
   */
  removeContextChildren(
    request?: protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  removeContextChildren(
    request: protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenResponse,
      | protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  removeContextChildren(
    request: protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenResponse,
      | protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  removeContextChildren(
    request?: protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenResponse,
          | protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenResponse,
      | protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IRemoveContextChildrenRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        context: request.context ?? '',
      });
    this.initialize();
    return this.innerApiCalls.removeContextChildren(request, options, callback);
  }
  /**
   * Retrieves Artifacts and Executions within the specified Context, connected
   * by Event edges and returned as a LineageSubgraph.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.context
   *   Required. The resource name of the Context whose Artifacts and Executions
   *   should be retrieved as a LineageSubgraph.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   *
   *   The request may error with FAILED_PRECONDITION if the number of Artifacts,
   *   the number of Executions, or the number of Events that would be returned
   *   for the Context exceeds 1000.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.LineageSubgraph|LineageSubgraph}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.query_context_lineage_subgraph.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_QueryContextLineageSubgraph_async
   */
  queryContextLineageSubgraph(
    request?: protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      (
        | protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  queryContextLineageSubgraph(
    request: protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  queryContextLineageSubgraph(
    request: protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  queryContextLineageSubgraph(
    request?: protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
          | protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      (
        | protos.google.cloud.aiplatform.v1beta1.IQueryContextLineageSubgraphRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        context: request.context ?? '',
      });
    this.initialize();
    return this.innerApiCalls.queryContextLineageSubgraph(
      request,
      options,
      callback
    );
  }
  /**
   * Creates an Execution associated with a MetadataStore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the MetadataStore where the Execution should
   *   be created.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {google.cloud.aiplatform.v1beta1.Execution} request.execution
   *   Required. The Execution to create.
   * @param {string} request.executionId
   *   The {execution} portion of the resource name with the format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   *   If not provided, the Execution's ID will be a UUID generated by the
   *   service.
   *   Must be 4-128 characters in length. Valid characters are `/{@link protos.0-9|a-z}-/`.
   *   Must be unique across all Executions in the parent MetadataStore.
   *   (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
   *   if the caller can't view the preexisting Execution.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Execution|Execution}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.create_execution.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_CreateExecution_async
   */
  createExecution(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createExecution(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createExecution(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createExecution(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IExecution,
          | protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateExecutionRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createExecution(request, options, callback);
  }
  /**
   * Retrieves a specific Execution.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Execution to retrieve.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Execution|Execution}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.get_execution.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_GetExecution_async
   */
  getExecution(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest | undefined,
      {} | undefined,
    ]
  >;
  getExecution(
    request: protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getExecution(
    request: protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getExecution(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IExecution,
          | protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      protos.google.cloud.aiplatform.v1beta1.IGetExecutionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getExecution(request, options, callback);
  }
  /**
   * Updates a stored Execution.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.aiplatform.v1beta1.Execution} request.execution
   *   Required. The Execution containing updates.
   *   The Execution's
   *   {@link protos.google.cloud.aiplatform.v1beta1.Execution.name|Execution.name} field is
   *   used to identify the Execution to be updated. Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. A FieldMask indicating which fields should be updated.
   * @param {boolean} request.allowMissing
   *   If set to true, and the
   *   {@link protos.google.cloud.aiplatform.v1beta1.Execution|Execution} is not found, a new
   *   {@link protos.google.cloud.aiplatform.v1beta1.Execution|Execution} is created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.Execution|Execution}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.update_execution.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_UpdateExecution_async
   */
  updateExecution(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      (
        | protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateExecution(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateExecution(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateExecution(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IExecution,
          | protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IExecution,
      (
        | protos.google.cloud.aiplatform.v1beta1.IUpdateExecutionRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'execution.name': request.execution!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateExecution(request, options, callback);
  }
  /**
   * Adds Events to the specified Execution. An Event indicates whether an
   * Artifact was used as an input or output for an Execution. If an Event
   * already exists between the Execution and the Artifact, the Event is
   * skipped.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.execution
   *   Required. The resource name of the Execution that the Events connect
   *   Artifacts with.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   * @param {number[]} request.events
   *   The Events to create and add.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.AddExecutionEventsResponse|AddExecutionEventsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.add_execution_events.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_AddExecutionEvents_async
   */
  addExecutionEvents(
    request?: protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  addExecutionEvents(
    request: protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  addExecutionEvents(
    request: protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  addExecutionEvents(
    request?: protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsResponse,
          | protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IAddExecutionEventsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        execution: request.execution ?? '',
      });
    this.initialize();
    return this.innerApiCalls.addExecutionEvents(request, options, callback);
  }
  /**
   * Obtains the set of input and output Artifacts for this Execution, in the
   * form of LineageSubgraph that also contains the Execution and connecting
   * Events.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.execution
   *   Required. The resource name of the Execution whose input and output
   *   Artifacts should be retrieved as a LineageSubgraph. Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.LineageSubgraph|LineageSubgraph}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.query_execution_inputs_and_outputs.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_QueryExecutionInputsAndOutputs_async
   */
  queryExecutionInputsAndOutputs(
    request?: protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      (
        | protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  queryExecutionInputsAndOutputs(
    request: protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  queryExecutionInputsAndOutputs(
    request: protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  queryExecutionInputsAndOutputs(
    request?: protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
          | protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      (
        | protos.google.cloud.aiplatform.v1beta1.IQueryExecutionInputsAndOutputsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        execution: request.execution ?? '',
      });
    this.initialize();
    return this.innerApiCalls.queryExecutionInputsAndOutputs(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a MetadataSchema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the MetadataStore where the MetadataSchema
   *   should be created. Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {google.cloud.aiplatform.v1beta1.MetadataSchema} request.metadataSchema
   *   Required. The MetadataSchema to create.
   * @param {string} request.metadataSchemaId
   *   The {metadata_schema} portion of the resource name with the format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}`
   *   If not provided, the MetadataStore's ID will be a UUID generated by the
   *   service.
   *   Must be 4-128 characters in length. Valid characters are `/{@link protos.0-9|a-z}-/`.
   *   Must be unique across all MetadataSchemas in the parent Location.
   *   (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
   *   if the caller can't view the preexisting MetadataSchema.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.MetadataSchema|MetadataSchema}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.create_metadata_schema.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_CreateMetadataSchema_async
   */
  createMetadataSchema(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createMetadataSchema(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      | protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createMetadataSchema(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      | protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createMetadataSchema(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
          | protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      | protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateMetadataSchemaRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createMetadataSchema(request, options, callback);
  }
  /**
   * Retrieves a specific MetadataSchema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the MetadataSchema to retrieve.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.MetadataSchema|MetadataSchema}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.get_metadata_schema.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_GetMetadataSchema_async
   */
  getMetadataSchema(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getMetadataSchema(
    request: protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      | protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMetadataSchema(
    request: protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      | protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMetadataSchema(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
          | protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      | protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetMetadataSchemaRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMetadataSchema(request, options, callback);
  }
  /**
   * Retrieves lineage of an Artifact represented through Artifacts and
   * Executions connected by Event edges and returned as a LineageSubgraph.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.artifact
   *   Required. The resource name of the Artifact whose Lineage needs to be
   *   retrieved as a LineageSubgraph. Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   *
   *   The request may error with FAILED_PRECONDITION if the number of Artifacts,
   *   the number of Executions, or the number of Events that would be returned
   *   for the Context exceeds 1000.
   * @param {number} request.maxHops
   *   Specifies the size of the lineage graph in terms of number of hops from the
   *   specified artifact.
   *   Negative Value: INVALID_ARGUMENT error is returned
   *   0: Only input artifact is returned.
   *   No value: Transitive closure is performed to return the complete graph.
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Artifacts to satisfy in
   *   order to be part of the Lineage Subgraph.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   The supported set of filters include the following:
   *
   *   *  **Attribute filtering**:
   *      For example: `display_name = "test"`
   *      Supported fields include: `name`, `display_name`, `uri`, `state`,
   *      `schema_title`, `create_time`, and `update_time`.
   *      Time fields, such as `create_time` and `update_time`, require values
   *      specified in RFC-3339 format.
   *      For example: `create_time = "2020-11-19T11:30:00-04:00"`
   *   *  **Metadata field**:
   *      To filter on metadata fields use traversal operation as follows:
   *      `metadata.<field_name>.<type_value>`.
   *      For example: `metadata.field_1.number_value = 10.0`
   *      In case the field name contains special characters (such as colon), one
   *      can embed it inside double quote.
   *      For example: `metadata."field:1".number_value = 10.0`
   *
   *   Each of the above supported filter types can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.LineageSubgraph|LineageSubgraph}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.query_artifact_lineage_subgraph.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_QueryArtifactLineageSubgraph_async
   */
  queryArtifactLineageSubgraph(
    request?: protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      (
        | protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  queryArtifactLineageSubgraph(
    request: protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  queryArtifactLineageSubgraph(
    request: protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  queryArtifactLineageSubgraph(
    request?: protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
          | protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      | protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ILineageSubgraph,
      (
        | protos.google.cloud.aiplatform.v1beta1.IQueryArtifactLineageSubgraphRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        artifact: request.artifact ?? '',
      });
    this.initialize();
    return this.innerApiCalls.queryArtifactLineageSubgraph(
      request,
      options,
      callback
    );
  }

  /**
   * Initializes a MetadataStore, including allocation of resources.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location where the MetadataStore should
   *   be created.
   *   Format: `projects/{project}/locations/{location}/`
   * @param {google.cloud.aiplatform.v1beta1.MetadataStore} request.metadataStore
   *   Required. The MetadataStore to create.
   * @param {string} request.metadataStoreId
   *   The {metadatastore} portion of the resource name with the format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   *   If not provided, the MetadataStore's ID will be a UUID generated by the
   *   service.
   *   Must be 4-128 characters in length. Valid characters are `/{@link protos.0-9|a-z}-/`.
   *   Must be unique across all MetadataStores in the parent Location.
   *   (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
   *   if the caller can't view the preexisting MetadataStore.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.create_metadata_store.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_CreateMetadataStore_async
   */
  createMetadataStore(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
        protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createMetadataStore(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
        protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMetadataStore(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
        protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMetadataStore(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
            protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
        protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IMetadataStore,
        protos.google.cloud.aiplatform.v1beta1.ICreateMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createMetadataStore(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createMetadataStore()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.create_metadata_store.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_CreateMetadataStore_async
   */
  async checkCreateMetadataStoreProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.aiplatform.v1beta1.MetadataStore,
      protos.google.cloud.aiplatform.v1beta1.CreateMetadataStoreOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createMetadataStore,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.aiplatform.v1beta1.MetadataStore,
      protos.google.cloud.aiplatform.v1beta1.CreateMetadataStoreOperationMetadata
    >;
  }
  /**
   * Deletes a single MetadataStore and all its child resources (Artifacts,
   * Executions, and Contexts).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the MetadataStore to delete.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {boolean} request.force
   *   Deprecated: Field is no longer supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.delete_metadata_store.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_DeleteMetadataStore_async
   */
  deleteMetadataStore(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteMetadataStore(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMetadataStore(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMetadataStore(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteMetadataStoreOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteMetadataStore(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteMetadataStore()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.delete_metadata_store.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_DeleteMetadataStore_async
   */
  async checkDeleteMetadataStoreProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteMetadataStore,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreOperationMetadata
    >;
  }
  /**
   * Deletes an Artifact.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Artifact to delete.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
   * @param {string} [request.etag]
   *   Optional. The etag of the Artifact to delete.
   *   If this is provided, it must match the server's etag. Otherwise, the
   *   request will fail with a FAILED_PRECONDITION.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.delete_artifact.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_DeleteArtifact_async
   */
  deleteArtifact(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteArtifactRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteArtifact(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteArtifactRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteArtifact(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteArtifactRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteArtifact(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteArtifactRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteArtifact(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteArtifact()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.delete_artifact.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_DeleteArtifact_async
   */
  async checkDeleteArtifactProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteArtifact,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >;
  }
  /**
   * Purges Artifacts.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The metadata store to purge Artifacts from.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {string} request.filter
   *   Required. A required filter matching the Artifacts to be purged.
   *   E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
   * @param {boolean} [request.force]
   *   Optional. Flag to indicate to actually perform the purge.
   *   If `force` is set to false, the method will return a sample of
   *   Artifact names that would be deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.purge_artifacts.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_PurgeArtifacts_async
   */
  purgeArtifacts(
    request?: protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  purgeArtifacts(
    request: protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  purgeArtifacts(
    request: protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  purgeArtifacts(
    request?: protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsResponse,
            protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.purgeArtifacts(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `purgeArtifacts()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.purge_artifacts.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_PurgeArtifacts_async
   */
  async checkPurgeArtifactsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.aiplatform.v1beta1.PurgeArtifactsResponse,
      protos.google.cloud.aiplatform.v1beta1.PurgeArtifactsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.purgeArtifacts,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.aiplatform.v1beta1.PurgeArtifactsResponse,
      protos.google.cloud.aiplatform.v1beta1.PurgeArtifactsMetadata
    >;
  }
  /**
   * Deletes a stored Context.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Context to delete.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
   * @param {boolean} request.force
   *   The force deletion semantics is still undefined.
   *   Users should not use this field.
   * @param {string} [request.etag]
   *   Optional. The etag of the Context to delete.
   *   If this is provided, it must match the server's etag. Otherwise, the
   *   request will fail with a FAILED_PRECONDITION.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.delete_context.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_DeleteContext_async
   */
  deleteContext(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteContextRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteContext(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteContextRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteContext(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteContextRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteContext(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteContextRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteContext(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteContext()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.delete_context.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_DeleteContext_async
   */
  async checkDeleteContextProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteContext,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >;
  }
  /**
   * Purges Contexts.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The metadata store to purge Contexts from.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {string} request.filter
   *   Required. A required filter matching the Contexts to be purged.
   *   E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
   * @param {boolean} [request.force]
   *   Optional. Flag to indicate to actually perform the purge.
   *   If `force` is set to false, the method will return a sample of
   *   Context names that would be deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.purge_contexts.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_PurgeContexts_async
   */
  purgeContexts(
    request?: protos.google.cloud.aiplatform.v1beta1.IPurgeContextsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  purgeContexts(
    request: protos.google.cloud.aiplatform.v1beta1.IPurgeContextsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  purgeContexts(
    request: protos.google.cloud.aiplatform.v1beta1.IPurgeContextsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  purgeContexts(
    request?: protos.google.cloud.aiplatform.v1beta1.IPurgeContextsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.aiplatform.v1beta1.IPurgeContextsResponse,
            protos.google.cloud.aiplatform.v1beta1.IPurgeContextsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeContextsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.purgeContexts(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `purgeContexts()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.purge_contexts.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_PurgeContexts_async
   */
  async checkPurgeContextsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.aiplatform.v1beta1.PurgeContextsResponse,
      protos.google.cloud.aiplatform.v1beta1.PurgeContextsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.purgeContexts,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.aiplatform.v1beta1.PurgeContextsResponse,
      protos.google.cloud.aiplatform.v1beta1.PurgeContextsMetadata
    >;
  }
  /**
   * Deletes an Execution.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Execution to delete.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
   * @param {string} [request.etag]
   *   Optional. The etag of the Execution to delete.
   *   If this is provided, it must match the server's etag. Otherwise, the
   *   request will fail with a FAILED_PRECONDITION.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.delete_execution.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_DeleteExecution_async
   */
  deleteExecution(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteExecutionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteExecution(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteExecutionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteExecution(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteExecutionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteExecution(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteExecutionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteExecution(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteExecution()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.delete_execution.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_DeleteExecution_async
   */
  async checkDeleteExecutionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteExecution,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >;
  }
  /**
   * Purges Executions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The metadata store to purge Executions from.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {string} request.filter
   *   Required. A required filter matching the Executions to be purged.
   *   E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
   * @param {boolean} [request.force]
   *   Optional. Flag to indicate to actually perform the purge.
   *   If `force` is set to false, the method will return a sample of
   *   Execution names that would be deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.purge_executions.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_PurgeExecutions_async
   */
  purgeExecutions(
    request?: protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  purgeExecutions(
    request: protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  purgeExecutions(
    request: protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  purgeExecutions(
    request?: protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsResponse,
            protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsResponse,
        protos.google.cloud.aiplatform.v1beta1.IPurgeExecutionsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.purgeExecutions(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `purgeExecutions()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.purge_executions.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_PurgeExecutions_async
   */
  async checkPurgeExecutionsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.aiplatform.v1beta1.PurgeExecutionsResponse,
      protos.google.cloud.aiplatform.v1beta1.PurgeExecutionsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.purgeExecutions,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.aiplatform.v1beta1.PurgeExecutionsResponse,
      protos.google.cloud.aiplatform.v1beta1.PurgeExecutionsMetadata
    >;
  }
  /**
   * Lists MetadataStores for a Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Location whose MetadataStores should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {number} request.pageSize
   *   The maximum number of Metadata Stores to return. The service may return
   *   fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores|MetadataService.ListMetadataStores}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1beta1.MetadataStore|MetadataStore}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMetadataStoresAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMetadataStores(
    request?: protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore[],
      protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresResponse,
    ]
  >;
  listMetadataStores(
    request: protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore
    >
  ): void;
  listMetadataStores(
    request: protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore
    >
  ): void;
  listMetadataStores(
    request?: protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.IMetadataStore
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataStore[],
      protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMetadataStores(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Location whose MetadataStores should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {number} request.pageSize
   *   The maximum number of Metadata Stores to return. The service may return
   *   fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores|MetadataService.ListMetadataStores}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1beta1.MetadataStore|MetadataStore} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMetadataStoresAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMetadataStoresStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMetadataStores'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMetadataStores.createStream(
      this.innerApiCalls.listMetadataStores as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMetadataStores`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Location whose MetadataStores should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {number} request.pageSize
   *   The maximum number of Metadata Stores to return. The service may return
   *   fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores|MetadataService.ListMetadataStores}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataStore|MetadataStore}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.list_metadata_stores.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_ListMetadataStores_async
   */
  listMetadataStoresAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListMetadataStoresRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IMetadataStore> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMetadataStores'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMetadataStores.asyncIterate(
      this.innerApiCalls['listMetadataStores'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IMetadataStore>;
  }
  /**
   * Lists Artifacts in the MetadataStore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Artifacts should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Artifacts to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts|MetadataService.ListArtifacts}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Artifacts to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   The supported set of filters include the following:
   *
   *   *   **Attribute filtering**:
   *       For example: `display_name = "test"`.
   *       Supported fields include: `name`, `display_name`, `uri`, `state`,
   *       `schema_title`, `create_time`, and `update_time`.
   *       Time fields, such as `create_time` and `update_time`, require values
   *       specified in RFC-3339 format.
   *       For example: `create_time = "2020-11-19T11:30:00-04:00"`
   *   *   **Metadata field**:
   *       To filter on metadata fields use traversal operation as follows:
   *       `metadata.<field_name>.<type_value>`.
   *       For example: `metadata.field_1.number_value = 10.0`
   *       In case the field name contains special characters (such as colon), one
   *       can embed it inside double quote.
   *       For example: `metadata."field:1".number_value = 10.0`
   *   *   **Context based filtering**:
   *       To filter Artifacts based on the contexts to which they belong, use the
   *       function operator with the full resource name
   *       `in_context(<context-name>)`.
   *       For example:
   *       `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
   *
   *   Each of the above supported filter types can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1beta1.Artifact|Artifact}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listArtifactsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listArtifacts(
    request?: protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IArtifact[],
      protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListArtifactsResponse,
    ]
  >;
  listArtifacts(
    request: protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListArtifactsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IArtifact
    >
  ): void;
  listArtifacts(
    request: protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListArtifactsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IArtifact
    >
  ): void;
  listArtifacts(
    request?: protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListArtifactsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.IArtifact
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListArtifactsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IArtifact
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IArtifact[],
      protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListArtifactsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listArtifacts(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Artifacts should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Artifacts to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts|MetadataService.ListArtifacts}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Artifacts to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   The supported set of filters include the following:
   *
   *   *   **Attribute filtering**:
   *       For example: `display_name = "test"`.
   *       Supported fields include: `name`, `display_name`, `uri`, `state`,
   *       `schema_title`, `create_time`, and `update_time`.
   *       Time fields, such as `create_time` and `update_time`, require values
   *       specified in RFC-3339 format.
   *       For example: `create_time = "2020-11-19T11:30:00-04:00"`
   *   *   **Metadata field**:
   *       To filter on metadata fields use traversal operation as follows:
   *       `metadata.<field_name>.<type_value>`.
   *       For example: `metadata.field_1.number_value = 10.0`
   *       In case the field name contains special characters (such as colon), one
   *       can embed it inside double quote.
   *       For example: `metadata."field:1".number_value = 10.0`
   *   *   **Context based filtering**:
   *       To filter Artifacts based on the contexts to which they belong, use the
   *       function operator with the full resource name
   *       `in_context(<context-name>)`.
   *       For example:
   *       `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
   *
   *   Each of the above supported filter types can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1beta1.Artifact|Artifact} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listArtifactsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listArtifactsStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listArtifacts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listArtifacts.createStream(
      this.innerApiCalls.listArtifacts as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listArtifacts`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Artifacts should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Artifacts to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts|MetadataService.ListArtifacts}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Artifacts to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   The supported set of filters include the following:
   *
   *   *   **Attribute filtering**:
   *       For example: `display_name = "test"`.
   *       Supported fields include: `name`, `display_name`, `uri`, `state`,
   *       `schema_title`, `create_time`, and `update_time`.
   *       Time fields, such as `create_time` and `update_time`, require values
   *       specified in RFC-3339 format.
   *       For example: `create_time = "2020-11-19T11:30:00-04:00"`
   *   *   **Metadata field**:
   *       To filter on metadata fields use traversal operation as follows:
   *       `metadata.<field_name>.<type_value>`.
   *       For example: `metadata.field_1.number_value = 10.0`
   *       In case the field name contains special characters (such as colon), one
   *       can embed it inside double quote.
   *       For example: `metadata."field:1".number_value = 10.0`
   *   *   **Context based filtering**:
   *       To filter Artifacts based on the contexts to which they belong, use the
   *       function operator with the full resource name
   *       `in_context(<context-name>)`.
   *       For example:
   *       `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
   *
   *   Each of the above supported filter types can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.aiplatform.v1beta1.Artifact|Artifact}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.list_artifacts.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_ListArtifacts_async
   */
  listArtifactsAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListArtifactsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IArtifact> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listArtifacts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listArtifacts.asyncIterate(
      this.innerApiCalls['listArtifacts'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IArtifact>;
  }
  /**
   * Lists Contexts on the MetadataStore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Contexts should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Contexts to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListContexts|MetadataService.ListContexts}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Contexts to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   Following are the supported set of filters:
   *
   *   *  **Attribute filtering**:
   *      For example: `display_name = "test"`.
   *      Supported fields include: `name`, `display_name`, `schema_title`,
   *      `create_time`, and `update_time`.
   *      Time fields, such as `create_time` and `update_time`, require values
   *      specified in RFC-3339 format.
   *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
   *   *  **Metadata field**:
   *      To filter on metadata fields use traversal operation as follows:
   *      `metadata.<field_name>.<type_value>`.
   *      For example: `metadata.field_1.number_value = 10.0`.
   *      In case the field name contains special characters (such as colon), one
   *      can embed it inside double quote.
   *      For example: `metadata."field:1".number_value = 10.0`
   *   *  **Parent Child filtering**:
   *      To filter Contexts based on parent-child relationship use the HAS
   *      operator as follows:
   *
   *      ```
   *      parent_contexts:
   *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
   *      child_contexts:
   *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
   *      ```
   *
   *   Each of the above supported filters can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1beta1.Context|Context}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listContextsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listContexts(
    request?: protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IContext[],
      protos.google.cloud.aiplatform.v1beta1.IListContextsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListContextsResponse,
    ]
  >;
  listContexts(
    request: protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListContextsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IContext
    >
  ): void;
  listContexts(
    request: protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListContextsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IContext
    >
  ): void;
  listContexts(
    request?: protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListContextsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.IContext
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListContextsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IContext
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IContext[],
      protos.google.cloud.aiplatform.v1beta1.IListContextsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListContextsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listContexts(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Contexts should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Contexts to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListContexts|MetadataService.ListContexts}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Contexts to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   Following are the supported set of filters:
   *
   *   *  **Attribute filtering**:
   *      For example: `display_name = "test"`.
   *      Supported fields include: `name`, `display_name`, `schema_title`,
   *      `create_time`, and `update_time`.
   *      Time fields, such as `create_time` and `update_time`, require values
   *      specified in RFC-3339 format.
   *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
   *   *  **Metadata field**:
   *      To filter on metadata fields use traversal operation as follows:
   *      `metadata.<field_name>.<type_value>`.
   *      For example: `metadata.field_1.number_value = 10.0`.
   *      In case the field name contains special characters (such as colon), one
   *      can embed it inside double quote.
   *      For example: `metadata."field:1".number_value = 10.0`
   *   *  **Parent Child filtering**:
   *      To filter Contexts based on parent-child relationship use the HAS
   *      operator as follows:
   *
   *      ```
   *      parent_contexts:
   *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
   *      child_contexts:
   *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
   *      ```
   *
   *   Each of the above supported filters can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1beta1.Context|Context} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listContextsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listContextsStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listContexts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listContexts.createStream(
      this.innerApiCalls.listContexts as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listContexts`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Contexts should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Contexts to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListContexts|MetadataService.ListContexts}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Contexts to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   Following are the supported set of filters:
   *
   *   *  **Attribute filtering**:
   *      For example: `display_name = "test"`.
   *      Supported fields include: `name`, `display_name`, `schema_title`,
   *      `create_time`, and `update_time`.
   *      Time fields, such as `create_time` and `update_time`, require values
   *      specified in RFC-3339 format.
   *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
   *   *  **Metadata field**:
   *      To filter on metadata fields use traversal operation as follows:
   *      `metadata.<field_name>.<type_value>`.
   *      For example: `metadata.field_1.number_value = 10.0`.
   *      In case the field name contains special characters (such as colon), one
   *      can embed it inside double quote.
   *      For example: `metadata."field:1".number_value = 10.0`
   *   *  **Parent Child filtering**:
   *      To filter Contexts based on parent-child relationship use the HAS
   *      operator as follows:
   *
   *      ```
   *      parent_contexts:
   *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
   *      child_contexts:
   *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
   *      ```
   *
   *   Each of the above supported filters can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.aiplatform.v1beta1.Context|Context}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.list_contexts.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_ListContexts_async
   */
  listContextsAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListContextsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IContext> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listContexts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listContexts.asyncIterate(
      this.innerApiCalls['listContexts'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IContext>;
  }
  /**
   * Lists Executions in the MetadataStore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Executions should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Executions to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions|MetadataService.ListExecutions}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with an
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Executions to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   Following are the supported set of filters:
   *
   *   *  **Attribute filtering**:
   *      For example: `display_name = "test"`.
   *      Supported fields include: `name`, `display_name`, `state`,
   *      `schema_title`, `create_time`, and `update_time`.
   *      Time fields, such as `create_time` and `update_time`, require values
   *      specified in RFC-3339 format.
   *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
   *   *  **Metadata field**:
   *      To filter on metadata fields use traversal operation as follows:
   *      `metadata.<field_name>.<type_value>`
   *      For example: `metadata.field_1.number_value = 10.0`
   *      In case the field name contains special characters (such as colon), one
   *      can embed it inside double quote.
   *      For example: `metadata."field:1".number_value = 10.0`
   *   *  **Context based filtering**:
   *      To filter Executions based on the contexts to which they belong use
   *      the function operator with the full resource name:
   *      `in_context(<context-name>)`.
   *      For example:
   *      `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
   *
   *   Each of the above supported filters can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1beta1.Execution|Execution}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listExecutionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listExecutions(
    request?: protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IExecution[],
      protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListExecutionsResponse,
    ]
  >;
  listExecutions(
    request: protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListExecutionsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IExecution
    >
  ): void;
  listExecutions(
    request: protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListExecutionsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IExecution
    >
  ): void;
  listExecutions(
    request?: protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListExecutionsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.IExecution
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListExecutionsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IExecution
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IExecution[],
      protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListExecutionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listExecutions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Executions should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Executions to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions|MetadataService.ListExecutions}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with an
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Executions to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   Following are the supported set of filters:
   *
   *   *  **Attribute filtering**:
   *      For example: `display_name = "test"`.
   *      Supported fields include: `name`, `display_name`, `state`,
   *      `schema_title`, `create_time`, and `update_time`.
   *      Time fields, such as `create_time` and `update_time`, require values
   *      specified in RFC-3339 format.
   *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
   *   *  **Metadata field**:
   *      To filter on metadata fields use traversal operation as follows:
   *      `metadata.<field_name>.<type_value>`
   *      For example: `metadata.field_1.number_value = 10.0`
   *      In case the field name contains special characters (such as colon), one
   *      can embed it inside double quote.
   *      For example: `metadata."field:1".number_value = 10.0`
   *   *  **Context based filtering**:
   *      To filter Executions based on the contexts to which they belong use
   *      the function operator with the full resource name:
   *      `in_context(<context-name>)`.
   *      For example:
   *      `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
   *
   *   Each of the above supported filters can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1beta1.Execution|Execution} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listExecutionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listExecutionsStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listExecutions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listExecutions.createStream(
      this.innerApiCalls.listExecutions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listExecutions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose Executions should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of Executions to return. The service may return fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions|MetadataService.ListExecutions}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with an
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   Filter specifying the boolean condition for the Executions to satisfy in
   *   order to be part of the result set.
   *   The syntax to define filter query is based on https://google.aip.dev/160.
   *   Following are the supported set of filters:
   *
   *   *  **Attribute filtering**:
   *      For example: `display_name = "test"`.
   *      Supported fields include: `name`, `display_name`, `state`,
   *      `schema_title`, `create_time`, and `update_time`.
   *      Time fields, such as `create_time` and `update_time`, require values
   *      specified in RFC-3339 format.
   *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
   *   *  **Metadata field**:
   *      To filter on metadata fields use traversal operation as follows:
   *      `metadata.<field_name>.<type_value>`
   *      For example: `metadata.field_1.number_value = 10.0`
   *      In case the field name contains special characters (such as colon), one
   *      can embed it inside double quote.
   *      For example: `metadata."field:1".number_value = 10.0`
   *   *  **Context based filtering**:
   *      To filter Executions based on the contexts to which they belong use
   *      the function operator with the full resource name:
   *      `in_context(<context-name>)`.
   *      For example:
   *      `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
   *
   *   Each of the above supported filters can be combined together using
   *   logical operators (`AND` & `OR`). Maximum nested expression depth allowed
   *   is 5.
   *
   *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
   * @param {string} request.orderBy
   *   How the list of messages is ordered. Specify the values to order by and an
   *   ordering operation. The default sorting order is ascending. To specify
   *   descending order for a field, users append a " desc" suffix; for example:
   *   "foo desc, bar".
   *   Subfields are specified with a `.` character, such as foo.bar.
   *   see https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.aiplatform.v1beta1.Execution|Execution}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.list_executions.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_ListExecutions_async
   */
  listExecutionsAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListExecutionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IExecution> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listExecutions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listExecutions.asyncIterate(
      this.innerApiCalls['listExecutions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IExecution>;
  }
  /**
   * Lists MetadataSchemas.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose MetadataSchemas should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of MetadataSchemas to return. The service may return
   *   fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas|MetadataService.ListMetadataSchemas}
   *   call. Provide this to retrieve the next page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   A query to filter available MetadataSchemas for matching results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1beta1.MetadataSchema|MetadataSchema}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMetadataSchemasAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMetadataSchemas(
    request?: protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema[],
      protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasResponse,
    ]
  >;
  listMetadataSchemas(
    request: protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema
    >
  ): void;
  listMetadataSchemas(
    request: protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema
    >
  ): void;
  listMetadataSchemas(
    request?: protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.IMetadataSchema
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IMetadataSchema[],
      protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMetadataSchemas(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose MetadataSchemas should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of MetadataSchemas to return. The service may return
   *   fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas|MetadataService.ListMetadataSchemas}
   *   call. Provide this to retrieve the next page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   A query to filter available MetadataSchemas for matching results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1beta1.MetadataSchema|MetadataSchema} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMetadataSchemasAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMetadataSchemasStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMetadataSchemas'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMetadataSchemas.createStream(
      this.innerApiCalls.listMetadataSchemas as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMetadataSchemas`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The MetadataStore whose MetadataSchemas should be listed.
   *   Format:
   *   `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
   * @param {number} request.pageSize
   *   The maximum number of MetadataSchemas to return. The service may return
   *   fewer.
   *   Must be in range 1-1000, inclusive. Defaults to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas|MetadataService.ListMetadataSchemas}
   *   call. Provide this to retrieve the next page.
   *
   *   When paginating, all other provided parameters must match the call that
   *   provided the page token. (Otherwise the request will fail with
   *   INVALID_ARGUMENT error.)
   * @param {string} request.filter
   *   A query to filter available MetadataSchemas for matching results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.aiplatform.v1beta1.MetadataSchema|MetadataSchema}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/metadata_service.list_metadata_schemas.js</caption>
   * region_tag:aiplatform_v1beta1_generated_MetadataService_ListMetadataSchemas_async
   */
  listMetadataSchemasAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListMetadataSchemasRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IMetadataSchema> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMetadataSchemas'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMetadataSchemas.asyncIterate(
      this.innerApiCalls['listMetadataSchemas'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IMetadataSchema>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(
    project: string,
    location: string,
    dataset: string,
    dataItem: string,
    annotation: string
  ) {
    return this.pathTemplates.annotationPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
      annotation: annotation,
    });
  }

  /**
   * Parse the project from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .project;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .location;
  }

  /**
   * Parse the dataset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .dataset;
  }

  /**
   * Parse the data_item from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .data_item;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .annotation;
  }

  /**
   * Return a fully-qualified annotationSpec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} annotation_spec
   * @returns {string} Resource name string.
   */
  annotationSpecPath(
    project: string,
    location: string,
    dataset: string,
    annotationSpec: string
  ) {
    return this.pathTemplates.annotationSpecPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      annotation_spec: annotationSpec,
    });
  }

  /**
   * Parse the project from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).project;
  }

  /**
   * Parse the location from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).location;
  }

  /**
   * Parse the dataset from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).dataset;
  }

  /**
   * Parse the annotation_spec from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the annotation_spec.
   */
  matchAnnotationSpecFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).annotation_spec;
  }

  /**
   * Return a fully-qualified artifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  artifactPath(
    project: string,
    location: string,
    metadataStore: string,
    artifact: string
  ) {
    return this.pathTemplates.artifactPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).project;
  }

  /**
   * Parse the location from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).location;
  }

  /**
   * Parse the metadata_store from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName)
      .metadata_store;
  }

  /**
   * Parse the artifact from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).artifact;
  }

  /**
   * Return a fully-qualified batchPredictionJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} batch_prediction_job
   * @returns {string} Resource name string.
   */
  batchPredictionJobPath(
    project: string,
    location: string,
    batchPredictionJob: string
  ) {
    return this.pathTemplates.batchPredictionJobPathTemplate.render({
      project: project,
      location: location,
      batch_prediction_job: batchPredictionJob,
    });
  }

  /**
   * Parse the project from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).project;
  }

  /**
   * Parse the location from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).location;
  }

  /**
   * Parse the batch_prediction_job from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the batch_prediction_job.
   */
  matchBatchPredictionJobFromBatchPredictionJobName(
    batchPredictionJobName: string
  ) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).batch_prediction_job;
  }

  /**
   * Return a fully-qualified context resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} context
   * @returns {string} Resource name string.
   */
  contextPath(
    project: string,
    location: string,
    metadataStore: string,
    context: string
  ) {
    return this.pathTemplates.contextPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      context: context,
    });
  }

  /**
   * Parse the project from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).project;
  }

  /**
   * Parse the location from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).location;
  }

  /**
   * Parse the metadata_store from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName)
      .metadata_store;
  }

  /**
   * Parse the context from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the context.
   */
  matchContextFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).context;
  }

  /**
   * Return a fully-qualified customJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} custom_job
   * @returns {string} Resource name string.
   */
  customJobPath(project: string, location: string, customJob: string) {
    return this.pathTemplates.customJobPathTemplate.render({
      project: project,
      location: location,
      custom_job: customJob,
    });
  }

  /**
   * Parse the project from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .project;
  }

  /**
   * Parse the location from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .location;
  }

  /**
   * Parse the custom_job from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the custom_job.
   */
  matchCustomJobFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .custom_job;
  }

  /**
   * Return a fully-qualified dataItem resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @returns {string} Resource name string.
   */
  dataItemPath(
    project: string,
    location: string,
    dataset: string,
    dataItem: string
  ) {
    return this.pathTemplates.dataItemPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
    });
  }

  /**
   * Parse the project from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).project;
  }

  /**
   * Parse the location from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).location;
  }

  /**
   * Parse the dataset from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).dataset;
  }

  /**
   * Parse the data_item from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName)
      .data_item;
  }

  /**
   * Return a fully-qualified dataLabelingJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_labeling_job
   * @returns {string} Resource name string.
   */
  dataLabelingJobPath(
    project: string,
    location: string,
    dataLabelingJob: string
  ) {
    return this.pathTemplates.dataLabelingJobPathTemplate.render({
      project: project,
      location: location,
      data_labeling_job: dataLabelingJob,
    });
  }

  /**
   * Parse the project from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).project;
  }

  /**
   * Parse the location from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).location;
  }

  /**
   * Parse the data_labeling_job from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the data_labeling_job.
   */
  matchDataLabelingJobFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).data_labeling_job;
  }

  /**
   * Return a fully-qualified dataset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @returns {string} Resource name string.
   */
  datasetPath(project: string, location: string, dataset: string) {
    return this.pathTemplates.datasetPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
    });
  }

  /**
   * Parse the project from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
  }

  /**
   * Parse the location from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).location;
  }

  /**
   * Parse the dataset from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
  }

  /**
   * Return a fully-qualified datasetVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} dataset_version
   * @returns {string} Resource name string.
   */
  datasetVersionPath(
    project: string,
    location: string,
    dataset: string,
    datasetVersion: string
  ) {
    return this.pathTemplates.datasetVersionPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      dataset_version: datasetVersion,
    });
  }

  /**
   * Parse the project from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(
      datasetVersionName
    ).project;
  }

  /**
   * Parse the location from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(
      datasetVersionName
    ).location;
  }

  /**
   * Parse the dataset from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(
      datasetVersionName
    ).dataset;
  }

  /**
   * Parse the dataset_version from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the dataset_version.
   */
  matchDatasetVersionFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(
      datasetVersionName
    ).dataset_version;
  }

  /**
   * Return a fully-qualified deploymentResourcePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment_resource_pool
   * @returns {string} Resource name string.
   */
  deploymentResourcePoolPath(
    project: string,
    location: string,
    deploymentResourcePool: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.render({
      project: project,
      location: location,
      deployment_resource_pool: deploymentResourcePool,
    });
  }

  /**
   * Parse the project from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).project;
  }

  /**
   * Parse the location from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).location;
  }

  /**
   * Parse the deployment_resource_pool from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the deployment_resource_pool.
   */
  matchDeploymentResourcePoolFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).deployment_resource_pool;
  }

  /**
   * Return a fully-qualified entityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  entityTypePath(
    project: string,
    location: string,
    featurestore: string,
    entityType: string
  ) {
    return this.pathTemplates.entityTypePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
      entity_type: entityType,
    });
  }

  /**
   * Parse the project from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .project;
  }

  /**
   * Parse the location from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .location;
  }

  /**
   * Parse the featurestore from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .featurestore;
  }

  /**
   * Parse the entity_type from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .entity_type;
  }

  /**
   * Return a fully-qualified execution resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} execution
   * @returns {string} Resource name string.
   */
  executionPath(
    project: string,
    location: string,
    metadataStore: string,
    execution: string
  ) {
    return this.pathTemplates.executionPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      execution: execution,
    });
  }

  /**
   * Parse the project from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .project;
  }

  /**
   * Parse the location from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .location;
  }

  /**
   * Parse the metadata_store from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .metadata_store;
  }

  /**
   * Parse the execution from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the execution.
   */
  matchExecutionFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .execution;
  }

  /**
   * Return a fully-qualified extension resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} extension
   * @returns {string} Resource name string.
   */
  extensionPath(project: string, location: string, extension: string) {
    return this.pathTemplates.extensionPathTemplate.render({
      project: project,
      location: location,
      extension: extension,
    });
  }

  /**
   * Parse the project from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName)
      .project;
  }

  /**
   * Parse the location from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName)
      .location;
  }

  /**
   * Parse the extension from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the extension.
   */
  matchExtensionFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName)
      .extension;
  }

  /**
   * Return a fully-qualified featureGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_group
   * @returns {string} Resource name string.
   */
  featureGroupPath(project: string, location: string, featureGroup: string) {
    return this.pathTemplates.featureGroupPathTemplate.render({
      project: project,
      location: location,
      feature_group: featureGroup,
    });
  }

  /**
   * Parse the project from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName)
      .project;
  }

  /**
   * Parse the location from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName)
      .location;
  }

  /**
   * Parse the feature_group from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the feature_group.
   */
  matchFeatureGroupFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName)
      .feature_group;
  }

  /**
   * Return a fully-qualified featureOnlineStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @returns {string} Resource name string.
   */
  featureOnlineStorePath(
    project: string,
    location: string,
    featureOnlineStore: string
  ) {
    return this.pathTemplates.featureOnlineStorePathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
    });
  }

  /**
   * Parse the project from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureOnlineStoreName(featureOnlineStoreName: string) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(
      featureOnlineStoreName
    ).project;
  }

  /**
   * Parse the location from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureOnlineStoreName(featureOnlineStoreName: string) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(
      featureOnlineStoreName
    ).location;
  }

  /**
   * Parse the feature_online_store from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureOnlineStoreName(
    featureOnlineStoreName: string
  ) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(
      featureOnlineStoreName
    ).feature_online_store;
  }

  /**
   * Return a fully-qualified featureView resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @param {string} feature_view
   * @returns {string} Resource name string.
   */
  featureViewPath(
    project: string,
    location: string,
    featureOnlineStore: string,
    featureView: string
  ) {
    return this.pathTemplates.featureViewPathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
      feature_view: featureView,
    });
  }

  /**
   * Parse the project from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName)
      .project;
  }

  /**
   * Parse the location from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName)
      .location;
  }

  /**
   * Parse the feature_online_store from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName)
      .feature_online_store;
  }

  /**
   * Parse the feature_view from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the feature_view.
   */
  matchFeatureViewFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName)
      .feature_view;
  }

  /**
   * Return a fully-qualified featureViewSync resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @param {string} feature_view
   * @returns {string} Resource name string.
   */
  featureViewSyncPath(
    project: string,
    location: string,
    featureOnlineStore: string,
    featureView: string
  ) {
    return this.pathTemplates.featureViewSyncPathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
      feature_view: featureView,
    });
  }

  /**
   * Parse the project from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(
      featureViewSyncName
    ).project;
  }

  /**
   * Parse the location from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(
      featureViewSyncName
    ).location;
  }

  /**
   * Parse the feature_online_store from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(
      featureViewSyncName
    ).feature_online_store;
  }

  /**
   * Parse the feature_view from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the feature_view.
   */
  matchFeatureViewFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(
      featureViewSyncName
    ).feature_view;
  }

  /**
   * Return a fully-qualified featurestore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @returns {string} Resource name string.
   */
  featurestorePath(project: string, location: string, featurestore: string) {
    return this.pathTemplates.featurestorePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
    });
  }

  /**
   * Parse the project from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .project;
  }

  /**
   * Parse the location from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .location;
  }

  /**
   * Parse the featurestore from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .featurestore;
  }

  /**
   * Return a fully-qualified hyperparameterTuningJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} hyperparameter_tuning_job
   * @returns {string} Resource name string.
   */
  hyperparameterTuningJobPath(
    project: string,
    location: string,
    hyperparameterTuningJob: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.render({
      project: project,
      location: location,
      hyperparameter_tuning_job: hyperparameterTuningJob,
    });
  }

  /**
   * Parse the project from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).project;
  }

  /**
   * Parse the location from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).location;
  }

  /**
   * Parse the hyperparameter_tuning_job from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the hyperparameter_tuning_job.
   */
  matchHyperparameterTuningJobFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).hyperparameter_tuning_job;
  }

  /**
   * Return a fully-qualified index resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} index
   * @returns {string} Resource name string.
   */
  indexPath(project: string, location: string, index: string) {
    return this.pathTemplates.indexPathTemplate.render({
      project: project,
      location: location,
      index: index,
    });
  }

  /**
   * Parse the project from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).project;
  }

  /**
   * Parse the location from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).location;
  }

  /**
   * Parse the index from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the index.
   */
  matchIndexFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).index;
  }

  /**
   * Return a fully-qualified indexEndpoint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} index_endpoint
   * @returns {string} Resource name string.
   */
  indexEndpointPath(project: string, location: string, indexEndpoint: string) {
    return this.pathTemplates.indexEndpointPathTemplate.render({
      project: project,
      location: location,
      index_endpoint: indexEndpoint,
    });
  }

  /**
   * Parse the project from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .project;
  }

  /**
   * Parse the location from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .location;
  }

  /**
   * Parse the index_endpoint from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the index_endpoint.
   */
  matchIndexEndpointFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .index_endpoint;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified metadataSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} metadata_schema
   * @returns {string} Resource name string.
   */
  metadataSchemaPath(
    project: string,
    location: string,
    metadataStore: string,
    metadataSchema: string
  ) {
    return this.pathTemplates.metadataSchemaPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      metadata_schema: metadataSchema,
    });
  }

  /**
   * Parse the project from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).project;
  }

  /**
   * Parse the location from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).location;
  }

  /**
   * Parse the metadata_store from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).metadata_store;
  }

  /**
   * Parse the metadata_schema from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the metadata_schema.
   */
  matchMetadataSchemaFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).metadata_schema;
  }

  /**
   * Return a fully-qualified metadataStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @returns {string} Resource name string.
   */
  metadataStorePath(project: string, location: string, metadataStore: string) {
    return this.pathTemplates.metadataStorePathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
    });
  }

  /**
   * Parse the project from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .project;
  }

  /**
   * Parse the location from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .location;
  }

  /**
   * Parse the metadata_store from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .metadata_store;
  }

  /**
   * Return a fully-qualified model resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @returns {string} Resource name string.
   */
  modelPath(project: string, location: string, model: string) {
    return this.pathTemplates.modelPathTemplate.render({
      project: project,
      location: location,
      model: model,
    });
  }

  /**
   * Parse the project from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).project;
  }

  /**
   * Parse the location from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).location;
  }

  /**
   * Parse the model from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).model;
  }

  /**
   * Return a fully-qualified modelDeploymentMonitoringJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model_deployment_monitoring_job
   * @returns {string} Resource name string.
   */
  modelDeploymentMonitoringJobPath(
    project: string,
    location: string,
    modelDeploymentMonitoringJob: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.render({
      project: project,
      location: location,
      model_deployment_monitoring_job: modelDeploymentMonitoringJob,
    });
  }

  /**
   * Parse the project from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).project;
  }

  /**
   * Parse the location from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).location;
  }

  /**
   * Parse the model_deployment_monitoring_job from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the model_deployment_monitoring_job.
   */
  matchModelDeploymentMonitoringJobFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).model_deployment_monitoring_job;
  }

  /**
   * Return a fully-qualified modelEvaluation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @param {string} evaluation
   * @returns {string} Resource name string.
   */
  modelEvaluationPath(
    project: string,
    location: string,
    model: string,
    evaluation: string
  ) {
    return this.pathTemplates.modelEvaluationPathTemplate.render({
      project: project,
      location: location,
      model: model,
      evaluation: evaluation,
    });
  }

  /**
   * Parse the project from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).project;
  }

  /**
   * Parse the location from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).location;
  }

  /**
   * Parse the model from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).model;
  }

  /**
   * Parse the evaluation from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the evaluation.
   */
  matchEvaluationFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).evaluation;
  }

  /**
   * Return a fully-qualified modelEvaluationSlice resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @param {string} evaluation
   * @param {string} slice
   * @returns {string} Resource name string.
   */
  modelEvaluationSlicePath(
    project: string,
    location: string,
    model: string,
    evaluation: string,
    slice: string
  ) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.render({
      project: project,
      location: location,
      model: model,
      evaluation: evaluation,
      slice: slice,
    });
  }

  /**
   * Parse the project from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).project;
  }

  /**
   * Parse the location from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).location;
  }

  /**
   * Parse the model from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).model;
  }

  /**
   * Parse the evaluation from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the evaluation.
   */
  matchEvaluationFromModelEvaluationSliceName(
    modelEvaluationSliceName: string
  ) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).evaluation;
  }

  /**
   * Parse the slice from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the slice.
   */
  matchSliceFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).slice;
  }

  /**
   * Return a fully-qualified modelMonitor resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model_monitor
   * @returns {string} Resource name string.
   */
  modelMonitorPath(project: string, location: string, modelMonitor: string) {
    return this.pathTemplates.modelMonitorPathTemplate.render({
      project: project,
      location: location,
      model_monitor: modelMonitor,
    });
  }

  /**
   * Parse the project from ModelMonitor resource.
   *
   * @param {string} modelMonitorName
   *   A fully-qualified path representing ModelMonitor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelMonitorName(modelMonitorName: string) {
    return this.pathTemplates.modelMonitorPathTemplate.match(modelMonitorName)
      .project;
  }

  /**
   * Parse the location from ModelMonitor resource.
   *
   * @param {string} modelMonitorName
   *   A fully-qualified path representing ModelMonitor resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelMonitorName(modelMonitorName: string) {
    return this.pathTemplates.modelMonitorPathTemplate.match(modelMonitorName)
      .location;
  }

  /**
   * Parse the model_monitor from ModelMonitor resource.
   *
   * @param {string} modelMonitorName
   *   A fully-qualified path representing ModelMonitor resource.
   * @returns {string} A string representing the model_monitor.
   */
  matchModelMonitorFromModelMonitorName(modelMonitorName: string) {
    return this.pathTemplates.modelMonitorPathTemplate.match(modelMonitorName)
      .model_monitor;
  }

  /**
   * Return a fully-qualified modelMonitoringJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model_monitor
   * @param {string} model_monitoring_job
   * @returns {string} Resource name string.
   */
  modelMonitoringJobPath(
    project: string,
    location: string,
    modelMonitor: string,
    modelMonitoringJob: string
  ) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.render({
      project: project,
      location: location,
      model_monitor: modelMonitor,
      model_monitoring_job: modelMonitoringJob,
    });
  }

  /**
   * Parse the project from ModelMonitoringJob resource.
   *
   * @param {string} modelMonitoringJobName
   *   A fully-qualified path representing ModelMonitoringJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelMonitoringJobName(modelMonitoringJobName: string) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.match(
      modelMonitoringJobName
    ).project;
  }

  /**
   * Parse the location from ModelMonitoringJob resource.
   *
   * @param {string} modelMonitoringJobName
   *   A fully-qualified path representing ModelMonitoringJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelMonitoringJobName(modelMonitoringJobName: string) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.match(
      modelMonitoringJobName
    ).location;
  }

  /**
   * Parse the model_monitor from ModelMonitoringJob resource.
   *
   * @param {string} modelMonitoringJobName
   *   A fully-qualified path representing ModelMonitoringJob resource.
   * @returns {string} A string representing the model_monitor.
   */
  matchModelMonitorFromModelMonitoringJobName(modelMonitoringJobName: string) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.match(
      modelMonitoringJobName
    ).model_monitor;
  }

  /**
   * Parse the model_monitoring_job from ModelMonitoringJob resource.
   *
   * @param {string} modelMonitoringJobName
   *   A fully-qualified path representing ModelMonitoringJob resource.
   * @returns {string} A string representing the model_monitoring_job.
   */
  matchModelMonitoringJobFromModelMonitoringJobName(
    modelMonitoringJobName: string
  ) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.match(
      modelMonitoringJobName
    ).model_monitoring_job;
  }

  /**
   * Return a fully-qualified nasJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} nas_job
   * @returns {string} Resource name string.
   */
  nasJobPath(project: string, location: string, nasJob: string) {
    return this.pathTemplates.nasJobPathTemplate.render({
      project: project,
      location: location,
      nas_job: nasJob,
    });
  }

  /**
   * Parse the project from NasJob resource.
   *
   * @param {string} nasJobName
   *   A fully-qualified path representing NasJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNasJobName(nasJobName: string) {
    return this.pathTemplates.nasJobPathTemplate.match(nasJobName).project;
  }

  /**
   * Parse the location from NasJob resource.
   *
   * @param {string} nasJobName
   *   A fully-qualified path representing NasJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNasJobName(nasJobName: string) {
    return this.pathTemplates.nasJobPathTemplate.match(nasJobName).location;
  }

  /**
   * Parse the nas_job from NasJob resource.
   *
   * @param {string} nasJobName
   *   A fully-qualified path representing NasJob resource.
   * @returns {string} A string representing the nas_job.
   */
  matchNasJobFromNasJobName(nasJobName: string) {
    return this.pathTemplates.nasJobPathTemplate.match(nasJobName).nas_job;
  }

  /**
   * Return a fully-qualified nasTrialDetail resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} nas_job
   * @param {string} nas_trial_detail
   * @returns {string} Resource name string.
   */
  nasTrialDetailPath(
    project: string,
    location: string,
    nasJob: string,
    nasTrialDetail: string
  ) {
    return this.pathTemplates.nasTrialDetailPathTemplate.render({
      project: project,
      location: location,
      nas_job: nasJob,
      nas_trial_detail: nasTrialDetail,
    });
  }

  /**
   * Parse the project from NasTrialDetail resource.
   *
   * @param {string} nasTrialDetailName
   *   A fully-qualified path representing NasTrialDetail resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNasTrialDetailName(nasTrialDetailName: string) {
    return this.pathTemplates.nasTrialDetailPathTemplate.match(
      nasTrialDetailName
    ).project;
  }

  /**
   * Parse the location from NasTrialDetail resource.
   *
   * @param {string} nasTrialDetailName
   *   A fully-qualified path representing NasTrialDetail resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNasTrialDetailName(nasTrialDetailName: string) {
    return this.pathTemplates.nasTrialDetailPathTemplate.match(
      nasTrialDetailName
    ).location;
  }

  /**
   * Parse the nas_job from NasTrialDetail resource.
   *
   * @param {string} nasTrialDetailName
   *   A fully-qualified path representing NasTrialDetail resource.
   * @returns {string} A string representing the nas_job.
   */
  matchNasJobFromNasTrialDetailName(nasTrialDetailName: string) {
    return this.pathTemplates.nasTrialDetailPathTemplate.match(
      nasTrialDetailName
    ).nas_job;
  }

  /**
   * Parse the nas_trial_detail from NasTrialDetail resource.
   *
   * @param {string} nasTrialDetailName
   *   A fully-qualified path representing NasTrialDetail resource.
   * @returns {string} A string representing the nas_trial_detail.
   */
  matchNasTrialDetailFromNasTrialDetailName(nasTrialDetailName: string) {
    return this.pathTemplates.nasTrialDetailPathTemplate.match(
      nasTrialDetailName
    ).nas_trial_detail;
  }

  /**
   * Return a fully-qualified notebookExecutionJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} notebook_execution_job
   * @returns {string} Resource name string.
   */
  notebookExecutionJobPath(
    project: string,
    location: string,
    notebookExecutionJob: string
  ) {
    return this.pathTemplates.notebookExecutionJobPathTemplate.render({
      project: project,
      location: location,
      notebook_execution_job: notebookExecutionJob,
    });
  }

  /**
   * Parse the project from NotebookExecutionJob resource.
   *
   * @param {string} notebookExecutionJobName
   *   A fully-qualified path representing NotebookExecutionJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNotebookExecutionJobName(notebookExecutionJobName: string) {
    return this.pathTemplates.notebookExecutionJobPathTemplate.match(
      notebookExecutionJobName
    ).project;
  }

  /**
   * Parse the location from NotebookExecutionJob resource.
   *
   * @param {string} notebookExecutionJobName
   *   A fully-qualified path representing NotebookExecutionJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNotebookExecutionJobName(notebookExecutionJobName: string) {
    return this.pathTemplates.notebookExecutionJobPathTemplate.match(
      notebookExecutionJobName
    ).location;
  }

  /**
   * Parse the notebook_execution_job from NotebookExecutionJob resource.
   *
   * @param {string} notebookExecutionJobName
   *   A fully-qualified path representing NotebookExecutionJob resource.
   * @returns {string} A string representing the notebook_execution_job.
   */
  matchNotebookExecutionJobFromNotebookExecutionJobName(
    notebookExecutionJobName: string
  ) {
    return this.pathTemplates.notebookExecutionJobPathTemplate.match(
      notebookExecutionJobName
    ).notebook_execution_job;
  }

  /**
   * Return a fully-qualified notebookRuntime resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} notebook_runtime
   * @returns {string} Resource name string.
   */
  notebookRuntimePath(
    project: string,
    location: string,
    notebookRuntime: string
  ) {
    return this.pathTemplates.notebookRuntimePathTemplate.render({
      project: project,
      location: location,
      notebook_runtime: notebookRuntime,
    });
  }

  /**
   * Parse the project from NotebookRuntime resource.
   *
   * @param {string} notebookRuntimeName
   *   A fully-qualified path representing NotebookRuntime resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNotebookRuntimeName(notebookRuntimeName: string) {
    return this.pathTemplates.notebookRuntimePathTemplate.match(
      notebookRuntimeName
    ).project;
  }

  /**
   * Parse the location from NotebookRuntime resource.
   *
   * @param {string} notebookRuntimeName
   *   A fully-qualified path representing NotebookRuntime resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNotebookRuntimeName(notebookRuntimeName: string) {
    return this.pathTemplates.notebookRuntimePathTemplate.match(
      notebookRuntimeName
    ).location;
  }

  /**
   * Parse the notebook_runtime from NotebookRuntime resource.
   *
   * @param {string} notebookRuntimeName
   *   A fully-qualified path representing NotebookRuntime resource.
   * @returns {string} A string representing the notebook_runtime.
   */
  matchNotebookRuntimeFromNotebookRuntimeName(notebookRuntimeName: string) {
    return this.pathTemplates.notebookRuntimePathTemplate.match(
      notebookRuntimeName
    ).notebook_runtime;
  }

  /**
   * Return a fully-qualified notebookRuntimeTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} notebook_runtime_template
   * @returns {string} Resource name string.
   */
  notebookRuntimeTemplatePath(
    project: string,
    location: string,
    notebookRuntimeTemplate: string
  ) {
    return this.pathTemplates.notebookRuntimeTemplatePathTemplate.render({
      project: project,
      location: location,
      notebook_runtime_template: notebookRuntimeTemplate,
    });
  }

  /**
   * Parse the project from NotebookRuntimeTemplate resource.
   *
   * @param {string} notebookRuntimeTemplateName
   *   A fully-qualified path representing NotebookRuntimeTemplate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNotebookRuntimeTemplateName(
    notebookRuntimeTemplateName: string
  ) {
    return this.pathTemplates.notebookRuntimeTemplatePathTemplate.match(
      notebookRuntimeTemplateName
    ).project;
  }

  /**
   * Parse the location from NotebookRuntimeTemplate resource.
   *
   * @param {string} notebookRuntimeTemplateName
   *   A fully-qualified path representing NotebookRuntimeTemplate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNotebookRuntimeTemplateName(
    notebookRuntimeTemplateName: string
  ) {
    return this.pathTemplates.notebookRuntimeTemplatePathTemplate.match(
      notebookRuntimeTemplateName
    ).location;
  }

  /**
   * Parse the notebook_runtime_template from NotebookRuntimeTemplate resource.
   *
   * @param {string} notebookRuntimeTemplateName
   *   A fully-qualified path representing NotebookRuntimeTemplate resource.
   * @returns {string} A string representing the notebook_runtime_template.
   */
  matchNotebookRuntimeTemplateFromNotebookRuntimeTemplateName(
    notebookRuntimeTemplateName: string
  ) {
    return this.pathTemplates.notebookRuntimeTemplatePathTemplate.match(
      notebookRuntimeTemplateName
    ).notebook_runtime_template;
  }

  /**
   * Return a fully-qualified persistentResource resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} persistent_resource
   * @returns {string} Resource name string.
   */
  persistentResourcePath(
    project: string,
    location: string,
    persistentResource: string
  ) {
    return this.pathTemplates.persistentResourcePathTemplate.render({
      project: project,
      location: location,
      persistent_resource: persistentResource,
    });
  }

  /**
   * Parse the project from PersistentResource resource.
   *
   * @param {string} persistentResourceName
   *   A fully-qualified path representing PersistentResource resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPersistentResourceName(persistentResourceName: string) {
    return this.pathTemplates.persistentResourcePathTemplate.match(
      persistentResourceName
    ).project;
  }

  /**
   * Parse the location from PersistentResource resource.
   *
   * @param {string} persistentResourceName
   *   A fully-qualified path representing PersistentResource resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPersistentResourceName(persistentResourceName: string) {
    return this.pathTemplates.persistentResourcePathTemplate.match(
      persistentResourceName
    ).location;
  }

  /**
   * Parse the persistent_resource from PersistentResource resource.
   *
   * @param {string} persistentResourceName
   *   A fully-qualified path representing PersistentResource resource.
   * @returns {string} A string representing the persistent_resource.
   */
  matchPersistentResourceFromPersistentResourceName(
    persistentResourceName: string
  ) {
    return this.pathTemplates.persistentResourcePathTemplate.match(
      persistentResourceName
    ).persistent_resource;
  }

  /**
   * Return a fully-qualified pipelineJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} pipeline_job
   * @returns {string} Resource name string.
   */
  pipelineJobPath(project: string, location: string, pipelineJob: string) {
    return this.pathTemplates.pipelineJobPathTemplate.render({
      project: project,
      location: location,
      pipeline_job: pipelineJob,
    });
  }

  /**
   * Parse the project from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .project;
  }

  /**
   * Parse the location from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .location;
  }

  /**
   * Parse the pipeline_job from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the pipeline_job.
   */
  matchPipelineJobFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .pipeline_job;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationEndpoint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} endpoint
   * @returns {string} Resource name string.
   */
  projectLocationEndpointPath(
    project: string,
    location: string,
    endpoint: string
  ) {
    return this.pathTemplates.projectLocationEndpointPathTemplate.render({
      project: project,
      location: location,
      endpoint: endpoint,
    });
  }

  /**
   * Parse the project from ProjectLocationEndpoint resource.
   *
   * @param {string} projectLocationEndpointName
   *   A fully-qualified path representing project_location_endpoint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationEndpointName(
    projectLocationEndpointName: string
  ) {
    return this.pathTemplates.projectLocationEndpointPathTemplate.match(
      projectLocationEndpointName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationEndpoint resource.
   *
   * @param {string} projectLocationEndpointName
   *   A fully-qualified path representing project_location_endpoint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationEndpointName(
    projectLocationEndpointName: string
  ) {
    return this.pathTemplates.projectLocationEndpointPathTemplate.match(
      projectLocationEndpointName
    ).location;
  }

  /**
   * Parse the endpoint from ProjectLocationEndpoint resource.
   *
   * @param {string} projectLocationEndpointName
   *   A fully-qualified path representing project_location_endpoint resource.
   * @returns {string} A string representing the endpoint.
   */
  matchEndpointFromProjectLocationEndpointName(
    projectLocationEndpointName: string
  ) {
    return this.pathTemplates.projectLocationEndpointPathTemplate.match(
      projectLocationEndpointName
    ).endpoint;
  }

  /**
   * Return a fully-qualified projectLocationFeatureGroupFeature resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_group
   * @param {string} feature
   * @returns {string} Resource name string.
   */
  projectLocationFeatureGroupFeaturePath(
    project: string,
    location: string,
    featureGroup: string,
    feature: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.render(
      {
        project: project,
        location: location,
        feature_group: featureGroup,
        feature: feature,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationFeatureGroupFeature resource.
   *
   * @param {string} projectLocationFeatureGroupFeatureName
   *   A fully-qualified path representing project_location_feature_group_feature resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationFeatureGroupFeatureName(
    projectLocationFeatureGroupFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.match(
      projectLocationFeatureGroupFeatureName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationFeatureGroupFeature resource.
   *
   * @param {string} projectLocationFeatureGroupFeatureName
   *   A fully-qualified path representing project_location_feature_group_feature resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationFeatureGroupFeatureName(
    projectLocationFeatureGroupFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.match(
      projectLocationFeatureGroupFeatureName
    ).location;
  }

  /**
   * Parse the feature_group from ProjectLocationFeatureGroupFeature resource.
   *
   * @param {string} projectLocationFeatureGroupFeatureName
   *   A fully-qualified path representing project_location_feature_group_feature resource.
   * @returns {string} A string representing the feature_group.
   */
  matchFeatureGroupFromProjectLocationFeatureGroupFeatureName(
    projectLocationFeatureGroupFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.match(
      projectLocationFeatureGroupFeatureName
    ).feature_group;
  }

  /**
   * Parse the feature from ProjectLocationFeatureGroupFeature resource.
   *
   * @param {string} projectLocationFeatureGroupFeatureName
   *   A fully-qualified path representing project_location_feature_group_feature resource.
   * @returns {string} A string representing the feature.
   */
  matchFeatureFromProjectLocationFeatureGroupFeatureName(
    projectLocationFeatureGroupFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.match(
      projectLocationFeatureGroupFeatureName
    ).feature;
  }

  /**
   * Return a fully-qualified projectLocationFeaturestoreEntityTypeFeature resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @param {string} entity_type
   * @param {string} feature
   * @returns {string} Resource name string.
   */
  projectLocationFeaturestoreEntityTypeFeaturePath(
    project: string,
    location: string,
    featurestore: string,
    entityType: string,
    feature: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.render(
      {
        project: project,
        location: location,
        featurestore: featurestore,
        entity_type: entityType,
        feature: feature,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).location;
  }

  /**
   * Parse the featurestore from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).featurestore;
  }

  /**
   * Parse the entity_type from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).entity_type;
  }

  /**
   * Parse the feature from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the feature.
   */
  matchFeatureFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).feature;
  }

  /**
   * Return a fully-qualified projectLocationPublisherModel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} publisher
   * @param {string} model
   * @returns {string} Resource name string.
   */
  projectLocationPublisherModelPath(
    project: string,
    location: string,
    publisher: string,
    model: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.render({
      project: project,
      location: location,
      publisher: publisher,
      model: model,
    });
  }

  /**
   * Parse the project from ProjectLocationPublisherModel resource.
   *
   * @param {string} projectLocationPublisherModelName
   *   A fully-qualified path representing project_location_publisher_model resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationPublisherModelName(
    projectLocationPublisherModelName: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.match(
      projectLocationPublisherModelName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationPublisherModel resource.
   *
   * @param {string} projectLocationPublisherModelName
   *   A fully-qualified path representing project_location_publisher_model resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationPublisherModelName(
    projectLocationPublisherModelName: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.match(
      projectLocationPublisherModelName
    ).location;
  }

  /**
   * Parse the publisher from ProjectLocationPublisherModel resource.
   *
   * @param {string} projectLocationPublisherModelName
   *   A fully-qualified path representing project_location_publisher_model resource.
   * @returns {string} A string representing the publisher.
   */
  matchPublisherFromProjectLocationPublisherModelName(
    projectLocationPublisherModelName: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.match(
      projectLocationPublisherModelName
    ).publisher;
  }

  /**
   * Parse the model from ProjectLocationPublisherModel resource.
   *
   * @param {string} projectLocationPublisherModelName
   *   A fully-qualified path representing project_location_publisher_model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromProjectLocationPublisherModelName(
    projectLocationPublisherModelName: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.match(
      projectLocationPublisherModelName
    ).model;
  }

  /**
   * Return a fully-qualified publisherModel resource name string.
   *
   * @param {string} publisher
   * @param {string} model
   * @returns {string} Resource name string.
   */
  publisherModelPath(publisher: string, model: string) {
    return this.pathTemplates.publisherModelPathTemplate.render({
      publisher: publisher,
      model: model,
    });
  }

  /**
   * Parse the publisher from PublisherModel resource.
   *
   * @param {string} publisherModelName
   *   A fully-qualified path representing PublisherModel resource.
   * @returns {string} A string representing the publisher.
   */
  matchPublisherFromPublisherModelName(publisherModelName: string) {
    return this.pathTemplates.publisherModelPathTemplate.match(
      publisherModelName
    ).publisher;
  }

  /**
   * Parse the model from PublisherModel resource.
   *
   * @param {string} publisherModelName
   *   A fully-qualified path representing PublisherModel resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromPublisherModelName(publisherModelName: string) {
    return this.pathTemplates.publisherModelPathTemplate.match(
      publisherModelName
    ).model;
  }

  /**
   * Return a fully-qualified ragCorpus resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} rag_corpus
   * @returns {string} Resource name string.
   */
  ragCorpusPath(project: string, location: string, ragCorpus: string) {
    return this.pathTemplates.ragCorpusPathTemplate.render({
      project: project,
      location: location,
      rag_corpus: ragCorpus,
    });
  }

  /**
   * Parse the project from RagCorpus resource.
   *
   * @param {string} ragCorpusName
   *   A fully-qualified path representing RagCorpus resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRagCorpusName(ragCorpusName: string) {
    return this.pathTemplates.ragCorpusPathTemplate.match(ragCorpusName)
      .project;
  }

  /**
   * Parse the location from RagCorpus resource.
   *
   * @param {string} ragCorpusName
   *   A fully-qualified path representing RagCorpus resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRagCorpusName(ragCorpusName: string) {
    return this.pathTemplates.ragCorpusPathTemplate.match(ragCorpusName)
      .location;
  }

  /**
   * Parse the rag_corpus from RagCorpus resource.
   *
   * @param {string} ragCorpusName
   *   A fully-qualified path representing RagCorpus resource.
   * @returns {string} A string representing the rag_corpus.
   */
  matchRagCorpusFromRagCorpusName(ragCorpusName: string) {
    return this.pathTemplates.ragCorpusPathTemplate.match(ragCorpusName)
      .rag_corpus;
  }

  /**
   * Return a fully-qualified ragFile resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} rag_corpus
   * @param {string} rag_file
   * @returns {string} Resource name string.
   */
  ragFilePath(
    project: string,
    location: string,
    ragCorpus: string,
    ragFile: string
  ) {
    return this.pathTemplates.ragFilePathTemplate.render({
      project: project,
      location: location,
      rag_corpus: ragCorpus,
      rag_file: ragFile,
    });
  }

  /**
   * Parse the project from RagFile resource.
   *
   * @param {string} ragFileName
   *   A fully-qualified path representing RagFile resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRagFileName(ragFileName: string) {
    return this.pathTemplates.ragFilePathTemplate.match(ragFileName).project;
  }

  /**
   * Parse the location from RagFile resource.
   *
   * @param {string} ragFileName
   *   A fully-qualified path representing RagFile resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRagFileName(ragFileName: string) {
    return this.pathTemplates.ragFilePathTemplate.match(ragFileName).location;
  }

  /**
   * Parse the rag_corpus from RagFile resource.
   *
   * @param {string} ragFileName
   *   A fully-qualified path representing RagFile resource.
   * @returns {string} A string representing the rag_corpus.
   */
  matchRagCorpusFromRagFileName(ragFileName: string) {
    return this.pathTemplates.ragFilePathTemplate.match(ragFileName).rag_corpus;
  }

  /**
   * Parse the rag_file from RagFile resource.
   *
   * @param {string} ragFileName
   *   A fully-qualified path representing RagFile resource.
   * @returns {string} A string representing the rag_file.
   */
  matchRagFileFromRagFileName(ragFileName: string) {
    return this.pathTemplates.ragFilePathTemplate.match(ragFileName).rag_file;
  }

  /**
   * Return a fully-qualified reasoningEngine resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} reasoning_engine
   * @returns {string} Resource name string.
   */
  reasoningEnginePath(
    project: string,
    location: string,
    reasoningEngine: string
  ) {
    return this.pathTemplates.reasoningEnginePathTemplate.render({
      project: project,
      location: location,
      reasoning_engine: reasoningEngine,
    });
  }

  /**
   * Parse the project from ReasoningEngine resource.
   *
   * @param {string} reasoningEngineName
   *   A fully-qualified path representing ReasoningEngine resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReasoningEngineName(reasoningEngineName: string) {
    return this.pathTemplates.reasoningEnginePathTemplate.match(
      reasoningEngineName
    ).project;
  }

  /**
   * Parse the location from ReasoningEngine resource.
   *
   * @param {string} reasoningEngineName
   *   A fully-qualified path representing ReasoningEngine resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReasoningEngineName(reasoningEngineName: string) {
    return this.pathTemplates.reasoningEnginePathTemplate.match(
      reasoningEngineName
    ).location;
  }

  /**
   * Parse the reasoning_engine from ReasoningEngine resource.
   *
   * @param {string} reasoningEngineName
   *   A fully-qualified path representing ReasoningEngine resource.
   * @returns {string} A string representing the reasoning_engine.
   */
  matchReasoningEngineFromReasoningEngineName(reasoningEngineName: string) {
    return this.pathTemplates.reasoningEnginePathTemplate.match(
      reasoningEngineName
    ).reasoning_engine;
  }

  /**
   * Return a fully-qualified savedQuery resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} saved_query
   * @returns {string} Resource name string.
   */
  savedQueryPath(
    project: string,
    location: string,
    dataset: string,
    savedQuery: string
  ) {
    return this.pathTemplates.savedQueryPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      saved_query: savedQuery,
    });
  }

  /**
   * Parse the project from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .project;
  }

  /**
   * Parse the location from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .location;
  }

  /**
   * Parse the dataset from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .dataset;
  }

  /**
   * Parse the saved_query from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the saved_query.
   */
  matchSavedQueryFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .saved_query;
  }

  /**
   * Return a fully-qualified schedule resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} schedule
   * @returns {string} Resource name string.
   */
  schedulePath(project: string, location: string, schedule: string) {
    return this.pathTemplates.schedulePathTemplate.render({
      project: project,
      location: location,
      schedule: schedule,
    });
  }

  /**
   * Parse the project from Schedule resource.
   *
   * @param {string} scheduleName
   *   A fully-qualified path representing Schedule resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromScheduleName(scheduleName: string) {
    return this.pathTemplates.schedulePathTemplate.match(scheduleName).project;
  }

  /**
   * Parse the location from Schedule resource.
   *
   * @param {string} scheduleName
   *   A fully-qualified path representing Schedule resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromScheduleName(scheduleName: string) {
    return this.pathTemplates.schedulePathTemplate.match(scheduleName).location;
  }

  /**
   * Parse the schedule from Schedule resource.
   *
   * @param {string} scheduleName
   *   A fully-qualified path representing Schedule resource.
   * @returns {string} A string representing the schedule.
   */
  matchScheduleFromScheduleName(scheduleName: string) {
    return this.pathTemplates.schedulePathTemplate.match(scheduleName).schedule;
  }

  /**
   * Return a fully-qualified specialistPool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} specialist_pool
   * @returns {string} Resource name string.
   */
  specialistPoolPath(
    project: string,
    location: string,
    specialistPool: string
  ) {
    return this.pathTemplates.specialistPoolPathTemplate.render({
      project: project,
      location: location,
      specialist_pool: specialistPool,
    });
  }

  /**
   * Parse the project from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).project;
  }

  /**
   * Parse the location from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).location;
  }

  /**
   * Parse the specialist_pool from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the specialist_pool.
   */
  matchSpecialistPoolFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).specialist_pool;
  }

  /**
   * Return a fully-qualified study resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} study
   * @returns {string} Resource name string.
   */
  studyPath(project: string, location: string, study: string) {
    return this.pathTemplates.studyPathTemplate.render({
      project: project,
      location: location,
      study: study,
    });
  }

  /**
   * Parse the project from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).project;
  }

  /**
   * Parse the location from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).location;
  }

  /**
   * Parse the study from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the study.
   */
  matchStudyFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).study;
  }

  /**
   * Return a fully-qualified tensorboard resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @returns {string} Resource name string.
   */
  tensorboardPath(project: string, location: string, tensorboard: string) {
    return this.pathTemplates.tensorboardPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
    });
  }

  /**
   * Parse the project from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .project;
  }

  /**
   * Parse the location from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .location;
  }

  /**
   * Parse the tensorboard from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .tensorboard;
  }

  /**
   * Return a fully-qualified tensorboardExperiment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @returns {string} Resource name string.
   */
  tensorboardExperimentPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
    });
  }

  /**
   * Parse the project from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardExperimentName(tensorboardExperimentName: string) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).project;
  }

  /**
   * Parse the location from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).experiment;
  }

  /**
   * Return a fully-qualified tensorboardRun resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @param {string} run
   * @returns {string} Resource name string.
   */
  tensorboardRunPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string,
    run: string
  ) {
    return this.pathTemplates.tensorboardRunPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
      run: run,
    });
  }

  /**
   * Parse the project from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).project;
  }

  /**
   * Parse the location from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).experiment;
  }

  /**
   * Parse the run from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).run;
  }

  /**
   * Return a fully-qualified tensorboardTimeSeries resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @param {string} run
   * @param {string} time_series
   * @returns {string} Resource name string.
   */
  tensorboardTimeSeriesPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string,
    run: string,
    timeSeries: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
      run: run,
      time_series: timeSeries,
    });
  }

  /**
   * Parse the project from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardTimeSeriesName(tensorboardTimeSeriesName: string) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).project;
  }

  /**
   * Parse the location from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).experiment;
  }

  /**
   * Parse the run from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromTensorboardTimeSeriesName(tensorboardTimeSeriesName: string) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).run;
  }

  /**
   * Parse the time_series from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the time_series.
   */
  matchTimeSeriesFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).time_series;
  }

  /**
   * Return a fully-qualified trainingPipeline resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} training_pipeline
   * @returns {string} Resource name string.
   */
  trainingPipelinePath(
    project: string,
    location: string,
    trainingPipeline: string
  ) {
    return this.pathTemplates.trainingPipelinePathTemplate.render({
      project: project,
      location: location,
      training_pipeline: trainingPipeline,
    });
  }

  /**
   * Parse the project from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).project;
  }

  /**
   * Parse the location from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).location;
  }

  /**
   * Parse the training_pipeline from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the training_pipeline.
   */
  matchTrainingPipelineFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).training_pipeline;
  }

  /**
   * Return a fully-qualified trial resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} study
   * @param {string} trial
   * @returns {string} Resource name string.
   */
  trialPath(project: string, location: string, study: string, trial: string) {
    return this.pathTemplates.trialPathTemplate.render({
      project: project,
      location: location,
      study: study,
      trial: trial,
    });
  }

  /**
   * Parse the project from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).project;
  }

  /**
   * Parse the location from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).location;
  }

  /**
   * Parse the study from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the study.
   */
  matchStudyFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).study;
  }

  /**
   * Parse the trial from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the trial.
   */
  matchTrialFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).trial;
  }

  /**
   * Return a fully-qualified tuningJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tuning_job
   * @returns {string} Resource name string.
   */
  tuningJobPath(project: string, location: string, tuningJob: string) {
    return this.pathTemplates.tuningJobPathTemplate.render({
      project: project,
      location: location,
      tuning_job: tuningJob,
    });
  }

  /**
   * Parse the project from TuningJob resource.
   *
   * @param {string} tuningJobName
   *   A fully-qualified path representing TuningJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTuningJobName(tuningJobName: string) {
    return this.pathTemplates.tuningJobPathTemplate.match(tuningJobName)
      .project;
  }

  /**
   * Parse the location from TuningJob resource.
   *
   * @param {string} tuningJobName
   *   A fully-qualified path representing TuningJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTuningJobName(tuningJobName: string) {
    return this.pathTemplates.tuningJobPathTemplate.match(tuningJobName)
      .location;
  }

  /**
   * Parse the tuning_job from TuningJob resource.
   *
   * @param {string} tuningJobName
   *   A fully-qualified path representing TuningJob resource.
   * @returns {string} A string representing the tuning_job.
   */
  matchTuningJobFromTuningJobName(tuningJobName: string) {
    return this.pathTemplates.tuningJobPathTemplate.match(tuningJobName)
      .tuning_job;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.metadataServiceStub && !this._terminated) {
      return this.metadataServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
