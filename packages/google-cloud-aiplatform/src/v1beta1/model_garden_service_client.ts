// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/model_garden_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './model_garden_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The interface of Model Garden Service.
 * @class
 * @memberof v1beta1
 */
export class ModelGardenServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  modelGardenServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ModelGardenServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ModelGardenServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ModelGardenServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'aiplatform.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'
      ),
      annotationSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'
      ),
      artifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'
      ),
      batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'
      ),
      contextPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'
      ),
      customJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/customJobs/{custom_job}'
      ),
      dataItemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'
      ),
      dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'
      ),
      datasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
      datasetVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}'
      ),
      deploymentResourcePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}'
      ),
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'
      ),
      extensionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/extensions/{extension}'
      ),
      featureGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}'
      ),
      featureOnlineStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}'
      ),
      featureViewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}'
      ),
      featureViewSyncPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/feature_view_sync'
      ),
      featurestorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}'
      ),
      hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'
      ),
      indexPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexes/{index}'
      ),
      indexEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}'
      ),
      metadataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/metadataSchemas/{metadata_schema}'
      ),
      metadataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}'
      ),
      modelDeploymentMonitoringJobPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}'
        ),
      modelEvaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'
      ),
      modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'
      ),
      modelMonitorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelMonitors/{model_monitor}'
      ),
      modelMonitoringJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelMonitors/{model_monitor}/modelMonitoringJobs/{model_monitoring_job}'
      ),
      nasJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}'
      ),
      nasTrialDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}/nasTrialDetails/{nas_trial_detail}'
      ),
      notebookExecutionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookExecutionJobs/{notebook_execution_job}'
      ),
      notebookRuntimePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimes/{notebook_runtime}'
      ),
      notebookRuntimeTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimeTemplates/{notebook_runtime_template}'
      ),
      persistentResourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/persistentResources/{persistent_resource}'
      ),
      pipelineJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'
      ),
      projectLocationEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpoints/{endpoint}'
      ),
      projectLocationFeatureGroupFeaturePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}'
        ),
      projectLocationFeaturestoreEntityTypeFeaturePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}'
        ),
      projectLocationPublisherModelPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/publishers/{publisher}/models/{model}'
        ),
      publisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'publishers/{publisher}/models/{model}'
      ),
      ragCorpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}'
      ),
      ragFilePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}/ragFiles/{rag_file}'
      ),
      reasoningEnginePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}'
      ),
      savedQueryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}'
      ),
      schedulePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/schedules/{schedule}'
      ),
      specialistPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/specialistPools/{specialist_pool}'
      ),
      studyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}'
      ),
      tensorboardPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}'
      ),
      tensorboardExperimentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}'
      ),
      tensorboardRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}'
      ),
      tensorboardTimeSeriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}'
      ),
      trainingPipelinePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'
      ),
      trialPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}/trials/{trial}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listPublisherModels: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'publisherModels'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.aiplatform.v1beta1.ModelGardenService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.modelGardenServiceStub) {
      return this.modelGardenServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.aiplatform.v1beta1.ModelGardenService.
    this.modelGardenServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.aiplatform.v1beta1.ModelGardenService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.aiplatform.v1beta1
            .ModelGardenService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const modelGardenServiceStubMethods = [
      'getPublisherModel',
      'listPublisherModels',
    ];
    for (const methodName of modelGardenServiceStubMethods) {
      const callPromise = this.modelGardenServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.modelGardenServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a Model Garden publisher model.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the PublisherModel resource.
   *   Format:
   *   `publishers/{publisher}/models/{publisher_model}`
   * @param {string} [request.languageCode]
   *   Optional. The IETF BCP-47 language code representing the language in which
   *   the publisher model's text information should be written in (see go/bcp47).
   * @param {google.cloud.aiplatform.v1beta1.PublisherModelView} [request.view]
   *   Optional. PublisherModel view specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.PublisherModel|PublisherModel}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/model_garden_service.get_publisher_model.js</caption>
   * region_tag:aiplatform_v1beta1_generated_ModelGardenService_GetPublisherModel_async
   */
  getPublisherModel(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getPublisherModel(
    request: protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
      | protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPublisherModel(
    request: protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
      | protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPublisherModel(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
          | protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
      | protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPublisherModel(request, options, callback);
  }

  /**
   * Lists publisher models in Model Garden.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the Publisher from which to list the PublisherModels.
   *   Format: `publishers/{publisher}`
   * @param {string} [request.filter]
   *   Optional. The standard list filter.
   * @param {number} [request.pageSize]
   *   Optional. The standard list page size.
   * @param {string} [request.pageToken]
   *   Optional. The standard list page token.
   *   Typically obtained via
   *   {@link protos.google.cloud.aiplatform.v1beta1.ListPublisherModelsResponse.next_page_token|ListPublisherModelsResponse.next_page_token}
   *   of the previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.ModelGardenService.ListPublisherModels|ModelGardenService.ListPublisherModels}
   *   call.
   * @param {google.cloud.aiplatform.v1beta1.PublisherModelView} [request.view]
   *   Optional. PublisherModel view specifying which fields to read.
   * @param {string} [request.orderBy]
   *   Optional. A comma-separated list of fields to order by, sorted in ascending
   *   order. Use "desc" after a field name for descending.
   * @param {string} [request.languageCode]
   *   Optional. The IETF BCP-47 language code representing the language in which
   *   the publisher models' text information should be written in (see go/bcp47).
   *   If not set, by default English (en).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1beta1.PublisherModel|PublisherModel}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPublisherModelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPublisherModels(
    request?: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel[],
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse,
    ]
  >;
  listPublisherModels(
    request: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel
    >
  ): void;
  listPublisherModels(
    request: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel
    >
  ): void;
  listPublisherModels(
    request?: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel[],
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPublisherModels(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the Publisher from which to list the PublisherModels.
   *   Format: `publishers/{publisher}`
   * @param {string} [request.filter]
   *   Optional. The standard list filter.
   * @param {number} [request.pageSize]
   *   Optional. The standard list page size.
   * @param {string} [request.pageToken]
   *   Optional. The standard list page token.
   *   Typically obtained via
   *   {@link protos.google.cloud.aiplatform.v1beta1.ListPublisherModelsResponse.next_page_token|ListPublisherModelsResponse.next_page_token}
   *   of the previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.ModelGardenService.ListPublisherModels|ModelGardenService.ListPublisherModels}
   *   call.
   * @param {google.cloud.aiplatform.v1beta1.PublisherModelView} [request.view]
   *   Optional. PublisherModel view specifying which fields to read.
   * @param {string} [request.orderBy]
   *   Optional. A comma-separated list of fields to order by, sorted in ascending
   *   order. Use "desc" after a field name for descending.
   * @param {string} [request.languageCode]
   *   Optional. The IETF BCP-47 language code representing the language in which
   *   the publisher models' text information should be written in (see go/bcp47).
   *   If not set, by default English (en).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1beta1.PublisherModel|PublisherModel} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPublisherModelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPublisherModelsStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPublisherModels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPublisherModels.createStream(
      this.innerApiCalls.listPublisherModels as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPublisherModels`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the Publisher from which to list the PublisherModels.
   *   Format: `publishers/{publisher}`
   * @param {string} [request.filter]
   *   Optional. The standard list filter.
   * @param {number} [request.pageSize]
   *   Optional. The standard list page size.
   * @param {string} [request.pageToken]
   *   Optional. The standard list page token.
   *   Typically obtained via
   *   {@link protos.google.cloud.aiplatform.v1beta1.ListPublisherModelsResponse.next_page_token|ListPublisherModelsResponse.next_page_token}
   *   of the previous
   *   {@link protos.google.cloud.aiplatform.v1beta1.ModelGardenService.ListPublisherModels|ModelGardenService.ListPublisherModels}
   *   call.
   * @param {google.cloud.aiplatform.v1beta1.PublisherModelView} [request.view]
   *   Optional. PublisherModel view specifying which fields to read.
   * @param {string} [request.orderBy]
   *   Optional. A comma-separated list of fields to order by, sorted in ascending
   *   order. Use "desc" after a field name for descending.
   * @param {string} [request.languageCode]
   *   Optional. The IETF BCP-47 language code representing the language in which
   *   the publisher models' text information should be written in (see go/bcp47).
   *   If not set, by default English (en).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.aiplatform.v1beta1.PublisherModel|PublisherModel}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/model_garden_service.list_publisher_models.js</caption>
   * region_tag:aiplatform_v1beta1_generated_ModelGardenService_ListPublisherModels_async
   */
  listPublisherModelsAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IPublisherModel> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPublisherModels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPublisherModels.asyncIterate(
      this.innerApiCalls['listPublisherModels'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IPublisherModel>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(
    project: string,
    location: string,
    dataset: string,
    dataItem: string,
    annotation: string
  ) {
    return this.pathTemplates.annotationPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
      annotation: annotation,
    });
  }

  /**
   * Parse the project from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .project;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .location;
  }

  /**
   * Parse the dataset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .dataset;
  }

  /**
   * Parse the data_item from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .data_item;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .annotation;
  }

  /**
   * Return a fully-qualified annotationSpec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} annotation_spec
   * @returns {string} Resource name string.
   */
  annotationSpecPath(
    project: string,
    location: string,
    dataset: string,
    annotationSpec: string
  ) {
    return this.pathTemplates.annotationSpecPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      annotation_spec: annotationSpec,
    });
  }

  /**
   * Parse the project from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).project;
  }

  /**
   * Parse the location from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).location;
  }

  /**
   * Parse the dataset from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).dataset;
  }

  /**
   * Parse the annotation_spec from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the annotation_spec.
   */
  matchAnnotationSpecFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).annotation_spec;
  }

  /**
   * Return a fully-qualified artifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  artifactPath(
    project: string,
    location: string,
    metadataStore: string,
    artifact: string
  ) {
    return this.pathTemplates.artifactPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).project;
  }

  /**
   * Parse the location from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).location;
  }

  /**
   * Parse the metadata_store from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName)
      .metadata_store;
  }

  /**
   * Parse the artifact from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).artifact;
  }

  /**
   * Return a fully-qualified batchPredictionJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} batch_prediction_job
   * @returns {string} Resource name string.
   */
  batchPredictionJobPath(
    project: string,
    location: string,
    batchPredictionJob: string
  ) {
    return this.pathTemplates.batchPredictionJobPathTemplate.render({
      project: project,
      location: location,
      batch_prediction_job: batchPredictionJob,
    });
  }

  /**
   * Parse the project from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).project;
  }

  /**
   * Parse the location from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).location;
  }

  /**
   * Parse the batch_prediction_job from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the batch_prediction_job.
   */
  matchBatchPredictionJobFromBatchPredictionJobName(
    batchPredictionJobName: string
  ) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).batch_prediction_job;
  }

  /**
   * Return a fully-qualified context resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} context
   * @returns {string} Resource name string.
   */
  contextPath(
    project: string,
    location: string,
    metadataStore: string,
    context: string
  ) {
    return this.pathTemplates.contextPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      context: context,
    });
  }

  /**
   * Parse the project from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).project;
  }

  /**
   * Parse the location from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).location;
  }

  /**
   * Parse the metadata_store from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName)
      .metadata_store;
  }

  /**
   * Parse the context from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the context.
   */
  matchContextFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).context;
  }

  /**
   * Return a fully-qualified customJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} custom_job
   * @returns {string} Resource name string.
   */
  customJobPath(project: string, location: string, customJob: string) {
    return this.pathTemplates.customJobPathTemplate.render({
      project: project,
      location: location,
      custom_job: customJob,
    });
  }

  /**
   * Parse the project from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .project;
  }

  /**
   * Parse the location from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .location;
  }

  /**
   * Parse the custom_job from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the custom_job.
   */
  matchCustomJobFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .custom_job;
  }

  /**
   * Return a fully-qualified dataItem resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @returns {string} Resource name string.
   */
  dataItemPath(
    project: string,
    location: string,
    dataset: string,
    dataItem: string
  ) {
    return this.pathTemplates.dataItemPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
    });
  }

  /**
   * Parse the project from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).project;
  }

  /**
   * Parse the location from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).location;
  }

  /**
   * Parse the dataset from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).dataset;
  }

  /**
   * Parse the data_item from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName)
      .data_item;
  }

  /**
   * Return a fully-qualified dataLabelingJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_labeling_job
   * @returns {string} Resource name string.
   */
  dataLabelingJobPath(
    project: string,
    location: string,
    dataLabelingJob: string
  ) {
    return this.pathTemplates.dataLabelingJobPathTemplate.render({
      project: project,
      location: location,
      data_labeling_job: dataLabelingJob,
    });
  }

  /**
   * Parse the project from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).project;
  }

  /**
   * Parse the location from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).location;
  }

  /**
   * Parse the data_labeling_job from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the data_labeling_job.
   */
  matchDataLabelingJobFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).data_labeling_job;
  }

  /**
   * Return a fully-qualified dataset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @returns {string} Resource name string.
   */
  datasetPath(project: string, location: string, dataset: string) {
    return this.pathTemplates.datasetPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
    });
  }

  /**
   * Parse the project from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
  }

  /**
   * Parse the location from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).location;
  }

  /**
   * Parse the dataset from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
  }

  /**
   * Return a fully-qualified datasetVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} dataset_version
   * @returns {string} Resource name string.
   */
  datasetVersionPath(
    project: string,
    location: string,
    dataset: string,
    datasetVersion: string
  ) {
    return this.pathTemplates.datasetVersionPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      dataset_version: datasetVersion,
    });
  }

  /**
   * Parse the project from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(
      datasetVersionName
    ).project;
  }

  /**
   * Parse the location from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(
      datasetVersionName
    ).location;
  }

  /**
   * Parse the dataset from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(
      datasetVersionName
    ).dataset;
  }

  /**
   * Parse the dataset_version from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the dataset_version.
   */
  matchDatasetVersionFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(
      datasetVersionName
    ).dataset_version;
  }

  /**
   * Return a fully-qualified deploymentResourcePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment_resource_pool
   * @returns {string} Resource name string.
   */
  deploymentResourcePoolPath(
    project: string,
    location: string,
    deploymentResourcePool: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.render({
      project: project,
      location: location,
      deployment_resource_pool: deploymentResourcePool,
    });
  }

  /**
   * Parse the project from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).project;
  }

  /**
   * Parse the location from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).location;
  }

  /**
   * Parse the deployment_resource_pool from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the deployment_resource_pool.
   */
  matchDeploymentResourcePoolFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).deployment_resource_pool;
  }

  /**
   * Return a fully-qualified entityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  entityTypePath(
    project: string,
    location: string,
    featurestore: string,
    entityType: string
  ) {
    return this.pathTemplates.entityTypePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
      entity_type: entityType,
    });
  }

  /**
   * Parse the project from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .project;
  }

  /**
   * Parse the location from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .location;
  }

  /**
   * Parse the featurestore from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .featurestore;
  }

  /**
   * Parse the entity_type from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .entity_type;
  }

  /**
   * Return a fully-qualified execution resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} execution
   * @returns {string} Resource name string.
   */
  executionPath(
    project: string,
    location: string,
    metadataStore: string,
    execution: string
  ) {
    return this.pathTemplates.executionPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      execution: execution,
    });
  }

  /**
   * Parse the project from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .project;
  }

  /**
   * Parse the location from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .location;
  }

  /**
   * Parse the metadata_store from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .metadata_store;
  }

  /**
   * Parse the execution from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the execution.
   */
  matchExecutionFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .execution;
  }

  /**
   * Return a fully-qualified extension resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} extension
   * @returns {string} Resource name string.
   */
  extensionPath(project: string, location: string, extension: string) {
    return this.pathTemplates.extensionPathTemplate.render({
      project: project,
      location: location,
      extension: extension,
    });
  }

  /**
   * Parse the project from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName)
      .project;
  }

  /**
   * Parse the location from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName)
      .location;
  }

  /**
   * Parse the extension from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the extension.
   */
  matchExtensionFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName)
      .extension;
  }

  /**
   * Return a fully-qualified featureGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_group
   * @returns {string} Resource name string.
   */
  featureGroupPath(project: string, location: string, featureGroup: string) {
    return this.pathTemplates.featureGroupPathTemplate.render({
      project: project,
      location: location,
      feature_group: featureGroup,
    });
  }

  /**
   * Parse the project from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName)
      .project;
  }

  /**
   * Parse the location from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName)
      .location;
  }

  /**
   * Parse the feature_group from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the feature_group.
   */
  matchFeatureGroupFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName)
      .feature_group;
  }

  /**
   * Return a fully-qualified featureOnlineStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @returns {string} Resource name string.
   */
  featureOnlineStorePath(
    project: string,
    location: string,
    featureOnlineStore: string
  ) {
    return this.pathTemplates.featureOnlineStorePathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
    });
  }

  /**
   * Parse the project from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureOnlineStoreName(featureOnlineStoreName: string) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(
      featureOnlineStoreName
    ).project;
  }

  /**
   * Parse the location from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureOnlineStoreName(featureOnlineStoreName: string) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(
      featureOnlineStoreName
    ).location;
  }

  /**
   * Parse the feature_online_store from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureOnlineStoreName(
    featureOnlineStoreName: string
  ) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(
      featureOnlineStoreName
    ).feature_online_store;
  }

  /**
   * Return a fully-qualified featureView resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @param {string} feature_view
   * @returns {string} Resource name string.
   */
  featureViewPath(
    project: string,
    location: string,
    featureOnlineStore: string,
    featureView: string
  ) {
    return this.pathTemplates.featureViewPathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
      feature_view: featureView,
    });
  }

  /**
   * Parse the project from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName)
      .project;
  }

  /**
   * Parse the location from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName)
      .location;
  }

  /**
   * Parse the feature_online_store from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName)
      .feature_online_store;
  }

  /**
   * Parse the feature_view from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the feature_view.
   */
  matchFeatureViewFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName)
      .feature_view;
  }

  /**
   * Return a fully-qualified featureViewSync resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @param {string} feature_view
   * @returns {string} Resource name string.
   */
  featureViewSyncPath(
    project: string,
    location: string,
    featureOnlineStore: string,
    featureView: string
  ) {
    return this.pathTemplates.featureViewSyncPathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
      feature_view: featureView,
    });
  }

  /**
   * Parse the project from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(
      featureViewSyncName
    ).project;
  }

  /**
   * Parse the location from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(
      featureViewSyncName
    ).location;
  }

  /**
   * Parse the feature_online_store from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(
      featureViewSyncName
    ).feature_online_store;
  }

  /**
   * Parse the feature_view from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the feature_view.
   */
  matchFeatureViewFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(
      featureViewSyncName
    ).feature_view;
  }

  /**
   * Return a fully-qualified featurestore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @returns {string} Resource name string.
   */
  featurestorePath(project: string, location: string, featurestore: string) {
    return this.pathTemplates.featurestorePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
    });
  }

  /**
   * Parse the project from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .project;
  }

  /**
   * Parse the location from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .location;
  }

  /**
   * Parse the featurestore from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .featurestore;
  }

  /**
   * Return a fully-qualified hyperparameterTuningJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} hyperparameter_tuning_job
   * @returns {string} Resource name string.
   */
  hyperparameterTuningJobPath(
    project: string,
    location: string,
    hyperparameterTuningJob: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.render({
      project: project,
      location: location,
      hyperparameter_tuning_job: hyperparameterTuningJob,
    });
  }

  /**
   * Parse the project from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).project;
  }

  /**
   * Parse the location from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).location;
  }

  /**
   * Parse the hyperparameter_tuning_job from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the hyperparameter_tuning_job.
   */
  matchHyperparameterTuningJobFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).hyperparameter_tuning_job;
  }

  /**
   * Return a fully-qualified index resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} index
   * @returns {string} Resource name string.
   */
  indexPath(project: string, location: string, index: string) {
    return this.pathTemplates.indexPathTemplate.render({
      project: project,
      location: location,
      index: index,
    });
  }

  /**
   * Parse the project from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).project;
  }

  /**
   * Parse the location from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).location;
  }

  /**
   * Parse the index from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the index.
   */
  matchIndexFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).index;
  }

  /**
   * Return a fully-qualified indexEndpoint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} index_endpoint
   * @returns {string} Resource name string.
   */
  indexEndpointPath(project: string, location: string, indexEndpoint: string) {
    return this.pathTemplates.indexEndpointPathTemplate.render({
      project: project,
      location: location,
      index_endpoint: indexEndpoint,
    });
  }

  /**
   * Parse the project from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .project;
  }

  /**
   * Parse the location from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .location;
  }

  /**
   * Parse the index_endpoint from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the index_endpoint.
   */
  matchIndexEndpointFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .index_endpoint;
  }

  /**
   * Return a fully-qualified metadataSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} metadata_schema
   * @returns {string} Resource name string.
   */
  metadataSchemaPath(
    project: string,
    location: string,
    metadataStore: string,
    metadataSchema: string
  ) {
    return this.pathTemplates.metadataSchemaPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      metadata_schema: metadataSchema,
    });
  }

  /**
   * Parse the project from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).project;
  }

  /**
   * Parse the location from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).location;
  }

  /**
   * Parse the metadata_store from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).metadata_store;
  }

  /**
   * Parse the metadata_schema from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the metadata_schema.
   */
  matchMetadataSchemaFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).metadata_schema;
  }

  /**
   * Return a fully-qualified metadataStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @returns {string} Resource name string.
   */
  metadataStorePath(project: string, location: string, metadataStore: string) {
    return this.pathTemplates.metadataStorePathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
    });
  }

  /**
   * Parse the project from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .project;
  }

  /**
   * Parse the location from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .location;
  }

  /**
   * Parse the metadata_store from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .metadata_store;
  }

  /**
   * Return a fully-qualified model resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @returns {string} Resource name string.
   */
  modelPath(project: string, location: string, model: string) {
    return this.pathTemplates.modelPathTemplate.render({
      project: project,
      location: location,
      model: model,
    });
  }

  /**
   * Parse the project from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).project;
  }

  /**
   * Parse the location from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).location;
  }

  /**
   * Parse the model from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).model;
  }

  /**
   * Return a fully-qualified modelDeploymentMonitoringJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model_deployment_monitoring_job
   * @returns {string} Resource name string.
   */
  modelDeploymentMonitoringJobPath(
    project: string,
    location: string,
    modelDeploymentMonitoringJob: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.render({
      project: project,
      location: location,
      model_deployment_monitoring_job: modelDeploymentMonitoringJob,
    });
  }

  /**
   * Parse the project from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).project;
  }

  /**
   * Parse the location from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).location;
  }

  /**
   * Parse the model_deployment_monitoring_job from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the model_deployment_monitoring_job.
   */
  matchModelDeploymentMonitoringJobFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).model_deployment_monitoring_job;
  }

  /**
   * Return a fully-qualified modelEvaluation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @param {string} evaluation
   * @returns {string} Resource name string.
   */
  modelEvaluationPath(
    project: string,
    location: string,
    model: string,
    evaluation: string
  ) {
    return this.pathTemplates.modelEvaluationPathTemplate.render({
      project: project,
      location: location,
      model: model,
      evaluation: evaluation,
    });
  }

  /**
   * Parse the project from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).project;
  }

  /**
   * Parse the location from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).location;
  }

  /**
   * Parse the model from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).model;
  }

  /**
   * Parse the evaluation from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the evaluation.
   */
  matchEvaluationFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).evaluation;
  }

  /**
   * Return a fully-qualified modelEvaluationSlice resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @param {string} evaluation
   * @param {string} slice
   * @returns {string} Resource name string.
   */
  modelEvaluationSlicePath(
    project: string,
    location: string,
    model: string,
    evaluation: string,
    slice: string
  ) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.render({
      project: project,
      location: location,
      model: model,
      evaluation: evaluation,
      slice: slice,
    });
  }

  /**
   * Parse the project from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).project;
  }

  /**
   * Parse the location from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).location;
  }

  /**
   * Parse the model from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).model;
  }

  /**
   * Parse the evaluation from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the evaluation.
   */
  matchEvaluationFromModelEvaluationSliceName(
    modelEvaluationSliceName: string
  ) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).evaluation;
  }

  /**
   * Parse the slice from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the slice.
   */
  matchSliceFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).slice;
  }

  /**
   * Return a fully-qualified modelMonitor resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model_monitor
   * @returns {string} Resource name string.
   */
  modelMonitorPath(project: string, location: string, modelMonitor: string) {
    return this.pathTemplates.modelMonitorPathTemplate.render({
      project: project,
      location: location,
      model_monitor: modelMonitor,
    });
  }

  /**
   * Parse the project from ModelMonitor resource.
   *
   * @param {string} modelMonitorName
   *   A fully-qualified path representing ModelMonitor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelMonitorName(modelMonitorName: string) {
    return this.pathTemplates.modelMonitorPathTemplate.match(modelMonitorName)
      .project;
  }

  /**
   * Parse the location from ModelMonitor resource.
   *
   * @param {string} modelMonitorName
   *   A fully-qualified path representing ModelMonitor resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelMonitorName(modelMonitorName: string) {
    return this.pathTemplates.modelMonitorPathTemplate.match(modelMonitorName)
      .location;
  }

  /**
   * Parse the model_monitor from ModelMonitor resource.
   *
   * @param {string} modelMonitorName
   *   A fully-qualified path representing ModelMonitor resource.
   * @returns {string} A string representing the model_monitor.
   */
  matchModelMonitorFromModelMonitorName(modelMonitorName: string) {
    return this.pathTemplates.modelMonitorPathTemplate.match(modelMonitorName)
      .model_monitor;
  }

  /**
   * Return a fully-qualified modelMonitoringJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model_monitor
   * @param {string} model_monitoring_job
   * @returns {string} Resource name string.
   */
  modelMonitoringJobPath(
    project: string,
    location: string,
    modelMonitor: string,
    modelMonitoringJob: string
  ) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.render({
      project: project,
      location: location,
      model_monitor: modelMonitor,
      model_monitoring_job: modelMonitoringJob,
    });
  }

  /**
   * Parse the project from ModelMonitoringJob resource.
   *
   * @param {string} modelMonitoringJobName
   *   A fully-qualified path representing ModelMonitoringJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelMonitoringJobName(modelMonitoringJobName: string) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.match(
      modelMonitoringJobName
    ).project;
  }

  /**
   * Parse the location from ModelMonitoringJob resource.
   *
   * @param {string} modelMonitoringJobName
   *   A fully-qualified path representing ModelMonitoringJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelMonitoringJobName(modelMonitoringJobName: string) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.match(
      modelMonitoringJobName
    ).location;
  }

  /**
   * Parse the model_monitor from ModelMonitoringJob resource.
   *
   * @param {string} modelMonitoringJobName
   *   A fully-qualified path representing ModelMonitoringJob resource.
   * @returns {string} A string representing the model_monitor.
   */
  matchModelMonitorFromModelMonitoringJobName(modelMonitoringJobName: string) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.match(
      modelMonitoringJobName
    ).model_monitor;
  }

  /**
   * Parse the model_monitoring_job from ModelMonitoringJob resource.
   *
   * @param {string} modelMonitoringJobName
   *   A fully-qualified path representing ModelMonitoringJob resource.
   * @returns {string} A string representing the model_monitoring_job.
   */
  matchModelMonitoringJobFromModelMonitoringJobName(
    modelMonitoringJobName: string
  ) {
    return this.pathTemplates.modelMonitoringJobPathTemplate.match(
      modelMonitoringJobName
    ).model_monitoring_job;
  }

  /**
   * Return a fully-qualified nasJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} nas_job
   * @returns {string} Resource name string.
   */
  nasJobPath(project: string, location: string, nasJob: string) {
    return this.pathTemplates.nasJobPathTemplate.render({
      project: project,
      location: location,
      nas_job: nasJob,
    });
  }

  /**
   * Parse the project from NasJob resource.
   *
   * @param {string} nasJobName
   *   A fully-qualified path representing NasJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNasJobName(nasJobName: string) {
    return this.pathTemplates.nasJobPathTemplate.match(nasJobName).project;
  }

  /**
   * Parse the location from NasJob resource.
   *
   * @param {string} nasJobName
   *   A fully-qualified path representing NasJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNasJobName(nasJobName: string) {
    return this.pathTemplates.nasJobPathTemplate.match(nasJobName).location;
  }

  /**
   * Parse the nas_job from NasJob resource.
   *
   * @param {string} nasJobName
   *   A fully-qualified path representing NasJob resource.
   * @returns {string} A string representing the nas_job.
   */
  matchNasJobFromNasJobName(nasJobName: string) {
    return this.pathTemplates.nasJobPathTemplate.match(nasJobName).nas_job;
  }

  /**
   * Return a fully-qualified nasTrialDetail resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} nas_job
   * @param {string} nas_trial_detail
   * @returns {string} Resource name string.
   */
  nasTrialDetailPath(
    project: string,
    location: string,
    nasJob: string,
    nasTrialDetail: string
  ) {
    return this.pathTemplates.nasTrialDetailPathTemplate.render({
      project: project,
      location: location,
      nas_job: nasJob,
      nas_trial_detail: nasTrialDetail,
    });
  }

  /**
   * Parse the project from NasTrialDetail resource.
   *
   * @param {string} nasTrialDetailName
   *   A fully-qualified path representing NasTrialDetail resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNasTrialDetailName(nasTrialDetailName: string) {
    return this.pathTemplates.nasTrialDetailPathTemplate.match(
      nasTrialDetailName
    ).project;
  }

  /**
   * Parse the location from NasTrialDetail resource.
   *
   * @param {string} nasTrialDetailName
   *   A fully-qualified path representing NasTrialDetail resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNasTrialDetailName(nasTrialDetailName: string) {
    return this.pathTemplates.nasTrialDetailPathTemplate.match(
      nasTrialDetailName
    ).location;
  }

  /**
   * Parse the nas_job from NasTrialDetail resource.
   *
   * @param {string} nasTrialDetailName
   *   A fully-qualified path representing NasTrialDetail resource.
   * @returns {string} A string representing the nas_job.
   */
  matchNasJobFromNasTrialDetailName(nasTrialDetailName: string) {
    return this.pathTemplates.nasTrialDetailPathTemplate.match(
      nasTrialDetailName
    ).nas_job;
  }

  /**
   * Parse the nas_trial_detail from NasTrialDetail resource.
   *
   * @param {string} nasTrialDetailName
   *   A fully-qualified path representing NasTrialDetail resource.
   * @returns {string} A string representing the nas_trial_detail.
   */
  matchNasTrialDetailFromNasTrialDetailName(nasTrialDetailName: string) {
    return this.pathTemplates.nasTrialDetailPathTemplate.match(
      nasTrialDetailName
    ).nas_trial_detail;
  }

  /**
   * Return a fully-qualified notebookExecutionJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} notebook_execution_job
   * @returns {string} Resource name string.
   */
  notebookExecutionJobPath(
    project: string,
    location: string,
    notebookExecutionJob: string
  ) {
    return this.pathTemplates.notebookExecutionJobPathTemplate.render({
      project: project,
      location: location,
      notebook_execution_job: notebookExecutionJob,
    });
  }

  /**
   * Parse the project from NotebookExecutionJob resource.
   *
   * @param {string} notebookExecutionJobName
   *   A fully-qualified path representing NotebookExecutionJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNotebookExecutionJobName(notebookExecutionJobName: string) {
    return this.pathTemplates.notebookExecutionJobPathTemplate.match(
      notebookExecutionJobName
    ).project;
  }

  /**
   * Parse the location from NotebookExecutionJob resource.
   *
   * @param {string} notebookExecutionJobName
   *   A fully-qualified path representing NotebookExecutionJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNotebookExecutionJobName(notebookExecutionJobName: string) {
    return this.pathTemplates.notebookExecutionJobPathTemplate.match(
      notebookExecutionJobName
    ).location;
  }

  /**
   * Parse the notebook_execution_job from NotebookExecutionJob resource.
   *
   * @param {string} notebookExecutionJobName
   *   A fully-qualified path representing NotebookExecutionJob resource.
   * @returns {string} A string representing the notebook_execution_job.
   */
  matchNotebookExecutionJobFromNotebookExecutionJobName(
    notebookExecutionJobName: string
  ) {
    return this.pathTemplates.notebookExecutionJobPathTemplate.match(
      notebookExecutionJobName
    ).notebook_execution_job;
  }

  /**
   * Return a fully-qualified notebookRuntime resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} notebook_runtime
   * @returns {string} Resource name string.
   */
  notebookRuntimePath(
    project: string,
    location: string,
    notebookRuntime: string
  ) {
    return this.pathTemplates.notebookRuntimePathTemplate.render({
      project: project,
      location: location,
      notebook_runtime: notebookRuntime,
    });
  }

  /**
   * Parse the project from NotebookRuntime resource.
   *
   * @param {string} notebookRuntimeName
   *   A fully-qualified path representing NotebookRuntime resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNotebookRuntimeName(notebookRuntimeName: string) {
    return this.pathTemplates.notebookRuntimePathTemplate.match(
      notebookRuntimeName
    ).project;
  }

  /**
   * Parse the location from NotebookRuntime resource.
   *
   * @param {string} notebookRuntimeName
   *   A fully-qualified path representing NotebookRuntime resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNotebookRuntimeName(notebookRuntimeName: string) {
    return this.pathTemplates.notebookRuntimePathTemplate.match(
      notebookRuntimeName
    ).location;
  }

  /**
   * Parse the notebook_runtime from NotebookRuntime resource.
   *
   * @param {string} notebookRuntimeName
   *   A fully-qualified path representing NotebookRuntime resource.
   * @returns {string} A string representing the notebook_runtime.
   */
  matchNotebookRuntimeFromNotebookRuntimeName(notebookRuntimeName: string) {
    return this.pathTemplates.notebookRuntimePathTemplate.match(
      notebookRuntimeName
    ).notebook_runtime;
  }

  /**
   * Return a fully-qualified notebookRuntimeTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} notebook_runtime_template
   * @returns {string} Resource name string.
   */
  notebookRuntimeTemplatePath(
    project: string,
    location: string,
    notebookRuntimeTemplate: string
  ) {
    return this.pathTemplates.notebookRuntimeTemplatePathTemplate.render({
      project: project,
      location: location,
      notebook_runtime_template: notebookRuntimeTemplate,
    });
  }

  /**
   * Parse the project from NotebookRuntimeTemplate resource.
   *
   * @param {string} notebookRuntimeTemplateName
   *   A fully-qualified path representing NotebookRuntimeTemplate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNotebookRuntimeTemplateName(
    notebookRuntimeTemplateName: string
  ) {
    return this.pathTemplates.notebookRuntimeTemplatePathTemplate.match(
      notebookRuntimeTemplateName
    ).project;
  }

  /**
   * Parse the location from NotebookRuntimeTemplate resource.
   *
   * @param {string} notebookRuntimeTemplateName
   *   A fully-qualified path representing NotebookRuntimeTemplate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNotebookRuntimeTemplateName(
    notebookRuntimeTemplateName: string
  ) {
    return this.pathTemplates.notebookRuntimeTemplatePathTemplate.match(
      notebookRuntimeTemplateName
    ).location;
  }

  /**
   * Parse the notebook_runtime_template from NotebookRuntimeTemplate resource.
   *
   * @param {string} notebookRuntimeTemplateName
   *   A fully-qualified path representing NotebookRuntimeTemplate resource.
   * @returns {string} A string representing the notebook_runtime_template.
   */
  matchNotebookRuntimeTemplateFromNotebookRuntimeTemplateName(
    notebookRuntimeTemplateName: string
  ) {
    return this.pathTemplates.notebookRuntimeTemplatePathTemplate.match(
      notebookRuntimeTemplateName
    ).notebook_runtime_template;
  }

  /**
   * Return a fully-qualified persistentResource resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} persistent_resource
   * @returns {string} Resource name string.
   */
  persistentResourcePath(
    project: string,
    location: string,
    persistentResource: string
  ) {
    return this.pathTemplates.persistentResourcePathTemplate.render({
      project: project,
      location: location,
      persistent_resource: persistentResource,
    });
  }

  /**
   * Parse the project from PersistentResource resource.
   *
   * @param {string} persistentResourceName
   *   A fully-qualified path representing PersistentResource resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPersistentResourceName(persistentResourceName: string) {
    return this.pathTemplates.persistentResourcePathTemplate.match(
      persistentResourceName
    ).project;
  }

  /**
   * Parse the location from PersistentResource resource.
   *
   * @param {string} persistentResourceName
   *   A fully-qualified path representing PersistentResource resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPersistentResourceName(persistentResourceName: string) {
    return this.pathTemplates.persistentResourcePathTemplate.match(
      persistentResourceName
    ).location;
  }

  /**
   * Parse the persistent_resource from PersistentResource resource.
   *
   * @param {string} persistentResourceName
   *   A fully-qualified path representing PersistentResource resource.
   * @returns {string} A string representing the persistent_resource.
   */
  matchPersistentResourceFromPersistentResourceName(
    persistentResourceName: string
  ) {
    return this.pathTemplates.persistentResourcePathTemplate.match(
      persistentResourceName
    ).persistent_resource;
  }

  /**
   * Return a fully-qualified pipelineJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} pipeline_job
   * @returns {string} Resource name string.
   */
  pipelineJobPath(project: string, location: string, pipelineJob: string) {
    return this.pathTemplates.pipelineJobPathTemplate.render({
      project: project,
      location: location,
      pipeline_job: pipelineJob,
    });
  }

  /**
   * Parse the project from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .project;
  }

  /**
   * Parse the location from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .location;
  }

  /**
   * Parse the pipeline_job from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the pipeline_job.
   */
  matchPipelineJobFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .pipeline_job;
  }

  /**
   * Return a fully-qualified projectLocationEndpoint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} endpoint
   * @returns {string} Resource name string.
   */
  projectLocationEndpointPath(
    project: string,
    location: string,
    endpoint: string
  ) {
    return this.pathTemplates.projectLocationEndpointPathTemplate.render({
      project: project,
      location: location,
      endpoint: endpoint,
    });
  }

  /**
   * Parse the project from ProjectLocationEndpoint resource.
   *
   * @param {string} projectLocationEndpointName
   *   A fully-qualified path representing project_location_endpoint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationEndpointName(
    projectLocationEndpointName: string
  ) {
    return this.pathTemplates.projectLocationEndpointPathTemplate.match(
      projectLocationEndpointName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationEndpoint resource.
   *
   * @param {string} projectLocationEndpointName
   *   A fully-qualified path representing project_location_endpoint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationEndpointName(
    projectLocationEndpointName: string
  ) {
    return this.pathTemplates.projectLocationEndpointPathTemplate.match(
      projectLocationEndpointName
    ).location;
  }

  /**
   * Parse the endpoint from ProjectLocationEndpoint resource.
   *
   * @param {string} projectLocationEndpointName
   *   A fully-qualified path representing project_location_endpoint resource.
   * @returns {string} A string representing the endpoint.
   */
  matchEndpointFromProjectLocationEndpointName(
    projectLocationEndpointName: string
  ) {
    return this.pathTemplates.projectLocationEndpointPathTemplate.match(
      projectLocationEndpointName
    ).endpoint;
  }

  /**
   * Return a fully-qualified projectLocationFeatureGroupFeature resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_group
   * @param {string} feature
   * @returns {string} Resource name string.
   */
  projectLocationFeatureGroupFeaturePath(
    project: string,
    location: string,
    featureGroup: string,
    feature: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.render(
      {
        project: project,
        location: location,
        feature_group: featureGroup,
        feature: feature,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationFeatureGroupFeature resource.
   *
   * @param {string} projectLocationFeatureGroupFeatureName
   *   A fully-qualified path representing project_location_feature_group_feature resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationFeatureGroupFeatureName(
    projectLocationFeatureGroupFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.match(
      projectLocationFeatureGroupFeatureName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationFeatureGroupFeature resource.
   *
   * @param {string} projectLocationFeatureGroupFeatureName
   *   A fully-qualified path representing project_location_feature_group_feature resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationFeatureGroupFeatureName(
    projectLocationFeatureGroupFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.match(
      projectLocationFeatureGroupFeatureName
    ).location;
  }

  /**
   * Parse the feature_group from ProjectLocationFeatureGroupFeature resource.
   *
   * @param {string} projectLocationFeatureGroupFeatureName
   *   A fully-qualified path representing project_location_feature_group_feature resource.
   * @returns {string} A string representing the feature_group.
   */
  matchFeatureGroupFromProjectLocationFeatureGroupFeatureName(
    projectLocationFeatureGroupFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.match(
      projectLocationFeatureGroupFeatureName
    ).feature_group;
  }

  /**
   * Parse the feature from ProjectLocationFeatureGroupFeature resource.
   *
   * @param {string} projectLocationFeatureGroupFeatureName
   *   A fully-qualified path representing project_location_feature_group_feature resource.
   * @returns {string} A string representing the feature.
   */
  matchFeatureFromProjectLocationFeatureGroupFeatureName(
    projectLocationFeatureGroupFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeatureGroupFeaturePathTemplate.match(
      projectLocationFeatureGroupFeatureName
    ).feature;
  }

  /**
   * Return a fully-qualified projectLocationFeaturestoreEntityTypeFeature resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @param {string} entity_type
   * @param {string} feature
   * @returns {string} Resource name string.
   */
  projectLocationFeaturestoreEntityTypeFeaturePath(
    project: string,
    location: string,
    featurestore: string,
    entityType: string,
    feature: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.render(
      {
        project: project,
        location: location,
        featurestore: featurestore,
        entity_type: entityType,
        feature: feature,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).location;
  }

  /**
   * Parse the featurestore from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).featurestore;
  }

  /**
   * Parse the entity_type from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).entity_type;
  }

  /**
   * Parse the feature from ProjectLocationFeaturestoreEntityTypeFeature resource.
   *
   * @param {string} projectLocationFeaturestoreEntityTypeFeatureName
   *   A fully-qualified path representing project_location_featurestore_entity_type_feature resource.
   * @returns {string} A string representing the feature.
   */
  matchFeatureFromProjectLocationFeaturestoreEntityTypeFeatureName(
    projectLocationFeaturestoreEntityTypeFeatureName: string
  ) {
    return this.pathTemplates.projectLocationFeaturestoreEntityTypeFeaturePathTemplate.match(
      projectLocationFeaturestoreEntityTypeFeatureName
    ).feature;
  }

  /**
   * Return a fully-qualified projectLocationPublisherModel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} publisher
   * @param {string} model
   * @returns {string} Resource name string.
   */
  projectLocationPublisherModelPath(
    project: string,
    location: string,
    publisher: string,
    model: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.render({
      project: project,
      location: location,
      publisher: publisher,
      model: model,
    });
  }

  /**
   * Parse the project from ProjectLocationPublisherModel resource.
   *
   * @param {string} projectLocationPublisherModelName
   *   A fully-qualified path representing project_location_publisher_model resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationPublisherModelName(
    projectLocationPublisherModelName: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.match(
      projectLocationPublisherModelName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationPublisherModel resource.
   *
   * @param {string} projectLocationPublisherModelName
   *   A fully-qualified path representing project_location_publisher_model resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationPublisherModelName(
    projectLocationPublisherModelName: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.match(
      projectLocationPublisherModelName
    ).location;
  }

  /**
   * Parse the publisher from ProjectLocationPublisherModel resource.
   *
   * @param {string} projectLocationPublisherModelName
   *   A fully-qualified path representing project_location_publisher_model resource.
   * @returns {string} A string representing the publisher.
   */
  matchPublisherFromProjectLocationPublisherModelName(
    projectLocationPublisherModelName: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.match(
      projectLocationPublisherModelName
    ).publisher;
  }

  /**
   * Parse the model from ProjectLocationPublisherModel resource.
   *
   * @param {string} projectLocationPublisherModelName
   *   A fully-qualified path representing project_location_publisher_model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromProjectLocationPublisherModelName(
    projectLocationPublisherModelName: string
  ) {
    return this.pathTemplates.projectLocationPublisherModelPathTemplate.match(
      projectLocationPublisherModelName
    ).model;
  }

  /**
   * Return a fully-qualified publisherModel resource name string.
   *
   * @param {string} publisher
   * @param {string} model
   * @returns {string} Resource name string.
   */
  publisherModelPath(publisher: string, model: string) {
    return this.pathTemplates.publisherModelPathTemplate.render({
      publisher: publisher,
      model: model,
    });
  }

  /**
   * Parse the publisher from PublisherModel resource.
   *
   * @param {string} publisherModelName
   *   A fully-qualified path representing PublisherModel resource.
   * @returns {string} A string representing the publisher.
   */
  matchPublisherFromPublisherModelName(publisherModelName: string) {
    return this.pathTemplates.publisherModelPathTemplate.match(
      publisherModelName
    ).publisher;
  }

  /**
   * Parse the model from PublisherModel resource.
   *
   * @param {string} publisherModelName
   *   A fully-qualified path representing PublisherModel resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromPublisherModelName(publisherModelName: string) {
    return this.pathTemplates.publisherModelPathTemplate.match(
      publisherModelName
    ).model;
  }

  /**
   * Return a fully-qualified ragCorpus resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} rag_corpus
   * @returns {string} Resource name string.
   */
  ragCorpusPath(project: string, location: string, ragCorpus: string) {
    return this.pathTemplates.ragCorpusPathTemplate.render({
      project: project,
      location: location,
      rag_corpus: ragCorpus,
    });
  }

  /**
   * Parse the project from RagCorpus resource.
   *
   * @param {string} ragCorpusName
   *   A fully-qualified path representing RagCorpus resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRagCorpusName(ragCorpusName: string) {
    return this.pathTemplates.ragCorpusPathTemplate.match(ragCorpusName)
      .project;
  }

  /**
   * Parse the location from RagCorpus resource.
   *
   * @param {string} ragCorpusName
   *   A fully-qualified path representing RagCorpus resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRagCorpusName(ragCorpusName: string) {
    return this.pathTemplates.ragCorpusPathTemplate.match(ragCorpusName)
      .location;
  }

  /**
   * Parse the rag_corpus from RagCorpus resource.
   *
   * @param {string} ragCorpusName
   *   A fully-qualified path representing RagCorpus resource.
   * @returns {string} A string representing the rag_corpus.
   */
  matchRagCorpusFromRagCorpusName(ragCorpusName: string) {
    return this.pathTemplates.ragCorpusPathTemplate.match(ragCorpusName)
      .rag_corpus;
  }

  /**
   * Return a fully-qualified ragFile resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} rag_corpus
   * @param {string} rag_file
   * @returns {string} Resource name string.
   */
  ragFilePath(
    project: string,
    location: string,
    ragCorpus: string,
    ragFile: string
  ) {
    return this.pathTemplates.ragFilePathTemplate.render({
      project: project,
      location: location,
      rag_corpus: ragCorpus,
      rag_file: ragFile,
    });
  }

  /**
   * Parse the project from RagFile resource.
   *
   * @param {string} ragFileName
   *   A fully-qualified path representing RagFile resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRagFileName(ragFileName: string) {
    return this.pathTemplates.ragFilePathTemplate.match(ragFileName).project;
  }

  /**
   * Parse the location from RagFile resource.
   *
   * @param {string} ragFileName
   *   A fully-qualified path representing RagFile resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRagFileName(ragFileName: string) {
    return this.pathTemplates.ragFilePathTemplate.match(ragFileName).location;
  }

  /**
   * Parse the rag_corpus from RagFile resource.
   *
   * @param {string} ragFileName
   *   A fully-qualified path representing RagFile resource.
   * @returns {string} A string representing the rag_corpus.
   */
  matchRagCorpusFromRagFileName(ragFileName: string) {
    return this.pathTemplates.ragFilePathTemplate.match(ragFileName).rag_corpus;
  }

  /**
   * Parse the rag_file from RagFile resource.
   *
   * @param {string} ragFileName
   *   A fully-qualified path representing RagFile resource.
   * @returns {string} A string representing the rag_file.
   */
  matchRagFileFromRagFileName(ragFileName: string) {
    return this.pathTemplates.ragFilePathTemplate.match(ragFileName).rag_file;
  }

  /**
   * Return a fully-qualified reasoningEngine resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} reasoning_engine
   * @returns {string} Resource name string.
   */
  reasoningEnginePath(
    project: string,
    location: string,
    reasoningEngine: string
  ) {
    return this.pathTemplates.reasoningEnginePathTemplate.render({
      project: project,
      location: location,
      reasoning_engine: reasoningEngine,
    });
  }

  /**
   * Parse the project from ReasoningEngine resource.
   *
   * @param {string} reasoningEngineName
   *   A fully-qualified path representing ReasoningEngine resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReasoningEngineName(reasoningEngineName: string) {
    return this.pathTemplates.reasoningEnginePathTemplate.match(
      reasoningEngineName
    ).project;
  }

  /**
   * Parse the location from ReasoningEngine resource.
   *
   * @param {string} reasoningEngineName
   *   A fully-qualified path representing ReasoningEngine resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReasoningEngineName(reasoningEngineName: string) {
    return this.pathTemplates.reasoningEnginePathTemplate.match(
      reasoningEngineName
    ).location;
  }

  /**
   * Parse the reasoning_engine from ReasoningEngine resource.
   *
   * @param {string} reasoningEngineName
   *   A fully-qualified path representing ReasoningEngine resource.
   * @returns {string} A string representing the reasoning_engine.
   */
  matchReasoningEngineFromReasoningEngineName(reasoningEngineName: string) {
    return this.pathTemplates.reasoningEnginePathTemplate.match(
      reasoningEngineName
    ).reasoning_engine;
  }

  /**
   * Return a fully-qualified savedQuery resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} saved_query
   * @returns {string} Resource name string.
   */
  savedQueryPath(
    project: string,
    location: string,
    dataset: string,
    savedQuery: string
  ) {
    return this.pathTemplates.savedQueryPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      saved_query: savedQuery,
    });
  }

  /**
   * Parse the project from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .project;
  }

  /**
   * Parse the location from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .location;
  }

  /**
   * Parse the dataset from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .dataset;
  }

  /**
   * Parse the saved_query from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the saved_query.
   */
  matchSavedQueryFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .saved_query;
  }

  /**
   * Return a fully-qualified schedule resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} schedule
   * @returns {string} Resource name string.
   */
  schedulePath(project: string, location: string, schedule: string) {
    return this.pathTemplates.schedulePathTemplate.render({
      project: project,
      location: location,
      schedule: schedule,
    });
  }

  /**
   * Parse the project from Schedule resource.
   *
   * @param {string} scheduleName
   *   A fully-qualified path representing Schedule resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromScheduleName(scheduleName: string) {
    return this.pathTemplates.schedulePathTemplate.match(scheduleName).project;
  }

  /**
   * Parse the location from Schedule resource.
   *
   * @param {string} scheduleName
   *   A fully-qualified path representing Schedule resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromScheduleName(scheduleName: string) {
    return this.pathTemplates.schedulePathTemplate.match(scheduleName).location;
  }

  /**
   * Parse the schedule from Schedule resource.
   *
   * @param {string} scheduleName
   *   A fully-qualified path representing Schedule resource.
   * @returns {string} A string representing the schedule.
   */
  matchScheduleFromScheduleName(scheduleName: string) {
    return this.pathTemplates.schedulePathTemplate.match(scheduleName).schedule;
  }

  /**
   * Return a fully-qualified specialistPool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} specialist_pool
   * @returns {string} Resource name string.
   */
  specialistPoolPath(
    project: string,
    location: string,
    specialistPool: string
  ) {
    return this.pathTemplates.specialistPoolPathTemplate.render({
      project: project,
      location: location,
      specialist_pool: specialistPool,
    });
  }

  /**
   * Parse the project from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).project;
  }

  /**
   * Parse the location from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).location;
  }

  /**
   * Parse the specialist_pool from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the specialist_pool.
   */
  matchSpecialistPoolFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).specialist_pool;
  }

  /**
   * Return a fully-qualified study resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} study
   * @returns {string} Resource name string.
   */
  studyPath(project: string, location: string, study: string) {
    return this.pathTemplates.studyPathTemplate.render({
      project: project,
      location: location,
      study: study,
    });
  }

  /**
   * Parse the project from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).project;
  }

  /**
   * Parse the location from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).location;
  }

  /**
   * Parse the study from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the study.
   */
  matchStudyFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).study;
  }

  /**
   * Return a fully-qualified tensorboard resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @returns {string} Resource name string.
   */
  tensorboardPath(project: string, location: string, tensorboard: string) {
    return this.pathTemplates.tensorboardPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
    });
  }

  /**
   * Parse the project from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .project;
  }

  /**
   * Parse the location from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .location;
  }

  /**
   * Parse the tensorboard from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .tensorboard;
  }

  /**
   * Return a fully-qualified tensorboardExperiment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @returns {string} Resource name string.
   */
  tensorboardExperimentPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
    });
  }

  /**
   * Parse the project from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardExperimentName(tensorboardExperimentName: string) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).project;
  }

  /**
   * Parse the location from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).experiment;
  }

  /**
   * Return a fully-qualified tensorboardRun resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @param {string} run
   * @returns {string} Resource name string.
   */
  tensorboardRunPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string,
    run: string
  ) {
    return this.pathTemplates.tensorboardRunPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
      run: run,
    });
  }

  /**
   * Parse the project from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).project;
  }

  /**
   * Parse the location from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).experiment;
  }

  /**
   * Parse the run from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).run;
  }

  /**
   * Return a fully-qualified tensorboardTimeSeries resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @param {string} run
   * @param {string} time_series
   * @returns {string} Resource name string.
   */
  tensorboardTimeSeriesPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string,
    run: string,
    timeSeries: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
      run: run,
      time_series: timeSeries,
    });
  }

  /**
   * Parse the project from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardTimeSeriesName(tensorboardTimeSeriesName: string) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).project;
  }

  /**
   * Parse the location from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).experiment;
  }

  /**
   * Parse the run from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromTensorboardTimeSeriesName(tensorboardTimeSeriesName: string) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).run;
  }

  /**
   * Parse the time_series from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the time_series.
   */
  matchTimeSeriesFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).time_series;
  }

  /**
   * Return a fully-qualified trainingPipeline resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} training_pipeline
   * @returns {string} Resource name string.
   */
  trainingPipelinePath(
    project: string,
    location: string,
    trainingPipeline: string
  ) {
    return this.pathTemplates.trainingPipelinePathTemplate.render({
      project: project,
      location: location,
      training_pipeline: trainingPipeline,
    });
  }

  /**
   * Parse the project from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).project;
  }

  /**
   * Parse the location from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).location;
  }

  /**
   * Parse the training_pipeline from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the training_pipeline.
   */
  matchTrainingPipelineFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).training_pipeline;
  }

  /**
   * Return a fully-qualified trial resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} study
   * @param {string} trial
   * @returns {string} Resource name string.
   */
  trialPath(project: string, location: string, study: string, trial: string) {
    return this.pathTemplates.trialPathTemplate.render({
      project: project,
      location: location,
      study: study,
      trial: trial,
    });
  }

  /**
   * Parse the project from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).project;
  }

  /**
   * Parse the location from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).location;
  }

  /**
   * Parse the study from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the study.
   */
  matchStudyFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).study;
  }

  /**
   * Parse the trial from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the trial.
   */
  matchTrialFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).trial;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.modelGardenServiceStub && !this._terminated) {
      return this.modelGardenServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
