// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform, PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/tensorboard_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './tensorboard_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  TensorboardService
 * @class
 * @memberof v1beta1
 */
export class TensorboardServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  tensorboardServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TensorboardServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new TensorboardServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof TensorboardServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'
      ),
      annotationSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'
      ),
      artifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'
      ),
      batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'
      ),
      contextPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'
      ),
      customJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/customJobs/{custom_job}'
      ),
      dataItemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'
      ),
      dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'
      ),
      datasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
      deploymentResourcePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}'
      ),
      endpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpoints/{endpoint}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}'
      ),
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'
      ),
      featurePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}'
      ),
      featurestorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}'
      ),
      hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'
      ),
      indexPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexes/{index}'
      ),
      indexEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      metadataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/metadataSchemas/{metadata_schema}'
      ),
      metadataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}'
      ),
      modelDeploymentMonitoringJobPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}'
        ),
      modelEvaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'
      ),
      modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'
      ),
      pipelineJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      savedQueryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}'
      ),
      specialistPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/specialistPools/{specialist_pool}'
      ),
      studyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}'
      ),
      tensorboardPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}'
      ),
      tensorboardExperimentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}'
      ),
      tensorboardRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}'
      ),
      tensorboardTimeSeriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}'
      ),
      trainingPipelinePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'
      ),
      trialPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}/trials/{trial}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTensorboards: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tensorboards'
      ),
      listTensorboardExperiments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tensorboardExperiments'
      ),
      listTensorboardRuns: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tensorboardRuns'
      ),
      listTensorboardTimeSeries: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tensorboardTimeSeries'
      ),
      exportTensorboardTimeSeriesData: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'timeSeriesDataPoints'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      readTensorboardBlobData: new this._gaxModule.StreamDescriptor(
        this._gaxModule.StreamType.SERVER_STREAMING,
        opts.fallback === 'rest'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/ui/{name=projects/*/locations/*}',
          additional_bindings: [
            {get: '/v1beta1/{name=projects/*/locations/*}'},
          ],
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/ui/{name=projects/*}/locations',
          additional_bindings: [{get: '/v1beta1/{name=projects/*}/locations'}],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/ui/{name=projects/*/locations/*/operations/*}:cancel',
          additional_bindings: [
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/ui/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {delete: '/ui/{name=projects/*/locations/*/models/*/operations/*}'},
            {
              delete:
                '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/studies/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {delete: '/v1beta1/{name=projects/*/locations/*/operations/*}'},
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              delete:
                '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/ui/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {get: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/edgeDeploymentJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/models/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/studies/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {get: '/v1beta1/{name=projects/*/locations/*/operations/*}'},
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/ui/{name=projects/*/locations/*}/operations',
          additional_bindings: [
            {get: '/ui/{name=projects/*/locations/*/datasets/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/edgeDevices/*}/operations'},
            {get: '/ui/{name=projects/*/locations/*/endpoints/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/customJobs/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/indexes/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/indexEndpoints/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/migratableResources/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/models/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/studies/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/studies/*/trials/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/trainingPipelines/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/pipelineJobs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/specialistPools/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',
            },
            {get: '/v1beta1/{name=projects/*/locations/*}/operations'},
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/endpoints/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/customJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/indexes/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/migratableResources/*}/operations',
            },
            {get: '/v1beta1/{name=projects/*/locations/*/models/*}/operations'},
            {
              get: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/persistentResources/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/studies/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/schedules/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/specialistPools/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',
            },
            {
              get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.WaitOperation',
          post: '/ui/{name=projects/*/locations/*/operations/*}:wait',
          additional_bindings: [
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',
            },
            {post: '/v1beta1/{name=projects/*/locations/*/operations/*}:wait'},
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',
            },
            {
              post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',
            },
          ],
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createTensorboardResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.Tensorboard'
    ) as gax.protobuf.Type;
    const createTensorboardMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.CreateTensorboardOperationMetadata'
    ) as gax.protobuf.Type;
    const updateTensorboardResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.Tensorboard'
    ) as gax.protobuf.Type;
    const updateTensorboardMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.UpdateTensorboardOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTensorboardResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTensorboardMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTensorboardExperimentResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTensorboardExperimentMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTensorboardRunResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTensorboardRunMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTensorboardTimeSeriesResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTensorboardTimeSeriesMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createTensorboard: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createTensorboardResponse.decode.bind(createTensorboardResponse),
        createTensorboardMetadata.decode.bind(createTensorboardMetadata)
      ),
      updateTensorboard: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateTensorboardResponse.decode.bind(updateTensorboardResponse),
        updateTensorboardMetadata.decode.bind(updateTensorboardMetadata)
      ),
      deleteTensorboard: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTensorboardResponse.decode.bind(deleteTensorboardResponse),
        deleteTensorboardMetadata.decode.bind(deleteTensorboardMetadata)
      ),
      deleteTensorboardExperiment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTensorboardExperimentResponse.decode.bind(
          deleteTensorboardExperimentResponse
        ),
        deleteTensorboardExperimentMetadata.decode.bind(
          deleteTensorboardExperimentMetadata
        )
      ),
      deleteTensorboardRun: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTensorboardRunResponse.decode.bind(deleteTensorboardRunResponse),
        deleteTensorboardRunMetadata.decode.bind(deleteTensorboardRunMetadata)
      ),
      deleteTensorboardTimeSeries: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTensorboardTimeSeriesResponse.decode.bind(
          deleteTensorboardTimeSeriesResponse
        ),
        deleteTensorboardTimeSeriesMetadata.decode.bind(
          deleteTensorboardTimeSeriesMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.aiplatform.v1beta1.TensorboardService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.tensorboardServiceStub) {
      return this.tensorboardServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.aiplatform.v1beta1.TensorboardService.
    this.tensorboardServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.aiplatform.v1beta1.TensorboardService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.aiplatform.v1beta1
            .TensorboardService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const tensorboardServiceStubMethods = [
      'createTensorboard',
      'getTensorboard',
      'readTensorboardUsage',
      'updateTensorboard',
      'listTensorboards',
      'deleteTensorboard',
      'createTensorboardExperiment',
      'getTensorboardExperiment',
      'updateTensorboardExperiment',
      'listTensorboardExperiments',
      'deleteTensorboardExperiment',
      'createTensorboardRun',
      'batchCreateTensorboardRuns',
      'getTensorboardRun',
      'updateTensorboardRun',
      'listTensorboardRuns',
      'deleteTensorboardRun',
      'batchCreateTensorboardTimeSeries',
      'createTensorboardTimeSeries',
      'getTensorboardTimeSeries',
      'updateTensorboardTimeSeries',
      'listTensorboardTimeSeries',
      'deleteTensorboardTimeSeries',
      'batchReadTensorboardTimeSeriesData',
      'readTensorboardTimeSeriesData',
      'readTensorboardBlobData',
      'writeTensorboardExperimentData',
      'writeTensorboardRunData',
      'exportTensorboardTimeSeriesData',
    ];
    for (const methodName of tensorboardServiceStubMethods) {
      const callPromise = this.tensorboardServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              if (methodName in this.descriptors.stream) {
                const stream = new PassThrough();
                setImmediate(() => {
                  stream.emit(
                    'error',
                    new this._gaxModule.GoogleError(
                      'The client has already been closed.'
                    )
                  );
                });
                return stream;
              }
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.stream[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.tensorboardServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'aiplatform.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a Tensorboard.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Tensorboard resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Tensorboard]{@link google.cloud.aiplatform.v1beta1.Tensorboard}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.get_tensorboard.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_GetTensorboard_async
   */
  getTensorboard(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboard,
      protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest | undefined,
      {} | undefined
    ]
  >;
  getTensorboard(
    request: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboard,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboard(
    request: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboard,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboard(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboard,
          | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboard,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboard,
      protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTensorboard(request, options, callback);
  }
  /**
   * Returns a list of monthly active users for a given TensorBoard instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboard
   *   Required. The name of the Tensorboard resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ReadTensorboardUsageResponse]{@link google.cloud.aiplatform.v1beta1.ReadTensorboardUsageResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.read_tensorboard_usage.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_ReadTensorboardUsage_async
   */
  readTensorboardUsage(
    request?: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  readTensorboardUsage(
    request: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageResponse,
      | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardUsage(
    request: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageResponse,
      | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardUsage(
    request?: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageResponse,
          | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageResponse,
      | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardUsageRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard: request.tensorboard ?? '',
      });
    this.initialize();
    return this.innerApiCalls.readTensorboardUsage(request, options, callback);
  }
  /**
   * Creates a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Tensorboard to create the
   *   TensorboardExperiment in. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {google.cloud.aiplatform.v1beta1.TensorboardExperiment} request.tensorboardExperiment
   *   The TensorboardExperiment to create.
   * @param {string} request.tensorboardExperimentId
   *   Required. The ID to use for the Tensorboard experiment, which becomes the
   *   final component of the Tensorboard experiment's resource name.
   *
   *   This value should be 1-128 characters, and valid characters
   *   are /{@link 0-9|a-z}-/.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardExperiment]{@link google.cloud.aiplatform.v1beta1.TensorboardExperiment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.create_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_CreateTensorboardExperiment_async
   */
  createTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
          | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTensorboardExperiment(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardExperiment resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardExperiment]{@link google.cloud.aiplatform.v1beta1.TensorboardExperiment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.get_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_GetTensorboardExperiment_async
   */
  getTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
          | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTensorboardExperiment(
      request,
      options,
      callback
    );
  }
  /**
   * Updates a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   TensorboardExperiment resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it's in the mask. If the
   *   user does not provide a mask then all fields are overwritten if new
   *   values are specified.
   * @param {google.cloud.aiplatform.v1beta1.TensorboardExperiment} request.tensorboardExperiment
   *   Required. The TensorboardExperiment's `name` field is used to identify the
   *   TensorboardExperiment to be updated. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardExperiment]{@link google.cloud.aiplatform.v1beta1.TensorboardExperiment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.update_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_UpdateTensorboardExperiment_async
   */
  updateTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
          | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tensorboard_experiment.name':
          request.tensorboardExperiment!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTensorboardExperiment(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a TensorboardRun.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to create the
   *   TensorboardRun in. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {google.cloud.aiplatform.v1beta1.TensorboardRun} request.tensorboardRun
   *   Required. The TensorboardRun to create.
   * @param {string} request.tensorboardRunId
   *   Required. The ID to use for the Tensorboard run, which becomes the final
   *   component of the Tensorboard run's resource name.
   *
   *   This value should be 1-128 characters, and valid characters
   *   are /{@link 0-9|a-z}-/.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardRun]{@link google.cloud.aiplatform.v1beta1.TensorboardRun}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.create_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_CreateTensorboardRun_async
   */
  createTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTensorboardRun(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardRun(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
          | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRunRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTensorboardRun(request, options, callback);
  }
  /**
   * Batch create TensorboardRuns.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to create the
   *   TensorboardRuns in. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   *   The parent field in the CreateTensorboardRunRequest messages must match
   *   this field.
   * @param {number[]} request.requests
   *   Required. The request message specifying the TensorboardRuns to create.
   *   A maximum of 1000 TensorboardRuns can be created in a batch.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCreateTensorboardRunsResponse]{@link google.cloud.aiplatform.v1beta1.BatchCreateTensorboardRunsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.batch_create_tensorboard_runs.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_BatchCreateTensorboardRuns_async
   */
  batchCreateTensorboardRuns(
    request?: protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  batchCreateTensorboardRuns(
    request: protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateTensorboardRuns(
    request: protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateTensorboardRuns(
    request?: protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsResponse,
          | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateTensorboardRuns(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a TensorboardRun.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardRun resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardRun]{@link google.cloud.aiplatform.v1beta1.TensorboardRun}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.get_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_GetTensorboardRun_async
   */
  getTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTensorboardRun(
    request: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardRun(
    request: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
          | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardRunRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTensorboardRun(request, options, callback);
  }
  /**
   * Updates a TensorboardRun.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   TensorboardRun resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it's in the mask. If the
   *   user does not provide a mask then all fields are overwritten if new
   *   values are specified.
   * @param {google.cloud.aiplatform.v1beta1.TensorboardRun} request.tensorboardRun
   *   Required. The TensorboardRun's `name` field is used to identify the
   *   TensorboardRun to be updated. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardRun]{@link google.cloud.aiplatform.v1beta1.TensorboardRun}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.update_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_UpdateTensorboardRun_async
   */
  updateTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTensorboardRun(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardRun(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
          | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRunRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tensorboard_run.name': request.tensorboardRun!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTensorboardRun(request, options, callback);
  }
  /**
   * Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to create the
   *   TensorboardTimeSeries in.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   *   The TensorboardRuns referenced by the parent fields in the
   *   CreateTensorboardTimeSeriesRequest messages must be sub resources of this
   *   TensorboardExperiment.
   * @param {number[]} request.requests
   *   Required. The request message specifying the TensorboardTimeSeries to
   *   create. A maximum of 1000 TensorboardTimeSeries can be created in a batch.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCreateTensorboardTimeSeriesResponse]{@link google.cloud.aiplatform.v1beta1.BatchCreateTensorboardTimeSeriesResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.batch_create_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_BatchCreateTensorboardTimeSeries_async
   */
  batchCreateTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  batchCreateTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesResponse,
          | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IBatchCreateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a TensorboardTimeSeries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardRun to create the
   *   TensorboardTimeSeries in.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {string} [request.tensorboardTimeSeriesId]
   *   Optional. The user specified unique ID to use for the
   *   TensorboardTimeSeries, which becomes the final component of the
   *   TensorboardTimeSeries's resource name. This value should match
   *   "{@link a-z0-9-|a-z0-9}{0, 127}"
   * @param {google.cloud.aiplatform.v1beta1.TensorboardTimeSeries} request.tensorboardTimeSeries
   *   Required. The TensorboardTimeSeries to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardTimeSeries]{@link google.cloud.aiplatform.v1beta1.TensorboardTimeSeries}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.create_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_CreateTensorboardTimeSeries_async
   */
  createTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
          | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a TensorboardTimeSeries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardTimeSeries resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardTimeSeries]{@link google.cloud.aiplatform.v1beta1.TensorboardTimeSeries}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.get_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_GetTensorboardTimeSeries_async
   */
  getTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
          | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1beta1.IGetTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Updates a TensorboardTimeSeries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   TensorboardTimeSeries resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it's in the mask. If the
   *   user does not provide a mask then all fields are overwritten if new
   *   values are specified.
   * @param {google.cloud.aiplatform.v1beta1.TensorboardTimeSeries} request.tensorboardTimeSeries
   *   Required. The TensorboardTimeSeries' `name` field is used to identify the
   *   TensorboardTimeSeries to be updated.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TensorboardTimeSeries]{@link google.cloud.aiplatform.v1beta1.TensorboardTimeSeries}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.update_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_UpdateTensorboardTimeSeries_async
   */
  updateTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
          | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tensorboard_time_series.name':
          request.tensorboardTimeSeries!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Reads multiple TensorboardTimeSeries' data. The data point number limit is
   * 1000 for scalars, 100 for tensors and blob references. If the number of
   * data points stored is less than the limit, all data is returned.
   * Otherwise, the number limit of data points is randomly selected from
   * this time series and returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboard
   *   Required. The resource name of the Tensorboard containing
   *   TensorboardTimeSeries to read data from. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`.
   *   The TensorboardTimeSeries referenced by
   *   {@link google.cloud.aiplatform.v1beta1.BatchReadTensorboardTimeSeriesDataRequest.time_series|time_series}
   *   must be sub resources of this Tensorboard.
   * @param {string[]} request.timeSeries
   *   Required. The resource names of the TensorboardTimeSeries to read data
   *   from. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchReadTensorboardTimeSeriesDataResponse]{@link google.cloud.aiplatform.v1beta1.BatchReadTensorboardTimeSeriesDataResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.batch_read_tensorboard_time_series_data.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_BatchReadTensorboardTimeSeriesData_async
   */
  batchReadTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  batchReadTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchReadTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchReadTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataResponse,
          | protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IBatchReadTensorboardTimeSeriesDataRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard: request.tensorboard ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchReadTensorboardTimeSeriesData(
      request,
      options,
      callback
    );
  }
  /**
   * Reads a TensorboardTimeSeries' data. By default, if the number of data
   * points stored is less than 1000, all data is returned. Otherwise, 1000
   * data points is randomly selected from this time series and returned.
   * This value can be changed by changing max_data_points, which can't be
   * greater than 10k.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardTimeSeries
   *   Required. The resource name of the TensorboardTimeSeries to read data from.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {number} request.maxDataPoints
   *   The maximum number of TensorboardTimeSeries' data to return.
   *
   *   This value should be a positive integer.
   *   This value can be set to -1 to return all data.
   * @param {string} request.filter
   *   Reads the TensorboardTimeSeries' data that match the filter expression.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ReadTensorboardTimeSeriesDataResponse]{@link google.cloud.aiplatform.v1beta1.ReadTensorboardTimeSeriesDataResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.read_tensorboard_time_series_data.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_ReadTensorboardTimeSeriesData_async
   */
  readTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  readTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataResponse,
          | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IReadTensorboardTimeSeriesDataRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_time_series: request.tensorboardTimeSeries ?? '',
      });
    this.initialize();
    return this.innerApiCalls.readTensorboardTimeSeriesData(
      request,
      options,
      callback
    );
  }
  /**
   * Write time series data points of multiple TensorboardTimeSeries in multiple
   * TensorboardRun's. If any data fail to be ingested, an error is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardExperiment
   *   Required. The resource name of the TensorboardExperiment to write data to.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {number[]} request.writeRunDataRequests
   *   Required. Requests containing per-run TensorboardTimeSeries data to write.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [WriteTensorboardExperimentDataResponse]{@link google.cloud.aiplatform.v1beta1.WriteTensorboardExperimentDataResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.write_tensorboard_experiment_data.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_WriteTensorboardExperimentData_async
   */
  writeTensorboardExperimentData(
    request?: protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  writeTensorboardExperimentData(
    request: protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  writeTensorboardExperimentData(
    request: protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  writeTensorboardExperimentData(
    request?: protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataResponse,
          | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardExperimentDataRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_experiment: request.tensorboardExperiment ?? '',
      });
    this.initialize();
    return this.innerApiCalls.writeTensorboardExperimentData(
      request,
      options,
      callback
    );
  }
  /**
   * Write time series data points into multiple TensorboardTimeSeries under
   * a TensorboardRun. If any data fail to be ingested, an error is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardRun
   *   Required. The resource name of the TensorboardRun to write data to.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {number[]} request.timeSeriesData
   *   Required. The TensorboardTimeSeries data to write.
   *   Values with in a time series are indexed by their step value.
   *   Repeated writes to the same step will overwrite the existing value for that
   *   step.
   *   The upper limit of data points per write request is 5000.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [WriteTensorboardRunDataResponse]{@link google.cloud.aiplatform.v1beta1.WriteTensorboardRunDataResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.write_tensorboard_run_data.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_WriteTensorboardRunData_async
   */
  writeTensorboardRunData(
    request?: protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  writeTensorboardRunData(
    request: protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  writeTensorboardRunData(
    request: protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  writeTensorboardRunData(
    request?: protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataResponse,
          | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataResponse,
      | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataResponse,
      (
        | protos.google.cloud.aiplatform.v1beta1.IWriteTensorboardRunDataRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_run: request.tensorboardRun ?? '',
      });
    this.initialize();
    return this.innerApiCalls.writeTensorboardRunData(
      request,
      options,
      callback
    );
  }

  /**
   * Gets bytes of TensorboardBlobs.
   * This is to allow reading blob data stored in consumer project's Cloud
   * Storage bucket without users having to obtain Cloud Storage access
   * permission.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.timeSeries
   *   Required. The resource name of the TensorboardTimeSeries to list Blobs.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {string[]} request.blobIds
   *   IDs of the blobs to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits [ReadTensorboardBlobDataResponse]{@link google.cloud.aiplatform.v1beta1.ReadTensorboardBlobDataResponse} on 'data' event.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.read_tensorboard_blob_data.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_ReadTensorboardBlobData_async
   */
  readTensorboardBlobData(
    request?: protos.google.cloud.aiplatform.v1beta1.IReadTensorboardBlobDataRequest,
    options?: CallOptions
  ): gax.CancellableStream {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        time_series: request.timeSeries ?? '',
      });
    this.initialize();
    return this.innerApiCalls.readTensorboardBlobData(request, options);
  }

  /**
   * Creates a Tensorboard.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location to create the Tensorboard in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {google.cloud.aiplatform.v1beta1.Tensorboard} request.tensorboard
   *   Required. The Tensorboard to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.create_tensorboard.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_CreateTensorboard_async
   */
  createTensorboard(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createTensorboard(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboard(
    request: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboard(
    request?: protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.aiplatform.v1beta1.ITensorboard,
            protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTensorboard(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createTensorboard()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.create_tensorboard.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_CreateTensorboard_async
   */
  async checkCreateTensorboardProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.aiplatform.v1beta1.Tensorboard,
      protos.google.cloud.aiplatform.v1beta1.CreateTensorboardOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createTensorboard,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.aiplatform.v1beta1.Tensorboard,
      protos.google.cloud.aiplatform.v1beta1.CreateTensorboardOperationMetadata
    >;
  }
  /**
   * Updates a Tensorboard.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Tensorboard resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it's in the mask. If the
   *   user does not provide a mask then all fields are overwritten if new
   *   values are specified.
   * @param {google.cloud.aiplatform.v1beta1.Tensorboard} request.tensorboard
   *   Required. The Tensorboard's `name` field is used to identify the
   *   Tensorboard to be updated. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.update_tensorboard.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_UpdateTensorboard_async
   */
  updateTensorboard(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateTensorboard(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboard(
    request: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboard(
    request?: protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.aiplatform.v1beta1.ITensorboard,
            protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1beta1.ITensorboard,
        protos.google.cloud.aiplatform.v1beta1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tensorboard.name': request.tensorboard!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTensorboard(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateTensorboard()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.update_tensorboard.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_UpdateTensorboard_async
   */
  async checkUpdateTensorboardProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.aiplatform.v1beta1.Tensorboard,
      protos.google.cloud.aiplatform.v1beta1.UpdateTensorboardOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateTensorboard,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.aiplatform.v1beta1.Tensorboard,
      protos.google.cloud.aiplatform.v1beta1.UpdateTensorboardOperationMetadata
    >;
  }
  /**
   * Deletes a Tensorboard.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Tensorboard to be deleted.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.delete_tensorboard.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_DeleteTensorboard_async
   */
  deleteTensorboard(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteTensorboard(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboard(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboard(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTensorboard(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteTensorboard()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.delete_tensorboard.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_DeleteTensorboard_async
   */
  async checkDeleteTensorboardProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTensorboard,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >;
  }
  /**
   * Deletes a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardExperiment to be deleted.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.delete_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_DeleteTensorboardExperiment_async
   */
  deleteTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardExperimentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardExperimentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardExperimentRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardExperimentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTensorboardExperiment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteTensorboardExperiment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.delete_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_DeleteTensorboardExperiment_async
   */
  async checkDeleteTensorboardExperimentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTensorboardExperiment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >;
  }
  /**
   * Deletes a TensorboardRun.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardRun to be deleted.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.delete_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_DeleteTensorboardRun_async
   */
  deleteTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardRunRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteTensorboardRun(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardRunRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardRun(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardRunRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTensorboardRun(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteTensorboardRun()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.delete_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_DeleteTensorboardRun_async
   */
  async checkDeleteTensorboardRunProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTensorboardRun,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >;
  }
  /**
   * Deletes a TensorboardTimeSeries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardTimeSeries to be deleted.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.delete_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_DeleteTensorboardTimeSeries_async
   */
  deleteTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardTimeSeriesRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IDeleteTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteTensorboardTimeSeries()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.delete_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_DeleteTensorboardTimeSeries_async
   */
  async checkDeleteTensorboardTimeSeriesProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTensorboardTimeSeries,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata
    >;
  }
  /**
   * Lists Tensorboards in a Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location to list Tensorboards.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {string} request.filter
   *   Lists the Tensorboards that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of Tensorboards to return. The service may return
   *   fewer than this value. If unspecified, at most 100 Tensorboards are
   *   returned. The maximum value is 100; values above 100 are coerced to
   *   100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Tensorboard]{@link google.cloud.aiplatform.v1beta1.Tensorboard}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTensorboardsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTensorboards(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboard[],
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardsResponse
    ]
  >;
  listTensorboards(
    request: protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboard
    >
  ): void;
  listTensorboards(
    request: protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboard
    >
  ): void;
  listTensorboards(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListTensorboardsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.ITensorboard
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboard
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboard[],
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTensorboards(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location to list Tensorboards.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {string} request.filter
   *   Lists the Tensorboards that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of Tensorboards to return. The service may return
   *   fewer than this value. If unspecified, at most 100 Tensorboards are
   *   returned. The maximum value is 100; values above 100 are coerced to
   *   100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Tensorboard]{@link google.cloud.aiplatform.v1beta1.Tensorboard} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTensorboardsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTensorboardsStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboards'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboards.createStream(
      this.innerApiCalls.listTensorboards as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTensorboards`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location to list Tensorboards.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {string} request.filter
   *   Lists the Tensorboards that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of Tensorboards to return. The service may return
   *   fewer than this value. If unspecified, at most 100 Tensorboards are
   *   returned. The maximum value is 100; values above 100 are coerced to
   *   100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Tensorboard]{@link google.cloud.aiplatform.v1beta1.Tensorboard}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.list_tensorboards.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_ListTensorboards_async
   */
  listTensorboardsAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITensorboard> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboards'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboards.asyncIterate(
      this.innerApiCalls['listTensorboards'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITensorboard>;
  }
  /**
   * Lists TensorboardExperiments in a Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Tensorboard to list
   *   TensorboardExperiments. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {string} request.filter
   *   Lists the TensorboardExperiments that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardExperiments to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardExperiments are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TensorboardExperiment]{@link google.cloud.aiplatform.v1beta1.TensorboardExperiment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTensorboardExperimentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTensorboardExperiments(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment[],
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsResponse
    ]
  >;
  listTensorboardExperiments(
    request: protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment
    >
  ): void;
  listTensorboardExperiments(
    request: protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment
    >
  ): void;
  listTensorboardExperiments(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment[],
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTensorboardExperiments(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Tensorboard to list
   *   TensorboardExperiments. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {string} request.filter
   *   Lists the TensorboardExperiments that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardExperiments to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardExperiments are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TensorboardExperiment]{@link google.cloud.aiplatform.v1beta1.TensorboardExperiment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTensorboardExperimentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTensorboardExperimentsStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboardExperiments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboardExperiments.createStream(
      this.innerApiCalls.listTensorboardExperiments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTensorboardExperiments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Tensorboard to list
   *   TensorboardExperiments. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {string} request.filter
   *   Lists the TensorboardExperiments that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardExperiments to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardExperiments are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TensorboardExperiment]{@link google.cloud.aiplatform.v1beta1.TensorboardExperiment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.list_tensorboard_experiments.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_ListTensorboardExperiments_async
   */
  listTensorboardExperimentsAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardExperimentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboardExperiments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboardExperiments.asyncIterate(
      this.innerApiCalls['listTensorboardExperiments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITensorboardExperiment>;
  }
  /**
   * Lists TensorboardRuns in a Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to list
   *   TensorboardRuns. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {string} request.filter
   *   Lists the TensorboardRuns that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardRuns to return. The service may return
   *   fewer than this value. If unspecified, at most 50 TensorboardRuns are
   *   returned. The maximum value is 1000; values above 1000 are coerced to
   *   1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns|TensorboardService.ListTensorboardRuns}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns|TensorboardService.ListTensorboardRuns}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TensorboardRun]{@link google.cloud.aiplatform.v1beta1.TensorboardRun}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTensorboardRunsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTensorboardRuns(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun[],
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsResponse
    ]
  >;
  listTensorboardRuns(
    request: protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun
    >
  ): void;
  listTensorboardRuns(
    request: protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun
    >
  ): void;
  listTensorboardRuns(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.ITensorboardRun
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardRun[],
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTensorboardRuns(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to list
   *   TensorboardRuns. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {string} request.filter
   *   Lists the TensorboardRuns that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardRuns to return. The service may return
   *   fewer than this value. If unspecified, at most 50 TensorboardRuns are
   *   returned. The maximum value is 1000; values above 1000 are coerced to
   *   1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns|TensorboardService.ListTensorboardRuns}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns|TensorboardService.ListTensorboardRuns}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TensorboardRun]{@link google.cloud.aiplatform.v1beta1.TensorboardRun} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTensorboardRunsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTensorboardRunsStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboardRuns'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboardRuns.createStream(
      this.innerApiCalls.listTensorboardRuns as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTensorboardRuns`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to list
   *   TensorboardRuns. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {string} request.filter
   *   Lists the TensorboardRuns that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardRuns to return. The service may return
   *   fewer than this value. If unspecified, at most 50 TensorboardRuns are
   *   returned. The maximum value is 1000; values above 1000 are coerced to
   *   1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns|TensorboardService.ListTensorboardRuns}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns|TensorboardService.ListTensorboardRuns}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TensorboardRun]{@link google.cloud.aiplatform.v1beta1.TensorboardRun}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.list_tensorboard_runs.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_ListTensorboardRuns_async
   */
  listTensorboardRunsAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardRunsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITensorboardRun> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboardRuns'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboardRuns.asyncIterate(
      this.innerApiCalls['listTensorboardRuns'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITensorboardRun>;
  }
  /**
   * Lists TensorboardTimeSeries in a Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardRun to list
   *   TensorboardTimeSeries. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {string} request.filter
   *   Lists the TensorboardTimeSeries that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardTimeSeries to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardTimeSeries are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries|TensorboardService.ListTensorboardTimeSeries}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries|TensorboardService.ListTensorboardTimeSeries}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TensorboardTimeSeries]{@link google.cloud.aiplatform.v1beta1.TensorboardTimeSeries}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTensorboardTimeSeriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries[],
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesResponse
    ]
  >;
  listTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries
    >
  ): void;
  listTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries
    >
  ): void;
  listTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
          | protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
      | protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries[],
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardRun to list
   *   TensorboardTimeSeries. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {string} request.filter
   *   Lists the TensorboardTimeSeries that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardTimeSeries to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardTimeSeries are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries|TensorboardService.ListTensorboardTimeSeries}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries|TensorboardService.ListTensorboardTimeSeries}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TensorboardTimeSeries]{@link google.cloud.aiplatform.v1beta1.TensorboardTimeSeries} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTensorboardTimeSeriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTensorboardTimeSeriesStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboardTimeSeries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboardTimeSeries.createStream(
      this.innerApiCalls.listTensorboardTimeSeries as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTensorboardTimeSeries`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardRun to list
   *   TensorboardTimeSeries. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {string} request.filter
   *   Lists the TensorboardTimeSeries that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardTimeSeries to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardTimeSeries are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries|TensorboardService.ListTensorboardTimeSeries}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries|TensorboardService.ListTensorboardTimeSeries}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TensorboardTimeSeries]{@link google.cloud.aiplatform.v1beta1.TensorboardTimeSeries}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.list_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_ListTensorboardTimeSeries_async
   */
  listTensorboardTimeSeriesAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IListTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboardTimeSeries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboardTimeSeries.asyncIterate(
      this.innerApiCalls['listTensorboardTimeSeries'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITensorboardTimeSeries>;
  }
  /**
   * Exports a TensorboardTimeSeries' data. Data is returned in paginated
   * responses.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardTimeSeries
   *   Required. The resource name of the TensorboardTimeSeries to export data
   *   from. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {string} request.filter
   *   Exports the TensorboardTimeSeries' data that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of data points to return per page.
   *   The default page_size is 1000. Values must be between 1 and 10000.
   *   Values above 10000 are coerced to 10000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link |TensorboardService.ExportTensorboardTimeSeries} call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link |TensorboardService.ExportTensorboardTimeSeries} must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the TensorboardTimeSeries' data.
   *   By default, TensorboardTimeSeries' data is returned in a pseudo random
   *   order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TimeSeriesDataPoint]{@link google.cloud.aiplatform.v1beta1.TimeSeriesDataPoint}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `exportTensorboardTimeSeriesDataAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  exportTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITimeSeriesDataPoint[],
      protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataResponse
    ]
  >;
  exportTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
      | protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITimeSeriesDataPoint
    >
  ): void;
  exportTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
      | protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITimeSeriesDataPoint
    >
  ): void;
  exportTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
          | protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1beta1.ITimeSeriesDataPoint
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
      | protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1beta1.ITimeSeriesDataPoint
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1beta1.ITimeSeriesDataPoint[],
      protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest | null,
      protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_time_series: request.tensorboardTimeSeries ?? '',
      });
    this.initialize();
    return this.innerApiCalls.exportTensorboardTimeSeriesData(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardTimeSeries
   *   Required. The resource name of the TensorboardTimeSeries to export data
   *   from. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {string} request.filter
   *   Exports the TensorboardTimeSeries' data that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of data points to return per page.
   *   The default page_size is 1000. Values must be between 1 and 10000.
   *   Values above 10000 are coerced to 10000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link |TensorboardService.ExportTensorboardTimeSeries} call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link |TensorboardService.ExportTensorboardTimeSeries} must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the TensorboardTimeSeries' data.
   *   By default, TensorboardTimeSeries' data is returned in a pseudo random
   *   order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TimeSeriesDataPoint]{@link google.cloud.aiplatform.v1beta1.TimeSeriesDataPoint} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `exportTensorboardTimeSeriesDataAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  exportTensorboardTimeSeriesDataStream(
    request?: protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_time_series: request.tensorboardTimeSeries ?? '',
      });
    const defaultCallSettings =
      this._defaults['exportTensorboardTimeSeriesData'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.exportTensorboardTimeSeriesData.createStream(
      this.innerApiCalls.exportTensorboardTimeSeriesData as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `exportTensorboardTimeSeriesData`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardTimeSeries
   *   Required. The resource name of the TensorboardTimeSeries to export data
   *   from. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {string} request.filter
   *   Exports the TensorboardTimeSeries' data that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of data points to return per page.
   *   The default page_size is 1000. Values must be between 1 and 10000.
   *   Values above 10000 are coerced to 10000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link |TensorboardService.ExportTensorboardTimeSeries} call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link |TensorboardService.ExportTensorboardTimeSeries} must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the TensorboardTimeSeries' data.
   *   By default, TensorboardTimeSeries' data is returned in a pseudo random
   *   order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TimeSeriesDataPoint]{@link google.cloud.aiplatform.v1beta1.TimeSeriesDataPoint}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/tensorboard_service.export_tensorboard_time_series_data.js</caption>
   * region_tag:aiplatform_v1beta1_generated_TensorboardService_ExportTensorboardTimeSeriesData_async
   */
  exportTensorboardTimeSeriesDataAsync(
    request?: protos.google.cloud.aiplatform.v1beta1.IExportTensorboardTimeSeriesDataRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITimeSeriesDataPoint> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_time_series: request.tensorboardTimeSeries ?? '',
      });
    const defaultCallSettings =
      this._defaults['exportTensorboardTimeSeriesData'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.exportTensorboardTimeSeriesData.asyncIterate(
      this.innerApiCalls['exportTensorboardTimeSeriesData'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITimeSeriesDataPoint>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(
    project: string,
    location: string,
    dataset: string,
    dataItem: string,
    annotation: string
  ) {
    return this.pathTemplates.annotationPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
      annotation: annotation,
    });
  }

  /**
   * Parse the project from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .project;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .location;
  }

  /**
   * Parse the dataset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .dataset;
  }

  /**
   * Parse the data_item from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .data_item;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName)
      .annotation;
  }

  /**
   * Return a fully-qualified annotationSpec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} annotation_spec
   * @returns {string} Resource name string.
   */
  annotationSpecPath(
    project: string,
    location: string,
    dataset: string,
    annotationSpec: string
  ) {
    return this.pathTemplates.annotationSpecPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      annotation_spec: annotationSpec,
    });
  }

  /**
   * Parse the project from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).project;
  }

  /**
   * Parse the location from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).location;
  }

  /**
   * Parse the dataset from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).dataset;
  }

  /**
   * Parse the annotation_spec from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the annotation_spec.
   */
  matchAnnotationSpecFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(
      annotationSpecName
    ).annotation_spec;
  }

  /**
   * Return a fully-qualified artifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  artifactPath(
    project: string,
    location: string,
    metadataStore: string,
    artifact: string
  ) {
    return this.pathTemplates.artifactPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).project;
  }

  /**
   * Parse the location from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).location;
  }

  /**
   * Parse the metadata_store from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName)
      .metadata_store;
  }

  /**
   * Parse the artifact from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).artifact;
  }

  /**
   * Return a fully-qualified batchPredictionJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} batch_prediction_job
   * @returns {string} Resource name string.
   */
  batchPredictionJobPath(
    project: string,
    location: string,
    batchPredictionJob: string
  ) {
    return this.pathTemplates.batchPredictionJobPathTemplate.render({
      project: project,
      location: location,
      batch_prediction_job: batchPredictionJob,
    });
  }

  /**
   * Parse the project from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).project;
  }

  /**
   * Parse the location from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).location;
  }

  /**
   * Parse the batch_prediction_job from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the batch_prediction_job.
   */
  matchBatchPredictionJobFromBatchPredictionJobName(
    batchPredictionJobName: string
  ) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(
      batchPredictionJobName
    ).batch_prediction_job;
  }

  /**
   * Return a fully-qualified context resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} context
   * @returns {string} Resource name string.
   */
  contextPath(
    project: string,
    location: string,
    metadataStore: string,
    context: string
  ) {
    return this.pathTemplates.contextPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      context: context,
    });
  }

  /**
   * Parse the project from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).project;
  }

  /**
   * Parse the location from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).location;
  }

  /**
   * Parse the metadata_store from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName)
      .metadata_store;
  }

  /**
   * Parse the context from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the context.
   */
  matchContextFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).context;
  }

  /**
   * Return a fully-qualified customJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} custom_job
   * @returns {string} Resource name string.
   */
  customJobPath(project: string, location: string, customJob: string) {
    return this.pathTemplates.customJobPathTemplate.render({
      project: project,
      location: location,
      custom_job: customJob,
    });
  }

  /**
   * Parse the project from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .project;
  }

  /**
   * Parse the location from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .location;
  }

  /**
   * Parse the custom_job from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the custom_job.
   */
  matchCustomJobFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName)
      .custom_job;
  }

  /**
   * Return a fully-qualified dataItem resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @returns {string} Resource name string.
   */
  dataItemPath(
    project: string,
    location: string,
    dataset: string,
    dataItem: string
  ) {
    return this.pathTemplates.dataItemPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
    });
  }

  /**
   * Parse the project from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).project;
  }

  /**
   * Parse the location from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).location;
  }

  /**
   * Parse the dataset from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).dataset;
  }

  /**
   * Parse the data_item from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName)
      .data_item;
  }

  /**
   * Return a fully-qualified dataLabelingJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_labeling_job
   * @returns {string} Resource name string.
   */
  dataLabelingJobPath(
    project: string,
    location: string,
    dataLabelingJob: string
  ) {
    return this.pathTemplates.dataLabelingJobPathTemplate.render({
      project: project,
      location: location,
      data_labeling_job: dataLabelingJob,
    });
  }

  /**
   * Parse the project from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).project;
  }

  /**
   * Parse the location from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).location;
  }

  /**
   * Parse the data_labeling_job from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the data_labeling_job.
   */
  matchDataLabelingJobFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(
      dataLabelingJobName
    ).data_labeling_job;
  }

  /**
   * Return a fully-qualified dataset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @returns {string} Resource name string.
   */
  datasetPath(project: string, location: string, dataset: string) {
    return this.pathTemplates.datasetPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
    });
  }

  /**
   * Parse the project from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
  }

  /**
   * Parse the location from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).location;
  }

  /**
   * Parse the dataset from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
  }

  /**
   * Return a fully-qualified deploymentResourcePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment_resource_pool
   * @returns {string} Resource name string.
   */
  deploymentResourcePoolPath(
    project: string,
    location: string,
    deploymentResourcePool: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.render({
      project: project,
      location: location,
      deployment_resource_pool: deploymentResourcePool,
    });
  }

  /**
   * Parse the project from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).project;
  }

  /**
   * Parse the location from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).location;
  }

  /**
   * Parse the deployment_resource_pool from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the deployment_resource_pool.
   */
  matchDeploymentResourcePoolFromDeploymentResourcePoolName(
    deploymentResourcePoolName: string
  ) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(
      deploymentResourcePoolName
    ).deployment_resource_pool;
  }

  /**
   * Return a fully-qualified endpoint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} endpoint
   * @returns {string} Resource name string.
   */
  endpointPath(project: string, location: string, endpoint: string) {
    return this.pathTemplates.endpointPathTemplate.render({
      project: project,
      location: location,
      endpoint: endpoint,
    });
  }

  /**
   * Parse the project from Endpoint resource.
   *
   * @param {string} endpointName
   *   A fully-qualified path representing Endpoint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEndpointName(endpointName: string) {
    return this.pathTemplates.endpointPathTemplate.match(endpointName).project;
  }

  /**
   * Parse the location from Endpoint resource.
   *
   * @param {string} endpointName
   *   A fully-qualified path representing Endpoint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEndpointName(endpointName: string) {
    return this.pathTemplates.endpointPathTemplate.match(endpointName).location;
  }

  /**
   * Parse the endpoint from Endpoint resource.
   *
   * @param {string} endpointName
   *   A fully-qualified path representing Endpoint resource.
   * @returns {string} A string representing the endpoint.
   */
  matchEndpointFromEndpointName(endpointName: string) {
    return this.pathTemplates.endpointPathTemplate.match(endpointName).endpoint;
  }

  /**
   * Return a fully-qualified entityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  entityTypePath(
    project: string,
    location: string,
    featurestore: string,
    entityType: string
  ) {
    return this.pathTemplates.entityTypePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
      entity_type: entityType,
    });
  }

  /**
   * Parse the project from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .project;
  }

  /**
   * Parse the location from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .location;
  }

  /**
   * Parse the featurestore from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .featurestore;
  }

  /**
   * Parse the entity_type from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .entity_type;
  }

  /**
   * Return a fully-qualified execution resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} execution
   * @returns {string} Resource name string.
   */
  executionPath(
    project: string,
    location: string,
    metadataStore: string,
    execution: string
  ) {
    return this.pathTemplates.executionPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      execution: execution,
    });
  }

  /**
   * Parse the project from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .project;
  }

  /**
   * Parse the location from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .location;
  }

  /**
   * Parse the metadata_store from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .metadata_store;
  }

  /**
   * Parse the execution from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the execution.
   */
  matchExecutionFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .execution;
  }

  /**
   * Return a fully-qualified feature resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @param {string} entity_type
   * @param {string} feature
   * @returns {string} Resource name string.
   */
  featurePath(
    project: string,
    location: string,
    featurestore: string,
    entityType: string,
    feature: string
  ) {
    return this.pathTemplates.featurePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
      entity_type: entityType,
      feature: feature,
    });
  }

  /**
   * Parse the project from Feature resource.
   *
   * @param {string} featureName
   *   A fully-qualified path representing Feature resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureName(featureName: string) {
    return this.pathTemplates.featurePathTemplate.match(featureName).project;
  }

  /**
   * Parse the location from Feature resource.
   *
   * @param {string} featureName
   *   A fully-qualified path representing Feature resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureName(featureName: string) {
    return this.pathTemplates.featurePathTemplate.match(featureName).location;
  }

  /**
   * Parse the featurestore from Feature resource.
   *
   * @param {string} featureName
   *   A fully-qualified path representing Feature resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromFeatureName(featureName: string) {
    return this.pathTemplates.featurePathTemplate.match(featureName)
      .featurestore;
  }

  /**
   * Parse the entity_type from Feature resource.
   *
   * @param {string} featureName
   *   A fully-qualified path representing Feature resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromFeatureName(featureName: string) {
    return this.pathTemplates.featurePathTemplate.match(featureName)
      .entity_type;
  }

  /**
   * Parse the feature from Feature resource.
   *
   * @param {string} featureName
   *   A fully-qualified path representing Feature resource.
   * @returns {string} A string representing the feature.
   */
  matchFeatureFromFeatureName(featureName: string) {
    return this.pathTemplates.featurePathTemplate.match(featureName).feature;
  }

  /**
   * Return a fully-qualified featurestore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @returns {string} Resource name string.
   */
  featurestorePath(project: string, location: string, featurestore: string) {
    return this.pathTemplates.featurestorePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
    });
  }

  /**
   * Parse the project from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .project;
  }

  /**
   * Parse the location from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .location;
  }

  /**
   * Parse the featurestore from Featurestore resource.
   *
   * @param {string} featurestoreName
   *   A fully-qualified path representing Featurestore resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromFeaturestoreName(featurestoreName: string) {
    return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
      .featurestore;
  }

  /**
   * Return a fully-qualified hyperparameterTuningJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} hyperparameter_tuning_job
   * @returns {string} Resource name string.
   */
  hyperparameterTuningJobPath(
    project: string,
    location: string,
    hyperparameterTuningJob: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.render({
      project: project,
      location: location,
      hyperparameter_tuning_job: hyperparameterTuningJob,
    });
  }

  /**
   * Parse the project from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).project;
  }

  /**
   * Parse the location from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).location;
  }

  /**
   * Parse the hyperparameter_tuning_job from HyperparameterTuningJob resource.
   *
   * @param {string} hyperparameterTuningJobName
   *   A fully-qualified path representing HyperparameterTuningJob resource.
   * @returns {string} A string representing the hyperparameter_tuning_job.
   */
  matchHyperparameterTuningJobFromHyperparameterTuningJobName(
    hyperparameterTuningJobName: string
  ) {
    return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(
      hyperparameterTuningJobName
    ).hyperparameter_tuning_job;
  }

  /**
   * Return a fully-qualified index resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} index
   * @returns {string} Resource name string.
   */
  indexPath(project: string, location: string, index: string) {
    return this.pathTemplates.indexPathTemplate.render({
      project: project,
      location: location,
      index: index,
    });
  }

  /**
   * Parse the project from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).project;
  }

  /**
   * Parse the location from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).location;
  }

  /**
   * Parse the index from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the index.
   */
  matchIndexFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).index;
  }

  /**
   * Return a fully-qualified indexEndpoint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} index_endpoint
   * @returns {string} Resource name string.
   */
  indexEndpointPath(project: string, location: string, indexEndpoint: string) {
    return this.pathTemplates.indexEndpointPathTemplate.render({
      project: project,
      location: location,
      index_endpoint: indexEndpoint,
    });
  }

  /**
   * Parse the project from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .project;
  }

  /**
   * Parse the location from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .location;
  }

  /**
   * Parse the index_endpoint from IndexEndpoint resource.
   *
   * @param {string} indexEndpointName
   *   A fully-qualified path representing IndexEndpoint resource.
   * @returns {string} A string representing the index_endpoint.
   */
  matchIndexEndpointFromIndexEndpointName(indexEndpointName: string) {
    return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
      .index_endpoint;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified metadataSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} metadata_schema
   * @returns {string} Resource name string.
   */
  metadataSchemaPath(
    project: string,
    location: string,
    metadataStore: string,
    metadataSchema: string
  ) {
    return this.pathTemplates.metadataSchemaPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      metadata_schema: metadataSchema,
    });
  }

  /**
   * Parse the project from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).project;
  }

  /**
   * Parse the location from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).location;
  }

  /**
   * Parse the metadata_store from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).metadata_store;
  }

  /**
   * Parse the metadata_schema from MetadataSchema resource.
   *
   * @param {string} metadataSchemaName
   *   A fully-qualified path representing MetadataSchema resource.
   * @returns {string} A string representing the metadata_schema.
   */
  matchMetadataSchemaFromMetadataSchemaName(metadataSchemaName: string) {
    return this.pathTemplates.metadataSchemaPathTemplate.match(
      metadataSchemaName
    ).metadata_schema;
  }

  /**
   * Return a fully-qualified metadataStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @returns {string} Resource name string.
   */
  metadataStorePath(project: string, location: string, metadataStore: string) {
    return this.pathTemplates.metadataStorePathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
    });
  }

  /**
   * Parse the project from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .project;
  }

  /**
   * Parse the location from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .location;
  }

  /**
   * Parse the metadata_store from MetadataStore resource.
   *
   * @param {string} metadataStoreName
   *   A fully-qualified path representing MetadataStore resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromMetadataStoreName(metadataStoreName: string) {
    return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
      .metadata_store;
  }

  /**
   * Return a fully-qualified model resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @returns {string} Resource name string.
   */
  modelPath(project: string, location: string, model: string) {
    return this.pathTemplates.modelPathTemplate.render({
      project: project,
      location: location,
      model: model,
    });
  }

  /**
   * Parse the project from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).project;
  }

  /**
   * Parse the location from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).location;
  }

  /**
   * Parse the model from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).model;
  }

  /**
   * Return a fully-qualified modelDeploymentMonitoringJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model_deployment_monitoring_job
   * @returns {string} Resource name string.
   */
  modelDeploymentMonitoringJobPath(
    project: string,
    location: string,
    modelDeploymentMonitoringJob: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.render({
      project: project,
      location: location,
      model_deployment_monitoring_job: modelDeploymentMonitoringJob,
    });
  }

  /**
   * Parse the project from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).project;
  }

  /**
   * Parse the location from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).location;
  }

  /**
   * Parse the model_deployment_monitoring_job from ModelDeploymentMonitoringJob resource.
   *
   * @param {string} modelDeploymentMonitoringJobName
   *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
   * @returns {string} A string representing the model_deployment_monitoring_job.
   */
  matchModelDeploymentMonitoringJobFromModelDeploymentMonitoringJobName(
    modelDeploymentMonitoringJobName: string
  ) {
    return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(
      modelDeploymentMonitoringJobName
    ).model_deployment_monitoring_job;
  }

  /**
   * Return a fully-qualified modelEvaluation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @param {string} evaluation
   * @returns {string} Resource name string.
   */
  modelEvaluationPath(
    project: string,
    location: string,
    model: string,
    evaluation: string
  ) {
    return this.pathTemplates.modelEvaluationPathTemplate.render({
      project: project,
      location: location,
      model: model,
      evaluation: evaluation,
    });
  }

  /**
   * Parse the project from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).project;
  }

  /**
   * Parse the location from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).location;
  }

  /**
   * Parse the model from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).model;
  }

  /**
   * Parse the evaluation from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the evaluation.
   */
  matchEvaluationFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(
      modelEvaluationName
    ).evaluation;
  }

  /**
   * Return a fully-qualified modelEvaluationSlice resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @param {string} evaluation
   * @param {string} slice
   * @returns {string} Resource name string.
   */
  modelEvaluationSlicePath(
    project: string,
    location: string,
    model: string,
    evaluation: string,
    slice: string
  ) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.render({
      project: project,
      location: location,
      model: model,
      evaluation: evaluation,
      slice: slice,
    });
  }

  /**
   * Parse the project from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).project;
  }

  /**
   * Parse the location from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).location;
  }

  /**
   * Parse the model from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).model;
  }

  /**
   * Parse the evaluation from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the evaluation.
   */
  matchEvaluationFromModelEvaluationSliceName(
    modelEvaluationSliceName: string
  ) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).evaluation;
  }

  /**
   * Parse the slice from ModelEvaluationSlice resource.
   *
   * @param {string} modelEvaluationSliceName
   *   A fully-qualified path representing ModelEvaluationSlice resource.
   * @returns {string} A string representing the slice.
   */
  matchSliceFromModelEvaluationSliceName(modelEvaluationSliceName: string) {
    return this.pathTemplates.modelEvaluationSlicePathTemplate.match(
      modelEvaluationSliceName
    ).slice;
  }

  /**
   * Return a fully-qualified pipelineJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} pipeline_job
   * @returns {string} Resource name string.
   */
  pipelineJobPath(project: string, location: string, pipelineJob: string) {
    return this.pathTemplates.pipelineJobPathTemplate.render({
      project: project,
      location: location,
      pipeline_job: pipelineJob,
    });
  }

  /**
   * Parse the project from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .project;
  }

  /**
   * Parse the location from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .location;
  }

  /**
   * Parse the pipeline_job from PipelineJob resource.
   *
   * @param {string} pipelineJobName
   *   A fully-qualified path representing PipelineJob resource.
   * @returns {string} A string representing the pipeline_job.
   */
  matchPipelineJobFromPipelineJobName(pipelineJobName: string) {
    return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
      .pipeline_job;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified savedQuery resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} saved_query
   * @returns {string} Resource name string.
   */
  savedQueryPath(
    project: string,
    location: string,
    dataset: string,
    savedQuery: string
  ) {
    return this.pathTemplates.savedQueryPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      saved_query: savedQuery,
    });
  }

  /**
   * Parse the project from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .project;
  }

  /**
   * Parse the location from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .location;
  }

  /**
   * Parse the dataset from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .dataset;
  }

  /**
   * Parse the saved_query from SavedQuery resource.
   *
   * @param {string} savedQueryName
   *   A fully-qualified path representing SavedQuery resource.
   * @returns {string} A string representing the saved_query.
   */
  matchSavedQueryFromSavedQueryName(savedQueryName: string) {
    return this.pathTemplates.savedQueryPathTemplate.match(savedQueryName)
      .saved_query;
  }

  /**
   * Return a fully-qualified specialistPool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} specialist_pool
   * @returns {string} Resource name string.
   */
  specialistPoolPath(
    project: string,
    location: string,
    specialistPool: string
  ) {
    return this.pathTemplates.specialistPoolPathTemplate.render({
      project: project,
      location: location,
      specialist_pool: specialistPool,
    });
  }

  /**
   * Parse the project from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).project;
  }

  /**
   * Parse the location from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).location;
  }

  /**
   * Parse the specialist_pool from SpecialistPool resource.
   *
   * @param {string} specialistPoolName
   *   A fully-qualified path representing SpecialistPool resource.
   * @returns {string} A string representing the specialist_pool.
   */
  matchSpecialistPoolFromSpecialistPoolName(specialistPoolName: string) {
    return this.pathTemplates.specialistPoolPathTemplate.match(
      specialistPoolName
    ).specialist_pool;
  }

  /**
   * Return a fully-qualified study resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} study
   * @returns {string} Resource name string.
   */
  studyPath(project: string, location: string, study: string) {
    return this.pathTemplates.studyPathTemplate.render({
      project: project,
      location: location,
      study: study,
    });
  }

  /**
   * Parse the project from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).project;
  }

  /**
   * Parse the location from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).location;
  }

  /**
   * Parse the study from Study resource.
   *
   * @param {string} studyName
   *   A fully-qualified path representing Study resource.
   * @returns {string} A string representing the study.
   */
  matchStudyFromStudyName(studyName: string) {
    return this.pathTemplates.studyPathTemplate.match(studyName).study;
  }

  /**
   * Return a fully-qualified tensorboard resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @returns {string} Resource name string.
   */
  tensorboardPath(project: string, location: string, tensorboard: string) {
    return this.pathTemplates.tensorboardPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
    });
  }

  /**
   * Parse the project from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .project;
  }

  /**
   * Parse the location from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .location;
  }

  /**
   * Parse the tensorboard from Tensorboard resource.
   *
   * @param {string} tensorboardName
   *   A fully-qualified path representing Tensorboard resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardName(tensorboardName: string) {
    return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
      .tensorboard;
  }

  /**
   * Return a fully-qualified tensorboardExperiment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @returns {string} Resource name string.
   */
  tensorboardExperimentPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
    });
  }

  /**
   * Parse the project from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardExperimentName(tensorboardExperimentName: string) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).project;
  }

  /**
   * Parse the location from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardExperiment resource.
   *
   * @param {string} tensorboardExperimentName
   *   A fully-qualified path representing TensorboardExperiment resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardExperimentName(
    tensorboardExperimentName: string
  ) {
    return this.pathTemplates.tensorboardExperimentPathTemplate.match(
      tensorboardExperimentName
    ).experiment;
  }

  /**
   * Return a fully-qualified tensorboardRun resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @param {string} run
   * @returns {string} Resource name string.
   */
  tensorboardRunPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string,
    run: string
  ) {
    return this.pathTemplates.tensorboardRunPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
      run: run,
    });
  }

  /**
   * Parse the project from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).project;
  }

  /**
   * Parse the location from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).experiment;
  }

  /**
   * Parse the run from TensorboardRun resource.
   *
   * @param {string} tensorboardRunName
   *   A fully-qualified path representing TensorboardRun resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromTensorboardRunName(tensorboardRunName: string) {
    return this.pathTemplates.tensorboardRunPathTemplate.match(
      tensorboardRunName
    ).run;
  }

  /**
   * Return a fully-qualified tensorboardTimeSeries resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tensorboard
   * @param {string} experiment
   * @param {string} run
   * @param {string} time_series
   * @returns {string} Resource name string.
   */
  tensorboardTimeSeriesPath(
    project: string,
    location: string,
    tensorboard: string,
    experiment: string,
    run: string,
    timeSeries: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.render({
      project: project,
      location: location,
      tensorboard: tensorboard,
      experiment: experiment,
      run: run,
      time_series: timeSeries,
    });
  }

  /**
   * Parse the project from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTensorboardTimeSeriesName(tensorboardTimeSeriesName: string) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).project;
  }

  /**
   * Parse the location from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).location;
  }

  /**
   * Parse the tensorboard from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the tensorboard.
   */
  matchTensorboardFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).tensorboard;
  }

  /**
   * Parse the experiment from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).experiment;
  }

  /**
   * Parse the run from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromTensorboardTimeSeriesName(tensorboardTimeSeriesName: string) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).run;
  }

  /**
   * Parse the time_series from TensorboardTimeSeries resource.
   *
   * @param {string} tensorboardTimeSeriesName
   *   A fully-qualified path representing TensorboardTimeSeries resource.
   * @returns {string} A string representing the time_series.
   */
  matchTimeSeriesFromTensorboardTimeSeriesName(
    tensorboardTimeSeriesName: string
  ) {
    return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(
      tensorboardTimeSeriesName
    ).time_series;
  }

  /**
   * Return a fully-qualified trainingPipeline resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} training_pipeline
   * @returns {string} Resource name string.
   */
  trainingPipelinePath(
    project: string,
    location: string,
    trainingPipeline: string
  ) {
    return this.pathTemplates.trainingPipelinePathTemplate.render({
      project: project,
      location: location,
      training_pipeline: trainingPipeline,
    });
  }

  /**
   * Parse the project from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).project;
  }

  /**
   * Parse the location from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).location;
  }

  /**
   * Parse the training_pipeline from TrainingPipeline resource.
   *
   * @param {string} trainingPipelineName
   *   A fully-qualified path representing TrainingPipeline resource.
   * @returns {string} A string representing the training_pipeline.
   */
  matchTrainingPipelineFromTrainingPipelineName(trainingPipelineName: string) {
    return this.pathTemplates.trainingPipelinePathTemplate.match(
      trainingPipelineName
    ).training_pipeline;
  }

  /**
   * Return a fully-qualified trial resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} study
   * @param {string} trial
   * @returns {string} Resource name string.
   */
  trialPath(project: string, location: string, study: string, trial: string) {
    return this.pathTemplates.trialPathTemplate.render({
      project: project,
      location: location,
      study: study,
      trial: trial,
    });
  }

  /**
   * Parse the project from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).project;
  }

  /**
   * Parse the location from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).location;
  }

  /**
   * Parse the study from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the study.
   */
  matchStudyFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).study;
  }

  /**
   * Parse the trial from Trial resource.
   *
   * @param {string} trialName
   *   A fully-qualified path representing Trial resource.
   * @returns {string} A string representing the trial.
   */
  matchTrialFromTrialName(trialName: string) {
    return this.pathTemplates.trialPathTemplate.match(trialName).trial;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.tensorboardServiceStub && !this._terminated) {
      return this.tensorboardServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
