// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name) {
  // [START connectgateway_v1beta1_generated_GatewayControl_GenerateCredentials_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The Fleet membership resource.
   */
  // const name = 'abc123'
  /**
   *  Optional. Whether to force the use of Connect Agent-based transport.
   *  This will return a configuration that uses Connect Agent as the underlying
   *  transport mechanism for cluster types that would otherwise have used a
   *  different transport. Requires that Connect Agent be installed on the
   *  cluster. Setting this field to false is equivalent to not setting it.
   */
  // const forceUseAgent = true
  /**
   *  Optional. The Connect Gateway version to be used in the resulting
   *  configuration.
   *  Leave this field blank to let the server choose the version (recommended).
   */
  // const version = 'abc123'
  /**
   *  Optional. The namespace to use in the kubeconfig context.
   *  If this field is specified, the server will set the `namespace` field in
   *  kubeconfig context. If not specified, the `namespace` field is omitted.
   */
  // const kubernetesNamespace = 'abc123'
  /**
   *  Optional. The operating system where the kubeconfig will be used.
   */
  // const operatingSystem = {}

  // Imports the Gateway library
  const {GatewayControlClient} = require('@google-cloud/gke-connect-gateway').v1beta1;

  // Instantiates a client
  const gatewayClient = new GatewayControlClient();

  async function callGenerateCredentials() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const response = await gatewayClient.generateCredentials(request);
    console.log(response);
  }

  callGenerateCredentials();
  // [END connectgateway_v1beta1_generated_GatewayControl_GenerateCredentials_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
