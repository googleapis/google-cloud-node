// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as vmwareengineModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.VmwareEngineClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = vmwareengineModule.v1.VmwareEngineClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = vmwareengineModule.v1.VmwareEngineClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = vmwareengineModule.v1.VmwareEngineClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.vmwareEngineStub, undefined);
      await client.initialize();
      assert(client.vmwareEngineStub);
    });

    it('has close method for the initialized client', done => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.vmwareEngineStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.vmwareEngineStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getPrivateCloud', () => {
    it('invokes getPrivateCloud without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetPrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetPrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.PrivateCloud()
      );
      client.innerApiCalls.getPrivateCloud = stubSimpleCall(expectedResponse);
      const [response] = await client.getPrivateCloud(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPrivateCloud without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetPrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetPrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.PrivateCloud()
      );
      client.innerApiCalls.getPrivateCloud =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPrivateCloud(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.IPrivateCloud | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPrivateCloud with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetPrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetPrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPrivateCloud = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPrivateCloud(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPrivateCloud with closed client', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetPrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetPrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPrivateCloud(request), expectedError);
    });
  });

  describe('getCluster', () => {
    it('invokes getCluster without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.Cluster()
      );
      client.innerApiCalls.getCluster = stubSimpleCall(expectedResponse);
      const [response] = await client.getCluster(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCluster without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.Cluster()
      );
      client.innerApiCalls.getCluster =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCluster(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.ICluster | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCluster with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCluster = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCluster with closed client', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCluster(request), expectedError);
    });
  });

  describe('getNodeType', () => {
    it('invokes getNodeType without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetNodeTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetNodeTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.NodeType()
      );
      client.innerApiCalls.getNodeType = stubSimpleCall(expectedResponse);
      const [response] = await client.getNodeType(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNodeType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNodeType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNodeType without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetNodeTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetNodeTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.NodeType()
      );
      client.innerApiCalls.getNodeType =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getNodeType(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.INodeType | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNodeType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNodeType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNodeType with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetNodeTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetNodeTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getNodeType = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getNodeType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getNodeType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNodeType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNodeType with closed client', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetNodeTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetNodeTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getNodeType(request), expectedError);
    });
  });

  describe('showNsxCredentials', () => {
    it('invokes showNsxCredentials without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ShowNsxCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ShowNsxCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.Credentials()
      );
      client.innerApiCalls.showNsxCredentials =
        stubSimpleCall(expectedResponse);
      const [response] = await client.showNsxCredentials(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.showNsxCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.showNsxCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes showNsxCredentials without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ShowNsxCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ShowNsxCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.Credentials()
      );
      client.innerApiCalls.showNsxCredentials =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.showNsxCredentials(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.ICredentials | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.showNsxCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.showNsxCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes showNsxCredentials with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ShowNsxCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ShowNsxCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.showNsxCredentials = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.showNsxCredentials(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.showNsxCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.showNsxCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes showNsxCredentials with closed client', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ShowNsxCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ShowNsxCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.showNsxCredentials(request), expectedError);
    });
  });

  describe('showVcenterCredentials', () => {
    it('invokes showVcenterCredentials without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ShowVcenterCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ShowVcenterCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.Credentials()
      );
      client.innerApiCalls.showVcenterCredentials =
        stubSimpleCall(expectedResponse);
      const [response] = await client.showVcenterCredentials(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.showVcenterCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.showVcenterCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes showVcenterCredentials without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ShowVcenterCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ShowVcenterCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.Credentials()
      );
      client.innerApiCalls.showVcenterCredentials =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.showVcenterCredentials(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.ICredentials | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.showVcenterCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.showVcenterCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes showVcenterCredentials with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ShowVcenterCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ShowVcenterCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.showVcenterCredentials = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.showVcenterCredentials(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.showVcenterCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.showVcenterCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes showVcenterCredentials with closed client', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ShowVcenterCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ShowVcenterCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.showVcenterCredentials(request),
        expectedError
      );
    });
  });

  describe('getHcxActivationKey', () => {
    it('invokes getHcxActivationKey without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetHcxActivationKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetHcxActivationKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
      );
      client.innerApiCalls.getHcxActivationKey =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getHcxActivationKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getHcxActivationKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getHcxActivationKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getHcxActivationKey without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetHcxActivationKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetHcxActivationKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
      );
      client.innerApiCalls.getHcxActivationKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getHcxActivationKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.IHcxActivationKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getHcxActivationKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getHcxActivationKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getHcxActivationKey with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetHcxActivationKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetHcxActivationKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getHcxActivationKey = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getHcxActivationKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getHcxActivationKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getHcxActivationKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getHcxActivationKey with closed client', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetHcxActivationKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetHcxActivationKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getHcxActivationKey(request), expectedError);
    });
  });

  describe('getNetworkPolicy', () => {
    it('invokes getNetworkPolicy without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetNetworkPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
      );
      client.innerApiCalls.getNetworkPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getNetworkPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetworkPolicy without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetNetworkPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
      );
      client.innerApiCalls.getNetworkPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getNetworkPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.INetworkPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetworkPolicy with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetNetworkPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getNetworkPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getNetworkPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetworkPolicy with closed client', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetNetworkPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getNetworkPolicy(request), expectedError);
    });
  });

  describe('getVmwareEngineNetwork', () => {
    it('invokes getVmwareEngineNetwork without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetVmwareEngineNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
      );
      client.innerApiCalls.getVmwareEngineNetwork =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getVmwareEngineNetwork(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVmwareEngineNetwork without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetVmwareEngineNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
      );
      client.innerApiCalls.getVmwareEngineNetwork =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getVmwareEngineNetwork(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.IVmwareEngineNetwork | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVmwareEngineNetwork with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetVmwareEngineNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getVmwareEngineNetwork = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getVmwareEngineNetwork(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVmwareEngineNetwork with closed client', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.GetVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.GetVmwareEngineNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getVmwareEngineNetwork(request),
        expectedError
      );
    });
  });

  describe('createPrivateCloud', () => {
    it('invokes createPrivateCloud without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreatePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreatePrivateCloudRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPrivateCloud =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createPrivateCloud(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPrivateCloud without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreatePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreatePrivateCloudRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPrivateCloud =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createPrivateCloud(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IPrivateCloud,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IPrivateCloud,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPrivateCloud with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreatePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreatePrivateCloudRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPrivateCloud = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createPrivateCloud(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createPrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPrivateCloud with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreatePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreatePrivateCloudRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPrivateCloud = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createPrivateCloud(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createPrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreatePrivateCloudProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreatePrivateCloudProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreatePrivateCloudProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreatePrivateCloudProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updatePrivateCloud', () => {
    it('invokes updatePrivateCloud without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdatePrivateCloudRequest()
      );
      request.privateCloud ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdatePrivateCloudRequest',
        ['privateCloud', 'name']
      );
      request.privateCloud.name = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updatePrivateCloud =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updatePrivateCloud(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePrivateCloud without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdatePrivateCloudRequest()
      );
      request.privateCloud ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdatePrivateCloudRequest',
        ['privateCloud', 'name']
      );
      request.privateCloud.name = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updatePrivateCloud =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updatePrivateCloud(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IPrivateCloud,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IPrivateCloud,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePrivateCloud with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdatePrivateCloudRequest()
      );
      request.privateCloud ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdatePrivateCloudRequest',
        ['privateCloud', 'name']
      );
      request.privateCloud.name = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePrivateCloud = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updatePrivateCloud(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePrivateCloud with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdatePrivateCloudRequest()
      );
      request.privateCloud ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdatePrivateCloudRequest',
        ['privateCloud', 'name']
      );
      request.privateCloud.name = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePrivateCloud = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updatePrivateCloud(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdatePrivateCloudProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdatePrivateCloudProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdatePrivateCloudProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdatePrivateCloudProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deletePrivateCloud', () => {
    it('invokes deletePrivateCloud without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeletePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeletePrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePrivateCloud =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deletePrivateCloud(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePrivateCloud without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeletePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeletePrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePrivateCloud =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePrivateCloud(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IPrivateCloud,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IPrivateCloud,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePrivateCloud with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeletePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeletePrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePrivateCloud = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deletePrivateCloud(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePrivateCloud with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeletePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeletePrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePrivateCloud = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deletePrivateCloud(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeletePrivateCloudProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeletePrivateCloudProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeletePrivateCloudProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeletePrivateCloudProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('undeletePrivateCloud', () => {
    it('invokes undeletePrivateCloud without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UndeletePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UndeletePrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.undeletePrivateCloud =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.undeletePrivateCloud(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.undeletePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeletePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeletePrivateCloud without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UndeletePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UndeletePrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.undeletePrivateCloud =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.undeletePrivateCloud(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IPrivateCloud,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IPrivateCloud,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.undeletePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeletePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeletePrivateCloud with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UndeletePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UndeletePrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.undeletePrivateCloud = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.undeletePrivateCloud(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.undeletePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeletePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeletePrivateCloud with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UndeletePrivateCloudRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UndeletePrivateCloudRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.undeletePrivateCloud = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.undeletePrivateCloud(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.undeletePrivateCloud as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeletePrivateCloud as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUndeletePrivateCloudProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUndeletePrivateCloudProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUndeletePrivateCloudProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUndeletePrivateCloudProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createCluster', () => {
    it('invokes createCluster without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCluster without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.ICluster,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.ICluster,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCluster with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCluster with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateClusterProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateClusterProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateCluster', () => {
    it('invokes updateCluster without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateClusterRequest()
      );
      request.cluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateClusterRequest',
        ['cluster', 'name']
      );
      request.cluster.name = defaultValue1;
      const expectedHeaderRequestParams = `cluster.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCluster without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateClusterRequest()
      );
      request.cluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateClusterRequest',
        ['cluster', 'name']
      );
      request.cluster.name = defaultValue1;
      const expectedHeaderRequestParams = `cluster.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.ICluster,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.ICluster,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCluster with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateClusterRequest()
      );
      request.cluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateClusterRequest',
        ['cluster', 'name']
      );
      request.cluster.name = defaultValue1;
      const expectedHeaderRequestParams = `cluster.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCluster with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateClusterRequest()
      );
      request.cluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateClusterRequest',
        ['cluster', 'name']
      );
      request.cluster.name = defaultValue1;
      const expectedHeaderRequestParams = `cluster.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateClusterProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateClusterProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteCluster', () => {
    it('invokes deleteCluster without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCluster without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCluster with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCluster with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteClusterProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteClusterProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resetNsxCredentials', () => {
    it('invokes resetNsxCredentials without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ResetNsxCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ResetNsxCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resetNsxCredentials =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.resetNsxCredentials(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resetNsxCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetNsxCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetNsxCredentials without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ResetNsxCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ResetNsxCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resetNsxCredentials =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resetNsxCredentials(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IPrivateCloud,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IPrivateCloud,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resetNsxCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetNsxCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetNsxCredentials with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ResetNsxCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ResetNsxCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resetNsxCredentials = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resetNsxCredentials(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resetNsxCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetNsxCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetNsxCredentials with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ResetNsxCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ResetNsxCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resetNsxCredentials = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resetNsxCredentials(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resetNsxCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetNsxCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResetNsxCredentialsProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkResetNsxCredentialsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResetNsxCredentialsProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkResetNsxCredentialsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resetVcenterCredentials', () => {
    it('invokes resetVcenterCredentials without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ResetVcenterCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ResetVcenterCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resetVcenterCredentials =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.resetVcenterCredentials(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resetVcenterCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetVcenterCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetVcenterCredentials without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ResetVcenterCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ResetVcenterCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resetVcenterCredentials =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resetVcenterCredentials(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IPrivateCloud,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IPrivateCloud,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resetVcenterCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetVcenterCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetVcenterCredentials with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ResetVcenterCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ResetVcenterCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resetVcenterCredentials = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.resetVcenterCredentials(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.resetVcenterCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetVcenterCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetVcenterCredentials with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ResetVcenterCredentialsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ResetVcenterCredentialsRequest',
        ['privateCloud']
      );
      request.privateCloud = defaultValue1;
      const expectedHeaderRequestParams = `private_cloud=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resetVcenterCredentials = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resetVcenterCredentials(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resetVcenterCredentials as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetVcenterCredentials as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResetVcenterCredentialsProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkResetVcenterCredentialsProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResetVcenterCredentialsProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkResetVcenterCredentialsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createHcxActivationKey', () => {
    it('invokes createHcxActivationKey without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateHcxActivationKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateHcxActivationKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createHcxActivationKey =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createHcxActivationKey(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createHcxActivationKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createHcxActivationKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createHcxActivationKey without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateHcxActivationKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateHcxActivationKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createHcxActivationKey =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createHcxActivationKey(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IHcxActivationKey,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IHcxActivationKey,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createHcxActivationKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createHcxActivationKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createHcxActivationKey with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateHcxActivationKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateHcxActivationKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createHcxActivationKey = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createHcxActivationKey(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createHcxActivationKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createHcxActivationKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createHcxActivationKey with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateHcxActivationKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateHcxActivationKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createHcxActivationKey = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createHcxActivationKey(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createHcxActivationKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createHcxActivationKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateHcxActivationKeyProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateHcxActivationKeyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateHcxActivationKeyProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateHcxActivationKeyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createNetworkPolicy', () => {
    it('invokes createNetworkPolicy without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateNetworkPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createNetworkPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createNetworkPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNetworkPolicy without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateNetworkPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createNetworkPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createNetworkPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.INetworkPolicy,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.INetworkPolicy,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNetworkPolicy with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateNetworkPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createNetworkPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createNetworkPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNetworkPolicy with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateNetworkPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createNetworkPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createNetworkPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateNetworkPolicyProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateNetworkPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateNetworkPolicyProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateNetworkPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateNetworkPolicy', () => {
    it('invokes updateNetworkPolicy without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateNetworkPolicyRequest()
      );
      request.networkPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateNetworkPolicyRequest',
        ['networkPolicy', 'name']
      );
      request.networkPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `network_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateNetworkPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateNetworkPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNetworkPolicy without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateNetworkPolicyRequest()
      );
      request.networkPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateNetworkPolicyRequest',
        ['networkPolicy', 'name']
      );
      request.networkPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `network_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateNetworkPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateNetworkPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.INetworkPolicy,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.INetworkPolicy,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNetworkPolicy with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateNetworkPolicyRequest()
      );
      request.networkPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateNetworkPolicyRequest',
        ['networkPolicy', 'name']
      );
      request.networkPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `network_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateNetworkPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateNetworkPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNetworkPolicy with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateNetworkPolicyRequest()
      );
      request.networkPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateNetworkPolicyRequest',
        ['networkPolicy', 'name']
      );
      request.networkPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `network_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateNetworkPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateNetworkPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateNetworkPolicyProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateNetworkPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateNetworkPolicyProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateNetworkPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteNetworkPolicy', () => {
    it('invokes deleteNetworkPolicy without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteNetworkPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteNetworkPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteNetworkPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteNetworkPolicy without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteNetworkPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteNetworkPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteNetworkPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteNetworkPolicy with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteNetworkPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteNetworkPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteNetworkPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteNetworkPolicy with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteNetworkPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteNetworkPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteNetworkPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteNetworkPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteNetworkPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteNetworkPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteNetworkPolicyProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteNetworkPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteNetworkPolicyProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteNetworkPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createVmwareEngineNetwork', () => {
    it('invokes createVmwareEngineNetwork without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateVmwareEngineNetworkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createVmwareEngineNetwork =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createVmwareEngineNetwork(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createVmwareEngineNetwork without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateVmwareEngineNetworkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createVmwareEngineNetwork =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createVmwareEngineNetwork(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IVmwareEngineNetwork,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IVmwareEngineNetwork,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createVmwareEngineNetwork with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateVmwareEngineNetworkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createVmwareEngineNetwork = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createVmwareEngineNetwork(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createVmwareEngineNetwork with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.CreateVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.CreateVmwareEngineNetworkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createVmwareEngineNetwork = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createVmwareEngineNetwork(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateVmwareEngineNetworkProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateVmwareEngineNetworkProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateVmwareEngineNetworkProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateVmwareEngineNetworkProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateVmwareEngineNetwork', () => {
    it('invokes updateVmwareEngineNetwork without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateVmwareEngineNetworkRequest()
      );
      request.vmwareEngineNetwork ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateVmwareEngineNetworkRequest',
        ['vmwareEngineNetwork', 'name']
      );
      request.vmwareEngineNetwork.name = defaultValue1;
      const expectedHeaderRequestParams = `vmware_engine_network.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateVmwareEngineNetwork =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateVmwareEngineNetwork(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVmwareEngineNetwork without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateVmwareEngineNetworkRequest()
      );
      request.vmwareEngineNetwork ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateVmwareEngineNetworkRequest',
        ['vmwareEngineNetwork', 'name']
      );
      request.vmwareEngineNetwork.name = defaultValue1;
      const expectedHeaderRequestParams = `vmware_engine_network.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateVmwareEngineNetwork =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateVmwareEngineNetwork(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmwareengine.v1.IVmwareEngineNetwork,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmwareengine.v1.IVmwareEngineNetwork,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVmwareEngineNetwork with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateVmwareEngineNetworkRequest()
      );
      request.vmwareEngineNetwork ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateVmwareEngineNetworkRequest',
        ['vmwareEngineNetwork', 'name']
      );
      request.vmwareEngineNetwork.name = defaultValue1;
      const expectedHeaderRequestParams = `vmware_engine_network.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateVmwareEngineNetwork = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateVmwareEngineNetwork(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVmwareEngineNetwork with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.UpdateVmwareEngineNetworkRequest()
      );
      request.vmwareEngineNetwork ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.UpdateVmwareEngineNetworkRequest',
        ['vmwareEngineNetwork', 'name']
      );
      request.vmwareEngineNetwork.name = defaultValue1;
      const expectedHeaderRequestParams = `vmware_engine_network.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateVmwareEngineNetwork = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateVmwareEngineNetwork(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateVmwareEngineNetworkProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateVmwareEngineNetworkProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateVmwareEngineNetworkProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateVmwareEngineNetworkProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteVmwareEngineNetwork', () => {
    it('invokes deleteVmwareEngineNetwork without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteVmwareEngineNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteVmwareEngineNetwork =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteVmwareEngineNetwork(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteVmwareEngineNetwork without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteVmwareEngineNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteVmwareEngineNetwork =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteVmwareEngineNetwork(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmwareengine.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmwareengine.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteVmwareEngineNetwork with call error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteVmwareEngineNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteVmwareEngineNetwork = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteVmwareEngineNetwork(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteVmwareEngineNetwork with LRO error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.DeleteVmwareEngineNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.DeleteVmwareEngineNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteVmwareEngineNetwork = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteVmwareEngineNetwork(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteVmwareEngineNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteVmwareEngineNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteVmwareEngineNetworkProgress without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteVmwareEngineNetworkProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteVmwareEngineNetworkProgress with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteVmwareEngineNetworkProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listPrivateClouds', () => {
    it('invokes listPrivateClouds without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
      ];
      client.innerApiCalls.listPrivateClouds = stubSimpleCall(expectedResponse);
      const [response] = await client.listPrivateClouds(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPrivateClouds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPrivateClouds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPrivateClouds without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
      ];
      client.innerApiCalls.listPrivateClouds =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPrivateClouds(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.IPrivateCloud[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPrivateClouds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPrivateClouds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPrivateClouds with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPrivateClouds = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPrivateClouds(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listPrivateClouds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPrivateClouds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPrivateCloudsStream without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
      ];
      client.descriptors.page.listPrivateClouds.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPrivateCloudsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.PrivateCloud[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.PrivateCloud) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPrivateClouds.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPrivateClouds, request)
      );
      assert(
        (client.descriptors.page.listPrivateClouds.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPrivateCloudsStream with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPrivateClouds.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPrivateCloudsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.PrivateCloud[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.PrivateCloud) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPrivateClouds.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPrivateClouds, request)
      );
      assert(
        (client.descriptors.page.listPrivateClouds.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPrivateClouds without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.PrivateCloud()
        ),
      ];
      client.descriptors.page.listPrivateClouds.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmwareengine.v1.IPrivateCloud[] = [];
      const iterable = client.listPrivateCloudsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPrivateClouds.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPrivateClouds.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPrivateClouds with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListPrivateCloudsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPrivateClouds.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPrivateCloudsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmwareengine.v1.IPrivateCloud[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPrivateClouds.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPrivateClouds.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listClusters', () => {
    it('invokes listClusters without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
      ];
      client.innerApiCalls.listClusters = stubSimpleCall(expectedResponse);
      const [response] = await client.listClusters(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listClusters without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
      ];
      client.innerApiCalls.listClusters =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listClusters(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.ICluster[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listClusters with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listClusters = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listClusters(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listClustersStream without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
      ];
      client.descriptors.page.listClusters.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.Cluster[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.Cluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listClusters, request)
      );
      assert(
        (client.descriptors.page.listClusters.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listClustersStream with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listClusters.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.Cluster[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.Cluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listClusters, request)
      );
      assert(
        (client.descriptors.page.listClusters.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listClusters without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.Cluster()
        ),
      ];
      client.descriptors.page.listClusters.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmwareengine.v1.ICluster[] = [];
      const iterable = client.listClustersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listClusters.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listClusters with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listClusters.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listClustersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmwareengine.v1.ICluster[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listClusters.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listSubnets', () => {
    it('invokes listSubnets without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListSubnetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListSubnetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
      ];
      client.innerApiCalls.listSubnets = stubSimpleCall(expectedResponse);
      const [response] = await client.listSubnets(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSubnets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSubnets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSubnets without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListSubnetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListSubnetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
      ];
      client.innerApiCalls.listSubnets =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSubnets(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.ISubnet[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSubnets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSubnets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSubnets with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListSubnetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListSubnetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listSubnets = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSubnets(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listSubnets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSubnets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSubnetsStream without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListSubnetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListSubnetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
      ];
      client.descriptors.page.listSubnets.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSubnetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.Subnet[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.Subnet) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSubnets.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSubnets, request)
      );
      assert(
        (client.descriptors.page.listSubnets.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listSubnetsStream with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListSubnetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListSubnetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSubnets.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listSubnetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.Subnet[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.Subnet) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSubnets.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSubnets, request)
      );
      assert(
        (client.descriptors.page.listSubnets.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSubnets without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListSubnetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListSubnetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
        generateSampleMessage(new protos.google.cloud.vmwareengine.v1.Subnet()),
      ];
      client.descriptors.page.listSubnets.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmwareengine.v1.ISubnet[] = [];
      const iterable = client.listSubnetsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listSubnets.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSubnets.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSubnets with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListSubnetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListSubnetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSubnets.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listSubnetsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmwareengine.v1.ISubnet[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listSubnets.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSubnets.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listNodeTypes', () => {
    it('invokes listNodeTypes without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNodeTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNodeTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
      ];
      client.innerApiCalls.listNodeTypes = stubSimpleCall(expectedResponse);
      const [response] = await client.listNodeTypes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNodeTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNodeTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNodeTypes without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNodeTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNodeTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
      ];
      client.innerApiCalls.listNodeTypes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listNodeTypes(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.INodeType[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNodeTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNodeTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNodeTypes with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNodeTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNodeTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listNodeTypes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listNodeTypes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listNodeTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNodeTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNodeTypesStream without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNodeTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNodeTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
      ];
      client.descriptors.page.listNodeTypes.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listNodeTypesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.NodeType[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.NodeType) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listNodeTypes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listNodeTypes, request)
      );
      assert(
        (client.descriptors.page.listNodeTypes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listNodeTypesStream with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNodeTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNodeTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNodeTypes.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listNodeTypesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.NodeType[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.NodeType) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listNodeTypes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listNodeTypes, request)
      );
      assert(
        (client.descriptors.page.listNodeTypes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNodeTypes without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNodeTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNodeTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NodeType()
        ),
      ];
      client.descriptors.page.listNodeTypes.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmwareengine.v1.INodeType[] = [];
      const iterable = client.listNodeTypesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNodeTypes.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listNodeTypes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNodeTypes with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNodeTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNodeTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNodeTypes.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listNodeTypesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmwareengine.v1.INodeType[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNodeTypes.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listNodeTypes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listHcxActivationKeys', () => {
    it('invokes listHcxActivationKeys without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
      ];
      client.innerApiCalls.listHcxActivationKeys =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listHcxActivationKeys(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listHcxActivationKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listHcxActivationKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listHcxActivationKeys without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
      ];
      client.innerApiCalls.listHcxActivationKeys =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listHcxActivationKeys(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.vmwareengine.v1.IHcxActivationKey[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listHcxActivationKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listHcxActivationKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listHcxActivationKeys with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listHcxActivationKeys = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listHcxActivationKeys(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listHcxActivationKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listHcxActivationKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listHcxActivationKeysStream without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
      ];
      client.descriptors.page.listHcxActivationKeys.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listHcxActivationKeysStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.HcxActivationKey[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.HcxActivationKey) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listHcxActivationKeys
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listHcxActivationKeys, request)
      );
      assert(
        (
          client.descriptors.page.listHcxActivationKeys
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listHcxActivationKeysStream with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listHcxActivationKeys.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listHcxActivationKeysStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.HcxActivationKey[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.HcxActivationKey) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listHcxActivationKeys
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listHcxActivationKeys, request)
      );
      assert(
        (
          client.descriptors.page.listHcxActivationKeys
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listHcxActivationKeys without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.HcxActivationKey()
        ),
      ];
      client.descriptors.page.listHcxActivationKeys.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmwareengine.v1.IHcxActivationKey[] =
        [];
      const iterable = client.listHcxActivationKeysAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listHcxActivationKeys
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listHcxActivationKeys
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listHcxActivationKeys with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListHcxActivationKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listHcxActivationKeys.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listHcxActivationKeysAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmwareengine.v1.IHcxActivationKey[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listHcxActivationKeys
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listHcxActivationKeys
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listNetworkPolicies', () => {
    it('invokes listNetworkPolicies without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
      ];
      client.innerApiCalls.listNetworkPolicies =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listNetworkPolicies(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNetworkPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworkPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworkPolicies without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
      ];
      client.innerApiCalls.listNetworkPolicies =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listNetworkPolicies(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmwareengine.v1.INetworkPolicy[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNetworkPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworkPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworkPolicies with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listNetworkPolicies = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listNetworkPolicies(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listNetworkPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworkPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworkPoliciesStream without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
      ];
      client.descriptors.page.listNetworkPolicies.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listNetworkPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.NetworkPolicy[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.NetworkPolicy) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listNetworkPolicies.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listNetworkPolicies, request)
      );
      assert(
        (client.descriptors.page.listNetworkPolicies.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listNetworkPoliciesStream with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNetworkPolicies.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listNetworkPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.NetworkPolicy[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmwareengine.v1.NetworkPolicy) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listNetworkPolicies.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listNetworkPolicies, request)
      );
      assert(
        (client.descriptors.page.listNetworkPolicies.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNetworkPolicies without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.NetworkPolicy()
        ),
      ];
      client.descriptors.page.listNetworkPolicies.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmwareengine.v1.INetworkPolicy[] =
        [];
      const iterable = client.listNetworkPoliciesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNetworkPolicies.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listNetworkPolicies.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNetworkPolicies with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListNetworkPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNetworkPolicies.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listNetworkPoliciesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmwareengine.v1.INetworkPolicy[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNetworkPolicies.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listNetworkPolicies.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listVmwareEngineNetworks', () => {
    it('invokes listVmwareEngineNetworks without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
      ];
      client.innerApiCalls.listVmwareEngineNetworks =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listVmwareEngineNetworks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVmwareEngineNetworks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVmwareEngineNetworks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVmwareEngineNetworks without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
      ];
      client.innerApiCalls.listVmwareEngineNetworks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listVmwareEngineNetworks(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.vmwareengine.v1.IVmwareEngineNetwork[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVmwareEngineNetworks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVmwareEngineNetworks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVmwareEngineNetworks with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listVmwareEngineNetworks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listVmwareEngineNetworks(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listVmwareEngineNetworks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVmwareEngineNetworks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVmwareEngineNetworksStream without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
      ];
      client.descriptors.page.listVmwareEngineNetworks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listVmwareEngineNetworksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listVmwareEngineNetworks
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listVmwareEngineNetworks, request)
      );
      assert(
        (
          client.descriptors.page.listVmwareEngineNetworks
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listVmwareEngineNetworksStream with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVmwareEngineNetworks.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listVmwareEngineNetworksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listVmwareEngineNetworks
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listVmwareEngineNetworks, request)
      );
      assert(
        (
          client.descriptors.page.listVmwareEngineNetworks
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVmwareEngineNetworks without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork()
        ),
      ];
      client.descriptors.page.listVmwareEngineNetworks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmwareengine.v1.IVmwareEngineNetwork[] =
        [];
      const iterable = client.listVmwareEngineNetworksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVmwareEngineNetworks
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listVmwareEngineNetworks
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVmwareEngineNetworks with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmwareengine.v1.ListVmwareEngineNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVmwareEngineNetworks.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listVmwareEngineNetworksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmwareengine.v1.IVmwareEngineNetwork[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVmwareEngineNetworks
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listVmwareEngineNetworks
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('cluster', () => {
      const fakePath = '/rendered/path/cluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        private_cloud: 'privateCloudValue',
        cluster: 'clusterValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.clusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.clusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('clusterPath', () => {
        const result = client.clusterPath(
          'projectValue',
          'locationValue',
          'privateCloudValue',
          'clusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.clusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromClusterName', () => {
        const result = client.matchProjectFromClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromClusterName', () => {
        const result = client.matchLocationFromClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPrivateCloudFromClusterName', () => {
        const result = client.matchPrivateCloudFromClusterName(fakePath);
        assert.strictEqual(result, 'privateCloudValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromClusterName', () => {
        const result = client.matchClusterFromClusterName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('hcxActivationKey', () => {
      const fakePath = '/rendered/path/hcxActivationKey';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        private_cloud: 'privateCloudValue',
        hcx_activation_key: 'hcxActivationKeyValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.hcxActivationKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.hcxActivationKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('hcxActivationKeyPath', () => {
        const result = client.hcxActivationKeyPath(
          'projectValue',
          'locationValue',
          'privateCloudValue',
          'hcxActivationKeyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.hcxActivationKeyPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromHcxActivationKeyName', () => {
        const result = client.matchProjectFromHcxActivationKeyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.hcxActivationKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromHcxActivationKeyName', () => {
        const result = client.matchLocationFromHcxActivationKeyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.hcxActivationKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPrivateCloudFromHcxActivationKeyName', () => {
        const result =
          client.matchPrivateCloudFromHcxActivationKeyName(fakePath);
        assert.strictEqual(result, 'privateCloudValue');
        assert(
          (client.pathTemplates.hcxActivationKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHcxActivationKeyFromHcxActivationKeyName', () => {
        const result =
          client.matchHcxActivationKeyFromHcxActivationKeyName(fakePath);
        assert.strictEqual(result, 'hcxActivationKeyValue');
        assert(
          (client.pathTemplates.hcxActivationKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('networkPolicy', () => {
      const fakePath = '/rendered/path/networkPolicy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        network_policy: 'networkPolicyValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.networkPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.networkPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('networkPolicyPath', () => {
        const result = client.networkPolicyPath(
          'projectValue',
          'locationValue',
          'networkPolicyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.networkPolicyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromNetworkPolicyName', () => {
        const result = client.matchProjectFromNetworkPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.networkPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromNetworkPolicyName', () => {
        const result = client.matchLocationFromNetworkPolicyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.networkPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNetworkPolicyFromNetworkPolicyName', () => {
        const result = client.matchNetworkPolicyFromNetworkPolicyName(fakePath);
        assert.strictEqual(result, 'networkPolicyValue');
        assert(
          (client.pathTemplates.networkPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('nodeType', () => {
      const fakePath = '/rendered/path/nodeType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        node_type: 'nodeTypeValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.nodeTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.nodeTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('nodeTypePath', () => {
        const result = client.nodeTypePath(
          'projectValue',
          'locationValue',
          'nodeTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.nodeTypePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromNodeTypeName', () => {
        const result = client.matchProjectFromNodeTypeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.nodeTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromNodeTypeName', () => {
        const result = client.matchLocationFromNodeTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.nodeTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNodeTypeFromNodeTypeName', () => {
        const result = client.matchNodeTypeFromNodeTypeName(fakePath);
        assert.strictEqual(result, 'nodeTypeValue');
        assert(
          (client.pathTemplates.nodeTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('privateCloud', () => {
      const fakePath = '/rendered/path/privateCloud';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        private_cloud: 'privateCloudValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.privateCloudPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.privateCloudPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('privateCloudPath', () => {
        const result = client.privateCloudPath(
          'projectValue',
          'locationValue',
          'privateCloudValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.privateCloudPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPrivateCloudName', () => {
        const result = client.matchProjectFromPrivateCloudName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.privateCloudPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPrivateCloudName', () => {
        const result = client.matchLocationFromPrivateCloudName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.privateCloudPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPrivateCloudFromPrivateCloudName', () => {
        const result = client.matchPrivateCloudFromPrivateCloudName(fakePath);
        assert.strictEqual(result, 'privateCloudValue');
        assert(
          (client.pathTemplates.privateCloudPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('subnet', () => {
      const fakePath = '/rendered/path/subnet';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        private_cloud: 'privateCloudValue',
        subnet: 'subnetValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.subnetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.subnetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('subnetPath', () => {
        const result = client.subnetPath(
          'projectValue',
          'locationValue',
          'privateCloudValue',
          'subnetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.subnetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSubnetName', () => {
        const result = client.matchProjectFromSubnetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.subnetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSubnetName', () => {
        const result = client.matchLocationFromSubnetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.subnetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPrivateCloudFromSubnetName', () => {
        const result = client.matchPrivateCloudFromSubnetName(fakePath);
        assert.strictEqual(result, 'privateCloudValue');
        assert(
          (client.pathTemplates.subnetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSubnetFromSubnetName', () => {
        const result = client.matchSubnetFromSubnetName(fakePath);
        assert.strictEqual(result, 'subnetValue');
        assert(
          (client.pathTemplates.subnetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('vmwareEngineNetwork', () => {
      const fakePath = '/rendered/path/vmwareEngineNetwork';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        vmware_engine_network: 'vmwareEngineNetworkValue',
      };
      const client = new vmwareengineModule.v1.VmwareEngineClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.vmwareEngineNetworkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.vmwareEngineNetworkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('vmwareEngineNetworkPath', () => {
        const result = client.vmwareEngineNetworkPath(
          'projectValue',
          'locationValue',
          'vmwareEngineNetworkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.vmwareEngineNetworkPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromVmwareEngineNetworkName', () => {
        const result = client.matchProjectFromVmwareEngineNetworkName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.vmwareEngineNetworkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromVmwareEngineNetworkName', () => {
        const result =
          client.matchLocationFromVmwareEngineNetworkName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.vmwareEngineNetworkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVmwareEngineNetworkFromVmwareEngineNetworkName', () => {
        const result =
          client.matchVmwareEngineNetworkFromVmwareEngineNetworkName(fakePath);
        assert.strictEqual(result, 'vmwareEngineNetworkValue');
        assert(
          (
            client.pathTemplates.vmwareEngineNetworkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
