// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as contactcenterinsightsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, IamProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.ContactCenterInsightsClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'contactcenterinsights.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          contactcenterinsightsModule.v1.ContactCenterInsightsClient
            .servicePath;
        assert.strictEqual(servicePath, 'contactcenterinsights.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          contactcenterinsightsModule.v1.ContactCenterInsightsClient
            .apiEndpoint;
        assert.strictEqual(apiEndpoint, 'contactcenterinsights.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          universeDomain: 'example.com',
        });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'contactcenterinsights.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          universe_domain: 'example.com',
        });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'contactcenterinsights.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new contactcenterinsightsModule.v1.ContactCenterInsightsClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'contactcenterinsights.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              universeDomain: 'configured.example.com',
            });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'contactcenterinsights.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port =
        contactcenterinsightsModule.v1.ContactCenterInsightsClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.contactCenterInsightsStub, undefined);
      await client.initialize();
      assert(client.contactCenterInsightsStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.contactCenterInsightsStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.contactCenterInsightsStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('createConversation', () => {
    it('invokes createConversation without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateConversationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Conversation()
      );
      client.innerApiCalls.createConversation =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createConversation(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConversation without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateConversationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Conversation()
      );
      client.innerApiCalls.createConversation =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createConversation(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IConversation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConversation with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateConversationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConversation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createConversation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConversation with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateConversationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createConversation(request), expectedError);
    });
  });

  describe('updateConversation', () => {
    it('invokes updateConversation without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateConversationRequest()
      );
      request.conversation ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateConversationRequest',
        ['conversation', 'name']
      );
      request.conversation.name = defaultValue1;
      const expectedHeaderRequestParams = `conversation.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Conversation()
      );
      client.innerApiCalls.updateConversation =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateConversation(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConversation without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateConversationRequest()
      );
      request.conversation ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateConversationRequest',
        ['conversation', 'name']
      );
      request.conversation.name = defaultValue1;
      const expectedHeaderRequestParams = `conversation.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Conversation()
      );
      client.innerApiCalls.updateConversation =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateConversation(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IConversation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConversation with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateConversationRequest()
      );
      request.conversation ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateConversationRequest',
        ['conversation', 'name']
      );
      request.conversation.name = defaultValue1;
      const expectedHeaderRequestParams = `conversation.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConversation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateConversation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConversation with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateConversationRequest()
      );
      request.conversation ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateConversationRequest',
        ['conversation', 'name']
      );
      request.conversation.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateConversation(request), expectedError);
    });
  });

  describe('getConversation', () => {
    it('invokes getConversation without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetConversationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Conversation()
      );
      client.innerApiCalls.getConversation = stubSimpleCall(expectedResponse);
      const [response] = await client.getConversation(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConversation without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetConversationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Conversation()
      );
      client.innerApiCalls.getConversation =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConversation(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IConversation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConversation with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetConversationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConversation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConversation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConversation with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetConversationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConversation(request), expectedError);
    });
  });

  describe('deleteConversation', () => {
    it('invokes deleteConversation without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteConversationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteConversation =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteConversation(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConversation without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteConversationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteConversation =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteConversation(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConversation with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteConversationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConversation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteConversation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConversation with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteConversationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteConversation(request), expectedError);
    });
  });

  describe('getAnalysis', () => {
    it('invokes getAnalysis without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetAnalysisRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Analysis()
      );
      client.innerApiCalls.getAnalysis = stubSimpleCall(expectedResponse);
      const [response] = await client.getAnalysis(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnalysis without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetAnalysisRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Analysis()
      );
      client.innerApiCalls.getAnalysis =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAnalysis(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IAnalysis | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnalysis with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetAnalysisRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAnalysis = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAnalysis(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnalysis with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetAnalysisRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAnalysis(request), expectedError);
    });
  });

  describe('deleteAnalysis', () => {
    it('invokes deleteAnalysis without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAnalysis = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAnalysis(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAnalysis without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAnalysis =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAnalysis(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAnalysis with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAnalysis = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAnalysis(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAnalysis with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteAnalysis(request), expectedError);
    });
  });

  describe('updateIssueModel', () => {
    it('invokes updateIssueModel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateIssueModelRequest()
      );
      request.issueModel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateIssueModelRequest',
        ['issueModel', 'name']
      );
      request.issueModel.name = defaultValue1;
      const expectedHeaderRequestParams = `issue_model.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.IssueModel()
      );
      client.innerApiCalls.updateIssueModel = stubSimpleCall(expectedResponse);
      const [response] = await client.updateIssueModel(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateIssueModel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateIssueModelRequest()
      );
      request.issueModel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateIssueModelRequest',
        ['issueModel', 'name']
      );
      request.issueModel.name = defaultValue1;
      const expectedHeaderRequestParams = `issue_model.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.IssueModel()
      );
      client.innerApiCalls.updateIssueModel =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateIssueModel(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IIssueModel | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateIssueModel with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateIssueModelRequest()
      );
      request.issueModel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateIssueModelRequest',
        ['issueModel', 'name']
      );
      request.issueModel.name = defaultValue1;
      const expectedHeaderRequestParams = `issue_model.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateIssueModel = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateIssueModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateIssueModel with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateIssueModelRequest()
      );
      request.issueModel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateIssueModelRequest',
        ['issueModel', 'name']
      );
      request.issueModel.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateIssueModel(request), expectedError);
    });
  });

  describe('getIssueModel', () => {
    it('invokes getIssueModel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.IssueModel()
      );
      client.innerApiCalls.getIssueModel = stubSimpleCall(expectedResponse);
      const [response] = await client.getIssueModel(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIssueModel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.IssueModel()
      );
      client.innerApiCalls.getIssueModel =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIssueModel(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IIssueModel | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIssueModel with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getIssueModel = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getIssueModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIssueModel with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getIssueModel(request), expectedError);
    });
  });

  describe('listIssueModels', () => {
    it('invokes listIssueModels without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsResponse()
      );
      client.innerApiCalls.listIssueModels = stubSimpleCall(expectedResponse);
      const [response] = await client.listIssueModels(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listIssueModels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listIssueModels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listIssueModels without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsResponse()
      );
      client.innerApiCalls.listIssueModels =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listIssueModels(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IListIssueModelsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listIssueModels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listIssueModels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listIssueModels with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listIssueModels = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listIssueModels(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listIssueModels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listIssueModels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listIssueModels with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.listIssueModels(request), expectedError);
    });
  });

  describe('getIssue', () => {
    it('invokes getIssue without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetIssueRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetIssueRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Issue()
      );
      client.innerApiCalls.getIssue = stubSimpleCall(expectedResponse);
      const [response] = await client.getIssue(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIssue without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetIssueRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetIssueRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Issue()
      );
      client.innerApiCalls.getIssue =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIssue(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IIssue | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIssue with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetIssueRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetIssueRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getIssue = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getIssue(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIssue with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetIssueRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetIssueRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getIssue(request), expectedError);
    });
  });

  describe('listIssues', () => {
    it('invokes listIssues without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssuesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListIssuesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssuesResponse()
      );
      client.innerApiCalls.listIssues = stubSimpleCall(expectedResponse);
      const [response] = await client.listIssues(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listIssues as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listIssues as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listIssues without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssuesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListIssuesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssuesResponse()
      );
      client.innerApiCalls.listIssues =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listIssues(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IListIssuesResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listIssues as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listIssues as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listIssues with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssuesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListIssuesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listIssues = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listIssues(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listIssues as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listIssues as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listIssues with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListIssuesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListIssuesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.listIssues(request), expectedError);
    });
  });

  describe('updateIssue', () => {
    it('invokes updateIssue without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateIssueRequest()
      );
      request.issue ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateIssueRequest',
        ['issue', 'name']
      );
      request.issue.name = defaultValue1;
      const expectedHeaderRequestParams = `issue.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Issue()
      );
      client.innerApiCalls.updateIssue = stubSimpleCall(expectedResponse);
      const [response] = await client.updateIssue(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateIssue without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateIssueRequest()
      );
      request.issue ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateIssueRequest',
        ['issue', 'name']
      );
      request.issue.name = defaultValue1;
      const expectedHeaderRequestParams = `issue.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Issue()
      );
      client.innerApiCalls.updateIssue =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateIssue(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IIssue | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateIssue with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateIssueRequest()
      );
      request.issue ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateIssueRequest',
        ['issue', 'name']
      );
      request.issue.name = defaultValue1;
      const expectedHeaderRequestParams = `issue.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateIssue = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateIssue(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateIssue with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateIssueRequest()
      );
      request.issue ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateIssueRequest',
        ['issue', 'name']
      );
      request.issue.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateIssue(request), expectedError);
    });
  });

  describe('deleteIssue', () => {
    it('invokes deleteIssue without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteIssueRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteIssueRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteIssue = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteIssue(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteIssue without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteIssueRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteIssueRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteIssue =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteIssue(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteIssue with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteIssueRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteIssueRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteIssue = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteIssue(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteIssue as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteIssue as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteIssue with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteIssueRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteIssueRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteIssue(request), expectedError);
    });
  });

  describe('calculateIssueModelStats', () => {
    it('invokes calculateIssueModelStats without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest',
        ['issueModel']
      );
      request.issueModel = defaultValue1;
      const expectedHeaderRequestParams = `issue_model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsResponse()
      );
      client.innerApiCalls.calculateIssueModelStats =
        stubSimpleCall(expectedResponse);
      const [response] = await client.calculateIssueModelStats(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.calculateIssueModelStats as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.calculateIssueModelStats as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes calculateIssueModelStats without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest',
        ['issueModel']
      );
      request.issueModel = defaultValue1;
      const expectedHeaderRequestParams = `issue_model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsResponse()
      );
      client.innerApiCalls.calculateIssueModelStats =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.calculateIssueModelStats(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.calculateIssueModelStats as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.calculateIssueModelStats as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes calculateIssueModelStats with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest',
        ['issueModel']
      );
      request.issueModel = defaultValue1;
      const expectedHeaderRequestParams = `issue_model=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.calculateIssueModelStats = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.calculateIssueModelStats(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.calculateIssueModelStats as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.calculateIssueModelStats as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes calculateIssueModelStats with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest',
        ['issueModel']
      );
      request.issueModel = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.calculateIssueModelStats(request),
        expectedError
      );
    });
  });

  describe('createPhraseMatcher', () => {
    it('invokes createPhraseMatcher without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
      );
      client.innerApiCalls.createPhraseMatcher =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createPhraseMatcher(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPhraseMatcher without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
      );
      client.innerApiCalls.createPhraseMatcher =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createPhraseMatcher(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPhraseMatcher with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPhraseMatcher = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createPhraseMatcher(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createPhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPhraseMatcher with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createPhraseMatcher(request), expectedError);
    });
  });

  describe('getPhraseMatcher', () => {
    it('invokes getPhraseMatcher without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
      );
      client.innerApiCalls.getPhraseMatcher = stubSimpleCall(expectedResponse);
      const [response] = await client.getPhraseMatcher(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhraseMatcher without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
      );
      client.innerApiCalls.getPhraseMatcher =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPhraseMatcher(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhraseMatcher with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPhraseMatcher = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPhraseMatcher(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhraseMatcher with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPhraseMatcher(request), expectedError);
    });
  });

  describe('deletePhraseMatcher', () => {
    it('invokes deletePhraseMatcher without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deletePhraseMatcher =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deletePhraseMatcher(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhraseMatcher without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deletePhraseMatcher =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePhraseMatcher(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhraseMatcher with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePhraseMatcher = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deletePhraseMatcher(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhraseMatcher with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deletePhraseMatcher(request), expectedError);
    });
  });

  describe('updatePhraseMatcher', () => {
    it('invokes updatePhraseMatcher without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdatePhraseMatcherRequest()
      );
      request.phraseMatcher ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdatePhraseMatcherRequest',
        ['phraseMatcher', 'name']
      );
      request.phraseMatcher.name = defaultValue1;
      const expectedHeaderRequestParams = `phrase_matcher.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
      );
      client.innerApiCalls.updatePhraseMatcher =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updatePhraseMatcher(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePhraseMatcher without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdatePhraseMatcherRequest()
      );
      request.phraseMatcher ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdatePhraseMatcherRequest',
        ['phraseMatcher', 'name']
      );
      request.phraseMatcher.name = defaultValue1;
      const expectedHeaderRequestParams = `phrase_matcher.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
      );
      client.innerApiCalls.updatePhraseMatcher =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updatePhraseMatcher(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePhraseMatcher with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdatePhraseMatcherRequest()
      );
      request.phraseMatcher ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdatePhraseMatcherRequest',
        ['phraseMatcher', 'name']
      );
      request.phraseMatcher.name = defaultValue1;
      const expectedHeaderRequestParams = `phrase_matcher.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePhraseMatcher = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updatePhraseMatcher(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePhraseMatcher as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePhraseMatcher as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePhraseMatcher with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdatePhraseMatcherRequest()
      );
      request.phraseMatcher ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdatePhraseMatcherRequest',
        ['phraseMatcher', 'name']
      );
      request.phraseMatcher.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updatePhraseMatcher(request), expectedError);
    });
  });

  describe('calculateStats', () => {
    it('invokes calculateStats without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateStatsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CalculateStatsRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateStatsResponse()
      );
      client.innerApiCalls.calculateStats = stubSimpleCall(expectedResponse);
      const [response] = await client.calculateStats(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.calculateStats as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.calculateStats as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes calculateStats without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateStatsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CalculateStatsRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateStatsResponse()
      );
      client.innerApiCalls.calculateStats =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.calculateStats(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.ICalculateStatsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.calculateStats as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.calculateStats as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes calculateStats with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateStatsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CalculateStatsRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.calculateStats = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.calculateStats(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.calculateStats as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.calculateStats as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes calculateStats with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CalculateStatsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CalculateStatsRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.calculateStats(request), expectedError);
    });
  });

  describe('getSettings', () => {
    it('invokes getSettings without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Settings()
      );
      client.innerApiCalls.getSettings = stubSimpleCall(expectedResponse);
      const [response] = await client.getSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSettings without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Settings()
      );
      client.innerApiCalls.getSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.ISettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSettings with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getSettings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSettings with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getSettings(request), expectedError);
    });
  });

  describe('updateSettings', () => {
    it('invokes updateSettings without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest()
      );
      request.settings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest',
        ['settings', 'name']
      );
      request.settings.name = defaultValue1;
      const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Settings()
      );
      client.innerApiCalls.updateSettings = stubSimpleCall(expectedResponse);
      const [response] = await client.updateSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSettings without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest()
      );
      request.settings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest',
        ['settings', 'name']
      );
      request.settings.name = defaultValue1;
      const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.Settings()
      );
      client.innerApiCalls.updateSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.ISettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSettings with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest()
      );
      request.settings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest',
        ['settings', 'name']
      );
      request.settings.name = defaultValue1;
      const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateSettings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSettings with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest()
      );
      request.settings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest',
        ['settings', 'name']
      );
      request.settings.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateSettings(request), expectedError);
    });
  });

  describe('createAnalysisRule', () => {
    it('invokes createAnalysisRule without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateAnalysisRuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
      );
      client.innerApiCalls.createAnalysisRule =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createAnalysisRule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnalysisRule without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateAnalysisRuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
      );
      client.innerApiCalls.createAnalysisRule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAnalysisRule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IAnalysisRule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnalysisRule with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateAnalysisRuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAnalysisRule = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAnalysisRule(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnalysisRule with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateAnalysisRuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createAnalysisRule(request), expectedError);
    });
  });

  describe('getAnalysisRule', () => {
    it('invokes getAnalysisRule without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetAnalysisRuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
      );
      client.innerApiCalls.getAnalysisRule = stubSimpleCall(expectedResponse);
      const [response] = await client.getAnalysisRule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnalysisRule without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetAnalysisRuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
      );
      client.innerApiCalls.getAnalysisRule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAnalysisRule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IAnalysisRule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnalysisRule with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetAnalysisRuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAnalysisRule = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAnalysisRule(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnalysisRule with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetAnalysisRuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAnalysisRule(request), expectedError);
    });
  });

  describe('updateAnalysisRule', () => {
    it('invokes updateAnalysisRule without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateAnalysisRuleRequest()
      );
      request.analysisRule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateAnalysisRuleRequest',
        ['analysisRule', 'name']
      );
      request.analysisRule.name = defaultValue1;
      const expectedHeaderRequestParams = `analysis_rule.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
      );
      client.innerApiCalls.updateAnalysisRule =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateAnalysisRule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAnalysisRule without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateAnalysisRuleRequest()
      );
      request.analysisRule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateAnalysisRuleRequest',
        ['analysisRule', 'name']
      );
      request.analysisRule.name = defaultValue1;
      const expectedHeaderRequestParams = `analysis_rule.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
      );
      client.innerApiCalls.updateAnalysisRule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAnalysisRule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IAnalysisRule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAnalysisRule with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateAnalysisRuleRequest()
      );
      request.analysisRule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateAnalysisRuleRequest',
        ['analysisRule', 'name']
      );
      request.analysisRule.name = defaultValue1;
      const expectedHeaderRequestParams = `analysis_rule.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAnalysisRule = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAnalysisRule(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAnalysisRule with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateAnalysisRuleRequest()
      );
      request.analysisRule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateAnalysisRuleRequest',
        ['analysisRule', 'name']
      );
      request.analysisRule.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateAnalysisRule(request), expectedError);
    });
  });

  describe('deleteAnalysisRule', () => {
    it('invokes deleteAnalysisRule without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteAnalysisRuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAnalysisRule =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAnalysisRule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAnalysisRule without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteAnalysisRuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAnalysisRule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAnalysisRule(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAnalysisRule with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteAnalysisRuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAnalysisRule = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAnalysisRule(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAnalysisRule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAnalysisRule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAnalysisRule with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteAnalysisRuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteAnalysisRule(request), expectedError);
    });
  });

  describe('getEncryptionSpec', () => {
    it('invokes getEncryptionSpec without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetEncryptionSpecRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetEncryptionSpecRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.EncryptionSpec()
      );
      client.innerApiCalls.getEncryptionSpec = stubSimpleCall(expectedResponse);
      const [response] = await client.getEncryptionSpec(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEncryptionSpec as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEncryptionSpec as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEncryptionSpec without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetEncryptionSpecRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetEncryptionSpecRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.EncryptionSpec()
      );
      client.innerApiCalls.getEncryptionSpec =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEncryptionSpec(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IEncryptionSpec | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEncryptionSpec as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEncryptionSpec as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEncryptionSpec with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetEncryptionSpecRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetEncryptionSpecRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEncryptionSpec = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getEncryptionSpec(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getEncryptionSpec as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEncryptionSpec as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEncryptionSpec with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetEncryptionSpecRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetEncryptionSpecRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getEncryptionSpec(request), expectedError);
    });
  });

  describe('createView', () => {
    it('invokes createView without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateViewRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.View()
      );
      client.innerApiCalls.createView = stubSimpleCall(expectedResponse);
      const [response] = await client.createView(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createView without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateViewRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.View()
      );
      client.innerApiCalls.createView =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createView(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IView | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createView with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateViewRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createView = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createView(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createView with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateViewRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createView(request), expectedError);
    });
  });

  describe('getView', () => {
    it('invokes getView without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.View()
      );
      client.innerApiCalls.getView = stubSimpleCall(expectedResponse);
      const [response] = await client.getView(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getView as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getView without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.View()
      );
      client.innerApiCalls.getView =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getView(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IView | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getView as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getView with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getView = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getView(request), expectedError);
      const actualRequest = (client.innerApiCalls.getView as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getView with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getView(request), expectedError);
    });
  });

  describe('updateView', () => {
    it('invokes updateView without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateViewRequest()
      );
      request.view ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateViewRequest',
        ['view', 'name']
      );
      request.view.name = defaultValue1;
      const expectedHeaderRequestParams = `view.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.View()
      );
      client.innerApiCalls.updateView = stubSimpleCall(expectedResponse);
      const [response] = await client.updateView(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateView without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateViewRequest()
      );
      request.view ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateViewRequest',
        ['view', 'name']
      );
      request.view.name = defaultValue1;
      const expectedHeaderRequestParams = `view.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.View()
      );
      client.innerApiCalls.updateView =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateView(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IView | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateView with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateViewRequest()
      );
      request.view ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateViewRequest',
        ['view', 'name']
      );
      request.view.name = defaultValue1;
      const expectedHeaderRequestParams = `view.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateView = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateView(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateView with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateViewRequest()
      );
      request.view ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateViewRequest',
        ['view', 'name']
      );
      request.view.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateView(request), expectedError);
    });
  });

  describe('deleteView', () => {
    it('invokes deleteView without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteView = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteView(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteView without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteView =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteView(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteView with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteView = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteView(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteView with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteView(request), expectedError);
    });
  });

  describe('createQaQuestion', () => {
    it('invokes createQaQuestion without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaQuestionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
      );
      client.innerApiCalls.createQaQuestion = stubSimpleCall(expectedResponse);
      const [response] = await client.createQaQuestion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaQuestion without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaQuestionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
      );
      client.innerApiCalls.createQaQuestion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createQaQuestion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaQuestion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaQuestion with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaQuestionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createQaQuestion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createQaQuestion(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaQuestion with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaQuestionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createQaQuestion(request), expectedError);
    });
  });

  describe('getQaQuestion', () => {
    it('invokes getQaQuestion without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaQuestionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
      );
      client.innerApiCalls.getQaQuestion = stubSimpleCall(expectedResponse);
      const [response] = await client.getQaQuestion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaQuestion without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaQuestionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
      );
      client.innerApiCalls.getQaQuestion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getQaQuestion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaQuestion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaQuestion with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaQuestionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getQaQuestion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getQaQuestion(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaQuestion with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaQuestionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getQaQuestion(request), expectedError);
    });
  });

  describe('updateQaQuestion', () => {
    it('invokes updateQaQuestion without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateQaQuestionRequest()
      );
      request.qaQuestion ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateQaQuestionRequest',
        ['qaQuestion', 'name']
      );
      request.qaQuestion.name = defaultValue1;
      const expectedHeaderRequestParams = `qa_question.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
      );
      client.innerApiCalls.updateQaQuestion = stubSimpleCall(expectedResponse);
      const [response] = await client.updateQaQuestion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateQaQuestion without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateQaQuestionRequest()
      );
      request.qaQuestion ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateQaQuestionRequest',
        ['qaQuestion', 'name']
      );
      request.qaQuestion.name = defaultValue1;
      const expectedHeaderRequestParams = `qa_question.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
      );
      client.innerApiCalls.updateQaQuestion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateQaQuestion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaQuestion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateQaQuestion with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateQaQuestionRequest()
      );
      request.qaQuestion ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateQaQuestionRequest',
        ['qaQuestion', 'name']
      );
      request.qaQuestion.name = defaultValue1;
      const expectedHeaderRequestParams = `qa_question.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateQaQuestion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateQaQuestion(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateQaQuestion with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateQaQuestionRequest()
      );
      request.qaQuestion ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateQaQuestionRequest',
        ['qaQuestion', 'name']
      );
      request.qaQuestion.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateQaQuestion(request), expectedError);
    });
  });

  describe('deleteQaQuestion', () => {
    it('invokes deleteQaQuestion without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaQuestionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteQaQuestion = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteQaQuestion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaQuestion without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaQuestionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteQaQuestion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteQaQuestion(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaQuestion with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaQuestionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteQaQuestion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteQaQuestion(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteQaQuestion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaQuestion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaQuestion with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaQuestionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaQuestionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteQaQuestion(request), expectedError);
    });
  });

  describe('createQaScorecard', () => {
    it('invokes createQaScorecard without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaScorecardRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
      );
      client.innerApiCalls.createQaScorecard = stubSimpleCall(expectedResponse);
      const [response] = await client.createQaScorecard(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaScorecard without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaScorecardRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
      );
      client.innerApiCalls.createQaScorecard =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createQaScorecard(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaScorecard | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaScorecard with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaScorecardRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createQaScorecard = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createQaScorecard(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaScorecard with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaScorecardRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createQaScorecard(request), expectedError);
    });
  });

  describe('getQaScorecard', () => {
    it('invokes getQaScorecard without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaScorecardRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
      );
      client.innerApiCalls.getQaScorecard = stubSimpleCall(expectedResponse);
      const [response] = await client.getQaScorecard(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaScorecard without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaScorecardRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
      );
      client.innerApiCalls.getQaScorecard =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getQaScorecard(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaScorecard | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaScorecard with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaScorecardRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getQaScorecard = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getQaScorecard(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaScorecard with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaScorecardRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getQaScorecard(request), expectedError);
    });
  });

  describe('updateQaScorecard', () => {
    it('invokes updateQaScorecard without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateQaScorecardRequest()
      );
      request.qaScorecard ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateQaScorecardRequest',
        ['qaScorecard', 'name']
      );
      request.qaScorecard.name = defaultValue1;
      const expectedHeaderRequestParams = `qa_scorecard.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
      );
      client.innerApiCalls.updateQaScorecard = stubSimpleCall(expectedResponse);
      const [response] = await client.updateQaScorecard(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateQaScorecard without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateQaScorecardRequest()
      );
      request.qaScorecard ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateQaScorecardRequest',
        ['qaScorecard', 'name']
      );
      request.qaScorecard.name = defaultValue1;
      const expectedHeaderRequestParams = `qa_scorecard.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
      );
      client.innerApiCalls.updateQaScorecard =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateQaScorecard(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaScorecard | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateQaScorecard with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateQaScorecardRequest()
      );
      request.qaScorecard ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateQaScorecardRequest',
        ['qaScorecard', 'name']
      );
      request.qaScorecard.name = defaultValue1;
      const expectedHeaderRequestParams = `qa_scorecard.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateQaScorecard = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateQaScorecard(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateQaScorecard with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateQaScorecardRequest()
      );
      request.qaScorecard ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateQaScorecardRequest',
        ['qaScorecard', 'name']
      );
      request.qaScorecard.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateQaScorecard(request), expectedError);
    });
  });

  describe('deleteQaScorecard', () => {
    it('invokes deleteQaScorecard without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteQaScorecard = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteQaScorecard(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaScorecard without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteQaScorecard =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteQaScorecard(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaScorecard with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteQaScorecard = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteQaScorecard(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteQaScorecard as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaScorecard as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaScorecard with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteQaScorecard(request), expectedError);
    });
  });

  describe('createQaScorecardRevision', () => {
    it('invokes createQaScorecardRevision without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaScorecardRevisionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
      );
      client.innerApiCalls.createQaScorecardRevision =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createQaScorecardRevision(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaScorecardRevision without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaScorecardRevisionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
      );
      client.innerApiCalls.createQaScorecardRevision =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createQaScorecardRevision(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaScorecardRevision | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaScorecardRevision with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaScorecardRevisionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createQaScorecardRevision = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createQaScorecardRevision(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createQaScorecardRevision with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateQaScorecardRevisionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createQaScorecardRevision(request),
        expectedError
      );
    });
  });

  describe('getQaScorecardRevision', () => {
    it('invokes getQaScorecardRevision without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
      );
      client.innerApiCalls.getQaScorecardRevision =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getQaScorecardRevision(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaScorecardRevision without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
      );
      client.innerApiCalls.getQaScorecardRevision =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getQaScorecardRevision(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaScorecardRevision | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaScorecardRevision with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getQaScorecardRevision = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getQaScorecardRevision(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getQaScorecardRevision with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getQaScorecardRevision(request),
        expectedError
      );
    });
  });

  describe('deployQaScorecardRevision', () => {
    it('invokes deployQaScorecardRevision without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeployQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeployQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
      );
      client.innerApiCalls.deployQaScorecardRevision =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deployQaScorecardRevision(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deployQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deployQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deployQaScorecardRevision without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeployQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeployQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
      );
      client.innerApiCalls.deployQaScorecardRevision =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deployQaScorecardRevision(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaScorecardRevision | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deployQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deployQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deployQaScorecardRevision with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeployQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeployQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deployQaScorecardRevision = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deployQaScorecardRevision(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deployQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deployQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deployQaScorecardRevision with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeployQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeployQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deployQaScorecardRevision(request),
        expectedError
      );
    });
  });

  describe('undeployQaScorecardRevision', () => {
    it('invokes undeployQaScorecardRevision without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UndeployQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UndeployQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
      );
      client.innerApiCalls.undeployQaScorecardRevision =
        stubSimpleCall(expectedResponse);
      const [response] = await client.undeployQaScorecardRevision(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.undeployQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeployQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeployQaScorecardRevision without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UndeployQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UndeployQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
      );
      client.innerApiCalls.undeployQaScorecardRevision =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.undeployQaScorecardRevision(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IQaScorecardRevision | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.undeployQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeployQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeployQaScorecardRevision with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UndeployQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UndeployQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.undeployQaScorecardRevision = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.undeployQaScorecardRevision(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.undeployQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeployQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeployQaScorecardRevision with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UndeployQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UndeployQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.undeployQaScorecardRevision(request),
        expectedError
      );
    });
  });

  describe('deleteQaScorecardRevision', () => {
    it('invokes deleteQaScorecardRevision without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteQaScorecardRevision =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteQaScorecardRevision(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaScorecardRevision without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteQaScorecardRevision =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteQaScorecardRevision(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaScorecardRevision with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteQaScorecardRevision = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteQaScorecardRevision(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteQaScorecardRevision with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteQaScorecardRevisionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteQaScorecardRevision(request),
        expectedError
      );
    });
  });

  describe('createFeedbackLabel', () => {
    it('invokes createFeedbackLabel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateFeedbackLabelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
      );
      client.innerApiCalls.createFeedbackLabel =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createFeedbackLabel(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFeedbackLabel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateFeedbackLabelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
      );
      client.innerApiCalls.createFeedbackLabel =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createFeedbackLabel(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFeedbackLabel with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateFeedbackLabelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createFeedbackLabel = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createFeedbackLabel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFeedbackLabel with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateFeedbackLabelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createFeedbackLabel(request), expectedError);
    });
  });

  describe('getFeedbackLabel', () => {
    it('invokes getFeedbackLabel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetFeedbackLabelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
      );
      client.innerApiCalls.getFeedbackLabel = stubSimpleCall(expectedResponse);
      const [response] = await client.getFeedbackLabel(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getFeedbackLabel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetFeedbackLabelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
      );
      client.innerApiCalls.getFeedbackLabel =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getFeedbackLabel(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getFeedbackLabel with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetFeedbackLabelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getFeedbackLabel = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getFeedbackLabel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getFeedbackLabel with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.GetFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.GetFeedbackLabelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getFeedbackLabel(request), expectedError);
    });
  });

  describe('updateFeedbackLabel', () => {
    it('invokes updateFeedbackLabel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateFeedbackLabelRequest()
      );
      request.feedbackLabel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateFeedbackLabelRequest',
        ['feedbackLabel', 'name']
      );
      request.feedbackLabel.name = defaultValue1;
      const expectedHeaderRequestParams = `feedback_label.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
      );
      client.innerApiCalls.updateFeedbackLabel =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateFeedbackLabel(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateFeedbackLabel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateFeedbackLabelRequest()
      );
      request.feedbackLabel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateFeedbackLabelRequest',
        ['feedbackLabel', 'name']
      );
      request.feedbackLabel.name = defaultValue1;
      const expectedHeaderRequestParams = `feedback_label.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
      );
      client.innerApiCalls.updateFeedbackLabel =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateFeedbackLabel(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateFeedbackLabel with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateFeedbackLabelRequest()
      );
      request.feedbackLabel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateFeedbackLabelRequest',
        ['feedbackLabel', 'name']
      );
      request.feedbackLabel.name = defaultValue1;
      const expectedHeaderRequestParams = `feedback_label.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateFeedbackLabel = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateFeedbackLabel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateFeedbackLabel with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UpdateFeedbackLabelRequest()
      );
      request.feedbackLabel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UpdateFeedbackLabelRequest',
        ['feedbackLabel', 'name']
      );
      request.feedbackLabel.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateFeedbackLabel(request), expectedError);
    });
  });

  describe('deleteFeedbackLabel', () => {
    it('invokes deleteFeedbackLabel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteFeedbackLabelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteFeedbackLabel =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteFeedbackLabel(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteFeedbackLabel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteFeedbackLabelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteFeedbackLabel =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteFeedbackLabel(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteFeedbackLabel with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteFeedbackLabelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteFeedbackLabel = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteFeedbackLabel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteFeedbackLabel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteFeedbackLabel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteFeedbackLabel with closed client', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteFeedbackLabelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteFeedbackLabelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteFeedbackLabel(request), expectedError);
    });
  });

  describe('uploadConversation', () => {
    it('invokes uploadConversation without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UploadConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UploadConversationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.uploadConversation =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.uploadConversation(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.uploadConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.uploadConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes uploadConversation without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UploadConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UploadConversationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.uploadConversation =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.uploadConversation(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IConversation,
              protos.google.cloud.contactcenterinsights.v1.IUploadConversationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IConversation,
        protos.google.cloud.contactcenterinsights.v1.IUploadConversationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.uploadConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.uploadConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes uploadConversation with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UploadConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UploadConversationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.uploadConversation = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.uploadConversation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.uploadConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.uploadConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes uploadConversation with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UploadConversationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UploadConversationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.uploadConversation = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.uploadConversation(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.uploadConversation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.uploadConversation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUploadConversationProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUploadConversationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUploadConversationProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUploadConversationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createAnalysis', () => {
    it('invokes createAnalysis without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAnalysis =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAnalysis(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnalysis without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAnalysis =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAnalysis(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IAnalysis,
              protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IAnalysis,
        protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnalysis with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAnalysis = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAnalysis(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnalysis with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAnalysis = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAnalysis(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAnalysis as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnalysis as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAnalysisProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAnalysisProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAnalysisProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAnalysisProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('bulkAnalyzeConversations', () => {
    it('invokes bulkAnalyzeConversations without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkAnalyzeConversations =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.bulkAnalyzeConversations(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkAnalyzeConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkAnalyzeConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkAnalyzeConversations without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkAnalyzeConversations =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.bulkAnalyzeConversations(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsResponse,
              protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkAnalyzeConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkAnalyzeConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkAnalyzeConversations with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkAnalyzeConversations = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.bulkAnalyzeConversations(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.bulkAnalyzeConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkAnalyzeConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkAnalyzeConversations with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkAnalyzeConversations = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.bulkAnalyzeConversations(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.bulkAnalyzeConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkAnalyzeConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBulkAnalyzeConversationsProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkBulkAnalyzeConversationsProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBulkAnalyzeConversationsProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBulkAnalyzeConversationsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('bulkDeleteConversations', () => {
    it('invokes bulkDeleteConversations without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkDeleteConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkDeleteConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkDeleteConversations =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.bulkDeleteConversations(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkDeleteConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkDeleteConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkDeleteConversations without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkDeleteConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkDeleteConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkDeleteConversations =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.bulkDeleteConversations(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IBulkDeleteConversationsResponse,
              protos.google.cloud.contactcenterinsights.v1.IBulkDeleteConversationsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkDeleteConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkDeleteConversationsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkDeleteConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkDeleteConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkDeleteConversations with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkDeleteConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkDeleteConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkDeleteConversations = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.bulkDeleteConversations(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.bulkDeleteConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkDeleteConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkDeleteConversations with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkDeleteConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkDeleteConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkDeleteConversations = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.bulkDeleteConversations(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.bulkDeleteConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkDeleteConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBulkDeleteConversationsProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkBulkDeleteConversationsProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBulkDeleteConversationsProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBulkDeleteConversationsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('ingestConversations', () => {
    it('invokes ingestConversations without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.IngestConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.IngestConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.ingestConversations =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.ingestConversations(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.ingestConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.ingestConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes ingestConversations without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.IngestConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.IngestConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.ingestConversations =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.ingestConversations(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IIngestConversationsResponse,
              protos.google.cloud.contactcenterinsights.v1.IIngestConversationsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.ingestConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.ingestConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes ingestConversations with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.IngestConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.IngestConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.ingestConversations = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.ingestConversations(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.ingestConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.ingestConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes ingestConversations with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.IngestConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.IngestConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.ingestConversations = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.ingestConversations(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.ingestConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.ingestConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkIngestConversationsProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkIngestConversationsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkIngestConversationsProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkIngestConversationsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('exportInsightsData', () => {
    it('invokes exportInsightsData without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.exportInsightsData =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.exportInsightsData(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.exportInsightsData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportInsightsData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportInsightsData without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.exportInsightsData =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.exportInsightsData(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse,
              protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse,
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.exportInsightsData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportInsightsData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportInsightsData with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.exportInsightsData = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.exportInsightsData(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.exportInsightsData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportInsightsData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportInsightsData with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.exportInsightsData = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.exportInsightsData(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.exportInsightsData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportInsightsData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkExportInsightsDataProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkExportInsightsDataProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkExportInsightsDataProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkExportInsightsDataProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createIssueModel', () => {
    it('invokes createIssueModel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateIssueModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createIssueModel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createIssueModel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createIssueModel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateIssueModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createIssueModel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createIssueModel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IIssueModel,
              protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIssueModel,
        protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createIssueModel with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateIssueModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createIssueModel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createIssueModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createIssueModel with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.CreateIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.CreateIssueModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createIssueModel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createIssueModel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateIssueModelProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateIssueModelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateIssueModelProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateIssueModelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteIssueModel', () => {
    it('invokes deleteIssueModel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteIssueModel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteIssueModel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteIssueModel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteIssueModel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteIssueModel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteIssueModel with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteIssueModel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteIssueModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteIssueModel with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeleteIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeleteIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteIssueModel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteIssueModel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteIssueModelProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteIssueModelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteIssueModelProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteIssueModelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deployIssueModel', () => {
    it('invokes deployIssueModel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeployIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeployIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deployIssueModel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deployIssueModel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deployIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deployIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deployIssueModel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeployIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeployIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deployIssueModel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deployIssueModel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelResponse,
              protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deployIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deployIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deployIssueModel with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeployIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeployIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deployIssueModel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deployIssueModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deployIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deployIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deployIssueModel with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.DeployIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.DeployIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deployIssueModel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deployIssueModel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deployIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deployIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeployIssueModelProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeployIssueModelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeployIssueModelProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeployIssueModelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('undeployIssueModel', () => {
    it('invokes undeployIssueModel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UndeployIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UndeployIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.undeployIssueModel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.undeployIssueModel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.undeployIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeployIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeployIssueModel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UndeployIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UndeployIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.undeployIssueModel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.undeployIssueModel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelResponse,
              protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.undeployIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeployIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeployIssueModel with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UndeployIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UndeployIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.undeployIssueModel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.undeployIssueModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.undeployIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeployIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeployIssueModel with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.UndeployIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.UndeployIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.undeployIssueModel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.undeployIssueModel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.undeployIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeployIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUndeployIssueModelProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUndeployIssueModelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUndeployIssueModelProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUndeployIssueModelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('exportIssueModel', () => {
    it('invokes exportIssueModel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ExportIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ExportIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.exportIssueModel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.exportIssueModel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.exportIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportIssueModel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ExportIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ExportIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.exportIssueModel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.exportIssueModel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IExportIssueModelResponse,
              protos.google.cloud.contactcenterinsights.v1.IExportIssueModelMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IExportIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IExportIssueModelMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.exportIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportIssueModel with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ExportIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ExportIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.exportIssueModel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.exportIssueModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.exportIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportIssueModel with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ExportIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ExportIssueModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.exportIssueModel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.exportIssueModel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.exportIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkExportIssueModelProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkExportIssueModelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkExportIssueModelProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkExportIssueModelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('importIssueModel', () => {
    it('invokes importIssueModel without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ImportIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ImportIssueModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.importIssueModel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.importIssueModel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importIssueModel without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ImportIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ImportIssueModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.importIssueModel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.importIssueModel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IImportIssueModelResponse,
              protos.google.cloud.contactcenterinsights.v1.IImportIssueModelMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IImportIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IImportIssueModelMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importIssueModel with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ImportIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ImportIssueModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importIssueModel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.importIssueModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.importIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importIssueModel with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ImportIssueModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ImportIssueModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importIssueModel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.importIssueModel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.importIssueModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importIssueModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkImportIssueModelProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkImportIssueModelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkImportIssueModelProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkImportIssueModelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('initializeEncryptionSpec', () => {
    it('invokes initializeEncryptionSpec without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.InitializeEncryptionSpecRequest()
      );
      request.encryptionSpec ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.InitializeEncryptionSpecRequest',
        ['encryptionSpec', 'name']
      );
      request.encryptionSpec.name = defaultValue1;
      const expectedHeaderRequestParams = `encryption_spec.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.initializeEncryptionSpec =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.initializeEncryptionSpec(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.initializeEncryptionSpec as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.initializeEncryptionSpec as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes initializeEncryptionSpec without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.InitializeEncryptionSpecRequest()
      );
      request.encryptionSpec ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.InitializeEncryptionSpecRequest',
        ['encryptionSpec', 'name']
      );
      request.encryptionSpec.name = defaultValue1;
      const expectedHeaderRequestParams = `encryption_spec.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.initializeEncryptionSpec =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.initializeEncryptionSpec(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IInitializeEncryptionSpecResponse,
              protos.google.cloud.contactcenterinsights.v1.IInitializeEncryptionSpecMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IInitializeEncryptionSpecResponse,
        protos.google.cloud.contactcenterinsights.v1.IInitializeEncryptionSpecMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.initializeEncryptionSpec as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.initializeEncryptionSpec as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes initializeEncryptionSpec with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.InitializeEncryptionSpecRequest()
      );
      request.encryptionSpec ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.InitializeEncryptionSpecRequest',
        ['encryptionSpec', 'name']
      );
      request.encryptionSpec.name = defaultValue1;
      const expectedHeaderRequestParams = `encryption_spec.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.initializeEncryptionSpec = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.initializeEncryptionSpec(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.initializeEncryptionSpec as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.initializeEncryptionSpec as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes initializeEncryptionSpec with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.InitializeEncryptionSpecRequest()
      );
      request.encryptionSpec ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.InitializeEncryptionSpecRequest',
        ['encryptionSpec', 'name']
      );
      request.encryptionSpec.name = defaultValue1;
      const expectedHeaderRequestParams = `encryption_spec.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.initializeEncryptionSpec = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.initializeEncryptionSpec(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.initializeEncryptionSpec as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.initializeEncryptionSpec as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkInitializeEncryptionSpecProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkInitializeEncryptionSpecProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkInitializeEncryptionSpecProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkInitializeEncryptionSpecProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('queryMetrics', () => {
    it('invokes queryMetrics without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QueryMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.QueryMetricsRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.queryMetrics = stubLongRunningCall(expectedResponse);
      const [operation] = await client.queryMetrics(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryMetrics without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QueryMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.QueryMetricsRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.queryMetrics =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.queryMetrics(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IQueryMetricsResponse,
              protos.google.cloud.contactcenterinsights.v1.IQueryMetricsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IQueryMetricsResponse,
        protos.google.cloud.contactcenterinsights.v1.IQueryMetricsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryMetrics with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QueryMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.QueryMetricsRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.queryMetrics = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.queryMetrics(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.queryMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryMetrics with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.QueryMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.QueryMetricsRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.queryMetrics = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.queryMetrics(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.queryMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkQueryMetricsProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkQueryMetricsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkQueryMetricsProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkQueryMetricsProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('tuneQaScorecardRevision', () => {
    it('invokes tuneQaScorecardRevision without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.TuneQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.TuneQaScorecardRevisionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.tuneQaScorecardRevision =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.tuneQaScorecardRevision(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.tuneQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.tuneQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes tuneQaScorecardRevision without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.TuneQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.TuneQaScorecardRevisionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.tuneQaScorecardRevision =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.tuneQaScorecardRevision(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.ITuneQaScorecardRevisionResponse,
              protos.google.cloud.contactcenterinsights.v1.ITuneQaScorecardRevisionMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.ITuneQaScorecardRevisionResponse,
        protos.google.cloud.contactcenterinsights.v1.ITuneQaScorecardRevisionMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.tuneQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.tuneQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes tuneQaScorecardRevision with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.TuneQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.TuneQaScorecardRevisionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.tuneQaScorecardRevision = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.tuneQaScorecardRevision(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.tuneQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.tuneQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes tuneQaScorecardRevision with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.TuneQaScorecardRevisionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.TuneQaScorecardRevisionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.tuneQaScorecardRevision = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.tuneQaScorecardRevision(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.tuneQaScorecardRevision as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.tuneQaScorecardRevision as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkTuneQaScorecardRevisionProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkTuneQaScorecardRevisionProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkTuneQaScorecardRevisionProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkTuneQaScorecardRevisionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('bulkUploadFeedbackLabels', () => {
    it('invokes bulkUploadFeedbackLabels without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkUploadFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkUploadFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkUploadFeedbackLabels =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.bulkUploadFeedbackLabels(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkUploadFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkUploadFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkUploadFeedbackLabels without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkUploadFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkUploadFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkUploadFeedbackLabels =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.bulkUploadFeedbackLabels(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IBulkUploadFeedbackLabelsResponse,
              protos.google.cloud.contactcenterinsights.v1.IBulkUploadFeedbackLabelsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkUploadFeedbackLabelsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkUploadFeedbackLabelsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkUploadFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkUploadFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkUploadFeedbackLabels with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkUploadFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkUploadFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkUploadFeedbackLabels = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.bulkUploadFeedbackLabels(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.bulkUploadFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkUploadFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkUploadFeedbackLabels with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkUploadFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkUploadFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkUploadFeedbackLabels = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.bulkUploadFeedbackLabels(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.bulkUploadFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkUploadFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBulkUploadFeedbackLabelsProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkBulkUploadFeedbackLabelsProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBulkUploadFeedbackLabelsProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBulkUploadFeedbackLabelsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('bulkDownloadFeedbackLabels', () => {
    it('invokes bulkDownloadFeedbackLabels without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkDownloadFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkDownloadFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkDownloadFeedbackLabels =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.bulkDownloadFeedbackLabels(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkDownloadFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkDownloadFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkDownloadFeedbackLabels without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkDownloadFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkDownloadFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkDownloadFeedbackLabels =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.bulkDownloadFeedbackLabels(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.contactcenterinsights.v1.IBulkDownloadFeedbackLabelsResponse,
              protos.google.cloud.contactcenterinsights.v1.IBulkDownloadFeedbackLabelsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkDownloadFeedbackLabelsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkDownloadFeedbackLabelsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkDownloadFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkDownloadFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkDownloadFeedbackLabels with call error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkDownloadFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkDownloadFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkDownloadFeedbackLabels = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.bulkDownloadFeedbackLabels(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.bulkDownloadFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkDownloadFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkDownloadFeedbackLabels with LRO error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.BulkDownloadFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.BulkDownloadFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkDownloadFeedbackLabels = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.bulkDownloadFeedbackLabels(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.bulkDownloadFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkDownloadFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBulkDownloadFeedbackLabelsProgress without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkBulkDownloadFeedbackLabelsProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBulkDownloadFeedbackLabelsProgress with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBulkDownloadFeedbackLabelsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listConversations', () => {
    it('invokes listConversations without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
      ];
      client.innerApiCalls.listConversations = stubSimpleCall(expectedResponse);
      const [response] = await client.listConversations(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConversations without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
      ];
      client.innerApiCalls.listConversations =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConversations(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IConversation[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConversations with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConversations = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listConversations(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listConversations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConversations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConversationsStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
      ];
      client.descriptors.page.listConversations.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConversationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.Conversation[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.Conversation
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listConversations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConversations, request)
      );
      assert(
        (client.descriptors.page.listConversations.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listConversationsStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConversations.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConversationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.Conversation[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.Conversation
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listConversations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConversations, request)
      );
      assert(
        (client.descriptors.page.listConversations.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConversations without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Conversation()
        ),
      ];
      client.descriptors.page.listConversations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IConversation[] =
        [];
      const iterable = client.listConversationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConversations.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConversations.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConversations with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListConversationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConversations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConversationsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IConversation[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConversations.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConversations.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listAnalyses', () => {
    it('invokes listAnalyses without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
      ];
      client.innerApiCalls.listAnalyses = stubSimpleCall(expectedResponse);
      const [response] = await client.listAnalyses(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAnalyses as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAnalyses as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAnalyses without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
      ];
      client.innerApiCalls.listAnalyses =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAnalyses(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IAnalysis[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAnalyses as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAnalyses as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAnalyses with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAnalyses = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAnalyses(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAnalyses as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAnalyses as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAnalysesStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
      ];
      client.descriptors.page.listAnalyses.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAnalysesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.Analysis[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.contactcenterinsights.v1.Analysis) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAnalyses.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAnalyses, request)
      );
      assert(
        (client.descriptors.page.listAnalyses.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listAnalysesStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAnalyses.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listAnalysesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.Analysis[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.contactcenterinsights.v1.Analysis) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAnalyses.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAnalyses, request)
      );
      assert(
        (client.descriptors.page.listAnalyses.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listAnalyses without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.Analysis()
        ),
      ];
      client.descriptors.page.listAnalyses.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IAnalysis[] =
        [];
      const iterable = client.listAnalysesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAnalyses.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAnalyses.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listAnalyses with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAnalyses.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAnalysesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IAnalysis[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAnalyses.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAnalyses.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listPhraseMatchers', () => {
    it('invokes listPhraseMatchers without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
      ];
      client.innerApiCalls.listPhraseMatchers =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listPhraseMatchers(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPhraseMatchers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPhraseMatchers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPhraseMatchers without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
      ];
      client.innerApiCalls.listPhraseMatchers =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPhraseMatchers(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPhraseMatchers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPhraseMatchers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPhraseMatchers with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPhraseMatchers = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPhraseMatchers(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listPhraseMatchers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPhraseMatchers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPhraseMatchersStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
      ];
      client.descriptors.page.listPhraseMatchers.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPhraseMatchersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.PhraseMatcher[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.PhraseMatcher
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPhraseMatchers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPhraseMatchers, request)
      );
      assert(
        (client.descriptors.page.listPhraseMatchers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listPhraseMatchersStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPhraseMatchers.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPhraseMatchersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.PhraseMatcher[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.PhraseMatcher
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPhraseMatchers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPhraseMatchers, request)
      );
      assert(
        (client.descriptors.page.listPhraseMatchers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listPhraseMatchers without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()
        ),
      ];
      client.descriptors.page.listPhraseMatchers.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher[] =
        [];
      const iterable = client.listPhraseMatchersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPhraseMatchers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPhraseMatchers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listPhraseMatchers with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPhraseMatchers.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPhraseMatchersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPhraseMatchers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPhraseMatchers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listAnalysisRules', () => {
    it('invokes listAnalysisRules without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
      ];
      client.innerApiCalls.listAnalysisRules = stubSimpleCall(expectedResponse);
      const [response] = await client.listAnalysisRules(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAnalysisRules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAnalysisRules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAnalysisRules without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
      ];
      client.innerApiCalls.listAnalysisRules =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAnalysisRules(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IAnalysisRule[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAnalysisRules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAnalysisRules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAnalysisRules with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAnalysisRules = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAnalysisRules(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAnalysisRules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAnalysisRules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAnalysisRulesStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
      ];
      client.descriptors.page.listAnalysisRules.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAnalysisRulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.AnalysisRule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.AnalysisRule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAnalysisRules.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAnalysisRules, request)
      );
      assert(
        (client.descriptors.page.listAnalysisRules.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listAnalysisRulesStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAnalysisRules.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAnalysisRulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.AnalysisRule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.AnalysisRule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAnalysisRules.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAnalysisRules, request)
      );
      assert(
        (client.descriptors.page.listAnalysisRules.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listAnalysisRules without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.AnalysisRule()
        ),
      ];
      client.descriptors.page.listAnalysisRules.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IAnalysisRule[] =
        [];
      const iterable = client.listAnalysisRulesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAnalysisRules.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAnalysisRules.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listAnalysisRules with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAnalysisRulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAnalysisRules.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAnalysisRulesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IAnalysisRule[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAnalysisRules.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAnalysisRules.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listViews', () => {
    it('invokes listViews without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
      ];
      client.innerApiCalls.listViews = stubSimpleCall(expectedResponse);
      const [response] = await client.listViews(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listViews as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listViews as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listViews without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
      ];
      client.innerApiCalls.listViews =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listViews(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.contactcenterinsights.v1.IView[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listViews as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listViews as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listViews with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listViews = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listViews(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listViews as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listViews as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listViewsStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
      ];
      client.descriptors.page.listViews.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listViewsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.View[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.contactcenterinsights.v1.View) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listViews.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listViews, request)
      );
      assert(
        (client.descriptors.page.listViews.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listViewsStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listViews.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listViewsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.View[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.contactcenterinsights.v1.View) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listViews.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listViews, request)
      );
      assert(
        (client.descriptors.page.listViews.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listViews without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.View()
        ),
      ];
      client.descriptors.page.listViews.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IView[] =
        [];
      const iterable = client.listViewsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listViews.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listViews.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listViews with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listViews.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listViewsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IView[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listViews.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listViews.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listQaQuestions', () => {
    it('invokes listQaQuestions without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
      ];
      client.innerApiCalls.listQaQuestions = stubSimpleCall(expectedResponse);
      const [response] = await client.listQaQuestions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listQaQuestions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaQuestions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaQuestions without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
      ];
      client.innerApiCalls.listQaQuestions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listQaQuestions(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IQaQuestion[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listQaQuestions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaQuestions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaQuestions with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listQaQuestions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listQaQuestions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listQaQuestions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaQuestions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaQuestionsStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
      ];
      client.descriptors.page.listQaQuestions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listQaQuestionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.QaQuestion[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.QaQuestion
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listQaQuestions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listQaQuestions, request)
      );
      assert(
        (client.descriptors.page.listQaQuestions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listQaQuestionsStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listQaQuestions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listQaQuestionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.QaQuestion[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.QaQuestion
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listQaQuestions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listQaQuestions, request)
      );
      assert(
        (client.descriptors.page.listQaQuestions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listQaQuestions without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaQuestion()
        ),
      ];
      client.descriptors.page.listQaQuestions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IQaQuestion[] =
        [];
      const iterable = client.listQaQuestionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listQaQuestions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listQaQuestions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listQaQuestions with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaQuestionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listQaQuestions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listQaQuestionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IQaQuestion[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listQaQuestions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listQaQuestions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listQaScorecards', () => {
    it('invokes listQaScorecards without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
      ];
      client.innerApiCalls.listQaScorecards = stubSimpleCall(expectedResponse);
      const [response] = await client.listQaScorecards(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listQaScorecards as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaScorecards as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaScorecards without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
      ];
      client.innerApiCalls.listQaScorecards =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listQaScorecards(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IQaScorecard[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listQaScorecards as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaScorecards as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaScorecards with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listQaScorecards = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listQaScorecards(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listQaScorecards as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaScorecards as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaScorecardsStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
      ];
      client.descriptors.page.listQaScorecards.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listQaScorecardsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.QaScorecard[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.QaScorecard
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listQaScorecards.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listQaScorecards, request)
      );
      assert(
        (client.descriptors.page.listQaScorecards.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listQaScorecardsStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listQaScorecards.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listQaScorecardsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.QaScorecard[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.QaScorecard
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listQaScorecards.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listQaScorecards, request)
      );
      assert(
        (client.descriptors.page.listQaScorecards.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listQaScorecards without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecard()
        ),
      ];
      client.descriptors.page.listQaScorecards.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IQaScorecard[] =
        [];
      const iterable = client.listQaScorecardsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listQaScorecards.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listQaScorecards.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listQaScorecards with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listQaScorecards.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listQaScorecardsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IQaScorecard[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listQaScorecards.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listQaScorecards.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listQaScorecardRevisions', () => {
    it('invokes listQaScorecardRevisions without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
      ];
      client.innerApiCalls.listQaScorecardRevisions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listQaScorecardRevisions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listQaScorecardRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaScorecardRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaScorecardRevisions without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
      ];
      client.innerApiCalls.listQaScorecardRevisions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listQaScorecardRevisions(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IQaScorecardRevision[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listQaScorecardRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaScorecardRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaScorecardRevisions with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listQaScorecardRevisions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listQaScorecardRevisions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listQaScorecardRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listQaScorecardRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listQaScorecardRevisionsStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
      ];
      client.descriptors.page.listQaScorecardRevisions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listQaScorecardRevisionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listQaScorecardRevisions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listQaScorecardRevisions, request)
      );
      assert(
        (
          client.descriptors.page.listQaScorecardRevisions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listQaScorecardRevisionsStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listQaScorecardRevisions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listQaScorecardRevisionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listQaScorecardRevisions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listQaScorecardRevisions, request)
      );
      assert(
        (
          client.descriptors.page.listQaScorecardRevisions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listQaScorecardRevisions without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.QaScorecardRevision()
        ),
      ];
      client.descriptors.page.listQaScorecardRevisions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IQaScorecardRevision[] =
        [];
      const iterable = client.listQaScorecardRevisionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listQaScorecardRevisions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listQaScorecardRevisions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listQaScorecardRevisions with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListQaScorecardRevisionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listQaScorecardRevisions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listQaScorecardRevisionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IQaScorecardRevision[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listQaScorecardRevisions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listQaScorecardRevisions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listFeedbackLabels', () => {
    it('invokes listFeedbackLabels without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
      ];
      client.innerApiCalls.listFeedbackLabels =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listFeedbackLabels(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFeedbackLabels without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
      ];
      client.innerApiCalls.listFeedbackLabels =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listFeedbackLabels(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFeedbackLabels with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listFeedbackLabels = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listFeedbackLabels(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFeedbackLabelsStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
      ];
      client.descriptors.page.listFeedbackLabels.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listFeedbackLabelsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.FeedbackLabel[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.FeedbackLabel
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listFeedbackLabels.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFeedbackLabels, request)
      );
      assert(
        (client.descriptors.page.listFeedbackLabels.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listFeedbackLabelsStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listFeedbackLabels.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listFeedbackLabelsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.FeedbackLabel[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.FeedbackLabel
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listFeedbackLabels.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFeedbackLabels, request)
      );
      assert(
        (client.descriptors.page.listFeedbackLabels.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listFeedbackLabels without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
      ];
      client.descriptors.page.listFeedbackLabels.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel[] =
        [];
      const iterable = client.listFeedbackLabelsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listFeedbackLabels.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listFeedbackLabels.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listFeedbackLabels with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listFeedbackLabels.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listFeedbackLabelsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listFeedbackLabels.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listFeedbackLabels.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listAllFeedbackLabels', () => {
    it('invokes listAllFeedbackLabels without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
      ];
      client.innerApiCalls.listAllFeedbackLabels =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAllFeedbackLabels(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAllFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAllFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAllFeedbackLabels without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
      ];
      client.innerApiCalls.listAllFeedbackLabels =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAllFeedbackLabels(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAllFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAllFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAllFeedbackLabels with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAllFeedbackLabels = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAllFeedbackLabels(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAllFeedbackLabels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAllFeedbackLabels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAllFeedbackLabelsStream without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
      ];
      client.descriptors.page.listAllFeedbackLabels.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAllFeedbackLabelsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.FeedbackLabel[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.FeedbackLabel
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAllFeedbackLabels
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAllFeedbackLabels, request)
      );
      assert(
        (
          client.descriptors.page.listAllFeedbackLabels
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAllFeedbackLabelsStream with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAllFeedbackLabels.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAllFeedbackLabelsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.contactcenterinsights.v1.FeedbackLabel[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.contactcenterinsights.v1.FeedbackLabel
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAllFeedbackLabels
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAllFeedbackLabels, request)
      );
      assert(
        (
          client.descriptors.page.listAllFeedbackLabels
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAllFeedbackLabels without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
        generateSampleMessage(
          new protos.google.cloud.contactcenterinsights.v1.FeedbackLabel()
        ),
      ];
      client.descriptors.page.listAllFeedbackLabels.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel[] =
        [];
      const iterable = client.listAllFeedbackLabelsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAllFeedbackLabels
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAllFeedbackLabels
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAllFeedbackLabels with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.contactcenterinsights.v1.ListAllFeedbackLabelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAllFeedbackLabels.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAllFeedbackLabelsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.contactcenterinsights.v1.IFeedbackLabel[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAllFeedbackLabels
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAllFeedbackLabels
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('analysisRule', () => {
      const fakePath = '/rendered/path/analysisRule';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        analysis_rule: 'analysisRuleValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.analysisRulePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.analysisRulePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('analysisRulePath', () => {
        const result = client.analysisRulePath(
          'projectValue',
          'locationValue',
          'analysisRuleValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.analysisRulePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAnalysisRuleName', () => {
        const result = client.matchProjectFromAnalysisRuleName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.analysisRulePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAnalysisRuleName', () => {
        const result = client.matchLocationFromAnalysisRuleName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.analysisRulePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnalysisRuleFromAnalysisRuleName', () => {
        const result = client.matchAnalysisRuleFromAnalysisRuleName(fakePath);
        assert.strictEqual(result, 'analysisRuleValue');
        assert(
          (client.pathTemplates.analysisRulePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('encryptionSpec', () => {
      const fakePath = '/rendered/path/encryptionSpec';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.encryptionSpecPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.encryptionSpecPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('encryptionSpecPath', () => {
        const result = client.encryptionSpecPath(
          'projectValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.encryptionSpecPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEncryptionSpecName', () => {
        const result = client.matchProjectFromEncryptionSpecName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.encryptionSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEncryptionSpecName', () => {
        const result = client.matchLocationFromEncryptionSpecName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.encryptionSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('issue', () => {
      const fakePath = '/rendered/path/issue';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        issue_model: 'issueModelValue',
        issue: 'issueValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.issuePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.issuePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('issuePath', () => {
        const result = client.issuePath(
          'projectValue',
          'locationValue',
          'issueModelValue',
          'issueValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.issuePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromIssueName', () => {
        const result = client.matchProjectFromIssueName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.issuePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromIssueName', () => {
        const result = client.matchLocationFromIssueName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.issuePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIssueModelFromIssueName', () => {
        const result = client.matchIssueModelFromIssueName(fakePath);
        assert.strictEqual(result, 'issueModelValue');
        assert(
          (client.pathTemplates.issuePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIssueFromIssueName', () => {
        const result = client.matchIssueFromIssueName(fakePath);
        assert.strictEqual(result, 'issueValue');
        assert(
          (client.pathTemplates.issuePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('issueModel', () => {
      const fakePath = '/rendered/path/issueModel';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        issue_model: 'issueModelValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.issueModelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.issueModelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('issueModelPath', () => {
        const result = client.issueModelPath(
          'projectValue',
          'locationValue',
          'issueModelValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.issueModelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromIssueModelName', () => {
        const result = client.matchProjectFromIssueModelName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.issueModelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromIssueModelName', () => {
        const result = client.matchLocationFromIssueModelName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.issueModelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIssueModelFromIssueModelName', () => {
        const result = client.matchIssueModelFromIssueModelName(fakePath);
        assert.strictEqual(result, 'issueModelValue');
        assert(
          (client.pathTemplates.issueModelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('phraseMatcher', () => {
      const fakePath = '/rendered/path/phraseMatcher';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        phrase_matcher: 'phraseMatcherValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.phraseMatcherPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.phraseMatcherPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('phraseMatcherPath', () => {
        const result = client.phraseMatcherPath(
          'projectValue',
          'locationValue',
          'phraseMatcherValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.phraseMatcherPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPhraseMatcherName', () => {
        const result = client.matchProjectFromPhraseMatcherName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.phraseMatcherPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPhraseMatcherName', () => {
        const result = client.matchLocationFromPhraseMatcherName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.phraseMatcherPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPhraseMatcherFromPhraseMatcherName', () => {
        const result = client.matchPhraseMatcherFromPhraseMatcherName(fakePath);
        assert.strictEqual(result, 'phraseMatcherValue');
        assert(
          (client.pathTemplates.phraseMatcherPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationAuthorizedViewSetAuthorizedViewConversation', () => {
      const fakePath =
        '/rendered/path/projectLocationAuthorizedViewSetAuthorizedViewConversation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        authorized_view_set: 'authorizedViewSetValue',
        authorized_view: 'authorizedViewValue',
        conversation: 'conversationValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationAuthorizedViewSetAuthorizedViewConversationPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationAuthorizedViewSetAuthorizedViewConversationPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationAuthorizedViewSetAuthorizedViewConversationPath', () => {
        const result =
          client.projectLocationAuthorizedViewSetAuthorizedViewConversationPath(
            'projectValue',
            'locationValue',
            'authorizedViewSetValue',
            'authorizedViewValue',
            'conversationValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName', () => {
        const result =
          client.matchProjectFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName', () => {
        const result =
          client.matchLocationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAuthorizedViewSetFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName', () => {
        const result =
          client.matchAuthorizedViewSetFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName(
            fakePath
          );
        assert.strictEqual(result, 'authorizedViewSetValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAuthorizedViewFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName', () => {
        const result =
          client.matchAuthorizedViewFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName(
            fakePath
          );
        assert.strictEqual(result, 'authorizedViewValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName', () => {
        const result =
          client.matchConversationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationName(
            fakePath
          );
        assert.strictEqual(result, 'conversationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysis', () => {
      const fakePath =
        '/rendered/path/projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysis';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        authorized_view_set: 'authorizedViewSetValue',
        authorized_view: 'authorizedViewValue',
        conversation: 'conversationValue',
        analysis: 'analysisValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPath', () => {
        const result =
          client.projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPath(
            'projectValue',
            'locationValue',
            'authorizedViewSetValue',
            'authorizedViewValue',
            'conversationValue',
            'analysisValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName', () => {
        const result =
          client.matchProjectFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName', () => {
        const result =
          client.matchLocationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAuthorizedViewSetFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName', () => {
        const result =
          client.matchAuthorizedViewSetFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'authorizedViewSetValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAuthorizedViewFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName', () => {
        const result =
          client.matchAuthorizedViewFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'authorizedViewValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName', () => {
        const result =
          client.matchConversationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'conversationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnalysisFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName', () => {
        const result =
          client.matchAnalysisFromProjectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'analysisValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabel', () => {
      const fakePath =
        '/rendered/path/projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabel';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        authorized_view_set: 'authorizedViewSetValue',
        authorized_view: 'authorizedViewValue',
        conversation: 'conversationValue',
        feedback_label: 'feedbackLabelValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPath', () => {
        const result =
          client.projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPath(
            'projectValue',
            'locationValue',
            'authorizedViewSetValue',
            'authorizedViewValue',
            'conversationValue',
            'feedbackLabelValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName', () => {
        const result =
          client.matchProjectFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName', () => {
        const result =
          client.matchLocationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAuthorizedViewSetFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName', () => {
        const result =
          client.matchAuthorizedViewSetFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'authorizedViewSetValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAuthorizedViewFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName', () => {
        const result =
          client.matchAuthorizedViewFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'authorizedViewValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName', () => {
        const result =
          client.matchConversationFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'conversationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFeedbackLabelFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName', () => {
        const result =
          client.matchFeedbackLabelFromProjectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'feedbackLabelValue');
        assert(
          (
            client.pathTemplates
              .projectLocationAuthorizedViewSetAuthorizedViewConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationConversation', () => {
      const fakePath = '/rendered/path/projectLocationConversation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        conversation: 'conversationValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationConversationPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationConversationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectLocationConversationPath', () => {
        const result = client.projectLocationConversationPath(
          'projectValue',
          'locationValue',
          'conversationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationConversationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationConversationName', () => {
        const result =
          client.matchProjectFromProjectLocationConversationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationConversationName', () => {
        const result =
          client.matchLocationFromProjectLocationConversationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversationFromProjectLocationConversationName', () => {
        const result =
          client.matchConversationFromProjectLocationConversationName(fakePath);
        assert.strictEqual(result, 'conversationValue');
        assert(
          (
            client.pathTemplates.projectLocationConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationConversationAnalysis', () => {
      const fakePath = '/rendered/path/projectLocationConversationAnalysis';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        conversation: 'conversationValue',
        analysis: 'analysisValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationConversationAnalysisPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationConversationAnalysisPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationConversationAnalysisPath', () => {
        const result = client.projectLocationConversationAnalysisPath(
          'projectValue',
          'locationValue',
          'conversationValue',
          'analysisValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationConversationAnalysisPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationConversationAnalysisName', () => {
        const result =
          client.matchProjectFromProjectLocationConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationConversationAnalysisName', () => {
        const result =
          client.matchLocationFromProjectLocationConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversationFromProjectLocationConversationAnalysisName', () => {
        const result =
          client.matchConversationFromProjectLocationConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'conversationValue');
        assert(
          (
            client.pathTemplates.projectLocationConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnalysisFromProjectLocationConversationAnalysisName', () => {
        const result =
          client.matchAnalysisFromProjectLocationConversationAnalysisName(
            fakePath
          );
        assert.strictEqual(result, 'analysisValue');
        assert(
          (
            client.pathTemplates.projectLocationConversationAnalysisPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationConversationFeedbackLabel', () => {
      const fakePath =
        '/rendered/path/projectLocationConversationFeedbackLabel';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        conversation: 'conversationValue',
        feedback_label: 'feedbackLabelValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationConversationFeedbackLabelPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationConversationFeedbackLabelPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationConversationFeedbackLabelPath', () => {
        const result = client.projectLocationConversationFeedbackLabelPath(
          'projectValue',
          'locationValue',
          'conversationValue',
          'feedbackLabelValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationConversationFeedbackLabelPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationConversationFeedbackLabelName', () => {
        const result =
          client.matchProjectFromProjectLocationConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationConversationFeedbackLabelName', () => {
        const result =
          client.matchLocationFromProjectLocationConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversationFromProjectLocationConversationFeedbackLabelName', () => {
        const result =
          client.matchConversationFromProjectLocationConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'conversationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFeedbackLabelFromProjectLocationConversationFeedbackLabelName', () => {
        const result =
          client.matchFeedbackLabelFromProjectLocationConversationFeedbackLabelName(
            fakePath
          );
        assert.strictEqual(result, 'feedbackLabelValue');
        assert(
          (
            client.pathTemplates
              .projectLocationConversationFeedbackLabelPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('qaQuestion', () => {
      const fakePath = '/rendered/path/qaQuestion';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        qa_scorecard: 'qaScorecardValue',
        revision: 'revisionValue',
        qa_question: 'qaQuestionValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.qaQuestionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.qaQuestionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('qaQuestionPath', () => {
        const result = client.qaQuestionPath(
          'projectValue',
          'locationValue',
          'qaScorecardValue',
          'revisionValue',
          'qaQuestionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.qaQuestionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromQaQuestionName', () => {
        const result = client.matchProjectFromQaQuestionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.qaQuestionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromQaQuestionName', () => {
        const result = client.matchLocationFromQaQuestionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.qaQuestionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchQaScorecardFromQaQuestionName', () => {
        const result = client.matchQaScorecardFromQaQuestionName(fakePath);
        assert.strictEqual(result, 'qaScorecardValue');
        assert(
          (client.pathTemplates.qaQuestionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRevisionFromQaQuestionName', () => {
        const result = client.matchRevisionFromQaQuestionName(fakePath);
        assert.strictEqual(result, 'revisionValue');
        assert(
          (client.pathTemplates.qaQuestionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchQaQuestionFromQaQuestionName', () => {
        const result = client.matchQaQuestionFromQaQuestionName(fakePath);
        assert.strictEqual(result, 'qaQuestionValue');
        assert(
          (client.pathTemplates.qaQuestionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('qaScorecard', () => {
      const fakePath = '/rendered/path/qaScorecard';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        qa_scorecard: 'qaScorecardValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.qaScorecardPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.qaScorecardPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('qaScorecardPath', () => {
        const result = client.qaScorecardPath(
          'projectValue',
          'locationValue',
          'qaScorecardValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.qaScorecardPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromQaScorecardName', () => {
        const result = client.matchProjectFromQaScorecardName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.qaScorecardPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromQaScorecardName', () => {
        const result = client.matchLocationFromQaScorecardName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.qaScorecardPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchQaScorecardFromQaScorecardName', () => {
        const result = client.matchQaScorecardFromQaScorecardName(fakePath);
        assert.strictEqual(result, 'qaScorecardValue');
        assert(
          (client.pathTemplates.qaScorecardPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('qaScorecardResult', () => {
      const fakePath = '/rendered/path/qaScorecardResult';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        qa_scorecard_result: 'qaScorecardResultValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.qaScorecardResultPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.qaScorecardResultPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('qaScorecardResultPath', () => {
        const result = client.qaScorecardResultPath(
          'projectValue',
          'locationValue',
          'qaScorecardResultValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.qaScorecardResultPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromQaScorecardResultName', () => {
        const result = client.matchProjectFromQaScorecardResultName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.qaScorecardResultPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromQaScorecardResultName', () => {
        const result = client.matchLocationFromQaScorecardResultName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.qaScorecardResultPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchQaScorecardResultFromQaScorecardResultName', () => {
        const result =
          client.matchQaScorecardResultFromQaScorecardResultName(fakePath);
        assert.strictEqual(result, 'qaScorecardResultValue');
        assert(
          (
            client.pathTemplates.qaScorecardResultPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('qaScorecardRevision', () => {
      const fakePath = '/rendered/path/qaScorecardRevision';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        qa_scorecard: 'qaScorecardValue',
        revision: 'revisionValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.qaScorecardRevisionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.qaScorecardRevisionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('qaScorecardRevisionPath', () => {
        const result = client.qaScorecardRevisionPath(
          'projectValue',
          'locationValue',
          'qaScorecardValue',
          'revisionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.qaScorecardRevisionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromQaScorecardRevisionName', () => {
        const result = client.matchProjectFromQaScorecardRevisionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.qaScorecardRevisionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromQaScorecardRevisionName', () => {
        const result =
          client.matchLocationFromQaScorecardRevisionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.qaScorecardRevisionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchQaScorecardFromQaScorecardRevisionName', () => {
        const result =
          client.matchQaScorecardFromQaScorecardRevisionName(fakePath);
        assert.strictEqual(result, 'qaScorecardValue');
        assert(
          (
            client.pathTemplates.qaScorecardRevisionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRevisionFromQaScorecardRevisionName', () => {
        const result =
          client.matchRevisionFromQaScorecardRevisionName(fakePath);
        assert.strictEqual(result, 'revisionValue');
        assert(
          (
            client.pathTemplates.qaScorecardRevisionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('settings', () => {
      const fakePath = '/rendered/path/settings';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.settingsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.settingsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('settingsPath', () => {
        const result = client.settingsPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.settingsPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSettingsName', () => {
        const result = client.matchProjectFromSettingsName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.settingsPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSettingsName', () => {
        const result = client.matchLocationFromSettingsName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.settingsPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('view', () => {
      const fakePath = '/rendered/path/view';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        view: 'viewValue',
      };
      const client =
        new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.viewPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.viewPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('viewPath', () => {
        const result = client.viewPath(
          'projectValue',
          'locationValue',
          'viewValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.viewPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromViewName', () => {
        const result = client.matchProjectFromViewName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.viewPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromViewName', () => {
        const result = client.matchLocationFromViewName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.viewPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchViewFromViewName', () => {
        const result = client.matchViewFromViewName(fakePath);
        assert.strictEqual(result, 'viewValue');
        assert(
          (client.pathTemplates.viewPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
