// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/contact_center_insights_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './contact_center_insights_client_config.json';
const version = require('../../../package.json').version;

/**
 *  An API that lets users analyze and explore their business conversation data.
 * @class
 * @memberof v1
 */
export class ContactCenterInsightsClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  contactCenterInsightsStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ContactCenterInsightsClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ContactCenterInsightsClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof ContactCenterInsightsClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      analysisPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}'
      ),
      conversationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/conversations/{conversation}'
      ),
      issuePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/issueModels/{issue_model}/issues/{issue}'
      ),
      issueModelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/issueModels/{issue_model}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      phraseMatcherPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}'
      ),
      settingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/settings'
      ),
      viewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/views/{view}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listConversations: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'conversations'
      ),
      listAnalyses: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'analyses'
      ),
      listPhraseMatchers: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'phraseMatchers'
      ),
      listViews: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'views'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createAnalysisResponse = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.Analysis'
    ) as gax.protobuf.Type;
    const createAnalysisMetadata = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.CreateAnalysisOperationMetadata'
    ) as gax.protobuf.Type;
    const bulkAnalyzeConversationsResponse = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsResponse'
    ) as gax.protobuf.Type;
    const bulkAnalyzeConversationsMetadata = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsMetadata'
    ) as gax.protobuf.Type;
    const ingestConversationsResponse = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.IngestConversationsResponse'
    ) as gax.protobuf.Type;
    const ingestConversationsMetadata = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.IngestConversationsMetadata'
    ) as gax.protobuf.Type;
    const exportInsightsDataResponse = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.ExportInsightsDataResponse'
    ) as gax.protobuf.Type;
    const exportInsightsDataMetadata = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.ExportInsightsDataMetadata'
    ) as gax.protobuf.Type;
    const createIssueModelResponse = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.IssueModel'
    ) as gax.protobuf.Type;
    const createIssueModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.CreateIssueModelMetadata'
    ) as gax.protobuf.Type;
    const deleteIssueModelResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteIssueModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.DeleteIssueModelMetadata'
    ) as gax.protobuf.Type;
    const deployIssueModelResponse = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.DeployIssueModelResponse'
    ) as gax.protobuf.Type;
    const deployIssueModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.DeployIssueModelMetadata'
    ) as gax.protobuf.Type;
    const undeployIssueModelResponse = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.UndeployIssueModelResponse'
    ) as gax.protobuf.Type;
    const undeployIssueModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.contactcenterinsights.v1.UndeployIssueModelMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createAnalysis: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAnalysisResponse.decode.bind(createAnalysisResponse),
        createAnalysisMetadata.decode.bind(createAnalysisMetadata)
      ),
      bulkAnalyzeConversations: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        bulkAnalyzeConversationsResponse.decode.bind(
          bulkAnalyzeConversationsResponse
        ),
        bulkAnalyzeConversationsMetadata.decode.bind(
          bulkAnalyzeConversationsMetadata
        )
      ),
      ingestConversations: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        ingestConversationsResponse.decode.bind(ingestConversationsResponse),
        ingestConversationsMetadata.decode.bind(ingestConversationsMetadata)
      ),
      exportInsightsData: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        exportInsightsDataResponse.decode.bind(exportInsightsDataResponse),
        exportInsightsDataMetadata.decode.bind(exportInsightsDataMetadata)
      ),
      createIssueModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createIssueModelResponse.decode.bind(createIssueModelResponse),
        createIssueModelMetadata.decode.bind(createIssueModelMetadata)
      ),
      deleteIssueModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteIssueModelResponse.decode.bind(deleteIssueModelResponse),
        deleteIssueModelMetadata.decode.bind(deleteIssueModelMetadata)
      ),
      deployIssueModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deployIssueModelResponse.decode.bind(deployIssueModelResponse),
        deployIssueModelMetadata.decode.bind(deployIssueModelMetadata)
      ),
      undeployIssueModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeployIssueModelResponse.decode.bind(undeployIssueModelResponse),
        undeployIssueModelMetadata.decode.bind(undeployIssueModelMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.contactcenterinsights.v1.ContactCenterInsights',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.contactCenterInsightsStub) {
      return this.contactCenterInsightsStub;
    }

    // Put together the "service stub" for
    // google.cloud.contactcenterinsights.v1.ContactCenterInsights.
    this.contactCenterInsightsStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.contactcenterinsights.v1.ContactCenterInsights'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.contactcenterinsights.v1
            .ContactCenterInsights,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const contactCenterInsightsStubMethods = [
      'createConversation',
      'updateConversation',
      'getConversation',
      'listConversations',
      'deleteConversation',
      'createAnalysis',
      'getAnalysis',
      'listAnalyses',
      'deleteAnalysis',
      'bulkAnalyzeConversations',
      'ingestConversations',
      'exportInsightsData',
      'createIssueModel',
      'updateIssueModel',
      'getIssueModel',
      'listIssueModels',
      'deleteIssueModel',
      'deployIssueModel',
      'undeployIssueModel',
      'getIssue',
      'listIssues',
      'updateIssue',
      'deleteIssue',
      'calculateIssueModelStats',
      'createPhraseMatcher',
      'getPhraseMatcher',
      'listPhraseMatchers',
      'deletePhraseMatcher',
      'updatePhraseMatcher',
      'calculateStats',
      'getSettings',
      'updateSettings',
      'createView',
      'getView',
      'listViews',
      'updateView',
      'deleteView',
    ];
    for (const methodName of contactCenterInsightsStubMethods) {
      const callPromise = this.contactCenterInsightsStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.contactCenterInsightsStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'contactcenterinsights.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'contactcenterinsights.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a conversation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the conversation.
   * @param {google.cloud.contactcenterinsights.v1.Conversation} request.conversation
   *   Required. The conversation resource to create.
   * @param {string} request.conversationId
   *   A unique ID for the new conversation. This ID will become the final
   *   component of the conversation's resource name. If no ID is specified, a
   *   server-generated ID will be used.
   *
   *   This value should be 4-64 characters and must match the regular
   *   expression `^{@link 0-9|a-z0-9-]{4,64}$`. Valid characters are `[a-z}-`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Conversation]{@link google.cloud.contactcenterinsights.v1.Conversation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.create_conversation.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CreateConversation_async
   */
  createConversation(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createConversation(
    request: protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createConversation(
    request: protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createConversation(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IConversation,
          | protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICreateConversationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createConversation(request, options, callback);
  }
  /**
   * Updates a conversation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.contactcenterinsights.v1.Conversation} request.conversation
   *   Required. The new values for the conversation.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Conversation]{@link google.cloud.contactcenterinsights.v1.Conversation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.update_conversation.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_UpdateConversation_async
   */
  updateConversation(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateConversation(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateConversation(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateConversation(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IConversation,
          | protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateConversationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'conversation.name': request.conversation!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateConversation(request, options, callback);
  }
  /**
   * Gets a conversation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the conversation to get.
   * @param {google.cloud.contactcenterinsights.v1.ConversationView} request.view
   *   The level of details of the conversation. Default is `FULL`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Conversation]{@link google.cloud.contactcenterinsights.v1.Conversation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.get_conversation.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_GetConversation_async
   */
  getConversation(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getConversation(
    request: protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConversation(
    request: protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConversation(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IConversation,
          | protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      | protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IConversation,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetConversationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConversation(request, options, callback);
  }
  /**
   * Deletes a conversation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the conversation to delete.
   * @param {boolean} request.force
   *   If set to true, all of this conversation's analyses will also be deleted.
   *   Otherwise, the request will only succeed if the conversation has no
   *   analyses.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.delete_conversation.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeleteConversation_async
   */
  deleteConversation(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteConversation(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConversation(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConversation(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeleteConversationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteConversation(request, options, callback);
  }
  /**
   * Gets an analysis.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the analysis to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Analysis]{@link google.cloud.contactcenterinsights.v1.Analysis}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.get_analysis.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_GetAnalysis_async
   */
  getAnalysis(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IAnalysis,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getAnalysis(
    request: protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IAnalysis,
      | protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAnalysis(
    request: protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IAnalysis,
      | protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAnalysis(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IAnalysis,
          | protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IAnalysis,
      | protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IAnalysis,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetAnalysisRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAnalysis(request, options, callback);
  }
  /**
   * Deletes an analysis.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the analysis to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.delete_analysis.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeleteAnalysis_async
   */
  deleteAnalysis(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteAnalysis(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAnalysis(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAnalysis(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeleteAnalysisRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAnalysis(request, options, callback);
  }
  /**
   * Updates an issue model.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.contactcenterinsights.v1.IssueModel} request.issueModel
   *   Required. The new values for the issue model.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IssueModel]{@link google.cloud.contactcenterinsights.v1.IssueModel}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.update_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_UpdateIssueModel_async
   */
  updateIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IIssueModel,
          | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueModelRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'issue_model.name': request.issueModel!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateIssueModel(request, options, callback);
  }
  /**
   * Gets an issue model.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the issue model to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IssueModel]{@link google.cloud.contactcenterinsights.v1.IssueModel}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.get_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_GetIssueModel_async
   */
  getIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      | protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      | protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IIssueModel,
          | protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      | protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IIssueModel,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetIssueModelRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIssueModel(request, options, callback);
  }
  /**
   * Lists issue models.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the issue model.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ListIssueModelsResponse]{@link google.cloud.contactcenterinsights.v1.ListIssueModelsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.list_issue_models.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_ListIssueModels_async
   */
  listIssueModels(
    request?: protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IListIssueModelsResponse,
      (
        | protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  listIssueModels(
    request: protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IListIssueModelsResponse,
      | protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listIssueModels(
    request: protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IListIssueModelsResponse,
      | protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listIssueModels(
    request?: protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IListIssueModelsResponse,
          | protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IListIssueModelsResponse,
      | protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IListIssueModelsResponse,
      (
        | protos.google.cloud.contactcenterinsights.v1.IListIssueModelsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listIssueModels(request, options, callback);
  }
  /**
   * Gets an issue.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the issue to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Issue]{@link google.cloud.contactcenterinsights.v1.Issue}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.get_issue.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_GetIssue_async
   */
  getIssue(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest | undefined,
      {} | undefined
    ]
  >;
  getIssue(
    request: protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      | protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getIssue(
    request: protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      | protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getIssue(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IIssue,
          | protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      | protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      protos.google.cloud.contactcenterinsights.v1.IGetIssueRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIssue(request, options, callback);
  }
  /**
   * Lists issues.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the issue.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ListIssuesResponse]{@link google.cloud.contactcenterinsights.v1.ListIssuesResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.list_issues.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_ListIssues_async
   */
  listIssues(
    request?: protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IListIssuesResponse,
      (
        | protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  listIssues(
    request: protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IListIssuesResponse,
      | protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listIssues(
    request: protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IListIssuesResponse,
      | protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listIssues(
    request?: protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IListIssuesResponse,
          | protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IListIssuesResponse,
      | protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IListIssuesResponse,
      (
        | protos.google.cloud.contactcenterinsights.v1.IListIssuesRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listIssues(request, options, callback);
  }
  /**
   * Updates an issue.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.contactcenterinsights.v1.Issue} request.issue
   *   Required. The new values for the issue.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Issue]{@link google.cloud.contactcenterinsights.v1.Issue}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.update_issue.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_UpdateIssue_async
   */
  updateIssue(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateIssue(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateIssue(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateIssue(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IIssue,
          | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IIssue,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateIssueRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'issue.name': request.issue!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateIssue(request, options, callback);
  }
  /**
   * Deletes an issue.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the issue to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.delete_issue.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeleteIssue_async
   */
  deleteIssue(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteIssue(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteIssue(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteIssue(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeleteIssueRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteIssue(request, options, callback);
  }
  /**
   * Gets an issue model's statistics.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.issueModel
   *   Required. The resource name of the issue model to query against.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CalculateIssueModelStatsResponse]{@link google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.calculate_issue_model_stats.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CalculateIssueModelStats_async
   */
  calculateIssueModelStats(
    request?: protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsResponse,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  calculateIssueModelStats(
    request: protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsResponse,
      | protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  calculateIssueModelStats(
    request: protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsResponse,
      | protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  calculateIssueModelStats(
    request?: protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsResponse,
          | protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsResponse,
      | protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsResponse,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        issue_model: request.issueModel ?? '',
      });
    this.initialize();
    return this.innerApiCalls.calculateIssueModelStats(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a phrase matcher.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the phrase matcher. Required. The location to create
   *   a phrase matcher for.
   *   Format: `projects/<Project ID>/locations/<Location ID>` or
   *   `projects/<Project Number>/locations/<Location ID>`
   * @param {google.cloud.contactcenterinsights.v1.PhraseMatcher} request.phraseMatcher
   *   Required. The phrase matcher resource to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PhraseMatcher]{@link google.cloud.contactcenterinsights.v1.PhraseMatcher}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.create_phrase_matcher.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CreatePhraseMatcher_async
   */
  createPhraseMatcher(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createPhraseMatcher(
    request: protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createPhraseMatcher(
    request: protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createPhraseMatcher(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
          | protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICreatePhraseMatcherRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createPhraseMatcher(request, options, callback);
  }
  /**
   * Gets a phrase matcher.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the phrase matcher to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PhraseMatcher]{@link google.cloud.contactcenterinsights.v1.PhraseMatcher}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.get_phrase_matcher.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_GetPhraseMatcher_async
   */
  getPhraseMatcher(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getPhraseMatcher(
    request: protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPhraseMatcher(
    request: protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPhraseMatcher(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
          | protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetPhraseMatcherRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPhraseMatcher(request, options, callback);
  }
  /**
   * Deletes a phrase matcher.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the phrase matcher to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.delete_phrase_matcher.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeletePhraseMatcher_async
   */
  deletePhraseMatcher(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deletePhraseMatcher(
    request: protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deletePhraseMatcher(
    request: protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deletePhraseMatcher(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeletePhraseMatcherRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePhraseMatcher(request, options, callback);
  }
  /**
   * Updates a phrase matcher.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.contactcenterinsights.v1.PhraseMatcher} request.phraseMatcher
   *   Required. The new values for the phrase matcher.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PhraseMatcher]{@link google.cloud.contactcenterinsights.v1.PhraseMatcher}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.update_phrase_matcher.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_UpdatePhraseMatcher_async
   */
  updatePhraseMatcher(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updatePhraseMatcher(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updatePhraseMatcher(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updatePhraseMatcher(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
          | protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      | protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdatePhraseMatcherRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'phrase_matcher.name': request.phraseMatcher!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updatePhraseMatcher(request, options, callback);
  }
  /**
   * Gets conversation statistics.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.location
   *   Required. The location of the conversations.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. This field is useful for
   *   getting statistics about conversations with specific properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CalculateStatsResponse]{@link google.cloud.contactcenterinsights.v1.CalculateStatsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.calculate_stats.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CalculateStats_async
   */
  calculateStats(
    request?: protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.ICalculateStatsResponse,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  calculateStats(
    request: protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.ICalculateStatsResponse,
      | protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  calculateStats(
    request: protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.ICalculateStatsResponse,
      | protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  calculateStats(
    request?: protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.ICalculateStatsResponse,
          | protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.ICalculateStatsResponse,
      | protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.ICalculateStatsResponse,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICalculateStatsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        location: request.location ?? '',
      });
    this.initialize();
    return this.innerApiCalls.calculateStats(request, options, callback);
  }
  /**
   * Gets project-level settings.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the settings resource to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Settings]{@link google.cloud.contactcenterinsights.v1.Settings}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.get_settings.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_GetSettings_async
   */
  getSettings(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getSettings(
    request: protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      | protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSettings(
    request: protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      | protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSettings(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.ISettings,
          | protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      | protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      (
        | protos.google.cloud.contactcenterinsights.v1.IGetSettingsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSettings(request, options, callback);
  }
  /**
   * Updates project-level settings.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.contactcenterinsights.v1.Settings} request.settings
   *   Required. The new settings values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The list of fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Settings]{@link google.cloud.contactcenterinsights.v1.Settings}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.update_settings.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_UpdateSettings_async
   */
  updateSettings(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateSettings(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateSettings(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateSettings(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.ISettings,
          | protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.ISettings,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateSettingsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'settings.name': request.settings!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSettings(request, options, callback);
  }
  /**
   * Creates a view.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the view. Required. The location to create
   *   a view for.
   *   Format: `projects/<Project ID>/locations/<Location ID>` or
   *   `projects/<Project Number>/locations/<Location ID>`
   * @param {google.cloud.contactcenterinsights.v1.View} request.view
   *   Required. The view resource to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [View]{@link google.cloud.contactcenterinsights.v1.View}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.create_view.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CreateView_async
   */
  createView(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IView,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createView(
    request: protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createView(
    request: protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createView(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IView,
          | protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IView,
      (
        | protos.google.cloud.contactcenterinsights.v1.ICreateViewRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createView(request, options, callback);
  }
  /**
   * Gets a view.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the view to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [View]{@link google.cloud.contactcenterinsights.v1.View}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.get_view.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_GetView_async
   */
  getView(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetViewRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IView,
      protos.google.cloud.contactcenterinsights.v1.IGetViewRequest | undefined,
      {} | undefined
    ]
  >;
  getView(
    request: protos.google.cloud.contactcenterinsights.v1.IGetViewRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.IGetViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getView(
    request: protos.google.cloud.contactcenterinsights.v1.IGetViewRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.IGetViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getView(
    request?: protos.google.cloud.contactcenterinsights.v1.IGetViewRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IView,
          | protos.google.cloud.contactcenterinsights.v1.IGetViewRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.IGetViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IView,
      protos.google.cloud.contactcenterinsights.v1.IGetViewRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getView(request, options, callback);
  }
  /**
   * Updates a view.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.contactcenterinsights.v1.View} request.view
   *   Required. The new view.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [View]{@link google.cloud.contactcenterinsights.v1.View}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.update_view.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_UpdateView_async
   */
  updateView(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IView,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateView(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateView(
    request: protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest,
    callback: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateView(
    request?: protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.contactcenterinsights.v1.IView,
          | protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.contactcenterinsights.v1.IView,
      | protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IView,
      (
        | protos.google.cloud.contactcenterinsights.v1.IUpdateViewRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'view.name': request.view!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateView(request, options, callback);
  }
  /**
   * Deletes a view.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the view to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.delete_view.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeleteView_async
   */
  deleteView(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteView(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteView(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteView(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.contactcenterinsights.v1.IDeleteViewRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteView(request, options, callback);
  }

  /**
   * Creates an analysis. The long running operation is done when the analysis
   * has completed.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the analysis.
   * @param {google.cloud.contactcenterinsights.v1.Analysis} request.analysis
   *   Required. The analysis to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.create_analysis.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CreateAnalysis_async
   */
  createAnalysis(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IAnalysis,
        protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createAnalysis(
    request: protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IAnalysis,
        protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAnalysis(
    request: protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IAnalysis,
        protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAnalysis(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.contactcenterinsights.v1.IAnalysis,
            protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IAnalysis,
        protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IAnalysis,
        protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAnalysis(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createAnalysis()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.create_analysis.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CreateAnalysis_async
   */
  async checkCreateAnalysisProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.contactcenterinsights.v1.Analysis,
      protos.google.cloud.contactcenterinsights.v1.CreateAnalysisOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAnalysis,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.contactcenterinsights.v1.Analysis,
      protos.google.cloud.contactcenterinsights.v1.CreateAnalysisOperationMetadata
    >;
  }
  /**
   * Analyzes multiple conversations in a single request.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource to create analyses in.
   * @param {string} request.filter
   *   Required. Filter used to select the subset of conversations to analyze.
   * @param {number} request.analysisPercentage
   *   Required. Percentage of selected conversation to analyze, between
   *   [0, 100].
   * @param {google.cloud.contactcenterinsights.v1.AnnotatorSelector} request.annotatorSelector
   *   To select the annotators to run and the phrase matchers to use
   *   (if any). If not specified, all annotators will be run.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.bulk_analyze_conversations.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_BulkAnalyzeConversations_async
   */
  bulkAnalyzeConversations(
    request?: protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  bulkAnalyzeConversations(
    request: protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  bulkAnalyzeConversations(
    request: protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  bulkAnalyzeConversations(
    request?: protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsResponse,
            protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IBulkAnalyzeConversationsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.bulkAnalyzeConversations(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `bulkAnalyzeConversations()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.bulk_analyze_conversations.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_BulkAnalyzeConversations_async
   */
  async checkBulkAnalyzeConversationsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsResponse,
      protos.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.bulkAnalyzeConversations,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsResponse,
      protos.google.cloud.contactcenterinsights.v1.BulkAnalyzeConversationsMetadata
    >;
  }
  /**
   * Imports conversations and processes them according to the user's
   * configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.contactcenterinsights.v1.IngestConversationsRequest.GcsSource} request.gcsSource
   *   A cloud storage bucket source.
   * @param {google.cloud.contactcenterinsights.v1.IngestConversationsRequest.TranscriptObjectConfig} request.transcriptObjectConfig
   *   Configuration for when `source` contains conversation transcripts.
   * @param {string} request.parent
   *   Required. The parent resource for new conversations.
   * @param {google.cloud.contactcenterinsights.v1.IngestConversationsRequest.ConversationConfig} request.conversationConfig
   *   Configuration that applies to all conversations.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.ingest_conversations.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_IngestConversations_async
   */
  ingestConversations(
    request?: protos.google.cloud.contactcenterinsights.v1.IIngestConversationsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  ingestConversations(
    request: protos.google.cloud.contactcenterinsights.v1.IIngestConversationsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  ingestConversations(
    request: protos.google.cloud.contactcenterinsights.v1.IIngestConversationsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  ingestConversations(
    request?: protos.google.cloud.contactcenterinsights.v1.IIngestConversationsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.contactcenterinsights.v1.IIngestConversationsResponse,
            protos.google.cloud.contactcenterinsights.v1.IIngestConversationsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsResponse,
        protos.google.cloud.contactcenterinsights.v1.IIngestConversationsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.ingestConversations(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `ingestConversations()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.ingest_conversations.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_IngestConversations_async
   */
  async checkIngestConversationsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.contactcenterinsights.v1.IngestConversationsResponse,
      protos.google.cloud.contactcenterinsights.v1.IngestConversationsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.ingestConversations,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.contactcenterinsights.v1.IngestConversationsResponse,
      protos.google.cloud.contactcenterinsights.v1.IngestConversationsMetadata
    >;
  }
  /**
   * Export insights data to a destination defined in the request body.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest.BigQueryDestination} request.bigQueryDestination
   *   Specified if sink is a BigQuery table.
   * @param {string} request.parent
   *   Required. The parent resource to export data from.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for exporting
   *   conversations with specific properties.
   * @param {string} request.kmsKey
   *   A fully qualified KMS key name for BigQuery tables protected by CMEK.
   *   Format:
   *   projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}
   * @param {google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest.WriteDisposition} request.writeDisposition
   *   Options for what to do if the destination table already exists.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.export_insights_data.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_ExportInsightsData_async
   */
  exportInsightsData(
    request?: protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse,
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  exportInsightsData(
    request: protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse,
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  exportInsightsData(
    request: protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse,
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  exportInsightsData(
    request?: protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse,
            protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse,
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse,
        protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.exportInsightsData(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `exportInsightsData()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.export_insights_data.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_ExportInsightsData_async
   */
  async checkExportInsightsDataProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataResponse,
      protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.exportInsightsData,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataResponse,
      protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataMetadata
    >;
  }
  /**
   * Creates an issue model.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the issue model.
   * @param {google.cloud.contactcenterinsights.v1.IssueModel} request.issueModel
   *   Required. The issue model to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.create_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CreateIssueModel_async
   */
  createIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIssueModel,
        protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIssueModel,
        protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIssueModel,
        protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.contactcenterinsights.v1.IIssueModel,
            protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIssueModel,
        protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IIssueModel,
        protos.google.cloud.contactcenterinsights.v1.ICreateIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createIssueModel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createIssueModel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.create_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_CreateIssueModel_async
   */
  async checkCreateIssueModelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.contactcenterinsights.v1.IssueModel,
      protos.google.cloud.contactcenterinsights.v1.CreateIssueModelMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createIssueModel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.contactcenterinsights.v1.IssueModel,
      protos.google.cloud.contactcenterinsights.v1.CreateIssueModelMetadata
    >;
  }
  /**
   * Deletes an issue model.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the issue model to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.delete_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeleteIssueModel_async
   */
  deleteIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.contactcenterinsights.v1.IDeleteIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteIssueModel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteIssueModel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.delete_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeleteIssueModel_async
   */
  async checkDeleteIssueModelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.contactcenterinsights.v1.DeleteIssueModelMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteIssueModel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.contactcenterinsights.v1.DeleteIssueModelMetadata
    >;
  }
  /**
   * Deploys an issue model. Returns an error if a model is already deployed.
   * An issue model can only be used in analysis after it has been deployed.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The issue model to deploy.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.deploy_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeployIssueModel_async
   */
  deployIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deployIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deployIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deployIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelResponse,
            protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IDeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deployIssueModel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deployIssueModel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.deploy_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_DeployIssueModel_async
   */
  async checkDeployIssueModelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.contactcenterinsights.v1.DeployIssueModelResponse,
      protos.google.cloud.contactcenterinsights.v1.DeployIssueModelMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deployIssueModel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.contactcenterinsights.v1.DeployIssueModelResponse,
      protos.google.cloud.contactcenterinsights.v1.DeployIssueModelMetadata
    >;
  }
  /**
   * Undeploys an issue model.
   * An issue model can not be used in analysis after it has been undeployed.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The issue model to undeploy.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.undeploy_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_UndeployIssueModel_async
   */
  undeployIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  undeployIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  undeployIssueModel(
    request: protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  undeployIssueModel(
    request?: protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelResponse,
            protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelResponse,
        protos.google.cloud.contactcenterinsights.v1.IUndeployIssueModelMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.undeployIssueModel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `undeployIssueModel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.undeploy_issue_model.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_UndeployIssueModel_async
   */
  async checkUndeployIssueModelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.contactcenterinsights.v1.UndeployIssueModelResponse,
      protos.google.cloud.contactcenterinsights.v1.UndeployIssueModelMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.undeployIssueModel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.contactcenterinsights.v1.UndeployIssueModelResponse,
      protos.google.cloud.contactcenterinsights.v1.UndeployIssueModelMetadata
    >;
  }
  /**
   * Lists conversations.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the conversation.
   * @param {number} request.pageSize
   *   The maximum number of conversations to return in the response. A valid page
   *   size ranges from 0 to 1,000 inclusive. If the page size is zero or
   *   unspecified, a default page size of 100 will be chosen. Note that a call
   *   might return fewer results than the requested page size.
   * @param {string} request.pageToken
   *   The value returned by the last `ListConversationsResponse`. This value
   *   indicates that this is a continuation of a prior `ListConversations` call
   *   and that the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   conversations with specific properties.
   * @param {google.cloud.contactcenterinsights.v1.ConversationView} request.view
   *   The level of details of the conversation. Default is `BASIC`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Conversation]{@link google.cloud.contactcenterinsights.v1.Conversation}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listConversationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConversations(
    request?: protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IConversation[],
      protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest | null,
      protos.google.cloud.contactcenterinsights.v1.IListConversationsResponse
    ]
  >;
  listConversations(
    request: protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListConversationsResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IConversation
    >
  ): void;
  listConversations(
    request: protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
    callback: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListConversationsResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IConversation
    >
  ): void;
  listConversations(
    request?: protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
          | protos.google.cloud.contactcenterinsights.v1.IListConversationsResponse
          | null
          | undefined,
          protos.google.cloud.contactcenterinsights.v1.IConversation
        >,
    callback?: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListConversationsResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IConversation
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IConversation[],
      protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest | null,
      protos.google.cloud.contactcenterinsights.v1.IListConversationsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listConversations(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the conversation.
   * @param {number} request.pageSize
   *   The maximum number of conversations to return in the response. A valid page
   *   size ranges from 0 to 1,000 inclusive. If the page size is zero or
   *   unspecified, a default page size of 100 will be chosen. Note that a call
   *   might return fewer results than the requested page size.
   * @param {string} request.pageToken
   *   The value returned by the last `ListConversationsResponse`. This value
   *   indicates that this is a continuation of a prior `ListConversations` call
   *   and that the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   conversations with specific properties.
   * @param {google.cloud.contactcenterinsights.v1.ConversationView} request.view
   *   The level of details of the conversation. Default is `BASIC`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Conversation]{@link google.cloud.contactcenterinsights.v1.Conversation} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listConversationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConversationsStream(
    request?: protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConversations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConversations.createStream(
      this.innerApiCalls.listConversations as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listConversations`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the conversation.
   * @param {number} request.pageSize
   *   The maximum number of conversations to return in the response. A valid page
   *   size ranges from 0 to 1,000 inclusive. If the page size is zero or
   *   unspecified, a default page size of 100 will be chosen. Note that a call
   *   might return fewer results than the requested page size.
   * @param {string} request.pageToken
   *   The value returned by the last `ListConversationsResponse`. This value
   *   indicates that this is a continuation of a prior `ListConversations` call
   *   and that the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   conversations with specific properties.
   * @param {google.cloud.contactcenterinsights.v1.ConversationView} request.view
   *   The level of details of the conversation. Default is `BASIC`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Conversation]{@link google.cloud.contactcenterinsights.v1.Conversation}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.list_conversations.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_ListConversations_async
   */
  listConversationsAsync(
    request?: protos.google.cloud.contactcenterinsights.v1.IListConversationsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.contactcenterinsights.v1.IConversation> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConversations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConversations.asyncIterate(
      this.innerApiCalls['listConversations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.contactcenterinsights.v1.IConversation>;
  }
  /**
   * Lists analyses.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the analyses.
   * @param {number} request.pageSize
   *   The maximum number of analyses to return in the response. If this
   *   value is zero, the service will select a default size. A call might return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListAnalysesResponse`; indicates
   *   that this is a continuation of a prior `ListAnalyses` call and
   *   the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   conversations with specific properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Analysis]{@link google.cloud.contactcenterinsights.v1.Analysis}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAnalysesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAnalyses(
    request?: protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IAnalysis[],
      protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest | null,
      protos.google.cloud.contactcenterinsights.v1.IListAnalysesResponse
    ]
  >;
  listAnalyses(
    request: protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListAnalysesResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IAnalysis
    >
  ): void;
  listAnalyses(
    request: protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
    callback: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListAnalysesResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IAnalysis
    >
  ): void;
  listAnalyses(
    request?: protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
          | protos.google.cloud.contactcenterinsights.v1.IListAnalysesResponse
          | null
          | undefined,
          protos.google.cloud.contactcenterinsights.v1.IAnalysis
        >,
    callback?: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListAnalysesResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IAnalysis
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IAnalysis[],
      protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest | null,
      protos.google.cloud.contactcenterinsights.v1.IListAnalysesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAnalyses(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the analyses.
   * @param {number} request.pageSize
   *   The maximum number of analyses to return in the response. If this
   *   value is zero, the service will select a default size. A call might return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListAnalysesResponse`; indicates
   *   that this is a continuation of a prior `ListAnalyses` call and
   *   the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   conversations with specific properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Analysis]{@link google.cloud.contactcenterinsights.v1.Analysis} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAnalysesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAnalysesStream(
    request?: protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAnalyses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAnalyses.createStream(
      this.innerApiCalls.listAnalyses as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAnalyses`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the analyses.
   * @param {number} request.pageSize
   *   The maximum number of analyses to return in the response. If this
   *   value is zero, the service will select a default size. A call might return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListAnalysesResponse`; indicates
   *   that this is a continuation of a prior `ListAnalyses` call and
   *   the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   conversations with specific properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Analysis]{@link google.cloud.contactcenterinsights.v1.Analysis}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.list_analyses.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_ListAnalyses_async
   */
  listAnalysesAsync(
    request?: protos.google.cloud.contactcenterinsights.v1.IListAnalysesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.contactcenterinsights.v1.IAnalysis> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAnalyses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAnalyses.asyncIterate(
      this.innerApiCalls['listAnalyses'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.contactcenterinsights.v1.IAnalysis>;
  }
  /**
   * Lists phrase matchers.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the phrase matcher.
   * @param {number} request.pageSize
   *   The maximum number of phrase matchers to return in the response. If this
   *   value is zero, the service will select a default size. A call might return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListPhraseMatchersResponse`. This value
   *   indicates that this is a continuation of a prior `ListPhraseMatchers` call
   *   and that the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   phrase matchers with specific properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PhraseMatcher]{@link google.cloud.contactcenterinsights.v1.PhraseMatcher}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPhraseMatchersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPhraseMatchers(
    request?: protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher[],
      protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest | null,
      protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersResponse
    ]
  >;
  listPhraseMatchers(
    request: protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher
    >
  ): void;
  listPhraseMatchers(
    request: protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
    callback: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher
    >
  ): void;
  listPhraseMatchers(
    request?: protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
          | protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersResponse
          | null
          | undefined,
          protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher
        >,
    callback?: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher[],
      protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest | null,
      protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPhraseMatchers(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the phrase matcher.
   * @param {number} request.pageSize
   *   The maximum number of phrase matchers to return in the response. If this
   *   value is zero, the service will select a default size. A call might return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListPhraseMatchersResponse`. This value
   *   indicates that this is a continuation of a prior `ListPhraseMatchers` call
   *   and that the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   phrase matchers with specific properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PhraseMatcher]{@link google.cloud.contactcenterinsights.v1.PhraseMatcher} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPhraseMatchersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPhraseMatchersStream(
    request?: protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPhraseMatchers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPhraseMatchers.createStream(
      this.innerApiCalls.listPhraseMatchers as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPhraseMatchers`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the phrase matcher.
   * @param {number} request.pageSize
   *   The maximum number of phrase matchers to return in the response. If this
   *   value is zero, the service will select a default size. A call might return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListPhraseMatchersResponse`. This value
   *   indicates that this is a continuation of a prior `ListPhraseMatchers` call
   *   and that the system should return the next page of data.
   * @param {string} request.filter
   *   A filter to reduce results to a specific subset. Useful for querying
   *   phrase matchers with specific properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [PhraseMatcher]{@link google.cloud.contactcenterinsights.v1.PhraseMatcher}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.list_phrase_matchers.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_ListPhraseMatchers_async
   */
  listPhraseMatchersAsync(
    request?: protos.google.cloud.contactcenterinsights.v1.IListPhraseMatchersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPhraseMatchers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPhraseMatchers.asyncIterate(
      this.innerApiCalls['listPhraseMatchers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher>;
  }
  /**
   * Lists views.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the views.
   * @param {number} request.pageSize
   *   The maximum number of views to return in the response. If this
   *   value is zero, the service will select a default size. A call may return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListViewsResponse`; indicates
   *   that this is a continuation of a prior `ListViews` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [View]{@link google.cloud.contactcenterinsights.v1.View}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listViewsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listViews(
    request?: protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IView[],
      protos.google.cloud.contactcenterinsights.v1.IListViewsRequest | null,
      protos.google.cloud.contactcenterinsights.v1.IListViewsResponse
    ]
  >;
  listViews(
    request: protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListViewsResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IView
    >
  ): void;
  listViews(
    request: protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
    callback: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListViewsResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IView
    >
  ): void;
  listViews(
    request?: protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
          | protos.google.cloud.contactcenterinsights.v1.IListViewsResponse
          | null
          | undefined,
          protos.google.cloud.contactcenterinsights.v1.IView
        >,
    callback?: PaginationCallback<
      protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
      | protos.google.cloud.contactcenterinsights.v1.IListViewsResponse
      | null
      | undefined,
      protos.google.cloud.contactcenterinsights.v1.IView
    >
  ): Promise<
    [
      protos.google.cloud.contactcenterinsights.v1.IView[],
      protos.google.cloud.contactcenterinsights.v1.IListViewsRequest | null,
      protos.google.cloud.contactcenterinsights.v1.IListViewsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listViews(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the views.
   * @param {number} request.pageSize
   *   The maximum number of views to return in the response. If this
   *   value is zero, the service will select a default size. A call may return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListViewsResponse`; indicates
   *   that this is a continuation of a prior `ListViews` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [View]{@link google.cloud.contactcenterinsights.v1.View} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listViewsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listViewsStream(
    request?: protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listViews'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listViews.createStream(
      this.innerApiCalls.listViews as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listViews`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the views.
   * @param {number} request.pageSize
   *   The maximum number of views to return in the response. If this
   *   value is zero, the service will select a default size. A call may return
   *   fewer objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListViewsResponse`; indicates
   *   that this is a continuation of a prior `ListViews` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [View]{@link google.cloud.contactcenterinsights.v1.View}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/contact_center_insights.list_views.js</caption>
   * region_tag:contactcenterinsights_v1_generated_ContactCenterInsights_ListViews_async
   */
  listViewsAsync(
    request?: protos.google.cloud.contactcenterinsights.v1.IListViewsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.contactcenterinsights.v1.IView> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listViews'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listViews.asyncIterate(
      this.innerApiCalls['listViews'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.contactcenterinsights.v1.IView>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified analysis resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} conversation
   * @param {string} analysis
   * @returns {string} Resource name string.
   */
  analysisPath(
    project: string,
    location: string,
    conversation: string,
    analysis: string
  ) {
    return this.pathTemplates.analysisPathTemplate.render({
      project: project,
      location: location,
      conversation: conversation,
      analysis: analysis,
    });
  }

  /**
   * Parse the project from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).project;
  }

  /**
   * Parse the location from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).location;
  }

  /**
   * Parse the conversation from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the conversation.
   */
  matchConversationFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName)
      .conversation;
  }

  /**
   * Parse the analysis from Analysis resource.
   *
   * @param {string} analysisName
   *   A fully-qualified path representing Analysis resource.
   * @returns {string} A string representing the analysis.
   */
  matchAnalysisFromAnalysisName(analysisName: string) {
    return this.pathTemplates.analysisPathTemplate.match(analysisName).analysis;
  }

  /**
   * Return a fully-qualified conversation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} conversation
   * @returns {string} Resource name string.
   */
  conversationPath(project: string, location: string, conversation: string) {
    return this.pathTemplates.conversationPathTemplate.render({
      project: project,
      location: location,
      conversation: conversation,
    });
  }

  /**
   * Parse the project from Conversation resource.
   *
   * @param {string} conversationName
   *   A fully-qualified path representing Conversation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConversationName(conversationName: string) {
    return this.pathTemplates.conversationPathTemplate.match(conversationName)
      .project;
  }

  /**
   * Parse the location from Conversation resource.
   *
   * @param {string} conversationName
   *   A fully-qualified path representing Conversation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromConversationName(conversationName: string) {
    return this.pathTemplates.conversationPathTemplate.match(conversationName)
      .location;
  }

  /**
   * Parse the conversation from Conversation resource.
   *
   * @param {string} conversationName
   *   A fully-qualified path representing Conversation resource.
   * @returns {string} A string representing the conversation.
   */
  matchConversationFromConversationName(conversationName: string) {
    return this.pathTemplates.conversationPathTemplate.match(conversationName)
      .conversation;
  }

  /**
   * Return a fully-qualified issue resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} issue_model
   * @param {string} issue
   * @returns {string} Resource name string.
   */
  issuePath(
    project: string,
    location: string,
    issueModel: string,
    issue: string
  ) {
    return this.pathTemplates.issuePathTemplate.render({
      project: project,
      location: location,
      issue_model: issueModel,
      issue: issue,
    });
  }

  /**
   * Parse the project from Issue resource.
   *
   * @param {string} issueName
   *   A fully-qualified path representing Issue resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIssueName(issueName: string) {
    return this.pathTemplates.issuePathTemplate.match(issueName).project;
  }

  /**
   * Parse the location from Issue resource.
   *
   * @param {string} issueName
   *   A fully-qualified path representing Issue resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIssueName(issueName: string) {
    return this.pathTemplates.issuePathTemplate.match(issueName).location;
  }

  /**
   * Parse the issue_model from Issue resource.
   *
   * @param {string} issueName
   *   A fully-qualified path representing Issue resource.
   * @returns {string} A string representing the issue_model.
   */
  matchIssueModelFromIssueName(issueName: string) {
    return this.pathTemplates.issuePathTemplate.match(issueName).issue_model;
  }

  /**
   * Parse the issue from Issue resource.
   *
   * @param {string} issueName
   *   A fully-qualified path representing Issue resource.
   * @returns {string} A string representing the issue.
   */
  matchIssueFromIssueName(issueName: string) {
    return this.pathTemplates.issuePathTemplate.match(issueName).issue;
  }

  /**
   * Return a fully-qualified issueModel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} issue_model
   * @returns {string} Resource name string.
   */
  issueModelPath(project: string, location: string, issueModel: string) {
    return this.pathTemplates.issueModelPathTemplate.render({
      project: project,
      location: location,
      issue_model: issueModel,
    });
  }

  /**
   * Parse the project from IssueModel resource.
   *
   * @param {string} issueModelName
   *   A fully-qualified path representing IssueModel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIssueModelName(issueModelName: string) {
    return this.pathTemplates.issueModelPathTemplate.match(issueModelName)
      .project;
  }

  /**
   * Parse the location from IssueModel resource.
   *
   * @param {string} issueModelName
   *   A fully-qualified path representing IssueModel resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIssueModelName(issueModelName: string) {
    return this.pathTemplates.issueModelPathTemplate.match(issueModelName)
      .location;
  }

  /**
   * Parse the issue_model from IssueModel resource.
   *
   * @param {string} issueModelName
   *   A fully-qualified path representing IssueModel resource.
   * @returns {string} A string representing the issue_model.
   */
  matchIssueModelFromIssueModelName(issueModelName: string) {
    return this.pathTemplates.issueModelPathTemplate.match(issueModelName)
      .issue_model;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified phraseMatcher resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} phrase_matcher
   * @returns {string} Resource name string.
   */
  phraseMatcherPath(project: string, location: string, phraseMatcher: string) {
    return this.pathTemplates.phraseMatcherPathTemplate.render({
      project: project,
      location: location,
      phrase_matcher: phraseMatcher,
    });
  }

  /**
   * Parse the project from PhraseMatcher resource.
   *
   * @param {string} phraseMatcherName
   *   A fully-qualified path representing PhraseMatcher resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPhraseMatcherName(phraseMatcherName: string) {
    return this.pathTemplates.phraseMatcherPathTemplate.match(phraseMatcherName)
      .project;
  }

  /**
   * Parse the location from PhraseMatcher resource.
   *
   * @param {string} phraseMatcherName
   *   A fully-qualified path representing PhraseMatcher resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPhraseMatcherName(phraseMatcherName: string) {
    return this.pathTemplates.phraseMatcherPathTemplate.match(phraseMatcherName)
      .location;
  }

  /**
   * Parse the phrase_matcher from PhraseMatcher resource.
   *
   * @param {string} phraseMatcherName
   *   A fully-qualified path representing PhraseMatcher resource.
   * @returns {string} A string representing the phrase_matcher.
   */
  matchPhraseMatcherFromPhraseMatcherName(phraseMatcherName: string) {
    return this.pathTemplates.phraseMatcherPathTemplate.match(phraseMatcherName)
      .phrase_matcher;
  }

  /**
   * Return a fully-qualified settings resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  settingsPath(project: string, location: string) {
    return this.pathTemplates.settingsPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Settings resource.
   *
   * @param {string} settingsName
   *   A fully-qualified path representing Settings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSettingsName(settingsName: string) {
    return this.pathTemplates.settingsPathTemplate.match(settingsName).project;
  }

  /**
   * Parse the location from Settings resource.
   *
   * @param {string} settingsName
   *   A fully-qualified path representing Settings resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSettingsName(settingsName: string) {
    return this.pathTemplates.settingsPathTemplate.match(settingsName).location;
  }

  /**
   * Return a fully-qualified view resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} view
   * @returns {string} Resource name string.
   */
  viewPath(project: string, location: string, view: string) {
    return this.pathTemplates.viewPathTemplate.render({
      project: project,
      location: location,
      view: view,
    });
  }

  /**
   * Parse the project from View resource.
   *
   * @param {string} viewName
   *   A fully-qualified path representing View resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromViewName(viewName: string) {
    return this.pathTemplates.viewPathTemplate.match(viewName).project;
  }

  /**
   * Parse the location from View resource.
   *
   * @param {string} viewName
   *   A fully-qualified path representing View resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromViewName(viewName: string) {
    return this.pathTemplates.viewPathTemplate.match(viewName).location;
  }

  /**
   * Parse the view from View resource.
   *
   * @param {string} viewName
   *   A fully-qualified path representing View resource.
   * @returns {string} A string representing the view.
   */
  matchViewFromViewName(viewName: string) {
    return this.pathTemplates.viewPathTemplate.match(viewName).view;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.contactCenterInsightsStub && !this._terminated) {
      return this.contactCenterInsightsStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
