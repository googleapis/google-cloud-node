// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/api_keys_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './api_keys_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Manages the API keys associated with projects.
 * @class
 * @memberof v2
 */
export class ApiKeysClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  apiKeysStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ApiKeysClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ApiKeysClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ApiKeysClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      keyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keys/{key}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listKeys: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'keys'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v2/{name=operations/*}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createKeyResponse = protoFilesRoot.lookup(
      '.google.api.apikeys.v2.Key'
    ) as gax.protobuf.Type;
    const createKeyMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const updateKeyResponse = protoFilesRoot.lookup(
      '.google.api.apikeys.v2.Key'
    ) as gax.protobuf.Type;
    const updateKeyMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteKeyResponse = protoFilesRoot.lookup(
      '.google.api.apikeys.v2.Key'
    ) as gax.protobuf.Type;
    const deleteKeyMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const undeleteKeyResponse = protoFilesRoot.lookup(
      '.google.api.apikeys.v2.Key'
    ) as gax.protobuf.Type;
    const undeleteKeyMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createKey: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createKeyResponse.decode.bind(createKeyResponse),
        createKeyMetadata.decode.bind(createKeyMetadata)
      ),
      updateKey: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateKeyResponse.decode.bind(updateKeyResponse),
        updateKeyMetadata.decode.bind(updateKeyMetadata)
      ),
      deleteKey: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteKeyResponse.decode.bind(deleteKeyResponse),
        deleteKeyMetadata.decode.bind(deleteKeyMetadata)
      ),
      undeleteKey: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeleteKeyResponse.decode.bind(undeleteKeyResponse),
        undeleteKeyMetadata.decode.bind(undeleteKeyMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.api.apikeys.v2.ApiKeys',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.apiKeysStub) {
      return this.apiKeysStub;
    }

    // Put together the "service stub" for
    // google.api.apikeys.v2.ApiKeys.
    this.apiKeysStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.api.apikeys.v2.ApiKeys'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.api.apikeys.v2.ApiKeys,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const apiKeysStubMethods = [
      'createKey',
      'listKeys',
      'getKey',
      'getKeyString',
      'updateKey',
      'deleteKey',
      'undeleteKey',
      'lookupKey',
    ];
    for (const methodName of apiKeysStubMethods) {
      const callPromise = this.apiKeysStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.apiKeysStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'apikeys.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'apikeys.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the metadata for an API key. The key string of the API key
   * isn't included in the response.
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the API key to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Key]{@link google.api.apikeys.v2.Key}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.get_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_GetKey_async
   */
  getKey(
    request?: protos.google.api.apikeys.v2.IGetKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.apikeys.v2.IKey,
      protos.google.api.apikeys.v2.IGetKeyRequest | undefined,
      {} | undefined
    ]
  >;
  getKey(
    request: protos.google.api.apikeys.v2.IGetKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.apikeys.v2.IKey,
      protos.google.api.apikeys.v2.IGetKeyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getKey(
    request: protos.google.api.apikeys.v2.IGetKeyRequest,
    callback: Callback<
      protos.google.api.apikeys.v2.IKey,
      protos.google.api.apikeys.v2.IGetKeyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getKey(
    request?: protos.google.api.apikeys.v2.IGetKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.apikeys.v2.IKey,
          protos.google.api.apikeys.v2.IGetKeyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.apikeys.v2.IKey,
      protos.google.api.apikeys.v2.IGetKeyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.apikeys.v2.IKey,
      protos.google.api.apikeys.v2.IGetKeyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getKey(request, options, callback);
  }
  /**
   * Get the key string for an API key.
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the API key to be retrieved.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GetKeyStringResponse]{@link google.api.apikeys.v2.GetKeyStringResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.get_key_string.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_GetKeyString_async
   */
  getKeyString(
    request?: protos.google.api.apikeys.v2.IGetKeyStringRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.apikeys.v2.IGetKeyStringResponse,
      protos.google.api.apikeys.v2.IGetKeyStringRequest | undefined,
      {} | undefined
    ]
  >;
  getKeyString(
    request: protos.google.api.apikeys.v2.IGetKeyStringRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.apikeys.v2.IGetKeyStringResponse,
      protos.google.api.apikeys.v2.IGetKeyStringRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getKeyString(
    request: protos.google.api.apikeys.v2.IGetKeyStringRequest,
    callback: Callback<
      protos.google.api.apikeys.v2.IGetKeyStringResponse,
      protos.google.api.apikeys.v2.IGetKeyStringRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getKeyString(
    request?: protos.google.api.apikeys.v2.IGetKeyStringRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.apikeys.v2.IGetKeyStringResponse,
          protos.google.api.apikeys.v2.IGetKeyStringRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.apikeys.v2.IGetKeyStringResponse,
      protos.google.api.apikeys.v2.IGetKeyStringRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.apikeys.v2.IGetKeyStringResponse,
      protos.google.api.apikeys.v2.IGetKeyStringRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getKeyString(request, options, callback);
  }
  /**
   * Find the parent project and resource name of the API
   * key that matches the key string in the request. If the API key has been
   * purged, resource name will not be set.
   * The service account must have the `apikeys.keys.lookup` permission
   * on the parent project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.keyString
   *   Required. Finds the project that owns the key string value.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [LookupKeyResponse]{@link google.api.apikeys.v2.LookupKeyResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.lookup_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_LookupKey_async
   */
  lookupKey(
    request?: protos.google.api.apikeys.v2.ILookupKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.apikeys.v2.ILookupKeyResponse,
      protos.google.api.apikeys.v2.ILookupKeyRequest | undefined,
      {} | undefined
    ]
  >;
  lookupKey(
    request: protos.google.api.apikeys.v2.ILookupKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.apikeys.v2.ILookupKeyResponse,
      protos.google.api.apikeys.v2.ILookupKeyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  lookupKey(
    request: protos.google.api.apikeys.v2.ILookupKeyRequest,
    callback: Callback<
      protos.google.api.apikeys.v2.ILookupKeyResponse,
      protos.google.api.apikeys.v2.ILookupKeyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  lookupKey(
    request?: protos.google.api.apikeys.v2.ILookupKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.apikeys.v2.ILookupKeyResponse,
          protos.google.api.apikeys.v2.ILookupKeyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.apikeys.v2.ILookupKeyResponse,
      protos.google.api.apikeys.v2.ILookupKeyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.apikeys.v2.ILookupKeyResponse,
      protos.google.api.apikeys.v2.ILookupKeyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.lookupKey(request, options, callback);
  }

  /**
   * Creates a new API key.
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project in which the API key is created.
   * @param {google.api.apikeys.v2.Key} request.key
   *   Required. The API key fields to set at creation time.
   *   You can configure only the `display_name`, `restrictions`, and
   *   `annotations` fields.
   * @param {string} request.keyId
   *   User specified key id (optional). If specified, it will become the final
   *   component of the key resource name.
   *
   *   The id must be unique within the project, must conform with RFC-1034,
   *   is restricted to lower-cased letters, and has a maximum length of 63
   *   characters. In another word, the id must match the regular
   *   expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
   *
   *   The id must NOT be a UUID-like string.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.create_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_CreateKey_async
   */
  createKey(
    request?: protos.google.api.apikeys.v2.ICreateKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createKey(
    request: protos.google.api.apikeys.v2.ICreateKeyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createKey(
    request: protos.google.api.apikeys.v2.ICreateKeyRequest,
    callback: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createKey(
    request?: protos.google.api.apikeys.v2.ICreateKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.apikeys.v2.IKey,
            protos.google.protobuf.IEmpty
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createKey(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createKey()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.create_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_CreateKey_async
   */
  async checkCreateKeyProgress(
    name: string
  ): Promise<
    LROperation<protos.google.api.apikeys.v2.Key, protos.google.protobuf.Empty>
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createKey,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.apikeys.v2.Key,
      protos.google.protobuf.Empty
    >;
  }
  /**
   * Patches the modifiable fields of an API key.
   * The key string of the API key isn't included in the response.
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.api.apikeys.v2.Key} request.key
   *   Required. Set the `name` field to the resource name of the API key to be
   *   updated. You can update only the `display_name`, `restrictions`, and
   *   `annotations` fields.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The field mask specifies which fields to be updated as part of this
   *   request. All other fields are ignored.
   *   Mutable fields are: `display_name`, `restrictions`, and `annotations`.
   *   If an update mask is not provided, the service treats it as an implied mask
   *   equivalent to all allowed fields that are set on the wire. If the field
   *   mask has a special value "*", the service treats it equivalent to replace
   *   all allowed mutable fields.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.update_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_UpdateKey_async
   */
  updateKey(
    request?: protos.google.api.apikeys.v2.IUpdateKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateKey(
    request: protos.google.api.apikeys.v2.IUpdateKeyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateKey(
    request: protos.google.api.apikeys.v2.IUpdateKeyRequest,
    callback: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateKey(
    request?: protos.google.api.apikeys.v2.IUpdateKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.apikeys.v2.IKey,
            protos.google.protobuf.IEmpty
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'key.name': request.key!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateKey(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateKey()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.update_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_UpdateKey_async
   */
  async checkUpdateKeyProgress(
    name: string
  ): Promise<
    LROperation<protos.google.api.apikeys.v2.Key, protos.google.protobuf.Empty>
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateKey,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.apikeys.v2.Key,
      protos.google.protobuf.Empty
    >;
  }
  /**
   * Deletes an API key. Deleted key can be retrieved within 30 days of
   * deletion. Afterward, key will be purged from the project.
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the API key to be deleted.
   * @param {string} [request.etag]
   *   Optional. The etag known to the client for the expected state of the key.
   *   This is to be used for optimistic concurrency.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.delete_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_DeleteKey_async
   */
  deleteKey(
    request?: protos.google.api.apikeys.v2.IDeleteKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteKey(
    request: protos.google.api.apikeys.v2.IDeleteKeyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteKey(
    request: protos.google.api.apikeys.v2.IDeleteKeyRequest,
    callback: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteKey(
    request?: protos.google.api.apikeys.v2.IDeleteKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.apikeys.v2.IKey,
            protos.google.protobuf.IEmpty
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteKey(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteKey()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.delete_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_DeleteKey_async
   */
  async checkDeleteKeyProgress(
    name: string
  ): Promise<
    LROperation<protos.google.api.apikeys.v2.Key, protos.google.protobuf.Empty>
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteKey,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.apikeys.v2.Key,
      protos.google.protobuf.Empty
    >;
  }
  /**
   * Undeletes an API key which was deleted within 30 days.
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the API key to be undeleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.undelete_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_UndeleteKey_async
   */
  undeleteKey(
    request?: protos.google.api.apikeys.v2.IUndeleteKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  undeleteKey(
    request: protos.google.api.apikeys.v2.IUndeleteKeyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  undeleteKey(
    request: protos.google.api.apikeys.v2.IUndeleteKeyRequest,
    callback: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  undeleteKey(
    request?: protos.google.api.apikeys.v2.IUndeleteKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.apikeys.v2.IKey,
            protos.google.protobuf.IEmpty
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.apikeys.v2.IKey,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.undeleteKey(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `undeleteKey()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.undelete_key.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_UndeleteKey_async
   */
  async checkUndeleteKeyProgress(
    name: string
  ): Promise<
    LROperation<protos.google.api.apikeys.v2.Key, protos.google.protobuf.Empty>
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.undeleteKey,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.apikeys.v2.Key,
      protos.google.protobuf.Empty
    >;
  }
  /**
   * Lists the API keys owned by a project. The key string of the API key
   * isn't included in the response.
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Lists all API keys associated with this project.
   * @param {number} [request.pageSize]
   *   Optional. Specifies the maximum number of results to be returned at a time.
   * @param {string} [request.pageToken]
   *   Optional. Requests a specific page of results.
   * @param {boolean} [request.showDeleted]
   *   Optional. Indicate that keys deleted in the past 30 days should also be
   *   returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Key]{@link google.api.apikeys.v2.Key}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listKeysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listKeys(
    request?: protos.google.api.apikeys.v2.IListKeysRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.apikeys.v2.IKey[],
      protos.google.api.apikeys.v2.IListKeysRequest | null,
      protos.google.api.apikeys.v2.IListKeysResponse
    ]
  >;
  listKeys(
    request: protos.google.api.apikeys.v2.IListKeysRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.api.apikeys.v2.IListKeysRequest,
      protos.google.api.apikeys.v2.IListKeysResponse | null | undefined,
      protos.google.api.apikeys.v2.IKey
    >
  ): void;
  listKeys(
    request: protos.google.api.apikeys.v2.IListKeysRequest,
    callback: PaginationCallback<
      protos.google.api.apikeys.v2.IListKeysRequest,
      protos.google.api.apikeys.v2.IListKeysResponse | null | undefined,
      protos.google.api.apikeys.v2.IKey
    >
  ): void;
  listKeys(
    request?: protos.google.api.apikeys.v2.IListKeysRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.api.apikeys.v2.IListKeysRequest,
          protos.google.api.apikeys.v2.IListKeysResponse | null | undefined,
          protos.google.api.apikeys.v2.IKey
        >,
    callback?: PaginationCallback<
      protos.google.api.apikeys.v2.IListKeysRequest,
      protos.google.api.apikeys.v2.IListKeysResponse | null | undefined,
      protos.google.api.apikeys.v2.IKey
    >
  ): Promise<
    [
      protos.google.api.apikeys.v2.IKey[],
      protos.google.api.apikeys.v2.IListKeysRequest | null,
      protos.google.api.apikeys.v2.IListKeysResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listKeys(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Lists all API keys associated with this project.
   * @param {number} [request.pageSize]
   *   Optional. Specifies the maximum number of results to be returned at a time.
   * @param {string} [request.pageToken]
   *   Optional. Requests a specific page of results.
   * @param {boolean} [request.showDeleted]
   *   Optional. Indicate that keys deleted in the past 30 days should also be
   *   returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Key]{@link google.api.apikeys.v2.Key} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listKeysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listKeysStream(
    request?: protos.google.api.apikeys.v2.IListKeysRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listKeys.createStream(
      this.innerApiCalls.listKeys as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listKeys`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Lists all API keys associated with this project.
   * @param {number} [request.pageSize]
   *   Optional. Specifies the maximum number of results to be returned at a time.
   * @param {string} [request.pageToken]
   *   Optional. Requests a specific page of results.
   * @param {boolean} [request.showDeleted]
   *   Optional. Indicate that keys deleted in the past 30 days should also be
   *   returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Key]{@link google.api.apikeys.v2.Key}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/api_keys.list_keys.js</caption>
   * region_tag:apikeys_v2_generated_ApiKeys_ListKeys_async
   */
  listKeysAsync(
    request?: protos.google.api.apikeys.v2.IListKeysRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.api.apikeys.v2.IKey> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listKeys.asyncIterate(
      this.innerApiCalls['listKeys'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.api.apikeys.v2.IKey>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified key resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key
   * @returns {string} Resource name string.
   */
  keyPath(project: string, location: string, key: string) {
    return this.pathTemplates.keyPathTemplate.render({
      project: project,
      location: location,
      key: key,
    });
  }

  /**
   * Parse the project from Key resource.
   *
   * @param {string} keyName
   *   A fully-qualified path representing Key resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromKeyName(keyName: string) {
    return this.pathTemplates.keyPathTemplate.match(keyName).project;
  }

  /**
   * Parse the location from Key resource.
   *
   * @param {string} keyName
   *   A fully-qualified path representing Key resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromKeyName(keyName: string) {
    return this.pathTemplates.keyPathTemplate.match(keyName).location;
  }

  /**
   * Parse the key from Key resource.
   *
   * @param {string} keyName
   *   A fully-qualified path representing Key resource.
   * @returns {string} A string representing the key.
   */
  matchKeyFromKeyName(keyName: string) {
    return this.pathTemplates.keyPathTemplate.match(keyName).key;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.apiKeysStub && !this._terminated) {
      return this.apiKeysStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
