// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v4beta1/job_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './job_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  A service handles job management, including job CRUD, enumeration and search.
 * @class
 * @memberof v4beta1
 */
export class JobServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  jobServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of JobServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new JobServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof JobServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectCompanyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/companies/{company}'
      ),
      projectJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/jobs/{job}'
      ),
      projectTenantCompanyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/tenants/{tenant}/companies/{company}'
      ),
      projectTenantJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/tenants/{tenant}/jobs/{job}'
      ),
      tenantPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/tenants/{tenant}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listJobs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'jobs'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v4beta1/{name=projects/*/operations/*}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const batchCreateJobsResponse = protoFilesRoot.lookup(
      '.google.cloud.talent.v4beta1.JobOperationResult'
    ) as gax.protobuf.Type;
    const batchCreateJobsMetadata = protoFilesRoot.lookup(
      '.google.cloud.talent.v4beta1.BatchOperationMetadata'
    ) as gax.protobuf.Type;
    const batchUpdateJobsResponse = protoFilesRoot.lookup(
      '.google.cloud.talent.v4beta1.JobOperationResult'
    ) as gax.protobuf.Type;
    const batchUpdateJobsMetadata = protoFilesRoot.lookup(
      '.google.cloud.talent.v4beta1.BatchOperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      batchCreateJobs: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchCreateJobsResponse.decode.bind(batchCreateJobsResponse),
        batchCreateJobsMetadata.decode.bind(batchCreateJobsMetadata)
      ),
      batchUpdateJobs: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchUpdateJobsResponse.decode.bind(batchUpdateJobsResponse),
        batchUpdateJobsMetadata.decode.bind(batchUpdateJobsMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.talent.v4beta1.JobService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.jobServiceStub) {
      return this.jobServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.talent.v4beta1.JobService.
    this.jobServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.talent.v4beta1.JobService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.talent.v4beta1.JobService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const jobServiceStubMethods = [
      'createJob',
      'batchCreateJobs',
      'getJob',
      'updateJob',
      'batchUpdateJobs',
      'deleteJob',
      'batchDeleteJobs',
      'listJobs',
      'searchJobs',
      'searchJobsForAlert',
    ];
    for (const methodName of jobServiceStubMethods) {
      const callPromise = this.jobServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.jobServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'jobs.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'jobs.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/jobs',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a new job.
   *
   * Typically, the job becomes searchable within 10 seconds, but it may take
   * up to 5 minutes.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant under which the job is created.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified a default tenant
   *   is created. For example, "projects/foo".
   * @param {google.cloud.talent.v4beta1.Job} request.job
   *   Required. The Job to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Job]{@link google.cloud.talent.v4beta1.Job}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.create_job.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_CreateJob_async
   */
  createJob(
    request?: protos.google.cloud.talent.v4beta1.ICreateJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.ICreateJobRequest | undefined,
      {} | undefined
    ]
  >;
  createJob(
    request: protos.google.cloud.talent.v4beta1.ICreateJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.ICreateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createJob(
    request: protos.google.cloud.talent.v4beta1.ICreateJobRequest,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.ICreateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createJob(
    request?: protos.google.cloud.talent.v4beta1.ICreateJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.talent.v4beta1.IJob,
          | protos.google.cloud.talent.v4beta1.ICreateJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.ICreateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.ICreateJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createJob(request, options, callback);
  }
  /**
   * Retrieves the specified job, whose status is OPEN or recently EXPIRED
   * within the last 90 days.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the job to retrieve.
   *
   *   The format is
   *   "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For
   *   example, "projects/foo/tenants/bar/jobs/baz".
   *
   *   If tenant id is unspecified, the default tenant is used. For
   *   example, "projects/foo/jobs/bar".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Job]{@link google.cloud.talent.v4beta1.Job}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.get_job.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_GetJob_async
   */
  getJob(
    request?: protos.google.cloud.talent.v4beta1.IGetJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IGetJobRequest | undefined,
      {} | undefined
    ]
  >;
  getJob(
    request: protos.google.cloud.talent.v4beta1.IGetJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IGetJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getJob(
    request: protos.google.cloud.talent.v4beta1.IGetJobRequest,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IGetJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getJob(
    request?: protos.google.cloud.talent.v4beta1.IGetJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.talent.v4beta1.IJob,
          protos.google.cloud.talent.v4beta1.IGetJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IGetJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IGetJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getJob(request, options, callback);
  }
  /**
   * Updates specified job.
   *
   * Typically, updated contents become visible in search results within 10
   * seconds, but it may take up to 5 minutes.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.talent.v4beta1.Job} request.job
   *   Required. The Job to be updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Strongly recommended for the best service experience.
   *
   *   If {@link google.cloud.talent.v4beta1.UpdateJobRequest.update_mask|update_mask} is provided, only the specified fields in
   *   {@link google.cloud.talent.v4beta1.UpdateJobRequest.job|job} are updated. Otherwise all the fields are updated.
   *
   *   A field mask to restrict the fields that are updated. Only
   *   top level fields of {@link google.cloud.talent.v4beta1.Job|Job} are supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Job]{@link google.cloud.talent.v4beta1.Job}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.update_job.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_UpdateJob_async
   */
  updateJob(
    request?: protos.google.cloud.talent.v4beta1.IUpdateJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IUpdateJobRequest | undefined,
      {} | undefined
    ]
  >;
  updateJob(
    request: protos.google.cloud.talent.v4beta1.IUpdateJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IUpdateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateJob(
    request: protos.google.cloud.talent.v4beta1.IUpdateJobRequest,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IUpdateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateJob(
    request?: protos.google.cloud.talent.v4beta1.IUpdateJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.talent.v4beta1.IJob,
          | protos.google.cloud.talent.v4beta1.IUpdateJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IUpdateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.IJob,
      protos.google.cloud.talent.v4beta1.IUpdateJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'job.name': request.job!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateJob(request, options, callback);
  }
  /**
   * Deletes the specified job.
   *
   * Typically, the job becomes unsearchable within 10 seconds, but it may take
   * up to 5 minutes.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the job to be deleted.
   *
   *   The format is
   *   "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For
   *   example, "projects/foo/tenants/bar/jobs/baz".
   *
   *   If tenant id is unspecified, the default tenant is used. For
   *   example, "projects/foo/jobs/bar".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.delete_job.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_DeleteJob_async
   */
  deleteJob(
    request?: protos.google.cloud.talent.v4beta1.IDeleteJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.talent.v4beta1.IDeleteJobRequest | undefined,
      {} | undefined
    ]
  >;
  deleteJob(
    request: protos.google.cloud.talent.v4beta1.IDeleteJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.talent.v4beta1.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteJob(
    request: protos.google.cloud.talent.v4beta1.IDeleteJobRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.talent.v4beta1.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteJob(
    request?: protos.google.cloud.talent.v4beta1.IDeleteJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.talent.v4beta1.IDeleteJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.talent.v4beta1.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.talent.v4beta1.IDeleteJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteJob(request, options, callback);
  }
  /**
   * Deletes a list of {@link google.cloud.talent.v4beta1.Job|Job}s by filter.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant under which the job is created.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   *   is created. For example, "projects/foo".
   * @param {string} request.filter
   *   Required. The filter string specifies the jobs to be deleted.
   *
   *   Supported operator: =, AND
   *
   *   The fields eligible for filtering are:
   *
   *   * `companyName` (Required)
   *   * `requisitionId` (Required)
   *
   *   Sample Query: companyName = "projects/foo/companies/bar" AND
   *   requisitionId = "req-1"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.batch_delete_jobs.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_BatchDeleteJobs_async
   */
  batchDeleteJobs(
    request?: protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest | undefined,
      {} | undefined
    ]
  >;
  batchDeleteJobs(
    request: protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteJobs(
    request: protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteJobs(
    request?: protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.talent.v4beta1.IBatchDeleteJobsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchDeleteJobs(request, options, callback);
  }
  /**
   * Searches for jobs using the provided {@link google.cloud.talent.v4beta1.SearchJobsRequest|SearchJobsRequest}.
   *
   * This call constrains the {@link google.cloud.talent.v4beta1.Job.visibility|visibility} of jobs
   * present in the database, and only returns jobs that the caller has
   * permission to search against.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant to search within.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   *   is created. For example, "projects/foo".
   * @param {google.cloud.talent.v4beta1.SearchJobsRequest.SearchMode} request.searchMode
   *   Mode of a search.
   *
   *   Defaults to {@link google.cloud.talent.v4beta1.SearchJobsRequest.SearchMode.JOB_SEARCH|SearchMode.JOB_SEARCH}.
   * @param {google.cloud.talent.v4beta1.RequestMetadata} request.requestMetadata
   *   Required. The meta information collected about the job searcher, used to improve the
   *   search quality of the service. The identifiers (such as `user_id`) are
   *   provided by users, and must be unique and consistent.
   * @param {google.cloud.talent.v4beta1.JobQuery} request.jobQuery
   *   Query used to search against jobs, such as keyword, location filters, etc.
   * @param {boolean} request.enableBroadening
   *   Controls whether to broaden the search when it produces sparse results.
   *   Broadened queries append results to the end of the matching results
   *   list.
   *
   *   Defaults to false.
   * @param {boolean} request.requirePreciseResultSize
   *   This field is deprecated.
   * @param {number[]} request.histogramQueries
   *   An expression specifies a histogram request against matching jobs.
   *
   *   Expression syntax is an aggregation function call with histogram facets and
   *   other options.
   *
   *   Available aggregation function calls are:
   *   * `count(string_histogram_facet)`: Count the number of matching entities,
   *   for each distinct attribute value.
   *   * `count(numeric_histogram_facet, list of buckets)`: Count the number of
   *   matching entities within each bucket.
   *
   *   A maximum of 200 histogram buckets are supported.
   *
   *   Data types:
   *
   *   * Histogram facet: facet names with format `{@link a-zA-Z0-9_|a-zA-Z}+`.
   *   * String: string like "any string with backslash escape for quote(\")."
   *   * Number: whole number and floating point number like 10, -1 and -0.01.
   *   * List: list of elements with comma(,) separator surrounded by square
   *   brackets, for example, [1, 2, 3] and ["one", "two", "three"].
   *
   *   Built-in constants:
   *
   *   * MIN (minimum number similar to java Double.MIN_VALUE)
   *   * MAX (maximum number similar to java Double.MAX_VALUE)
   *
   *   Built-in functions:
   *
   *   * bucket(start, end[, label]): bucket built-in function creates a bucket
   *   with range of [start, end). Note that the end is exclusive, for example,
   *   bucket(1, MAX, "positive number") or bucket(1, 10).
   *
   *   Job histogram facets:
   *
   *   * company_display_name: histogram by {@link google.cloud.talent.v4beta1.Job.company_display_name|Job.company_display_name}.
   *   * employment_type: histogram by {@link google.cloud.talent.v4beta1.Job.employment_types|Job.employment_types}, for example,
   *     "FULL_TIME", "PART_TIME".
   *   * company_size (DEPRECATED): histogram by {@link google.cloud.talent.v4beta1.CompanySize|CompanySize}, for example,
   *   "SMALL", "MEDIUM", "BIG".
   *   * publish_time_in_day: histogram by the {@link google.cloud.talent.v4beta1.Job.posting_publish_time|Job.posting_publish_time}
   *     in days.
   *     Must specify list of numeric buckets in spec.
   *   * publish_time_in_month: histogram by the {@link google.cloud.talent.v4beta1.Job.posting_publish_time|Job.posting_publish_time}
   *     in months.
   *     Must specify list of numeric buckets in spec.
   *   * publish_time_in_year: histogram by the {@link google.cloud.talent.v4beta1.Job.posting_publish_time|Job.posting_publish_time}
   *     in years.
   *     Must specify list of numeric buckets in spec.
   *   * degree_types: histogram by the {@link google.cloud.talent.v4beta1.Job.degree_types|Job.degree_types}, for example,
   *     "Bachelors", "Masters".
   *   * job_level: histogram by the {@link google.cloud.talent.v4beta1.Job.job_level|Job.job_level}, for example, "Entry
   *     Level".
   *   * country: histogram by the country code of jobs, for example, "US", "FR".
   *   * admin1: histogram by the admin1 code of jobs, which is a global
   *     placeholder referring to the state, province, or the particular term a
   *     country uses to define the geographic structure below the country level,
   *     for example, "CA", "IL".
   *   * city: histogram by a combination of the "city name, admin1 code". For
   *     example,  "Mountain View, CA", "New York, NY".
   *   * admin1_country: histogram by a combination of the "admin1 code, country",
   *     for example, "CA, US", "IL, US".
   *   * city_coordinate: histogram by the city center's GPS coordinates (latitude
   *     and longitude), for example, 37.4038522,-122.0987765. Since the
   *     coordinates of a city center can change, customers may need to refresh
   *     them periodically.
   *   * locale: histogram by the {@link google.cloud.talent.v4beta1.Job.language_code|Job.language_code}, for example, "en-US",
   *     "fr-FR".
   *   * language: histogram by the language subtag of the {@link google.cloud.talent.v4beta1.Job.language_code|Job.language_code},
   *     for example, "en", "fr".
   *   * category: histogram by the {@link google.cloud.talent.v4beta1.JobCategory|JobCategory}, for example,
   *     "COMPUTER_AND_IT", "HEALTHCARE".
   *   * base_compensation_unit: histogram by the
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.CompensationUnit|CompensationInfo.CompensationUnit} of base
   *     salary, for example, "WEEKLY", "MONTHLY".
   *   * base_compensation: histogram by the base salary. Must specify list of
   *     numeric buckets to group results by.
   *   * annualized_base_compensation: histogram by the base annualized salary.
   *     Must specify list of numeric buckets to group results by.
   *   * annualized_total_compensation: histogram by the total annualized salary.
   *     Must specify list of numeric buckets to group results by.
   *   * string_custom_attribute: histogram by string {@link google.cloud.talent.v4beta1.Job.custom_attributes|Job.custom_attributes}.
   *     Values can be accessed via square bracket notations like
   *     string_custom_attribute["key1"].
   *   * numeric_custom_attribute: histogram by numeric {@link google.cloud.talent.v4beta1.Job.custom_attributes|Job.custom_attributes}.
   *     Values can be accessed via square bracket notations like
   *     numeric_custom_attribute["key1"]. Must specify list of numeric buckets to
   *     group results by.
   *
   *   Example expressions:
   *
   *   * `count(admin1)`
   *   * `count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000),
   *   bucket(100000, MAX)])`
   *   * `count(string_custom_attribute["some-string-custom-attribute"])`
   *   * `count(numeric_custom_attribute["some-numeric-custom-attribute"],
   *     [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])`
   * @param {google.cloud.talent.v4beta1.JobView} request.jobView
   *   The desired job attributes returned for jobs in the search response.
   *   Defaults to {@link google.cloud.talent.v4beta1.JobView.JOB_VIEW_SMALL|JobView.JOB_VIEW_SMALL} if no value is specified.
   * @param {number} request.offset
   *   An integer that specifies the current offset (that is, starting result
   *   location, amongst the jobs deemed by the API as relevant) in search
   *   results. This field is only considered if {@link google.cloud.talent.v4beta1.SearchJobsRequest.page_token|page_token} is unset.
   *
   *   The maximum allowed value is 5000. Otherwise an error is thrown.
   *
   *   For example, 0 means to  return results starting from the first matching
   *   job, and 10 means to return from the 11th job. This can be used for
   *   pagination, (for example, pageSize = 10 and offset = 10 means to return
   *   from the second page).
   * @param {number} request.pageSize
   *   A limit on the number of jobs returned in the search results.
   *   Increasing this value above the default value of 10 can increase search
   *   response time. The value can be between 1 and 100.
   * @param {string} request.pageToken
   *   The token specifying the current offset within
   *   search results. See {@link google.cloud.talent.v4beta1.SearchJobsResponse.next_page_token|SearchJobsResponse.next_page_token} for
   *   an explanation of how to obtain the next set of query results.
   * @param {string} request.orderBy
   *   The criteria determining how search results are sorted. Default is
   *   `"relevance desc"`.
   *
   *   Supported options are:
   *
   *   * `"relevance desc"`: By relevance descending, as determined by the API
   *     algorithms. Relevance thresholding of query results is only available
   *     with this ordering.
   *   * `"posting_publish_time desc"`: By {@link google.cloud.talent.v4beta1.Job.posting_publish_time|Job.posting_publish_time}
   *     descending.
   *   * `"posting_update_time desc"`: By {@link google.cloud.talent.v4beta1.Job.posting_update_time|Job.posting_update_time}
   *     descending.
   *   * `"title"`: By {@link google.cloud.talent.v4beta1.Job.title|Job.title} ascending.
   *   * `"title desc"`: By {@link google.cloud.talent.v4beta1.Job.title|Job.title} descending.
   *   * `"annualized_base_compensation"`: By job's
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.annualized_base_compensation_range|CompensationInfo.annualized_base_compensation_range} ascending. Jobs
   *     whose annualized base compensation is unspecified are put at the end of
   *     search results.
   *   * `"annualized_base_compensation desc"`: By job's
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.annualized_base_compensation_range|CompensationInfo.annualized_base_compensation_range} descending. Jobs
   *     whose annualized base compensation is unspecified are put at the end of
   *     search results.
   *   * `"annualized_total_compensation"`: By job's
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.annualized_total_compensation_range|CompensationInfo.annualized_total_compensation_range} ascending. Jobs
   *     whose annualized base compensation is unspecified are put at the end of
   *     search results.
   *   * `"annualized_total_compensation desc"`: By job's
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.annualized_total_compensation_range|CompensationInfo.annualized_total_compensation_range} descending. Jobs
   *     whose annualized base compensation is unspecified are put at the end of
   *     search results.
   *   * `"custom_ranking desc"`: By the relevance score adjusted to the
   *     {@link google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo.ranking_expression|SearchJobsRequest.CustomRankingInfo.ranking_expression} with weight
   *     factor assigned by
   *     {@link google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo.importance_level|SearchJobsRequest.CustomRankingInfo.importance_level} in descending
   *     order.
   *   * Location sorting: Use the special syntax to order jobs by distance:<br>
   *     `"distance_from('Hawaii')"`: Order by distance from Hawaii.<br>
   *     `"distance_from(19.89, 155.5)"`: Order by distance from a coordinate.<br>
   *     `"distance_from('Hawaii'), distance_from('Puerto Rico')"`: Order by
   *     multiple locations. See details below.<br>
   *     `"distance_from('Hawaii'), distance_from(19.89, 155.5)"`: Order by
   *     multiple locations. See details below.<br>
   *     The string can have a maximum of 256 characters. When multiple distance
   *     centers are provided, a job that is close to any of the distance centers
   *     would have a high rank. When a job has multiple locations, the job
   *     location closest to one of the distance centers will be used. Jobs that
   *     don't have locations will be ranked at the bottom. Distance is calculated
   *     with a precision of 11.3 meters (37.4 feet). Diversification strategy is
   *     still applied unless explicitly disabled in
   *     {@link google.cloud.talent.v4beta1.SearchJobsRequest.diversification_level|diversification_level}.
   * @param {google.cloud.talent.v4beta1.SearchJobsRequest.DiversificationLevel} request.diversificationLevel
   *   Controls whether highly similar jobs are returned next to each other in
   *   the search results. Jobs are identified as highly similar based on
   *   their titles, job categories, and locations. Highly similar results are
   *   clustered so that only one representative job of the cluster is
   *   displayed to the job seeker higher up in the results, with the other jobs
   *   being displayed lower down in the results.
   *
   *   Defaults to {@link google.cloud.talent.v4beta1.SearchJobsRequest.DiversificationLevel.SIMPLE|DiversificationLevel.SIMPLE} if no value
   *   is specified.
   * @param {google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo} request.customRankingInfo
   *   Controls over how job documents get ranked on top of existing relevance
   *   score (determined by API algorithm).
   * @param {boolean} request.disableKeywordMatch
   *   This field is deprecated. Please use
   *   {@link google.cloud.talent.v4beta1.SearchJobsRequest.keyword_match_mode|SearchJobsRequest.keyword_match_mode} going forward.
   *
   *   To migrate, disable_keyword_match set to false maps to
   *   {@link google.cloud.talent.v4beta1.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL|KeywordMatchMode.KEYWORD_MATCH_ALL}, and disable_keyword_match set to
   *   true maps to {@link google.cloud.talent.v4beta1.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_DISABLED|KeywordMatchMode.KEYWORD_MATCH_DISABLED}. If
   *   {@link google.cloud.talent.v4beta1.SearchJobsRequest.keyword_match_mode|SearchJobsRequest.keyword_match_mode} is set, this field is ignored.
   *
   *   Controls whether to disable exact keyword match on {@link google.cloud.talent.v4beta1.Job.title|Job.title},
   *   {@link google.cloud.talent.v4beta1.Job.description|Job.description}, {@link google.cloud.talent.v4beta1.Job.company_display_name|Job.company_display_name}, {@link google.cloud.talent.v4beta1.Job.addresses|Job.addresses},
   *   {@link google.cloud.talent.v4beta1.Job.qualifications|Job.qualifications}. When disable keyword match is turned off, a
   *   keyword match returns jobs that do not match given category filters when
   *   there are matching keywords. For example, for the query "program manager,"
   *   a result is returned even if the job posting has the title "software
   *   developer," which doesn't fall into "program manager" ontology, but does
   *   have "program manager" appearing in its description.
   *
   *   For queries like "cloud" that don't contain title or
   *   location specific ontology, jobs with "cloud" keyword matches are returned
   *   regardless of this flag's value.
   *
   *   Use {@link google.cloud.talent.v4beta1.Company.keyword_searchable_job_custom_attributes|Company.keyword_searchable_job_custom_attributes} if
   *   company-specific globally matched custom field/attribute string values are
   *   needed. Enabling keyword match improves recall of subsequent search
   *   requests.
   *
   *   Defaults to false.
   * @param {google.cloud.talent.v4beta1.SearchJobsRequest.KeywordMatchMode} request.keywordMatchMode
   *   Controls what keyword match options to use.
   *
   *   Defaults to {@link google.cloud.talent.v4beta1.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL|KeywordMatchMode.KEYWORD_MATCH_ALL} if no value
   *   is specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [SearchJobsResponse]{@link google.cloud.talent.v4beta1.SearchJobsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.search_jobs.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_SearchJobs_async
   */
  searchJobs(
    request?: protos.google.cloud.talent.v4beta1.ISearchJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | undefined,
      {} | undefined
    ]
  >;
  searchJobs(
    request: protos.google.cloud.talent.v4beta1.ISearchJobsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  searchJobs(
    request: protos.google.cloud.talent.v4beta1.ISearchJobsRequest,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  searchJobs(
    request?: protos.google.cloud.talent.v4beta1.ISearchJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
          | protos.google.cloud.talent.v4beta1.ISearchJobsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.searchJobs(request, options, callback);
  }
  /**
   * Searches for jobs using the provided {@link google.cloud.talent.v4beta1.SearchJobsRequest|SearchJobsRequest}.
   *
   * This API call is intended for the use case of targeting passive job
   * seekers (for example, job seekers who have signed up to receive email
   * alerts about potential job opportunities), and has different algorithmic
   * adjustments that are targeted to passive job seekers.
   *
   * This call constrains the {@link google.cloud.talent.v4beta1.Job.visibility|visibility} of jobs
   * present in the database, and only returns jobs the caller has
   * permission to search against.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant to search within.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   *   is created. For example, "projects/foo".
   * @param {google.cloud.talent.v4beta1.SearchJobsRequest.SearchMode} request.searchMode
   *   Mode of a search.
   *
   *   Defaults to {@link google.cloud.talent.v4beta1.SearchJobsRequest.SearchMode.JOB_SEARCH|SearchMode.JOB_SEARCH}.
   * @param {google.cloud.talent.v4beta1.RequestMetadata} request.requestMetadata
   *   Required. The meta information collected about the job searcher, used to improve the
   *   search quality of the service. The identifiers (such as `user_id`) are
   *   provided by users, and must be unique and consistent.
   * @param {google.cloud.talent.v4beta1.JobQuery} request.jobQuery
   *   Query used to search against jobs, such as keyword, location filters, etc.
   * @param {boolean} request.enableBroadening
   *   Controls whether to broaden the search when it produces sparse results.
   *   Broadened queries append results to the end of the matching results
   *   list.
   *
   *   Defaults to false.
   * @param {boolean} request.requirePreciseResultSize
   *   This field is deprecated.
   * @param {number[]} request.histogramQueries
   *   An expression specifies a histogram request against matching jobs.
   *
   *   Expression syntax is an aggregation function call with histogram facets and
   *   other options.
   *
   *   Available aggregation function calls are:
   *   * `count(string_histogram_facet)`: Count the number of matching entities,
   *   for each distinct attribute value.
   *   * `count(numeric_histogram_facet, list of buckets)`: Count the number of
   *   matching entities within each bucket.
   *
   *   A maximum of 200 histogram buckets are supported.
   *
   *   Data types:
   *
   *   * Histogram facet: facet names with format `{@link a-zA-Z0-9_|a-zA-Z}+`.
   *   * String: string like "any string with backslash escape for quote(\")."
   *   * Number: whole number and floating point number like 10, -1 and -0.01.
   *   * List: list of elements with comma(,) separator surrounded by square
   *   brackets, for example, [1, 2, 3] and ["one", "two", "three"].
   *
   *   Built-in constants:
   *
   *   * MIN (minimum number similar to java Double.MIN_VALUE)
   *   * MAX (maximum number similar to java Double.MAX_VALUE)
   *
   *   Built-in functions:
   *
   *   * bucket(start, end[, label]): bucket built-in function creates a bucket
   *   with range of [start, end). Note that the end is exclusive, for example,
   *   bucket(1, MAX, "positive number") or bucket(1, 10).
   *
   *   Job histogram facets:
   *
   *   * company_display_name: histogram by {@link google.cloud.talent.v4beta1.Job.company_display_name|Job.company_display_name}.
   *   * employment_type: histogram by {@link google.cloud.talent.v4beta1.Job.employment_types|Job.employment_types}, for example,
   *     "FULL_TIME", "PART_TIME".
   *   * company_size (DEPRECATED): histogram by {@link google.cloud.talent.v4beta1.CompanySize|CompanySize}, for example,
   *   "SMALL", "MEDIUM", "BIG".
   *   * publish_time_in_day: histogram by the {@link google.cloud.talent.v4beta1.Job.posting_publish_time|Job.posting_publish_time}
   *     in days.
   *     Must specify list of numeric buckets in spec.
   *   * publish_time_in_month: histogram by the {@link google.cloud.talent.v4beta1.Job.posting_publish_time|Job.posting_publish_time}
   *     in months.
   *     Must specify list of numeric buckets in spec.
   *   * publish_time_in_year: histogram by the {@link google.cloud.talent.v4beta1.Job.posting_publish_time|Job.posting_publish_time}
   *     in years.
   *     Must specify list of numeric buckets in spec.
   *   * degree_types: histogram by the {@link google.cloud.talent.v4beta1.Job.degree_types|Job.degree_types}, for example,
   *     "Bachelors", "Masters".
   *   * job_level: histogram by the {@link google.cloud.talent.v4beta1.Job.job_level|Job.job_level}, for example, "Entry
   *     Level".
   *   * country: histogram by the country code of jobs, for example, "US", "FR".
   *   * admin1: histogram by the admin1 code of jobs, which is a global
   *     placeholder referring to the state, province, or the particular term a
   *     country uses to define the geographic structure below the country level,
   *     for example, "CA", "IL".
   *   * city: histogram by a combination of the "city name, admin1 code". For
   *     example,  "Mountain View, CA", "New York, NY".
   *   * admin1_country: histogram by a combination of the "admin1 code, country",
   *     for example, "CA, US", "IL, US".
   *   * city_coordinate: histogram by the city center's GPS coordinates (latitude
   *     and longitude), for example, 37.4038522,-122.0987765. Since the
   *     coordinates of a city center can change, customers may need to refresh
   *     them periodically.
   *   * locale: histogram by the {@link google.cloud.talent.v4beta1.Job.language_code|Job.language_code}, for example, "en-US",
   *     "fr-FR".
   *   * language: histogram by the language subtag of the {@link google.cloud.talent.v4beta1.Job.language_code|Job.language_code},
   *     for example, "en", "fr".
   *   * category: histogram by the {@link google.cloud.talent.v4beta1.JobCategory|JobCategory}, for example,
   *     "COMPUTER_AND_IT", "HEALTHCARE".
   *   * base_compensation_unit: histogram by the
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.CompensationUnit|CompensationInfo.CompensationUnit} of base
   *     salary, for example, "WEEKLY", "MONTHLY".
   *   * base_compensation: histogram by the base salary. Must specify list of
   *     numeric buckets to group results by.
   *   * annualized_base_compensation: histogram by the base annualized salary.
   *     Must specify list of numeric buckets to group results by.
   *   * annualized_total_compensation: histogram by the total annualized salary.
   *     Must specify list of numeric buckets to group results by.
   *   * string_custom_attribute: histogram by string {@link google.cloud.talent.v4beta1.Job.custom_attributes|Job.custom_attributes}.
   *     Values can be accessed via square bracket notations like
   *     string_custom_attribute["key1"].
   *   * numeric_custom_attribute: histogram by numeric {@link google.cloud.talent.v4beta1.Job.custom_attributes|Job.custom_attributes}.
   *     Values can be accessed via square bracket notations like
   *     numeric_custom_attribute["key1"]. Must specify list of numeric buckets to
   *     group results by.
   *
   *   Example expressions:
   *
   *   * `count(admin1)`
   *   * `count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000),
   *   bucket(100000, MAX)])`
   *   * `count(string_custom_attribute["some-string-custom-attribute"])`
   *   * `count(numeric_custom_attribute["some-numeric-custom-attribute"],
   *     [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])`
   * @param {google.cloud.talent.v4beta1.JobView} request.jobView
   *   The desired job attributes returned for jobs in the search response.
   *   Defaults to {@link google.cloud.talent.v4beta1.JobView.JOB_VIEW_SMALL|JobView.JOB_VIEW_SMALL} if no value is specified.
   * @param {number} request.offset
   *   An integer that specifies the current offset (that is, starting result
   *   location, amongst the jobs deemed by the API as relevant) in search
   *   results. This field is only considered if {@link google.cloud.talent.v4beta1.SearchJobsRequest.page_token|page_token} is unset.
   *
   *   The maximum allowed value is 5000. Otherwise an error is thrown.
   *
   *   For example, 0 means to  return results starting from the first matching
   *   job, and 10 means to return from the 11th job. This can be used for
   *   pagination, (for example, pageSize = 10 and offset = 10 means to return
   *   from the second page).
   * @param {number} request.pageSize
   *   A limit on the number of jobs returned in the search results.
   *   Increasing this value above the default value of 10 can increase search
   *   response time. The value can be between 1 and 100.
   * @param {string} request.pageToken
   *   The token specifying the current offset within
   *   search results. See {@link google.cloud.talent.v4beta1.SearchJobsResponse.next_page_token|SearchJobsResponse.next_page_token} for
   *   an explanation of how to obtain the next set of query results.
   * @param {string} request.orderBy
   *   The criteria determining how search results are sorted. Default is
   *   `"relevance desc"`.
   *
   *   Supported options are:
   *
   *   * `"relevance desc"`: By relevance descending, as determined by the API
   *     algorithms. Relevance thresholding of query results is only available
   *     with this ordering.
   *   * `"posting_publish_time desc"`: By {@link google.cloud.talent.v4beta1.Job.posting_publish_time|Job.posting_publish_time}
   *     descending.
   *   * `"posting_update_time desc"`: By {@link google.cloud.talent.v4beta1.Job.posting_update_time|Job.posting_update_time}
   *     descending.
   *   * `"title"`: By {@link google.cloud.talent.v4beta1.Job.title|Job.title} ascending.
   *   * `"title desc"`: By {@link google.cloud.talent.v4beta1.Job.title|Job.title} descending.
   *   * `"annualized_base_compensation"`: By job's
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.annualized_base_compensation_range|CompensationInfo.annualized_base_compensation_range} ascending. Jobs
   *     whose annualized base compensation is unspecified are put at the end of
   *     search results.
   *   * `"annualized_base_compensation desc"`: By job's
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.annualized_base_compensation_range|CompensationInfo.annualized_base_compensation_range} descending. Jobs
   *     whose annualized base compensation is unspecified are put at the end of
   *     search results.
   *   * `"annualized_total_compensation"`: By job's
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.annualized_total_compensation_range|CompensationInfo.annualized_total_compensation_range} ascending. Jobs
   *     whose annualized base compensation is unspecified are put at the end of
   *     search results.
   *   * `"annualized_total_compensation desc"`: By job's
   *     {@link google.cloud.talent.v4beta1.CompensationInfo.annualized_total_compensation_range|CompensationInfo.annualized_total_compensation_range} descending. Jobs
   *     whose annualized base compensation is unspecified are put at the end of
   *     search results.
   *   * `"custom_ranking desc"`: By the relevance score adjusted to the
   *     {@link google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo.ranking_expression|SearchJobsRequest.CustomRankingInfo.ranking_expression} with weight
   *     factor assigned by
   *     {@link google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo.importance_level|SearchJobsRequest.CustomRankingInfo.importance_level} in descending
   *     order.
   *   * Location sorting: Use the special syntax to order jobs by distance:<br>
   *     `"distance_from('Hawaii')"`: Order by distance from Hawaii.<br>
   *     `"distance_from(19.89, 155.5)"`: Order by distance from a coordinate.<br>
   *     `"distance_from('Hawaii'), distance_from('Puerto Rico')"`: Order by
   *     multiple locations. See details below.<br>
   *     `"distance_from('Hawaii'), distance_from(19.89, 155.5)"`: Order by
   *     multiple locations. See details below.<br>
   *     The string can have a maximum of 256 characters. When multiple distance
   *     centers are provided, a job that is close to any of the distance centers
   *     would have a high rank. When a job has multiple locations, the job
   *     location closest to one of the distance centers will be used. Jobs that
   *     don't have locations will be ranked at the bottom. Distance is calculated
   *     with a precision of 11.3 meters (37.4 feet). Diversification strategy is
   *     still applied unless explicitly disabled in
   *     {@link google.cloud.talent.v4beta1.SearchJobsRequest.diversification_level|diversification_level}.
   * @param {google.cloud.talent.v4beta1.SearchJobsRequest.DiversificationLevel} request.diversificationLevel
   *   Controls whether highly similar jobs are returned next to each other in
   *   the search results. Jobs are identified as highly similar based on
   *   their titles, job categories, and locations. Highly similar results are
   *   clustered so that only one representative job of the cluster is
   *   displayed to the job seeker higher up in the results, with the other jobs
   *   being displayed lower down in the results.
   *
   *   Defaults to {@link google.cloud.talent.v4beta1.SearchJobsRequest.DiversificationLevel.SIMPLE|DiversificationLevel.SIMPLE} if no value
   *   is specified.
   * @param {google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo} request.customRankingInfo
   *   Controls over how job documents get ranked on top of existing relevance
   *   score (determined by API algorithm).
   * @param {boolean} request.disableKeywordMatch
   *   This field is deprecated. Please use
   *   {@link google.cloud.talent.v4beta1.SearchJobsRequest.keyword_match_mode|SearchJobsRequest.keyword_match_mode} going forward.
   *
   *   To migrate, disable_keyword_match set to false maps to
   *   {@link google.cloud.talent.v4beta1.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL|KeywordMatchMode.KEYWORD_MATCH_ALL}, and disable_keyword_match set to
   *   true maps to {@link google.cloud.talent.v4beta1.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_DISABLED|KeywordMatchMode.KEYWORD_MATCH_DISABLED}. If
   *   {@link google.cloud.talent.v4beta1.SearchJobsRequest.keyword_match_mode|SearchJobsRequest.keyword_match_mode} is set, this field is ignored.
   *
   *   Controls whether to disable exact keyword match on {@link google.cloud.talent.v4beta1.Job.title|Job.title},
   *   {@link google.cloud.talent.v4beta1.Job.description|Job.description}, {@link google.cloud.talent.v4beta1.Job.company_display_name|Job.company_display_name}, {@link google.cloud.talent.v4beta1.Job.addresses|Job.addresses},
   *   {@link google.cloud.talent.v4beta1.Job.qualifications|Job.qualifications}. When disable keyword match is turned off, a
   *   keyword match returns jobs that do not match given category filters when
   *   there are matching keywords. For example, for the query "program manager,"
   *   a result is returned even if the job posting has the title "software
   *   developer," which doesn't fall into "program manager" ontology, but does
   *   have "program manager" appearing in its description.
   *
   *   For queries like "cloud" that don't contain title or
   *   location specific ontology, jobs with "cloud" keyword matches are returned
   *   regardless of this flag's value.
   *
   *   Use {@link google.cloud.talent.v4beta1.Company.keyword_searchable_job_custom_attributes|Company.keyword_searchable_job_custom_attributes} if
   *   company-specific globally matched custom field/attribute string values are
   *   needed. Enabling keyword match improves recall of subsequent search
   *   requests.
   *
   *   Defaults to false.
   * @param {google.cloud.talent.v4beta1.SearchJobsRequest.KeywordMatchMode} request.keywordMatchMode
   *   Controls what keyword match options to use.
   *
   *   Defaults to {@link google.cloud.talent.v4beta1.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL|KeywordMatchMode.KEYWORD_MATCH_ALL} if no value
   *   is specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [SearchJobsResponse]{@link google.cloud.talent.v4beta1.SearchJobsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.search_jobs_for_alert.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_SearchJobsForAlert_async
   */
  searchJobsForAlert(
    request?: protos.google.cloud.talent.v4beta1.ISearchJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | undefined,
      {} | undefined
    ]
  >;
  searchJobsForAlert(
    request: protos.google.cloud.talent.v4beta1.ISearchJobsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  searchJobsForAlert(
    request: protos.google.cloud.talent.v4beta1.ISearchJobsRequest,
    callback: Callback<
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  searchJobsForAlert(
    request?: protos.google.cloud.talent.v4beta1.ISearchJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
          | protos.google.cloud.talent.v4beta1.ISearchJobsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.ISearchJobsResponse,
      protos.google.cloud.talent.v4beta1.ISearchJobsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.searchJobsForAlert(request, options, callback);
  }

  /**
   * Begins executing a batch create jobs operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant under which the job is created.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   *   is created. For example, "projects/foo".
   * @param {number[]} request.jobs
   *   Required. The jobs to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.batch_create_jobs.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_BatchCreateJobs_async
   */
  batchCreateJobs(
    request?: protos.google.cloud.talent.v4beta1.IBatchCreateJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  batchCreateJobs(
    request: protos.google.cloud.talent.v4beta1.IBatchCreateJobsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateJobs(
    request: protos.google.cloud.talent.v4beta1.IBatchCreateJobsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateJobs(
    request?: protos.google.cloud.talent.v4beta1.IBatchCreateJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.talent.v4beta1.IJobOperationResult,
            protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateJobs(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `batchCreateJobs()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.batch_create_jobs.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_BatchCreateJobs_async
   */
  async checkBatchCreateJobsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.talent.v4beta1.JobOperationResult,
      protos.google.cloud.talent.v4beta1.BatchOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.batchCreateJobs,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.talent.v4beta1.JobOperationResult,
      protos.google.cloud.talent.v4beta1.BatchOperationMetadata
    >;
  }
  /**
   * Begins executing a batch update jobs operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant under which the job is created.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   *   is created. For example, "projects/foo".
   * @param {number[]} request.jobs
   *   Required. The jobs to be updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Strongly recommended for the best service experience. Be aware that it will
   *   also increase latency when checking the status of a batch operation.
   *
   *   If {@link google.cloud.talent.v4beta1.BatchUpdateJobsRequest.update_mask|update_mask} is provided, only the specified fields in
   *   {@link google.cloud.talent.v4beta1.Job|Job} are updated. Otherwise all the fields are updated.
   *
   *   A field mask to restrict the fields that are updated. Only
   *   top level fields of {@link google.cloud.talent.v4beta1.Job|Job} are supported.
   *
   *   If {@link google.cloud.talent.v4beta1.BatchUpdateJobsRequest.update_mask|update_mask} is provided, The {@link google.cloud.talent.v4beta1.Job|Job} inside
   *   {@link google.cloud.talent.v4beta1.JobOperationResult.JobResult|JobResult}
   *   will only contains fields that is updated, plus the Id of the Job.
   *   Otherwise,  {@link google.cloud.talent.v4beta1.Job|Job} will include all fields, which can yield a very
   *   large response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.batch_update_jobs.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_BatchUpdateJobs_async
   */
  batchUpdateJobs(
    request?: protos.google.cloud.talent.v4beta1.IBatchUpdateJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  batchUpdateJobs(
    request: protos.google.cloud.talent.v4beta1.IBatchUpdateJobsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchUpdateJobs(
    request: protos.google.cloud.talent.v4beta1.IBatchUpdateJobsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchUpdateJobs(
    request?: protos.google.cloud.talent.v4beta1.IBatchUpdateJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.talent.v4beta1.IJobOperationResult,
            protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.talent.v4beta1.IJobOperationResult,
        protos.google.cloud.talent.v4beta1.IBatchOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchUpdateJobs(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `batchUpdateJobs()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.batch_update_jobs.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_BatchUpdateJobs_async
   */
  async checkBatchUpdateJobsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.talent.v4beta1.JobOperationResult,
      protos.google.cloud.talent.v4beta1.BatchOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.batchUpdateJobs,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.talent.v4beta1.JobOperationResult,
      protos.google.cloud.talent.v4beta1.BatchOperationMetadata
    >;
  }
  /**
   * Lists jobs by filter.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant under which the job is created.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   *   is created. For example, "projects/foo".
   * @param {string} request.filter
   *   Required. The filter string specifies the jobs to be enumerated.
   *
   *   Supported operator: =, AND
   *
   *   The fields eligible for filtering are:
   *
   *   * `companyName`
   *   * `requisitionId`
   *   * `status` Available values: OPEN, EXPIRED, ALL. Defaults to
   *   OPEN if no value is specified.
   *
   *   At least one of `companyName` and `requisitionId` must present or an
   *   INVALID_ARGUMENT error is thrown.
   *
   *   Sample Query:
   *
   *   * companyName = "projects/foo/tenants/bar/companies/baz"
   *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
   *   requisitionId = "req-1"
   *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
   *   status = "EXPIRED"
   *   * requisitionId = "req-1"
   *   * requisitionId = "req-1" AND status = "EXPIRED"
   * @param {string} request.pageToken
   *   The starting point of a query result.
   * @param {number} request.pageSize
   *   The maximum number of jobs to be returned per page of results.
   *
   *   If {@link google.cloud.talent.v4beta1.ListJobsRequest.job_view|job_view} is set to {@link google.cloud.talent.v4beta1.JobView.JOB_VIEW_ID_ONLY|JobView.JOB_VIEW_ID_ONLY}, the maximum allowed
   *   page size is 1000. Otherwise, the maximum allowed page size is 100.
   *
   *   Default is 100 if empty or a number < 1 is specified.
   * @param {google.cloud.talent.v4beta1.JobView} request.jobView
   *   The desired job attributes returned for jobs in the
   *   search response. Defaults to {@link google.cloud.talent.v4beta1.JobView.JOB_VIEW_FULL|JobView.JOB_VIEW_FULL} if no value is
   *   specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Job]{@link google.cloud.talent.v4beta1.Job}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listJobs(
    request?: protos.google.cloud.talent.v4beta1.IListJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.IJob[],
      protos.google.cloud.talent.v4beta1.IListJobsRequest | null,
      protos.google.cloud.talent.v4beta1.IListJobsResponse
    ]
  >;
  listJobs(
    request: protos.google.cloud.talent.v4beta1.IListJobsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.talent.v4beta1.IListJobsRequest,
      protos.google.cloud.talent.v4beta1.IListJobsResponse | null | undefined,
      protos.google.cloud.talent.v4beta1.IJob
    >
  ): void;
  listJobs(
    request: protos.google.cloud.talent.v4beta1.IListJobsRequest,
    callback: PaginationCallback<
      protos.google.cloud.talent.v4beta1.IListJobsRequest,
      protos.google.cloud.talent.v4beta1.IListJobsResponse | null | undefined,
      protos.google.cloud.talent.v4beta1.IJob
    >
  ): void;
  listJobs(
    request?: protos.google.cloud.talent.v4beta1.IListJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.talent.v4beta1.IListJobsRequest,
          | protos.google.cloud.talent.v4beta1.IListJobsResponse
          | null
          | undefined,
          protos.google.cloud.talent.v4beta1.IJob
        >,
    callback?: PaginationCallback<
      protos.google.cloud.talent.v4beta1.IListJobsRequest,
      protos.google.cloud.talent.v4beta1.IListJobsResponse | null | undefined,
      protos.google.cloud.talent.v4beta1.IJob
    >
  ): Promise<
    [
      protos.google.cloud.talent.v4beta1.IJob[],
      protos.google.cloud.talent.v4beta1.IListJobsRequest | null,
      protos.google.cloud.talent.v4beta1.IListJobsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listJobs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant under which the job is created.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   *   is created. For example, "projects/foo".
   * @param {string} request.filter
   *   Required. The filter string specifies the jobs to be enumerated.
   *
   *   Supported operator: =, AND
   *
   *   The fields eligible for filtering are:
   *
   *   * `companyName`
   *   * `requisitionId`
   *   * `status` Available values: OPEN, EXPIRED, ALL. Defaults to
   *   OPEN if no value is specified.
   *
   *   At least one of `companyName` and `requisitionId` must present or an
   *   INVALID_ARGUMENT error is thrown.
   *
   *   Sample Query:
   *
   *   * companyName = "projects/foo/tenants/bar/companies/baz"
   *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
   *   requisitionId = "req-1"
   *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
   *   status = "EXPIRED"
   *   * requisitionId = "req-1"
   *   * requisitionId = "req-1" AND status = "EXPIRED"
   * @param {string} request.pageToken
   *   The starting point of a query result.
   * @param {number} request.pageSize
   *   The maximum number of jobs to be returned per page of results.
   *
   *   If {@link google.cloud.talent.v4beta1.ListJobsRequest.job_view|job_view} is set to {@link google.cloud.talent.v4beta1.JobView.JOB_VIEW_ID_ONLY|JobView.JOB_VIEW_ID_ONLY}, the maximum allowed
   *   page size is 1000. Otherwise, the maximum allowed page size is 100.
   *
   *   Default is 100 if empty or a number < 1 is specified.
   * @param {google.cloud.talent.v4beta1.JobView} request.jobView
   *   The desired job attributes returned for jobs in the
   *   search response. Defaults to {@link google.cloud.talent.v4beta1.JobView.JOB_VIEW_FULL|JobView.JOB_VIEW_FULL} if no value is
   *   specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Job]{@link google.cloud.talent.v4beta1.Job} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listJobsStream(
    request?: protos.google.cloud.talent.v4beta1.IListJobsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listJobs.createStream(
      this.innerApiCalls.listJobs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listJobs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the tenant under which the job is created.
   *
   *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   *   "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
   *   is created. For example, "projects/foo".
   * @param {string} request.filter
   *   Required. The filter string specifies the jobs to be enumerated.
   *
   *   Supported operator: =, AND
   *
   *   The fields eligible for filtering are:
   *
   *   * `companyName`
   *   * `requisitionId`
   *   * `status` Available values: OPEN, EXPIRED, ALL. Defaults to
   *   OPEN if no value is specified.
   *
   *   At least one of `companyName` and `requisitionId` must present or an
   *   INVALID_ARGUMENT error is thrown.
   *
   *   Sample Query:
   *
   *   * companyName = "projects/foo/tenants/bar/companies/baz"
   *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
   *   requisitionId = "req-1"
   *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
   *   status = "EXPIRED"
   *   * requisitionId = "req-1"
   *   * requisitionId = "req-1" AND status = "EXPIRED"
   * @param {string} request.pageToken
   *   The starting point of a query result.
   * @param {number} request.pageSize
   *   The maximum number of jobs to be returned per page of results.
   *
   *   If {@link google.cloud.talent.v4beta1.ListJobsRequest.job_view|job_view} is set to {@link google.cloud.talent.v4beta1.JobView.JOB_VIEW_ID_ONLY|JobView.JOB_VIEW_ID_ONLY}, the maximum allowed
   *   page size is 1000. Otherwise, the maximum allowed page size is 100.
   *
   *   Default is 100 if empty or a number < 1 is specified.
   * @param {google.cloud.talent.v4beta1.JobView} request.jobView
   *   The desired job attributes returned for jobs in the
   *   search response. Defaults to {@link google.cloud.talent.v4beta1.JobView.JOB_VIEW_FULL|JobView.JOB_VIEW_FULL} if no value is
   *   specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Job]{@link google.cloud.talent.v4beta1.Job}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v4beta1/job_service.list_jobs.js</caption>
   * region_tag:jobs_v4beta1_generated_JobService_ListJobs_async
   */
  listJobsAsync(
    request?: protos.google.cloud.talent.v4beta1.IListJobsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.talent.v4beta1.IJob> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listJobs.asyncIterate(
      this.innerApiCalls['listJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.talent.v4beta1.IJob>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectCompany resource name string.
   *
   * @param {string} project
   * @param {string} company
   * @returns {string} Resource name string.
   */
  projectCompanyPath(project: string, company: string) {
    return this.pathTemplates.projectCompanyPathTemplate.render({
      project: project,
      company: company,
    });
  }

  /**
   * Parse the project from ProjectCompany resource.
   *
   * @param {string} projectCompanyName
   *   A fully-qualified path representing project_company resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectCompanyName(projectCompanyName: string) {
    return this.pathTemplates.projectCompanyPathTemplate.match(
      projectCompanyName
    ).project;
  }

  /**
   * Parse the company from ProjectCompany resource.
   *
   * @param {string} projectCompanyName
   *   A fully-qualified path representing project_company resource.
   * @returns {string} A string representing the company.
   */
  matchCompanyFromProjectCompanyName(projectCompanyName: string) {
    return this.pathTemplates.projectCompanyPathTemplate.match(
      projectCompanyName
    ).company;
  }

  /**
   * Return a fully-qualified projectJob resource name string.
   *
   * @param {string} project
   * @param {string} job
   * @returns {string} Resource name string.
   */
  projectJobPath(project: string, job: string) {
    return this.pathTemplates.projectJobPathTemplate.render({
      project: project,
      job: job,
    });
  }

  /**
   * Parse the project from ProjectJob resource.
   *
   * @param {string} projectJobName
   *   A fully-qualified path representing project_job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectJobName(projectJobName: string) {
    return this.pathTemplates.projectJobPathTemplate.match(projectJobName)
      .project;
  }

  /**
   * Parse the job from ProjectJob resource.
   *
   * @param {string} projectJobName
   *   A fully-qualified path representing project_job resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromProjectJobName(projectJobName: string) {
    return this.pathTemplates.projectJobPathTemplate.match(projectJobName).job;
  }

  /**
   * Return a fully-qualified projectTenantCompany resource name string.
   *
   * @param {string} project
   * @param {string} tenant
   * @param {string} company
   * @returns {string} Resource name string.
   */
  projectTenantCompanyPath(project: string, tenant: string, company: string) {
    return this.pathTemplates.projectTenantCompanyPathTemplate.render({
      project: project,
      tenant: tenant,
      company: company,
    });
  }

  /**
   * Parse the project from ProjectTenantCompany resource.
   *
   * @param {string} projectTenantCompanyName
   *   A fully-qualified path representing project_tenant_company resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectTenantCompanyName(projectTenantCompanyName: string) {
    return this.pathTemplates.projectTenantCompanyPathTemplate.match(
      projectTenantCompanyName
    ).project;
  }

  /**
   * Parse the tenant from ProjectTenantCompany resource.
   *
   * @param {string} projectTenantCompanyName
   *   A fully-qualified path representing project_tenant_company resource.
   * @returns {string} A string representing the tenant.
   */
  matchTenantFromProjectTenantCompanyName(projectTenantCompanyName: string) {
    return this.pathTemplates.projectTenantCompanyPathTemplate.match(
      projectTenantCompanyName
    ).tenant;
  }

  /**
   * Parse the company from ProjectTenantCompany resource.
   *
   * @param {string} projectTenantCompanyName
   *   A fully-qualified path representing project_tenant_company resource.
   * @returns {string} A string representing the company.
   */
  matchCompanyFromProjectTenantCompanyName(projectTenantCompanyName: string) {
    return this.pathTemplates.projectTenantCompanyPathTemplate.match(
      projectTenantCompanyName
    ).company;
  }

  /**
   * Return a fully-qualified projectTenantJob resource name string.
   *
   * @param {string} project
   * @param {string} tenant
   * @param {string} job
   * @returns {string} Resource name string.
   */
  projectTenantJobPath(project: string, tenant: string, job: string) {
    return this.pathTemplates.projectTenantJobPathTemplate.render({
      project: project,
      tenant: tenant,
      job: job,
    });
  }

  /**
   * Parse the project from ProjectTenantJob resource.
   *
   * @param {string} projectTenantJobName
   *   A fully-qualified path representing project_tenant_job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectTenantJobName(projectTenantJobName: string) {
    return this.pathTemplates.projectTenantJobPathTemplate.match(
      projectTenantJobName
    ).project;
  }

  /**
   * Parse the tenant from ProjectTenantJob resource.
   *
   * @param {string} projectTenantJobName
   *   A fully-qualified path representing project_tenant_job resource.
   * @returns {string} A string representing the tenant.
   */
  matchTenantFromProjectTenantJobName(projectTenantJobName: string) {
    return this.pathTemplates.projectTenantJobPathTemplate.match(
      projectTenantJobName
    ).tenant;
  }

  /**
   * Parse the job from ProjectTenantJob resource.
   *
   * @param {string} projectTenantJobName
   *   A fully-qualified path representing project_tenant_job resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromProjectTenantJobName(projectTenantJobName: string) {
    return this.pathTemplates.projectTenantJobPathTemplate.match(
      projectTenantJobName
    ).job;
  }

  /**
   * Return a fully-qualified tenant resource name string.
   *
   * @param {string} project
   * @param {string} tenant
   * @returns {string} Resource name string.
   */
  tenantPath(project: string, tenant: string) {
    return this.pathTemplates.tenantPathTemplate.render({
      project: project,
      tenant: tenant,
    });
  }

  /**
   * Parse the project from Tenant resource.
   *
   * @param {string} tenantName
   *   A fully-qualified path representing Tenant resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTenantName(tenantName: string) {
    return this.pathTemplates.tenantPathTemplate.match(tenantName).project;
  }

  /**
   * Parse the tenant from Tenant resource.
   *
   * @param {string} tenantName
   *   A fully-qualified path representing Tenant resource.
   * @returns {string} A string representing the tenant.
   */
  matchTenantFromTenantName(tenantName: string) {
    return this.pathTemplates.tenantPathTemplate.match(tenantName).tenant;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.jobServiceStub && !this._terminated) {
      return this.jobServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
