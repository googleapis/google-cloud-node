// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as crossnetworkautomationserviceModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.CrossNetworkAutomationServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'networkconnectivity.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          crossnetworkautomationserviceModule.v1
            .CrossNetworkAutomationServiceClient.servicePath;
        assert.strictEqual(servicePath, 'networkconnectivity.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          crossnetworkautomationserviceModule.v1
            .CrossNetworkAutomationServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'networkconnectivity.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {universeDomain: 'example.com'}
        );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'networkconnectivity.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {universe_domain: 'example.com'}
        );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'networkconnectivity.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'networkconnectivity.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
              {universeDomain: 'configured.example.com'}
            );
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'networkconnectivity.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {universe_domain: 'example.com', universeDomain: 'example.net'}
        );
      });
    });

    it('has port', () => {
      const port =
        crossnetworkautomationserviceModule.v1
          .CrossNetworkAutomationServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            fallback: true,
          }
        );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.crossNetworkAutomationServiceStub, undefined);
      await client.initialize();
      assert(client.crossNetworkAutomationServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize().catch(err => {
        throw err;
      });
      assert(client.crossNetworkAutomationServiceStub);
      client
        .close()
        .then(() => {
          done();
        })
        .catch(err => {
          throw err;
        });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.crossNetworkAutomationServiceStub, undefined);
      client
        .close()
        .then(() => {
          done();
        })
        .catch(err => {
          throw err;
        });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getServiceConnectionMap', () => {
    it('invokes getServiceConnectionMap without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
      );
      client.innerApiCalls.getServiceConnectionMap =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getServiceConnectionMap(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionMap without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
      );
      client.innerApiCalls.getServiceConnectionMap =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getServiceConnectionMap(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.networkconnectivity.v1.IServiceConnectionMap | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionMap with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getServiceConnectionMap = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getServiceConnectionMap(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionMap with closed client', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close().catch(err => {
        throw err;
      });
      await assert.rejects(
        client.getServiceConnectionMap(request),
        expectedError
      );
    });
  });

  describe('getServiceConnectionPolicy', () => {
    it('invokes getServiceConnectionPolicy without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
      );
      client.innerApiCalls.getServiceConnectionPolicy =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getServiceConnectionPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionPolicy without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
      );
      client.innerApiCalls.getServiceConnectionPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getServiceConnectionPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.networkconnectivity.v1.IServiceConnectionPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionPolicy with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getServiceConnectionPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getServiceConnectionPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionPolicy with closed client', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close().catch(err => {
        throw err;
      });
      await assert.rejects(
        client.getServiceConnectionPolicy(request),
        expectedError
      );
    });
  });

  describe('getServiceClass', () => {
    it('invokes getServiceClass without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceClassRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceClassRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ServiceClass()
      );
      client.innerApiCalls.getServiceClass = stubSimpleCall(expectedResponse);
      const [response] = await client.getServiceClass(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceClass without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceClassRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceClassRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ServiceClass()
      );
      client.innerApiCalls.getServiceClass =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getServiceClass(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.networkconnectivity.v1.IServiceClass | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceClass with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceClassRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceClassRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getServiceClass = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getServiceClass(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceClass with closed client', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceClassRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceClassRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close().catch(err => {
        throw err;
      });
      await assert.rejects(client.getServiceClass(request), expectedError);
    });
  });

  describe('getServiceConnectionToken', () => {
    it('invokes getServiceConnectionToken without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
      );
      client.innerApiCalls.getServiceConnectionToken =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getServiceConnectionToken(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionToken without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
      );
      client.innerApiCalls.getServiceConnectionToken =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getServiceConnectionToken(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.networkconnectivity.v1.IServiceConnectionToken | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionToken with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getServiceConnectionToken = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getServiceConnectionToken(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceConnectionToken with closed client', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close().catch(err => {
        throw err;
      });
      await assert.rejects(
        client.getServiceConnectionToken(request),
        expectedError
      );
    });
  });

  describe('createServiceConnectionMap', () => {
    it('invokes createServiceConnectionMap without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServiceConnectionMap =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createServiceConnectionMap(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionMap without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServiceConnectionMap =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createServiceConnectionMap(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networkconnectivity.v1.IServiceConnectionMap,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networkconnectivity.v1.IServiceConnectionMap,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionMap with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServiceConnectionMap = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createServiceConnectionMap(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionMap with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServiceConnectionMap = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createServiceConnectionMap(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateServiceConnectionMapProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateServiceConnectionMapProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateServiceConnectionMapProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateServiceConnectionMapProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateServiceConnectionMap', () => {
    it('invokes updateServiceConnectionMap without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest()
      );
      request.serviceConnectionMap ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest',
        ['serviceConnectionMap', 'name']
      );
      request.serviceConnectionMap.name = defaultValue1;
      const expectedHeaderRequestParams = `service_connection_map.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateServiceConnectionMap =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateServiceConnectionMap(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceConnectionMap without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest()
      );
      request.serviceConnectionMap ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest',
        ['serviceConnectionMap', 'name']
      );
      request.serviceConnectionMap.name = defaultValue1;
      const expectedHeaderRequestParams = `service_connection_map.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateServiceConnectionMap =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateServiceConnectionMap(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networkconnectivity.v1.IServiceConnectionMap,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networkconnectivity.v1.IServiceConnectionMap,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceConnectionMap with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest()
      );
      request.serviceConnectionMap ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest',
        ['serviceConnectionMap', 'name']
      );
      request.serviceConnectionMap.name = defaultValue1;
      const expectedHeaderRequestParams = `service_connection_map.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateServiceConnectionMap = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateServiceConnectionMap(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceConnectionMap with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest()
      );
      request.serviceConnectionMap ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest',
        ['serviceConnectionMap', 'name']
      );
      request.serviceConnectionMap.name = defaultValue1;
      const expectedHeaderRequestParams = `service_connection_map.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateServiceConnectionMap = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateServiceConnectionMap(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateServiceConnectionMapProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateServiceConnectionMapProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateServiceConnectionMapProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateServiceConnectionMapProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteServiceConnectionMap', () => {
    it('invokes deleteServiceConnectionMap without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceConnectionMap =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteServiceConnectionMap(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionMap without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceConnectionMap =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteServiceConnectionMap(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionMap with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceConnectionMap = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteServiceConnectionMap(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionMap with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceConnectionMap = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteServiceConnectionMap(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionMap as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionMap as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteServiceConnectionMapProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteServiceConnectionMapProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteServiceConnectionMapProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteServiceConnectionMapProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createServiceConnectionPolicy', () => {
    it('invokes createServiceConnectionPolicy without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServiceConnectionPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createServiceConnectionPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionPolicy without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServiceConnectionPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createServiceConnectionPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networkconnectivity.v1.IServiceConnectionPolicy,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networkconnectivity.v1.IServiceConnectionPolicy,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionPolicy with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServiceConnectionPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createServiceConnectionPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionPolicy with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServiceConnectionPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createServiceConnectionPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateServiceConnectionPolicyProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateServiceConnectionPolicyProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateServiceConnectionPolicyProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateServiceConnectionPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateServiceConnectionPolicy', () => {
    it('invokes updateServiceConnectionPolicy without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest()
      );
      request.serviceConnectionPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest',
        ['serviceConnectionPolicy', 'name']
      );
      request.serviceConnectionPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `service_connection_policy.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateServiceConnectionPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateServiceConnectionPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceConnectionPolicy without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest()
      );
      request.serviceConnectionPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest',
        ['serviceConnectionPolicy', 'name']
      );
      request.serviceConnectionPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `service_connection_policy.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateServiceConnectionPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateServiceConnectionPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networkconnectivity.v1.IServiceConnectionPolicy,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networkconnectivity.v1.IServiceConnectionPolicy,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceConnectionPolicy with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest()
      );
      request.serviceConnectionPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest',
        ['serviceConnectionPolicy', 'name']
      );
      request.serviceConnectionPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `service_connection_policy.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateServiceConnectionPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateServiceConnectionPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceConnectionPolicy with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest()
      );
      request.serviceConnectionPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest',
        ['serviceConnectionPolicy', 'name']
      );
      request.serviceConnectionPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `service_connection_policy.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateServiceConnectionPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateServiceConnectionPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateServiceConnectionPolicyProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateServiceConnectionPolicyProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateServiceConnectionPolicyProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateServiceConnectionPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteServiceConnectionPolicy', () => {
    it('invokes deleteServiceConnectionPolicy without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceConnectionPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteServiceConnectionPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionPolicy without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceConnectionPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteServiceConnectionPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionPolicy with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceConnectionPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteServiceConnectionPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionPolicy with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceConnectionPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteServiceConnectionPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteServiceConnectionPolicyProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteServiceConnectionPolicyProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteServiceConnectionPolicyProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteServiceConnectionPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateServiceClass', () => {
    it('invokes updateServiceClass without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceClassRequest()
      );
      request.serviceClass ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceClassRequest',
        ['serviceClass', 'name']
      );
      request.serviceClass.name = defaultValue1;
      const expectedHeaderRequestParams = `service_class.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateServiceClass =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateServiceClass(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceClass without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceClassRequest()
      );
      request.serviceClass ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceClassRequest',
        ['serviceClass', 'name']
      );
      request.serviceClass.name = defaultValue1;
      const expectedHeaderRequestParams = `service_class.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateServiceClass =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateServiceClass(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networkconnectivity.v1.IServiceClass,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networkconnectivity.v1.IServiceClass,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceClass with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceClassRequest()
      );
      request.serviceClass ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceClassRequest',
        ['serviceClass', 'name']
      );
      request.serviceClass.name = defaultValue1;
      const expectedHeaderRequestParams = `service_class.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateServiceClass = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateServiceClass(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServiceClass with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.UpdateServiceClassRequest()
      );
      request.serviceClass ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.UpdateServiceClassRequest',
        ['serviceClass', 'name']
      );
      request.serviceClass.name = defaultValue1;
      const expectedHeaderRequestParams = `service_class.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateServiceClass = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateServiceClass(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateServiceClassProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateServiceClassProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateServiceClassProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateServiceClassProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteServiceClass', () => {
    it('invokes deleteServiceClass without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceClassRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceClassRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceClass =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteServiceClass(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceClass without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceClassRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceClassRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceClass =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteServiceClass(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceClass with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceClassRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceClassRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceClass = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteServiceClass(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceClass with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceClassRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceClassRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceClass = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteServiceClass(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteServiceClass as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceClass as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteServiceClassProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteServiceClassProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteServiceClassProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteServiceClassProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createServiceConnectionToken', () => {
    it('invokes createServiceConnectionToken without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServiceConnectionToken =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createServiceConnectionToken(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionToken without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServiceConnectionToken =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createServiceConnectionToken(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networkconnectivity.v1.IServiceConnectionToken,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networkconnectivity.v1.IServiceConnectionToken,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionToken with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServiceConnectionToken = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createServiceConnectionToken(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceConnectionToken with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServiceConnectionToken = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createServiceConnectionToken(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateServiceConnectionTokenProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateServiceConnectionTokenProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateServiceConnectionTokenProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateServiceConnectionTokenProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteServiceConnectionToken', () => {
    it('invokes deleteServiceConnectionToken without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceConnectionToken =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteServiceConnectionToken(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionToken without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceConnectionToken =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteServiceConnectionToken(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.networkconnectivity.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkconnectivity.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionToken with call error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceConnectionToken = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteServiceConnectionToken(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceConnectionToken with LRO error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceConnectionToken = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteServiceConnectionToken(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteServiceConnectionToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceConnectionToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteServiceConnectionTokenProgress without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteServiceConnectionTokenProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteServiceConnectionTokenProgress with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteServiceConnectionTokenProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listServiceConnectionMaps', () => {
    it('invokes listServiceConnectionMaps without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
      ];
      client.innerApiCalls.listServiceConnectionMaps =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listServiceConnectionMaps(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionMaps as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionMaps as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionMaps without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
      ];
      client.innerApiCalls.listServiceConnectionMaps =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listServiceConnectionMaps(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.networkconnectivity.v1.IServiceConnectionMap[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionMaps as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionMaps as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionMaps with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listServiceConnectionMaps = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listServiceConnectionMaps(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionMaps as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionMaps as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionMapsStream without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
      ];
      client.descriptors.page.listServiceConnectionMaps.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listServiceConnectionMapsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listServiceConnectionMaps
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listServiceConnectionMaps, request)
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionMaps
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listServiceConnectionMapsStream with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceConnectionMaps.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listServiceConnectionMapsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listServiceConnectionMaps
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listServiceConnectionMaps, request)
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionMaps
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServiceConnectionMaps without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionMap()
        ),
      ];
      client.descriptors.page.listServiceConnectionMaps.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.networkconnectivity.v1.IServiceConnectionMap[] =
        [];
      const iterable = client.listServiceConnectionMapsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceConnectionMaps
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionMaps
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServiceConnectionMaps with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceConnectionMaps.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listServiceConnectionMapsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.networkconnectivity.v1.IServiceConnectionMap[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceConnectionMaps
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionMaps
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listServiceConnectionPolicies', () => {
    it('invokes listServiceConnectionPolicies without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
      ];
      client.innerApiCalls.listServiceConnectionPolicies =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listServiceConnectionPolicies(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionPolicies without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
      ];
      client.innerApiCalls.listServiceConnectionPolicies =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listServiceConnectionPolicies(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.networkconnectivity.v1.IServiceConnectionPolicy[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionPolicies with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listServiceConnectionPolicies = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listServiceConnectionPolicies(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionPoliciesStream without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
      ];
      client.descriptors.page.listServiceConnectionPolicies.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listServiceConnectionPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listServiceConnectionPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listServiceConnectionPolicies,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listServiceConnectionPoliciesStream with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceConnectionPolicies.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listServiceConnectionPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listServiceConnectionPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listServiceConnectionPolicies,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServiceConnectionPolicies without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionPolicy()
        ),
      ];
      client.descriptors.page.listServiceConnectionPolicies.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.networkconnectivity.v1.IServiceConnectionPolicy[] =
        [];
      const iterable = client.listServiceConnectionPoliciesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceConnectionPolicies
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionPolicies
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServiceConnectionPolicies with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceConnectionPolicies.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listServiceConnectionPoliciesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.networkconnectivity.v1.IServiceConnectionPolicy[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceConnectionPolicies
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionPolicies
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listServiceClasses', () => {
    it('invokes listServiceClasses without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceClassesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceClassesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
      ];
      client.innerApiCalls.listServiceClasses =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listServiceClasses(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceClasses as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceClasses as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceClasses without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceClassesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceClassesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
      ];
      client.innerApiCalls.listServiceClasses =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listServiceClasses(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.networkconnectivity.v1.IServiceClass[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceClasses as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceClasses as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceClasses with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceClassesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceClassesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listServiceClasses = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listServiceClasses(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listServiceClasses as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceClasses as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceClassesStream without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceClassesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceClassesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
      ];
      client.descriptors.page.listServiceClasses.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listServiceClassesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networkconnectivity.v1.ServiceClass[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networkconnectivity.v1.ServiceClass
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listServiceClasses.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listServiceClasses, request)
      );
      assert(
        (client.descriptors.page.listServiceClasses.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listServiceClassesStream with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceClassesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceClassesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceClasses.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listServiceClassesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networkconnectivity.v1.ServiceClass[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networkconnectivity.v1.ServiceClass
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listServiceClasses.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listServiceClasses, request)
      );
      assert(
        (client.descriptors.page.listServiceClasses.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listServiceClasses without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceClassesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceClassesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceClass()
        ),
      ];
      client.descriptors.page.listServiceClasses.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.networkconnectivity.v1.IServiceClass[] =
        [];
      const iterable = client.listServiceClassesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceClasses.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listServiceClasses.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listServiceClasses with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceClassesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceClassesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceClasses.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listServiceClassesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.networkconnectivity.v1.IServiceClass[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceClasses.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listServiceClasses.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listServiceConnectionTokens', () => {
    it('invokes listServiceConnectionTokens without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
      ];
      client.innerApiCalls.listServiceConnectionTokens =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listServiceConnectionTokens(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionTokens as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionTokens as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionTokens without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
      ];
      client.innerApiCalls.listServiceConnectionTokens =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listServiceConnectionTokens(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.networkconnectivity.v1.IServiceConnectionToken[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionTokens as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionTokens as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionTokens with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listServiceConnectionTokens = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listServiceConnectionTokens(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listServiceConnectionTokens as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceConnectionTokens as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceConnectionTokensStream without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
      ];
      client.descriptors.page.listServiceConnectionTokens.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listServiceConnectionTokensStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listServiceConnectionTokens
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listServiceConnectionTokens, request)
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionTokens
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listServiceConnectionTokensStream with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceConnectionTokens.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listServiceConnectionTokensStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listServiceConnectionTokens
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listServiceConnectionTokens, request)
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionTokens
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServiceConnectionTokens without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
        generateSampleMessage(
          new protos.google.cloud.networkconnectivity.v1.ServiceConnectionToken()
        ),
      ];
      client.descriptors.page.listServiceConnectionTokens.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.networkconnectivity.v1.IServiceConnectionToken[] =
        [];
      const iterable = client.listServiceConnectionTokensAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceConnectionTokens
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionTokens
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServiceConnectionTokens with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceConnectionTokens.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listServiceConnectionTokensAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.networkconnectivity.v1.IServiceConnectionToken[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceConnectionTokens
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServiceConnectionTokens
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client
          .getIamPolicy(
            request,
            expectedOptions,
            (
              err?: Error | null,
              result?: IamProtos.google.iam.v1.Policy | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client
          .setIamPolicy(
            request,
            expectedOptions,
            (
              err?: Error | null,
              result?: IamProtos.google.iam.v1.Policy | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client
          .testIamPermissions(
            request,
            expectedOptions,
            (
              err?: Error | null,
              result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient
          .getOperation(
            request,
            undefined,
            (
              err?: Error | null,
              result?: operationsProtos.google.longrunning.Operation | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient
          .cancelOperation(
            request,
            undefined,
            (
              err?: Error | null,
              result?: protos.google.protobuf.Empty | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient
          .deleteOperation(
            request,
            undefined,
            (
              err?: Error | null,
              result?: protos.google.protobuf.Empty | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.IOperation[] = [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.IOperation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('group', async () => {
      const fakePath = '/rendered/path/group';
      const expectedParameters = {
        project: 'projectValue',
        hub: 'hubValue',
        group: 'groupValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.groupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.groupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('groupPath', () => {
        const result = client.groupPath(
          'projectValue',
          'hubValue',
          'groupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.groupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGroupName', () => {
        const result = client.matchProjectFromGroupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.groupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHubFromGroupName', () => {
        const result = client.matchHubFromGroupName(fakePath);
        assert.strictEqual(result, 'hubValue');
        assert(
          (client.pathTemplates.groupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGroupFromGroupName', () => {
        const result = client.matchGroupFromGroupName(fakePath);
        assert.strictEqual(result, 'groupValue');
        assert(
          (client.pathTemplates.groupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('hub', async () => {
      const fakePath = '/rendered/path/hub';
      const expectedParameters = {
        project: 'projectValue',
        hub: 'hubValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.hubPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.hubPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('hubPath', () => {
        const result = client.hubPath('projectValue', 'hubValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.hubPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromHubName', () => {
        const result = client.matchProjectFromHubName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.hubPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHubFromHubName', () => {
        const result = client.matchHubFromHubName(fakePath);
        assert.strictEqual(result, 'hubValue');
        assert(
          (client.pathTemplates.hubPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('hubRoute', async () => {
      const fakePath = '/rendered/path/hubRoute';
      const expectedParameters = {
        project: 'projectValue',
        hub: 'hubValue',
        route_table: 'routeTableValue',
        route: 'routeValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.hubRoutePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.hubRoutePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('hubRoutePath', () => {
        const result = client.hubRoutePath(
          'projectValue',
          'hubValue',
          'routeTableValue',
          'routeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.hubRoutePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromHubRouteName', () => {
        const result = client.matchProjectFromHubRouteName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.hubRoutePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHubFromHubRouteName', () => {
        const result = client.matchHubFromHubRouteName(fakePath);
        assert.strictEqual(result, 'hubValue');
        assert(
          (client.pathTemplates.hubRoutePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRouteTableFromHubRouteName', () => {
        const result = client.matchRouteTableFromHubRouteName(fakePath);
        assert.strictEqual(result, 'routeTableValue');
        assert(
          (client.pathTemplates.hubRoutePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRouteFromHubRouteName', () => {
        const result = client.matchRouteFromHubRouteName(fakePath);
        assert.strictEqual(result, 'routeValue');
        assert(
          (client.pathTemplates.hubRoutePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', async () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('network', async () => {
      const fakePath = '/rendered/path/network';
      const expectedParameters = {
        project: 'projectValue',
        resource_id: 'resourceIdValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.networkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.networkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('networkPath', () => {
        const result = client.networkPath('projectValue', 'resourceIdValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.networkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromNetworkName', () => {
        const result = client.matchProjectFromNetworkName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchResourceIdFromNetworkName', () => {
        const result = client.matchResourceIdFromNetworkName(fakePath);
        assert.strictEqual(result, 'resourceIdValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('policyBasedRoute', async () => {
      const fakePath = '/rendered/path/policyBasedRoute';
      const expectedParameters = {
        project: 'projectValue',
        policy_based_route: 'policyBasedRouteValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.policyBasedRoutePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.policyBasedRoutePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('policyBasedRoutePath', () => {
        const result = client.policyBasedRoutePath(
          'projectValue',
          'policyBasedRouteValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.policyBasedRoutePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPolicyBasedRouteName', () => {
        const result = client.matchProjectFromPolicyBasedRouteName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.policyBasedRoutePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPolicyBasedRouteFromPolicyBasedRouteName', () => {
        const result =
          client.matchPolicyBasedRouteFromPolicyBasedRouteName(fakePath);
        assert.strictEqual(result, 'policyBasedRouteValue');
        assert(
          (client.pathTemplates.policyBasedRoutePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', async () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('routeTable', async () => {
      const fakePath = '/rendered/path/routeTable';
      const expectedParameters = {
        project: 'projectValue',
        hub: 'hubValue',
        route_table: 'routeTableValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.routeTablePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.routeTablePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('routeTablePath', () => {
        const result = client.routeTablePath(
          'projectValue',
          'hubValue',
          'routeTableValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.routeTablePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRouteTableName', () => {
        const result = client.matchProjectFromRouteTableName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.routeTablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHubFromRouteTableName', () => {
        const result = client.matchHubFromRouteTableName(fakePath);
        assert.strictEqual(result, 'hubValue');
        assert(
          (client.pathTemplates.routeTablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRouteTableFromRouteTableName', () => {
        const result = client.matchRouteTableFromRouteTableName(fakePath);
        assert.strictEqual(result, 'routeTableValue');
        assert(
          (client.pathTemplates.routeTablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('serviceClass', async () => {
      const fakePath = '/rendered/path/serviceClass';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service_class: 'serviceClassValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.serviceClassPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.serviceClassPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('serviceClassPath', () => {
        const result = client.serviceClassPath(
          'projectValue',
          'locationValue',
          'serviceClassValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.serviceClassPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServiceClassName', () => {
        const result = client.matchProjectFromServiceClassName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.serviceClassPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServiceClassName', () => {
        const result = client.matchLocationFromServiceClassName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.serviceClassPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceClassFromServiceClassName', () => {
        const result = client.matchServiceClassFromServiceClassName(fakePath);
        assert.strictEqual(result, 'serviceClassValue');
        assert(
          (client.pathTemplates.serviceClassPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('serviceConnectionMap', async () => {
      const fakePath = '/rendered/path/serviceConnectionMap';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service_connection_map: 'serviceConnectionMapValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.serviceConnectionMapPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.serviceConnectionMapPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('serviceConnectionMapPath', () => {
        const result = client.serviceConnectionMapPath(
          'projectValue',
          'locationValue',
          'serviceConnectionMapValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.serviceConnectionMapPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServiceConnectionMapName', () => {
        const result =
          client.matchProjectFromServiceConnectionMapName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.serviceConnectionMapPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServiceConnectionMapName', () => {
        const result =
          client.matchLocationFromServiceConnectionMapName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.serviceConnectionMapPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceConnectionMapFromServiceConnectionMapName', () => {
        const result =
          client.matchServiceConnectionMapFromServiceConnectionMapName(
            fakePath
          );
        assert.strictEqual(result, 'serviceConnectionMapValue');
        assert(
          (
            client.pathTemplates.serviceConnectionMapPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('serviceConnectionPolicy', async () => {
      const fakePath = '/rendered/path/serviceConnectionPolicy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service_connection_policy: 'serviceConnectionPolicyValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.serviceConnectionPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.serviceConnectionPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('serviceConnectionPolicyPath', () => {
        const result = client.serviceConnectionPolicyPath(
          'projectValue',
          'locationValue',
          'serviceConnectionPolicyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.serviceConnectionPolicyPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServiceConnectionPolicyName', () => {
        const result =
          client.matchProjectFromServiceConnectionPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.serviceConnectionPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServiceConnectionPolicyName', () => {
        const result =
          client.matchLocationFromServiceConnectionPolicyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.serviceConnectionPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceConnectionPolicyFromServiceConnectionPolicyName', () => {
        const result =
          client.matchServiceConnectionPolicyFromServiceConnectionPolicyName(
            fakePath
          );
        assert.strictEqual(result, 'serviceConnectionPolicyValue');
        assert(
          (
            client.pathTemplates.serviceConnectionPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('serviceConnectionToken', async () => {
      const fakePath = '/rendered/path/serviceConnectionToken';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service_connection_token: 'serviceConnectionTokenValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.serviceConnectionTokenPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.serviceConnectionTokenPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('serviceConnectionTokenPath', () => {
        const result = client.serviceConnectionTokenPath(
          'projectValue',
          'locationValue',
          'serviceConnectionTokenValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.serviceConnectionTokenPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServiceConnectionTokenName', () => {
        const result =
          client.matchProjectFromServiceConnectionTokenName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.serviceConnectionTokenPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServiceConnectionTokenName', () => {
        const result =
          client.matchLocationFromServiceConnectionTokenName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.serviceConnectionTokenPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceConnectionTokenFromServiceConnectionTokenName', () => {
        const result =
          client.matchServiceConnectionTokenFromServiceConnectionTokenName(
            fakePath
          );
        assert.strictEqual(result, 'serviceConnectionTokenValue');
        assert(
          (
            client.pathTemplates.serviceConnectionTokenPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('spoke', async () => {
      const fakePath = '/rendered/path/spoke';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        spoke: 'spokeValue',
      };
      const client =
        new crossnetworkautomationserviceModule.v1.CrossNetworkAutomationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      await client.initialize();
      client.pathTemplates.spokePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.spokePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('spokePath', () => {
        const result = client.spokePath(
          'projectValue',
          'locationValue',
          'spokeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.spokePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSpokeName', () => {
        const result = client.matchProjectFromSpokeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.spokePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSpokeName', () => {
        const result = client.matchLocationFromSpokeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.spokePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSpokeFromSpokeName', () => {
        const result = client.matchSpokeFromSpokeName(fakePath);
        assert.strictEqual(result, 'spokeValue');
        assert(
          (client.pathTemplates.spokePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
