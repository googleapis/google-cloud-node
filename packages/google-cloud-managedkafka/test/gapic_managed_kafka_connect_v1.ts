// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as managedkafkaconnectModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.ManagedKafkaConnectClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new managedkafkaconnectModule.v1.ManagedKafkaConnectClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'managedkafka.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new managedkafkaconnectModule.v1.ManagedKafkaConnectClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          managedkafkaconnectModule.v1.ManagedKafkaConnectClient.servicePath;
        assert.strictEqual(servicePath, 'managedkafka.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          managedkafkaconnectModule.v1.ManagedKafkaConnectClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'managedkafka.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {universeDomain: 'example.com'}
      );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'managedkafka.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {universe_domain: 'example.com'}
      );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'managedkafka.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new managedkafkaconnectModule.v1.ManagedKafkaConnectClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'managedkafka.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new managedkafkaconnectModule.v1.ManagedKafkaConnectClient({
              universeDomain: 'configured.example.com',
            });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'managedkafka.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new managedkafkaconnectModule.v1.ManagedKafkaConnectClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = managedkafkaconnectModule.v1.ManagedKafkaConnectClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new managedkafkaconnectModule.v1.ManagedKafkaConnectClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          fallback: true,
        }
      );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.managedKafkaConnectStub, undefined);
      await client.initialize();
      assert(client.managedKafkaConnectStub);
    });

    it('has close method for the initialized client', done => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      assert(client.managedKafkaConnectStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.managedKafkaConnectStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getConnectCluster', () => {
    it('invokes getConnectCluster without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.GetConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.GetConnectClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ConnectCluster()
      );
      client.innerApiCalls.getConnectCluster = stubSimpleCall(expectedResponse);
      const [response] = await client.getConnectCluster(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectCluster without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.GetConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.GetConnectClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ConnectCluster()
      );
      client.innerApiCalls.getConnectCluster =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConnectCluster(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IConnectCluster | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectCluster with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.GetConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.GetConnectClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConnectCluster = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConnectCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectCluster with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.GetConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.GetConnectClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConnectCluster(request), expectedError);
    });
  });

  describe('getConnector', () => {
    it('invokes getConnector without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.GetConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.GetConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.Connector()
      );
      client.innerApiCalls.getConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.getConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnector without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.GetConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.GetConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.Connector()
      );
      client.innerApiCalls.getConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IConnector | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnector with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.GetConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.GetConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnector with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.GetConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.GetConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConnector(request), expectedError);
    });
  });

  describe('createConnector', () => {
    it('invokes createConnector without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.CreateConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.CreateConnectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.Connector()
      );
      client.innerApiCalls.createConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.createConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnector without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.CreateConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.CreateConnectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.Connector()
      );
      client.innerApiCalls.createConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IConnector | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnector with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.CreateConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.CreateConnectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnector with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.CreateConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.CreateConnectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createConnector(request), expectedError);
    });
  });

  describe('updateConnector', () => {
    it('invokes updateConnector without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.UpdateConnectorRequest()
      );
      request.connector ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.UpdateConnectorRequest',
        ['connector', 'name']
      );
      request.connector.name = defaultValue1;
      const expectedHeaderRequestParams = `connector.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.Connector()
      );
      client.innerApiCalls.updateConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.updateConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnector without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.UpdateConnectorRequest()
      );
      request.connector ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.UpdateConnectorRequest',
        ['connector', 'name']
      );
      request.connector.name = defaultValue1;
      const expectedHeaderRequestParams = `connector.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.Connector()
      );
      client.innerApiCalls.updateConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IConnector | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnector with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.UpdateConnectorRequest()
      );
      request.connector ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.UpdateConnectorRequest',
        ['connector', 'name']
      );
      request.connector.name = defaultValue1;
      const expectedHeaderRequestParams = `connector.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnector with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.UpdateConnectorRequest()
      );
      request.connector ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.UpdateConnectorRequest',
        ['connector', 'name']
      );
      request.connector.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateConnector(request), expectedError);
    });
  });

  describe('deleteConnector', () => {
    it('invokes deleteConnector without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.DeleteConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.DeleteConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnector without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.DeleteConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.DeleteConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnector with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.DeleteConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.DeleteConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnector with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.DeleteConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.DeleteConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteConnector(request), expectedError);
    });
  });

  describe('pauseConnector', () => {
    it('invokes pauseConnector without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.PauseConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.PauseConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.PauseConnectorResponse()
      );
      client.innerApiCalls.pauseConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.pauseConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.pauseConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseConnector without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.PauseConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.PauseConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.PauseConnectorResponse()
      );
      client.innerApiCalls.pauseConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.pauseConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IPauseConnectorResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.pauseConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseConnector with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.PauseConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.PauseConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.pauseConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.pauseConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.pauseConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseConnector with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.PauseConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.PauseConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.pauseConnector(request), expectedError);
    });
  });

  describe('resumeConnector', () => {
    it('invokes resumeConnector without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ResumeConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ResumeConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ResumeConnectorResponse()
      );
      client.innerApiCalls.resumeConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.resumeConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeConnector without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ResumeConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ResumeConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ResumeConnectorResponse()
      );
      client.innerApiCalls.resumeConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resumeConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IResumeConnectorResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeConnector with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ResumeConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ResumeConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resumeConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeConnector with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ResumeConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ResumeConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.resumeConnector(request), expectedError);
    });
  });

  describe('restartConnector', () => {
    it('invokes restartConnector without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.RestartConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.RestartConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.RestartConnectorResponse()
      );
      client.innerApiCalls.restartConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.restartConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restartConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restartConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restartConnector without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.RestartConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.RestartConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.RestartConnectorResponse()
      );
      client.innerApiCalls.restartConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.restartConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IRestartConnectorResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restartConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restartConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restartConnector with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.RestartConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.RestartConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restartConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.restartConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.restartConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restartConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restartConnector with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.RestartConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.RestartConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.restartConnector(request), expectedError);
    });
  });

  describe('stopConnector', () => {
    it('invokes stopConnector without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.StopConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.StopConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.StopConnectorResponse()
      );
      client.innerApiCalls.stopConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.stopConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopConnector without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.StopConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.StopConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.StopConnectorResponse()
      );
      client.innerApiCalls.stopConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.stopConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IStopConnectorResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopConnector with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.StopConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.StopConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.stopConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopConnector with closed client', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.StopConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.StopConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.stopConnector(request), expectedError);
    });
  });

  describe('createConnectCluster', () => {
    it('invokes createConnectCluster without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.CreateConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.CreateConnectClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createConnectCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createConnectCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectCluster without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.CreateConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.CreateConnectClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createConnectCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createConnectCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.managedkafka.v1.IConnectCluster,
              protos.google.cloud.managedkafka.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.managedkafka.v1.IConnectCluster,
        protos.google.cloud.managedkafka.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectCluster with call error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.CreateConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.CreateConnectClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnectCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createConnectCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectCluster with LRO error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.CreateConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.CreateConnectClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnectCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createConnectCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateConnectClusterProgress without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateConnectClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateConnectClusterProgress with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateConnectClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateConnectCluster', () => {
    it('invokes updateConnectCluster without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.UpdateConnectClusterRequest()
      );
      request.connectCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.UpdateConnectClusterRequest',
        ['connectCluster', 'name']
      );
      request.connectCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `connect_cluster.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateConnectCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateConnectCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectCluster without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.UpdateConnectClusterRequest()
      );
      request.connectCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.UpdateConnectClusterRequest',
        ['connectCluster', 'name']
      );
      request.connectCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `connect_cluster.name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateConnectCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateConnectCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.managedkafka.v1.IConnectCluster,
              protos.google.cloud.managedkafka.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.managedkafka.v1.IConnectCluster,
        protos.google.cloud.managedkafka.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectCluster with call error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.UpdateConnectClusterRequest()
      );
      request.connectCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.UpdateConnectClusterRequest',
        ['connectCluster', 'name']
      );
      request.connectCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `connect_cluster.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnectCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateConnectCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectCluster with LRO error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.UpdateConnectClusterRequest()
      );
      request.connectCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.UpdateConnectClusterRequest',
        ['connectCluster', 'name']
      );
      request.connectCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `connect_cluster.name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnectCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateConnectCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateConnectClusterProgress without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateConnectClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateConnectClusterProgress with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateConnectClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteConnectCluster', () => {
    it('invokes deleteConnectCluster without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.DeleteConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.DeleteConnectClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteConnectCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteConnectCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectCluster without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.DeleteConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.DeleteConnectClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteConnectCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteConnectCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.managedkafka.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.managedkafka.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectCluster with call error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.DeleteConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.DeleteConnectClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnectCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteConnectCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectCluster with LRO error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.DeleteConnectClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.DeleteConnectClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnectCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteConnectCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteConnectCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteConnectClusterProgress without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteConnectClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteConnectClusterProgress with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteConnectClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listConnectClusters', () => {
    it('invokes listConnectClusters without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
      ];
      client.innerApiCalls.listConnectClusters =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listConnectClusters(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectClusters without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
      ];
      client.innerApiCalls.listConnectClusters =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConnectClusters(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.managedkafka.v1.IConnectCluster[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectClusters with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConnectClusters = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listConnectClusters(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listConnectClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectClustersStream without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
      ];
      client.descriptors.page.listConnectClusters.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConnectClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.managedkafka.v1.ConnectCluster[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.managedkafka.v1.ConnectCluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listConnectClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectClusters, request)
      );
      assert(
        (client.descriptors.page.listConnectClusters.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listConnectClustersStream with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectClusters.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConnectClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.managedkafka.v1.ConnectCluster[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.managedkafka.v1.ConnectCluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listConnectClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectClusters, request)
      );
      assert(
        (client.descriptors.page.listConnectClusters.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConnectClusters without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.ConnectCluster()
        ),
      ];
      client.descriptors.page.listConnectClusters.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.managedkafka.v1.IConnectCluster[] =
        [];
      const iterable = client.listConnectClustersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConnectClusters.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConnectClusters with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectClusters.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConnectClustersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.managedkafka.v1.IConnectCluster[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConnectClusters.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listConnectors', () => {
    it('invokes listConnectors without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
      ];
      client.innerApiCalls.listConnectors = stubSimpleCall(expectedResponse);
      const [response] = await client.listConnectors(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectors without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
      ];
      client.innerApiCalls.listConnectors =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConnectors(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.managedkafka.v1.IConnector[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectors with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConnectors = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listConnectors(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectorsStream without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
      ];
      client.descriptors.page.listConnectors.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConnectorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.managedkafka.v1.Connector[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.managedkafka.v1.Connector) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listConnectors.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectors, request)
      );
      assert(
        (client.descriptors.page.listConnectors.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listConnectorsStream with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectors.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConnectorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.managedkafka.v1.Connector[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.managedkafka.v1.Connector) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listConnectors.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectors, request)
      );
      assert(
        (client.descriptors.page.listConnectors.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConnectors without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.managedkafka.v1.Connector()
        ),
      ];
      client.descriptors.page.listConnectors.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.managedkafka.v1.IConnector[] = [];
      const iterable = client.listConnectorsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectors.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConnectors.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConnectors with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.managedkafka.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.managedkafka.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectors.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConnectorsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.managedkafka.v1.IConnector[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectors.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConnectors.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('cluster', () => {
      const fakePath = '/rendered/path/cluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        cluster: 'clusterValue',
      };
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.clusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.clusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('clusterPath', () => {
        const result = client.clusterPath(
          'projectValue',
          'locationValue',
          'clusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.clusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromClusterName', () => {
        const result = client.matchProjectFromClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromClusterName', () => {
        const result = client.matchLocationFromClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromClusterName', () => {
        const result = client.matchClusterFromClusterName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('connectCluster', () => {
      const fakePath = '/rendered/path/connectCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        connect_cluster: 'connectClusterValue',
      };
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.connectClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.connectClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('connectClusterPath', () => {
        const result = client.connectClusterPath(
          'projectValue',
          'locationValue',
          'connectClusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.connectClusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConnectClusterName', () => {
        const result = client.matchProjectFromConnectClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.connectClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConnectClusterName', () => {
        const result = client.matchLocationFromConnectClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.connectClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectClusterFromConnectClusterName', () => {
        const result =
          client.matchConnectClusterFromConnectClusterName(fakePath);
        assert.strictEqual(result, 'connectClusterValue');
        assert(
          (client.pathTemplates.connectClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('connector', () => {
      const fakePath = '/rendered/path/connector';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        connect_cluster: 'connectClusterValue',
        connector: 'connectorValue',
      };
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.connectorPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.connectorPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('connectorPath', () => {
        const result = client.connectorPath(
          'projectValue',
          'locationValue',
          'connectClusterValue',
          'connectorValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.connectorPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConnectorName', () => {
        const result = client.matchProjectFromConnectorName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.connectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConnectorName', () => {
        const result = client.matchLocationFromConnectorName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.connectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectClusterFromConnectorName', () => {
        const result = client.matchConnectClusterFromConnectorName(fakePath);
        assert.strictEqual(result, 'connectClusterValue');
        assert(
          (client.pathTemplates.connectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectorFromConnectorName', () => {
        const result = client.matchConnectorFromConnectorName(fakePath);
        assert.strictEqual(result, 'connectorValue');
        assert(
          (client.pathTemplates.connectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('consumerGroup', () => {
      const fakePath = '/rendered/path/consumerGroup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        cluster: 'clusterValue',
        consumer_group: 'consumerGroupValue',
      };
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.consumerGroupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.consumerGroupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('consumerGroupPath', () => {
        const result = client.consumerGroupPath(
          'projectValue',
          'locationValue',
          'clusterValue',
          'consumerGroupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.consumerGroupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConsumerGroupName', () => {
        const result = client.matchProjectFromConsumerGroupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.consumerGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConsumerGroupName', () => {
        const result = client.matchLocationFromConsumerGroupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.consumerGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromConsumerGroupName', () => {
        const result = client.matchClusterFromConsumerGroupName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.consumerGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConsumerGroupFromConsumerGroupName', () => {
        const result = client.matchConsumerGroupFromConsumerGroupName(fakePath);
        assert.strictEqual(result, 'consumerGroupValue');
        assert(
          (client.pathTemplates.consumerGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('topic', () => {
      const fakePath = '/rendered/path/topic';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        cluster: 'clusterValue',
        topic: 'topicValue',
      };
      const client = new managedkafkaconnectModule.v1.ManagedKafkaConnectClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.topicPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.topicPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('topicPath', () => {
        const result = client.topicPath(
          'projectValue',
          'locationValue',
          'clusterValue',
          'topicValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.topicPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTopicName', () => {
        const result = client.matchProjectFromTopicName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.topicPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTopicName', () => {
        const result = client.matchLocationFromTopicName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.topicPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromTopicName', () => {
        const result = client.matchClusterFromTopicName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.topicPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTopicFromTopicName', () => {
        const result = client.matchTopicFromTopicName(fakePath);
        assert.strictEqual(result, 'topicValue');
        assert(
          (client.pathTemplates.topicPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
