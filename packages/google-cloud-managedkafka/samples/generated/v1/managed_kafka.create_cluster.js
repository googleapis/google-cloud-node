// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, clusterId, cluster) {
  // [START managedkafka_v1_generated_ManagedKafka_CreateCluster_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The parent region in which to create the cluster. Structured like
   *  `projects/{project}/locations/{location}`.
   */
  // const parent = 'abc123'
  /**
   *  Required. The ID to use for the cluster, which will become the final
   *  component of the cluster's name. The ID must be 1-63 characters long, and
   *  match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` to comply with
   *  RFC 1035.
   *  This value is structured like: `my-cluster-id`.
   */
  // const clusterId = 'abc123'
  /**
   *  Required. Configuration of the cluster to create. Its `name` field is
   *  ignored.
   */
  // const cluster = {}
  /**
   *  Optional. An optional request ID to identify requests. Specify a unique
   *  request ID to avoid duplication of requests. If a request times out or
   *  fails, retrying with the same ID allows the server to recognize the
   *  previous attempt. For at least 60 minutes, the server ignores duplicate
   *  requests bearing the same ID.
   *  For example, consider a situation where you make an initial request and the
   *  request times out. If you make the request again with the same request ID
   *  within 60 minutes of the last request, the server checks if an original
   *  operation with the same request ID was received. If so, the server ignores
   *  the second request.
   *  The request ID must be a valid UUID. A zero UUID is not supported
   *  (00000000-0000-0000-0000-000000000000).
   */
  // const requestId = 'abc123'

  // Imports the Managedkafka library
  const {ManagedKafkaClient} = require('@google-cloud/managedkafka').v1;

  // Instantiates a client
  const managedkafkaClient = new ManagedKafkaClient();

  async function callCreateCluster() {
    // Construct request
    const request = {
      parent,
      clusterId,
      cluster,
    };

    // Run request
    const [operation] = await managedkafkaClient.createCluster(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callCreateCluster();
  // [END managedkafka_v1_generated_ManagedKafka_CreateCluster_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
