// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_recaptcha_enterprise_protos || ($protobuf.roots._google_cloud_recaptcha_enterprise_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.cloud = (function() {
    
            /**
             * Namespace cloud.
             * @memberof google
             * @namespace
             */
            var cloud = {};
    
            cloud.recaptchaenterprise = (function() {
    
                /**
                 * Namespace recaptchaenterprise.
                 * @memberof google.cloud
                 * @namespace
                 */
                var recaptchaenterprise = {};
    
                recaptchaenterprise.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof google.cloud.recaptchaenterprise
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.RecaptchaEnterpriseService = (function() {
    
                        /**
                         * Constructs a new RecaptchaEnterpriseService service.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a RecaptchaEnterpriseService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function RecaptchaEnterpriseService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (RecaptchaEnterpriseService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = RecaptchaEnterpriseService;
    
                        /**
                         * Creates new RecaptchaEnterpriseService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {RecaptchaEnterpriseService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        RecaptchaEnterpriseService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|createAssessment}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef CreateAssessmentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.Assessment} [response] Assessment
                         */
    
                        /**
                         * Calls CreateAssessment.
                         * @function createAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateAssessmentRequest} request CreateAssessmentRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.CreateAssessmentCallback} callback Node-style callback called with the error, if any, and Assessment
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.createAssessment = function createAssessment(request, callback) {
                            return this.rpcCall(createAssessment, $root.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest, $root.google.cloud.recaptchaenterprise.v1.Assessment, request, callback);
                        }, "name", { value: "CreateAssessment" });
    
                        /**
                         * Calls CreateAssessment.
                         * @function createAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateAssessmentRequest} request CreateAssessmentRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.Assessment>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|annotateAssessment}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef AnnotateAssessmentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse} [response] AnnotateAssessmentResponse
                         */
    
                        /**
                         * Calls AnnotateAssessment.
                         * @function annotateAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentRequest} request AnnotateAssessmentRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.AnnotateAssessmentCallback} callback Node-style callback called with the error, if any, and AnnotateAssessmentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.annotateAssessment = function annotateAssessment(request, callback) {
                            return this.rpcCall(annotateAssessment, $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest, $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse, request, callback);
                        }, "name", { value: "AnnotateAssessment" });
    
                        /**
                         * Calls AnnotateAssessment.
                         * @function annotateAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentRequest} request AnnotateAssessmentRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|createKey}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef CreateKeyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.Key} [response] Key
                         */
    
                        /**
                         * Calls CreateKey.
                         * @function createKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateKeyRequest} request CreateKeyRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.CreateKeyCallback} callback Node-style callback called with the error, if any, and Key
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.createKey = function createKey(request, callback) {
                            return this.rpcCall(createKey, $root.google.cloud.recaptchaenterprise.v1.CreateKeyRequest, $root.google.cloud.recaptchaenterprise.v1.Key, request, callback);
                        }, "name", { value: "CreateKey" });
    
                        /**
                         * Calls CreateKey.
                         * @function createKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateKeyRequest} request CreateKeyRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.Key>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|listKeys}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef ListKeysCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.ListKeysResponse} [response] ListKeysResponse
                         */
    
                        /**
                         * Calls ListKeys.
                         * @function listKeys
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysRequest} request ListKeysRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.ListKeysCallback} callback Node-style callback called with the error, if any, and ListKeysResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.listKeys = function listKeys(request, callback) {
                            return this.rpcCall(listKeys, $root.google.cloud.recaptchaenterprise.v1.ListKeysRequest, $root.google.cloud.recaptchaenterprise.v1.ListKeysResponse, request, callback);
                        }, "name", { value: "ListKeys" });
    
                        /**
                         * Calls ListKeys.
                         * @function listKeys
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysRequest} request ListKeysRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.ListKeysResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|retrieveLegacySecretKey}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef RetrieveLegacySecretKeyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse} [response] RetrieveLegacySecretKeyResponse
                         */
    
                        /**
                         * Calls RetrieveLegacySecretKey.
                         * @function retrieveLegacySecretKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyRequest} request RetrieveLegacySecretKeyRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.RetrieveLegacySecretKeyCallback} callback Node-style callback called with the error, if any, and RetrieveLegacySecretKeyResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.retrieveLegacySecretKey = function retrieveLegacySecretKey(request, callback) {
                            return this.rpcCall(retrieveLegacySecretKey, $root.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest, $root.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse, request, callback);
                        }, "name", { value: "RetrieveLegacySecretKey" });
    
                        /**
                         * Calls RetrieveLegacySecretKey.
                         * @function retrieveLegacySecretKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyRequest} request RetrieveLegacySecretKeyRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|getKey}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef GetKeyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.Key} [response] Key
                         */
    
                        /**
                         * Calls GetKey.
                         * @function getKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IGetKeyRequest} request GetKeyRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.GetKeyCallback} callback Node-style callback called with the error, if any, and Key
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.getKey = function getKey(request, callback) {
                            return this.rpcCall(getKey, $root.google.cloud.recaptchaenterprise.v1.GetKeyRequest, $root.google.cloud.recaptchaenterprise.v1.Key, request, callback);
                        }, "name", { value: "GetKey" });
    
                        /**
                         * Calls GetKey.
                         * @function getKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IGetKeyRequest} request GetKeyRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.Key>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|updateKey}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef UpdateKeyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.Key} [response] Key
                         */
    
                        /**
                         * Calls UpdateKey.
                         * @function updateKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IUpdateKeyRequest} request UpdateKeyRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.UpdateKeyCallback} callback Node-style callback called with the error, if any, and Key
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.updateKey = function updateKey(request, callback) {
                            return this.rpcCall(updateKey, $root.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest, $root.google.cloud.recaptchaenterprise.v1.Key, request, callback);
                        }, "name", { value: "UpdateKey" });
    
                        /**
                         * Calls UpdateKey.
                         * @function updateKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IUpdateKeyRequest} request UpdateKeyRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.Key>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|deleteKey}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef DeleteKeyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteKey.
                         * @function deleteKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IDeleteKeyRequest} request DeleteKeyRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.DeleteKeyCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.deleteKey = function deleteKey(request, callback) {
                            return this.rpcCall(deleteKey, $root.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteKey" });
    
                        /**
                         * Calls DeleteKey.
                         * @function deleteKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IDeleteKeyRequest} request DeleteKeyRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|migrateKey}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef MigrateKeyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.Key} [response] Key
                         */
    
                        /**
                         * Calls MigrateKey.
                         * @function migrateKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IMigrateKeyRequest} request MigrateKeyRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.MigrateKeyCallback} callback Node-style callback called with the error, if any, and Key
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.migrateKey = function migrateKey(request, callback) {
                            return this.rpcCall(migrateKey, $root.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest, $root.google.cloud.recaptchaenterprise.v1.Key, request, callback);
                        }, "name", { value: "MigrateKey" });
    
                        /**
                         * Calls MigrateKey.
                         * @function migrateKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IMigrateKeyRequest} request MigrateKeyRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.Key>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|getMetrics}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef GetMetricsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.Metrics} [response] Metrics
                         */
    
                        /**
                         * Calls GetMetrics.
                         * @function getMetrics
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IGetMetricsRequest} request GetMetricsRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.GetMetricsCallback} callback Node-style callback called with the error, if any, and Metrics
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.getMetrics = function getMetrics(request, callback) {
                            return this.rpcCall(getMetrics, $root.google.cloud.recaptchaenterprise.v1.GetMetricsRequest, $root.google.cloud.recaptchaenterprise.v1.Metrics, request, callback);
                        }, "name", { value: "GetMetrics" });
    
                        /**
                         * Calls GetMetrics.
                         * @function getMetrics
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IGetMetricsRequest} request GetMetricsRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.Metrics>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|listRelatedAccountGroups}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef ListRelatedAccountGroupsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse} [response] ListRelatedAccountGroupsResponse
                         */
    
                        /**
                         * Calls ListRelatedAccountGroups.
                         * @function listRelatedAccountGroups
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsRequest} request ListRelatedAccountGroupsRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.ListRelatedAccountGroupsCallback} callback Node-style callback called with the error, if any, and ListRelatedAccountGroupsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.listRelatedAccountGroups = function listRelatedAccountGroups(request, callback) {
                            return this.rpcCall(listRelatedAccountGroups, $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest, $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse, request, callback);
                        }, "name", { value: "ListRelatedAccountGroups" });
    
                        /**
                         * Calls ListRelatedAccountGroups.
                         * @function listRelatedAccountGroups
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsRequest} request ListRelatedAccountGroupsRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|listRelatedAccountGroupMemberships}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef ListRelatedAccountGroupMembershipsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse} [response] ListRelatedAccountGroupMembershipsResponse
                         */
    
                        /**
                         * Calls ListRelatedAccountGroupMemberships.
                         * @function listRelatedAccountGroupMemberships
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsRequest} request ListRelatedAccountGroupMembershipsRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.ListRelatedAccountGroupMembershipsCallback} callback Node-style callback called with the error, if any, and ListRelatedAccountGroupMembershipsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.listRelatedAccountGroupMemberships = function listRelatedAccountGroupMemberships(request, callback) {
                            return this.rpcCall(listRelatedAccountGroupMemberships, $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest, $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse, request, callback);
                        }, "name", { value: "ListRelatedAccountGroupMemberships" });
    
                        /**
                         * Calls ListRelatedAccountGroupMemberships.
                         * @function listRelatedAccountGroupMemberships
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsRequest} request ListRelatedAccountGroupMembershipsRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService|searchRelatedAccountGroupMemberships}.
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @typedef SearchRelatedAccountGroupMembershipsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse} [response] SearchRelatedAccountGroupMembershipsResponse
                         */
    
                        /**
                         * Calls SearchRelatedAccountGroupMemberships.
                         * @function searchRelatedAccountGroupMemberships
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsRequest} request SearchRelatedAccountGroupMembershipsRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.SearchRelatedAccountGroupMembershipsCallback} callback Node-style callback called with the error, if any, and SearchRelatedAccountGroupMembershipsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseService.prototype.searchRelatedAccountGroupMemberships = function searchRelatedAccountGroupMemberships(request, callback) {
                            return this.rpcCall(searchRelatedAccountGroupMemberships, $root.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest, $root.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse, request, callback);
                        }, "name", { value: "SearchRelatedAccountGroupMemberships" });
    
                        /**
                         * Calls SearchRelatedAccountGroupMemberships.
                         * @function searchRelatedAccountGroupMemberships
                         * @memberof google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsRequest} request SearchRelatedAccountGroupMembershipsRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse>} Promise
                         * @variation 2
                         */
    
                        return RecaptchaEnterpriseService;
                    })();
    
                    v1.CreateAssessmentRequest = (function() {
    
                        /**
                         * Properties of a CreateAssessmentRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface ICreateAssessmentRequest
                         * @property {string|null} [parent] CreateAssessmentRequest parent
                         * @property {google.cloud.recaptchaenterprise.v1.IAssessment|null} [assessment] CreateAssessmentRequest assessment
                         */
    
                        /**
                         * Constructs a new CreateAssessmentRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a CreateAssessmentRequest.
                         * @implements ICreateAssessmentRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateAssessmentRequest=} [properties] Properties to set
                         */
                        function CreateAssessmentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateAssessmentRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @instance
                         */
                        CreateAssessmentRequest.prototype.parent = "";
    
                        /**
                         * CreateAssessmentRequest assessment.
                         * @member {google.cloud.recaptchaenterprise.v1.IAssessment|null|undefined} assessment
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @instance
                         */
                        CreateAssessmentRequest.prototype.assessment = null;
    
                        /**
                         * Creates a new CreateAssessmentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateAssessmentRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest} CreateAssessmentRequest instance
                         */
                        CreateAssessmentRequest.create = function create(properties) {
                            return new CreateAssessmentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateAssessmentRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateAssessmentRequest} message CreateAssessmentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateAssessmentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.assessment != null && Object.hasOwnProperty.call(message, "assessment"))
                                $root.google.cloud.recaptchaenterprise.v1.Assessment.encode(message.assessment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateAssessmentRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateAssessmentRequest} message CreateAssessmentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateAssessmentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateAssessmentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest} CreateAssessmentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateAssessmentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.assessment = $root.google.cloud.recaptchaenterprise.v1.Assessment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateAssessmentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest} CreateAssessmentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateAssessmentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateAssessmentRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateAssessmentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.assessment != null && message.hasOwnProperty("assessment")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.Assessment.verify(message.assessment);
                                if (error)
                                    return "assessment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateAssessmentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest} CreateAssessmentRequest
                         */
                        CreateAssessmentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.assessment != null) {
                                if (typeof object.assessment !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest.assessment: object expected");
                                message.assessment = $root.google.cloud.recaptchaenterprise.v1.Assessment.fromObject(object.assessment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateAssessmentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest} message CreateAssessmentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateAssessmentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.assessment = null;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.assessment != null && message.hasOwnProperty("assessment"))
                                object.assessment = $root.google.cloud.recaptchaenterprise.v1.Assessment.toObject(message.assessment, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateAssessmentRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateAssessmentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CreateAssessmentRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CreateAssessmentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest";
                        };
    
                        return CreateAssessmentRequest;
                    })();
    
                    v1.TransactionEvent = (function() {
    
                        /**
                         * Properties of a TransactionEvent.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface ITransactionEvent
                         * @property {google.cloud.recaptchaenterprise.v1.TransactionEvent.TransactionEventType|null} [eventType] TransactionEvent eventType
                         * @property {string|null} [reason] TransactionEvent reason
                         * @property {number|null} [value] TransactionEvent value
                         * @property {google.protobuf.ITimestamp|null} [eventTime] TransactionEvent eventTime
                         */
    
                        /**
                         * Constructs a new TransactionEvent.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a TransactionEvent.
                         * @implements ITransactionEvent
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.ITransactionEvent=} [properties] Properties to set
                         */
                        function TransactionEvent(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TransactionEvent eventType.
                         * @member {google.cloud.recaptchaenterprise.v1.TransactionEvent.TransactionEventType} eventType
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @instance
                         */
                        TransactionEvent.prototype.eventType = 0;
    
                        /**
                         * TransactionEvent reason.
                         * @member {string} reason
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @instance
                         */
                        TransactionEvent.prototype.reason = "";
    
                        /**
                         * TransactionEvent value.
                         * @member {number} value
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @instance
                         */
                        TransactionEvent.prototype.value = 0;
    
                        /**
                         * TransactionEvent eventTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} eventTime
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @instance
                         */
                        TransactionEvent.prototype.eventTime = null;
    
                        /**
                         * Creates a new TransactionEvent instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITransactionEvent=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.TransactionEvent} TransactionEvent instance
                         */
                        TransactionEvent.create = function create(properties) {
                            return new TransactionEvent(properties);
                        };
    
                        /**
                         * Encodes the specified TransactionEvent message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionEvent.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITransactionEvent} message TransactionEvent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransactionEvent.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.eventType != null && Object.hasOwnProperty.call(message, "eventType"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eventType);
                            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.value);
                            if (message.eventTime != null && Object.hasOwnProperty.call(message, "eventTime"))
                                $root.google.protobuf.Timestamp.encode(message.eventTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TransactionEvent message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionEvent.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITransactionEvent} message TransactionEvent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransactionEvent.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TransactionEvent message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.TransactionEvent} TransactionEvent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransactionEvent.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.TransactionEvent();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.eventType = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.reason = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.value = reader.double();
                                        break;
                                    }
                                case 4: {
                                        message.eventTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TransactionEvent message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.TransactionEvent} TransactionEvent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransactionEvent.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TransactionEvent message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TransactionEvent.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.eventType != null && message.hasOwnProperty("eventType"))
                                switch (message.eventType) {
                                default:
                                    return "eventType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 18:
                                    break;
                                }
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                if (!$util.isString(message.reason))
                                    return "reason: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            if (message.eventTime != null && message.hasOwnProperty("eventTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.eventTime);
                                if (error)
                                    return "eventTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TransactionEvent message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.TransactionEvent} TransactionEvent
                         */
                        TransactionEvent.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.TransactionEvent)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.TransactionEvent();
                            switch (object.eventType) {
                            default:
                                if (typeof object.eventType === "number") {
                                    message.eventType = object.eventType;
                                    break;
                                }
                                break;
                            case "TRANSACTION_EVENT_TYPE_UNSPECIFIED":
                            case 0:
                                message.eventType = 0;
                                break;
                            case "MERCHANT_APPROVE":
                            case 1:
                                message.eventType = 1;
                                break;
                            case "MERCHANT_DENY":
                            case 2:
                                message.eventType = 2;
                                break;
                            case "MANUAL_REVIEW":
                            case 3:
                                message.eventType = 3;
                                break;
                            case "AUTHORIZATION":
                            case 4:
                                message.eventType = 4;
                                break;
                            case "AUTHORIZATION_DECLINE":
                            case 5:
                                message.eventType = 5;
                                break;
                            case "PAYMENT_CAPTURE":
                            case 6:
                                message.eventType = 6;
                                break;
                            case "PAYMENT_CAPTURE_DECLINE":
                            case 7:
                                message.eventType = 7;
                                break;
                            case "CANCEL":
                            case 8:
                                message.eventType = 8;
                                break;
                            case "CHARGEBACK_INQUIRY":
                            case 9:
                                message.eventType = 9;
                                break;
                            case "CHARGEBACK_ALERT":
                            case 10:
                                message.eventType = 10;
                                break;
                            case "FRAUD_NOTIFICATION":
                            case 11:
                                message.eventType = 11;
                                break;
                            case "CHARGEBACK":
                            case 12:
                                message.eventType = 12;
                                break;
                            case "CHARGEBACK_REPRESENTMENT":
                            case 13:
                                message.eventType = 13;
                                break;
                            case "CHARGEBACK_REVERSE":
                            case 14:
                                message.eventType = 14;
                                break;
                            case "REFUND_REQUEST":
                            case 15:
                                message.eventType = 15;
                                break;
                            case "REFUND_DECLINE":
                            case 16:
                                message.eventType = 16;
                                break;
                            case "REFUND":
                            case 17:
                                message.eventType = 17;
                                break;
                            case "REFUND_REVERSE":
                            case 18:
                                message.eventType = 18;
                                break;
                            }
                            if (object.reason != null)
                                message.reason = String(object.reason);
                            if (object.value != null)
                                message.value = Number(object.value);
                            if (object.eventTime != null) {
                                if (typeof object.eventTime !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionEvent.eventTime: object expected");
                                message.eventTime = $root.google.protobuf.Timestamp.fromObject(object.eventTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TransactionEvent message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.TransactionEvent} message TransactionEvent
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TransactionEvent.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.eventType = options.enums === String ? "TRANSACTION_EVENT_TYPE_UNSPECIFIED" : 0;
                                object.reason = "";
                                object.value = 0;
                                object.eventTime = null;
                            }
                            if (message.eventType != null && message.hasOwnProperty("eventType"))
                                object.eventType = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.TransactionEvent.TransactionEventType[message.eventType] === undefined ? message.eventType : $root.google.cloud.recaptchaenterprise.v1.TransactionEvent.TransactionEventType[message.eventType] : message.eventType;
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                object.reason = message.reason;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            if (message.eventTime != null && message.hasOwnProperty("eventTime"))
                                object.eventTime = $root.google.protobuf.Timestamp.toObject(message.eventTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this TransactionEvent to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TransactionEvent.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TransactionEvent
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionEvent
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TransactionEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.TransactionEvent";
                        };
    
                        /**
                         * TransactionEventType enum.
                         * @name google.cloud.recaptchaenterprise.v1.TransactionEvent.TransactionEventType
                         * @enum {number}
                         * @property {number} TRANSACTION_EVENT_TYPE_UNSPECIFIED=0 TRANSACTION_EVENT_TYPE_UNSPECIFIED value
                         * @property {number} MERCHANT_APPROVE=1 MERCHANT_APPROVE value
                         * @property {number} MERCHANT_DENY=2 MERCHANT_DENY value
                         * @property {number} MANUAL_REVIEW=3 MANUAL_REVIEW value
                         * @property {number} AUTHORIZATION=4 AUTHORIZATION value
                         * @property {number} AUTHORIZATION_DECLINE=5 AUTHORIZATION_DECLINE value
                         * @property {number} PAYMENT_CAPTURE=6 PAYMENT_CAPTURE value
                         * @property {number} PAYMENT_CAPTURE_DECLINE=7 PAYMENT_CAPTURE_DECLINE value
                         * @property {number} CANCEL=8 CANCEL value
                         * @property {number} CHARGEBACK_INQUIRY=9 CHARGEBACK_INQUIRY value
                         * @property {number} CHARGEBACK_ALERT=10 CHARGEBACK_ALERT value
                         * @property {number} FRAUD_NOTIFICATION=11 FRAUD_NOTIFICATION value
                         * @property {number} CHARGEBACK=12 CHARGEBACK value
                         * @property {number} CHARGEBACK_REPRESENTMENT=13 CHARGEBACK_REPRESENTMENT value
                         * @property {number} CHARGEBACK_REVERSE=14 CHARGEBACK_REVERSE value
                         * @property {number} REFUND_REQUEST=15 REFUND_REQUEST value
                         * @property {number} REFUND_DECLINE=16 REFUND_DECLINE value
                         * @property {number} REFUND=17 REFUND value
                         * @property {number} REFUND_REVERSE=18 REFUND_REVERSE value
                         */
                        TransactionEvent.TransactionEventType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TRANSACTION_EVENT_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "MERCHANT_APPROVE"] = 1;
                            values[valuesById[2] = "MERCHANT_DENY"] = 2;
                            values[valuesById[3] = "MANUAL_REVIEW"] = 3;
                            values[valuesById[4] = "AUTHORIZATION"] = 4;
                            values[valuesById[5] = "AUTHORIZATION_DECLINE"] = 5;
                            values[valuesById[6] = "PAYMENT_CAPTURE"] = 6;
                            values[valuesById[7] = "PAYMENT_CAPTURE_DECLINE"] = 7;
                            values[valuesById[8] = "CANCEL"] = 8;
                            values[valuesById[9] = "CHARGEBACK_INQUIRY"] = 9;
                            values[valuesById[10] = "CHARGEBACK_ALERT"] = 10;
                            values[valuesById[11] = "FRAUD_NOTIFICATION"] = 11;
                            values[valuesById[12] = "CHARGEBACK"] = 12;
                            values[valuesById[13] = "CHARGEBACK_REPRESENTMENT"] = 13;
                            values[valuesById[14] = "CHARGEBACK_REVERSE"] = 14;
                            values[valuesById[15] = "REFUND_REQUEST"] = 15;
                            values[valuesById[16] = "REFUND_DECLINE"] = 16;
                            values[valuesById[17] = "REFUND"] = 17;
                            values[valuesById[18] = "REFUND_REVERSE"] = 18;
                            return values;
                        })();
    
                        return TransactionEvent;
                    })();
    
                    v1.AnnotateAssessmentRequest = (function() {
    
                        /**
                         * Properties of an AnnotateAssessmentRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IAnnotateAssessmentRequest
                         * @property {string|null} [name] AnnotateAssessmentRequest name
                         * @property {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Annotation|null} [annotation] AnnotateAssessmentRequest annotation
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Reason>|null} [reasons] AnnotateAssessmentRequest reasons
                         * @property {Uint8Array|null} [hashedAccountId] AnnotateAssessmentRequest hashedAccountId
                         * @property {google.cloud.recaptchaenterprise.v1.ITransactionEvent|null} [transactionEvent] AnnotateAssessmentRequest transactionEvent
                         */
    
                        /**
                         * Constructs a new AnnotateAssessmentRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an AnnotateAssessmentRequest.
                         * @implements IAnnotateAssessmentRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentRequest=} [properties] Properties to set
                         */
                        function AnnotateAssessmentRequest(properties) {
                            this.reasons = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateAssessmentRequest name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.name = "";
    
                        /**
                         * AnnotateAssessmentRequest annotation.
                         * @member {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Annotation} annotation
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.annotation = 0;
    
                        /**
                         * AnnotateAssessmentRequest reasons.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Reason>} reasons
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.reasons = $util.emptyArray;
    
                        /**
                         * AnnotateAssessmentRequest hashedAccountId.
                         * @member {Uint8Array} hashedAccountId
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.hashedAccountId = $util.newBuffer([]);
    
                        /**
                         * AnnotateAssessmentRequest transactionEvent.
                         * @member {google.cloud.recaptchaenterprise.v1.ITransactionEvent|null|undefined} transactionEvent
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.transactionEvent = null;
    
                        /**
                         * Creates a new AnnotateAssessmentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest} AnnotateAssessmentRequest instance
                         */
                        AnnotateAssessmentRequest.create = function create(properties) {
                            return new AnnotateAssessmentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateAssessmentRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentRequest} message AnnotateAssessmentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateAssessmentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.annotation != null && Object.hasOwnProperty.call(message, "annotation"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.annotation);
                            if (message.reasons != null && message.reasons.length) {
                                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                                for (var i = 0; i < message.reasons.length; ++i)
                                    writer.int32(message.reasons[i]);
                                writer.ldelim();
                            }
                            if (message.hashedAccountId != null && Object.hasOwnProperty.call(message, "hashedAccountId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.hashedAccountId);
                            if (message.transactionEvent != null && Object.hasOwnProperty.call(message, "transactionEvent"))
                                $root.google.cloud.recaptchaenterprise.v1.TransactionEvent.encode(message.transactionEvent, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateAssessmentRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentRequest} message AnnotateAssessmentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateAssessmentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateAssessmentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest} AnnotateAssessmentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateAssessmentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.annotation = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.reasons && message.reasons.length))
                                            message.reasons = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.reasons.push(reader.int32());
                                        } else
                                            message.reasons.push(reader.int32());
                                        break;
                                    }
                                case 4: {
                                        message.hashedAccountId = reader.bytes();
                                        break;
                                    }
                                case 5: {
                                        message.transactionEvent = $root.google.cloud.recaptchaenterprise.v1.TransactionEvent.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateAssessmentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest} AnnotateAssessmentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateAssessmentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateAssessmentRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateAssessmentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.annotation != null && message.hasOwnProperty("annotation"))
                                switch (message.annotation) {
                                default:
                                    return "annotation: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.reasons != null && message.hasOwnProperty("reasons")) {
                                if (!Array.isArray(message.reasons))
                                    return "reasons: array expected";
                                for (var i = 0; i < message.reasons.length; ++i)
                                    switch (message.reasons[i]) {
                                    default:
                                        return "reasons: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 8:
                                    case 9:
                                    case 10:
                                    case 11:
                                    case 12:
                                    case 13:
                                    case 2:
                                    case 7:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 14:
                                        break;
                                    }
                            }
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                if (!(message.hashedAccountId && typeof message.hashedAccountId.length === "number" || $util.isString(message.hashedAccountId)))
                                    return "hashedAccountId: buffer expected";
                            if (message.transactionEvent != null && message.hasOwnProperty("transactionEvent")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.TransactionEvent.verify(message.transactionEvent);
                                if (error)
                                    return "transactionEvent." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateAssessmentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest} AnnotateAssessmentRequest
                         */
                        AnnotateAssessmentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            switch (object.annotation) {
                            default:
                                if (typeof object.annotation === "number") {
                                    message.annotation = object.annotation;
                                    break;
                                }
                                break;
                            case "ANNOTATION_UNSPECIFIED":
                            case 0:
                                message.annotation = 0;
                                break;
                            case "LEGITIMATE":
                            case 1:
                                message.annotation = 1;
                                break;
                            case "FRAUDULENT":
                            case 2:
                                message.annotation = 2;
                                break;
                            case "PASSWORD_CORRECT":
                            case 3:
                                message.annotation = 3;
                                break;
                            case "PASSWORD_INCORRECT":
                            case 4:
                                message.annotation = 4;
                                break;
                            }
                            if (object.reasons) {
                                if (!Array.isArray(object.reasons))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.reasons: array expected");
                                message.reasons = [];
                                for (var i = 0; i < object.reasons.length; ++i)
                                    switch (object.reasons[i]) {
                                    default:
                                        if (typeof object.reasons[i] === "number") {
                                            message.reasons[i] = object.reasons[i];
                                            break;
                                        }
                                    case "REASON_UNSPECIFIED":
                                    case 0:
                                        message.reasons[i] = 0;
                                        break;
                                    case "CHARGEBACK":
                                    case 1:
                                        message.reasons[i] = 1;
                                        break;
                                    case "CHARGEBACK_FRAUD":
                                    case 8:
                                        message.reasons[i] = 8;
                                        break;
                                    case "CHARGEBACK_DISPUTE":
                                    case 9:
                                        message.reasons[i] = 9;
                                        break;
                                    case "REFUND":
                                    case 10:
                                        message.reasons[i] = 10;
                                        break;
                                    case "REFUND_FRAUD":
                                    case 11:
                                        message.reasons[i] = 11;
                                        break;
                                    case "TRANSACTION_ACCEPTED":
                                    case 12:
                                        message.reasons[i] = 12;
                                        break;
                                    case "TRANSACTION_DECLINED":
                                    case 13:
                                        message.reasons[i] = 13;
                                        break;
                                    case "PAYMENT_HEURISTICS":
                                    case 2:
                                        message.reasons[i] = 2;
                                        break;
                                    case "INITIATED_TWO_FACTOR":
                                    case 7:
                                        message.reasons[i] = 7;
                                        break;
                                    case "PASSED_TWO_FACTOR":
                                    case 3:
                                        message.reasons[i] = 3;
                                        break;
                                    case "FAILED_TWO_FACTOR":
                                    case 4:
                                        message.reasons[i] = 4;
                                        break;
                                    case "CORRECT_PASSWORD":
                                    case 5:
                                        message.reasons[i] = 5;
                                        break;
                                    case "INCORRECT_PASSWORD":
                                    case 6:
                                        message.reasons[i] = 6;
                                        break;
                                    case "SOCIAL_SPAM":
                                    case 14:
                                        message.reasons[i] = 14;
                                        break;
                                    }
                            }
                            if (object.hashedAccountId != null)
                                if (typeof object.hashedAccountId === "string")
                                    $util.base64.decode(object.hashedAccountId, message.hashedAccountId = $util.newBuffer($util.base64.length(object.hashedAccountId)), 0);
                                else if (object.hashedAccountId.length >= 0)
                                    message.hashedAccountId = object.hashedAccountId;
                            if (object.transactionEvent != null) {
                                if (typeof object.transactionEvent !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.transactionEvent: object expected");
                                message.transactionEvent = $root.google.cloud.recaptchaenterprise.v1.TransactionEvent.fromObject(object.transactionEvent);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateAssessmentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest} message AnnotateAssessmentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateAssessmentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.reasons = [];
                            if (options.defaults) {
                                object.name = "";
                                object.annotation = options.enums === String ? "ANNOTATION_UNSPECIFIED" : 0;
                                if (options.bytes === String)
                                    object.hashedAccountId = "";
                                else {
                                    object.hashedAccountId = [];
                                    if (options.bytes !== Array)
                                        object.hashedAccountId = $util.newBuffer(object.hashedAccountId);
                                }
                                object.transactionEvent = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.annotation != null && message.hasOwnProperty("annotation"))
                                object.annotation = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Annotation[message.annotation] === undefined ? message.annotation : $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Annotation[message.annotation] : message.annotation;
                            if (message.reasons && message.reasons.length) {
                                object.reasons = [];
                                for (var j = 0; j < message.reasons.length; ++j)
                                    object.reasons[j] = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Reason[message.reasons[j]] === undefined ? message.reasons[j] : $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Reason[message.reasons[j]] : message.reasons[j];
                            }
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                object.hashedAccountId = options.bytes === String ? $util.base64.encode(message.hashedAccountId, 0, message.hashedAccountId.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashedAccountId) : message.hashedAccountId;
                            if (message.transactionEvent != null && message.hasOwnProperty("transactionEvent"))
                                object.transactionEvent = $root.google.cloud.recaptchaenterprise.v1.TransactionEvent.toObject(message.transactionEvent, options);
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateAssessmentRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateAssessmentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateAssessmentRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateAssessmentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest";
                        };
    
                        /**
                         * Annotation enum.
                         * @name google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Annotation
                         * @enum {number}
                         * @property {number} ANNOTATION_UNSPECIFIED=0 ANNOTATION_UNSPECIFIED value
                         * @property {number} LEGITIMATE=1 LEGITIMATE value
                         * @property {number} FRAUDULENT=2 FRAUDULENT value
                         * @property {number} PASSWORD_CORRECT=3 PASSWORD_CORRECT value
                         * @property {number} PASSWORD_INCORRECT=4 PASSWORD_INCORRECT value
                         */
                        AnnotateAssessmentRequest.Annotation = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ANNOTATION_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "LEGITIMATE"] = 1;
                            values[valuesById[2] = "FRAUDULENT"] = 2;
                            values[valuesById[3] = "PASSWORD_CORRECT"] = 3;
                            values[valuesById[4] = "PASSWORD_INCORRECT"] = 4;
                            return values;
                        })();
    
                        /**
                         * Reason enum.
                         * @name google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Reason
                         * @enum {number}
                         * @property {number} REASON_UNSPECIFIED=0 REASON_UNSPECIFIED value
                         * @property {number} CHARGEBACK=1 CHARGEBACK value
                         * @property {number} CHARGEBACK_FRAUD=8 CHARGEBACK_FRAUD value
                         * @property {number} CHARGEBACK_DISPUTE=9 CHARGEBACK_DISPUTE value
                         * @property {number} REFUND=10 REFUND value
                         * @property {number} REFUND_FRAUD=11 REFUND_FRAUD value
                         * @property {number} TRANSACTION_ACCEPTED=12 TRANSACTION_ACCEPTED value
                         * @property {number} TRANSACTION_DECLINED=13 TRANSACTION_DECLINED value
                         * @property {number} PAYMENT_HEURISTICS=2 PAYMENT_HEURISTICS value
                         * @property {number} INITIATED_TWO_FACTOR=7 INITIATED_TWO_FACTOR value
                         * @property {number} PASSED_TWO_FACTOR=3 PASSED_TWO_FACTOR value
                         * @property {number} FAILED_TWO_FACTOR=4 FAILED_TWO_FACTOR value
                         * @property {number} CORRECT_PASSWORD=5 CORRECT_PASSWORD value
                         * @property {number} INCORRECT_PASSWORD=6 INCORRECT_PASSWORD value
                         * @property {number} SOCIAL_SPAM=14 SOCIAL_SPAM value
                         */
                        AnnotateAssessmentRequest.Reason = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "REASON_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "CHARGEBACK"] = 1;
                            values[valuesById[8] = "CHARGEBACK_FRAUD"] = 8;
                            values[valuesById[9] = "CHARGEBACK_DISPUTE"] = 9;
                            values[valuesById[10] = "REFUND"] = 10;
                            values[valuesById[11] = "REFUND_FRAUD"] = 11;
                            values[valuesById[12] = "TRANSACTION_ACCEPTED"] = 12;
                            values[valuesById[13] = "TRANSACTION_DECLINED"] = 13;
                            values[valuesById[2] = "PAYMENT_HEURISTICS"] = 2;
                            values[valuesById[7] = "INITIATED_TWO_FACTOR"] = 7;
                            values[valuesById[3] = "PASSED_TWO_FACTOR"] = 3;
                            values[valuesById[4] = "FAILED_TWO_FACTOR"] = 4;
                            values[valuesById[5] = "CORRECT_PASSWORD"] = 5;
                            values[valuesById[6] = "INCORRECT_PASSWORD"] = 6;
                            values[valuesById[14] = "SOCIAL_SPAM"] = 14;
                            return values;
                        })();
    
                        return AnnotateAssessmentRequest;
                    })();
    
                    v1.AnnotateAssessmentResponse = (function() {
    
                        /**
                         * Properties of an AnnotateAssessmentResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IAnnotateAssessmentResponse
                         */
    
                        /**
                         * Constructs a new AnnotateAssessmentResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an AnnotateAssessmentResponse.
                         * @implements IAnnotateAssessmentResponse
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentResponse=} [properties] Properties to set
                         */
                        function AnnotateAssessmentResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new AnnotateAssessmentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentResponse=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse} AnnotateAssessmentResponse instance
                         */
                        AnnotateAssessmentResponse.create = function create(properties) {
                            return new AnnotateAssessmentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateAssessmentResponse message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentResponse} message AnnotateAssessmentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateAssessmentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateAssessmentResponse message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentResponse} message AnnotateAssessmentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateAssessmentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateAssessmentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse} AnnotateAssessmentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateAssessmentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateAssessmentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse} AnnotateAssessmentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateAssessmentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateAssessmentResponse message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateAssessmentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateAssessmentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse} AnnotateAssessmentResponse
                         */
                        AnnotateAssessmentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse)
                                return object;
                            return new $root.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse();
                        };
    
                        /**
                         * Creates a plain object from an AnnotateAssessmentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse} message AnnotateAssessmentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateAssessmentResponse.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this AnnotateAssessmentResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateAssessmentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateAssessmentResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateAssessmentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse";
                        };
    
                        return AnnotateAssessmentResponse;
                    })();
    
                    v1.EndpointVerificationInfo = (function() {
    
                        /**
                         * Properties of an EndpointVerificationInfo.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IEndpointVerificationInfo
                         * @property {string|null} [emailAddress] EndpointVerificationInfo emailAddress
                         * @property {string|null} [phoneNumber] EndpointVerificationInfo phoneNumber
                         * @property {string|null} [requestToken] EndpointVerificationInfo requestToken
                         * @property {google.protobuf.ITimestamp|null} [lastVerificationTime] EndpointVerificationInfo lastVerificationTime
                         */
    
                        /**
                         * Constructs a new EndpointVerificationInfo.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an EndpointVerificationInfo.
                         * @implements IEndpointVerificationInfo
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IEndpointVerificationInfo=} [properties] Properties to set
                         */
                        function EndpointVerificationInfo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * EndpointVerificationInfo emailAddress.
                         * @member {string|null|undefined} emailAddress
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @instance
                         */
                        EndpointVerificationInfo.prototype.emailAddress = null;
    
                        /**
                         * EndpointVerificationInfo phoneNumber.
                         * @member {string|null|undefined} phoneNumber
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @instance
                         */
                        EndpointVerificationInfo.prototype.phoneNumber = null;
    
                        /**
                         * EndpointVerificationInfo requestToken.
                         * @member {string} requestToken
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @instance
                         */
                        EndpointVerificationInfo.prototype.requestToken = "";
    
                        /**
                         * EndpointVerificationInfo lastVerificationTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} lastVerificationTime
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @instance
                         */
                        EndpointVerificationInfo.prototype.lastVerificationTime = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * EndpointVerificationInfo endpoint.
                         * @member {"emailAddress"|"phoneNumber"|undefined} endpoint
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @instance
                         */
                        Object.defineProperty(EndpointVerificationInfo.prototype, "endpoint", {
                            get: $util.oneOfGetter($oneOfFields = ["emailAddress", "phoneNumber"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new EndpointVerificationInfo instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IEndpointVerificationInfo=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo} EndpointVerificationInfo instance
                         */
                        EndpointVerificationInfo.create = function create(properties) {
                            return new EndpointVerificationInfo(properties);
                        };
    
                        /**
                         * Encodes the specified EndpointVerificationInfo message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IEndpointVerificationInfo} message EndpointVerificationInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EndpointVerificationInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.emailAddress != null && Object.hasOwnProperty.call(message, "emailAddress"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.emailAddress);
                            if (message.phoneNumber != null && Object.hasOwnProperty.call(message, "phoneNumber"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.phoneNumber);
                            if (message.requestToken != null && Object.hasOwnProperty.call(message, "requestToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.requestToken);
                            if (message.lastVerificationTime != null && Object.hasOwnProperty.call(message, "lastVerificationTime"))
                                $root.google.protobuf.Timestamp.encode(message.lastVerificationTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified EndpointVerificationInfo message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IEndpointVerificationInfo} message EndpointVerificationInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EndpointVerificationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an EndpointVerificationInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo} EndpointVerificationInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EndpointVerificationInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.emailAddress = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.phoneNumber = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.requestToken = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.lastVerificationTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an EndpointVerificationInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo} EndpointVerificationInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EndpointVerificationInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an EndpointVerificationInfo message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        EndpointVerificationInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.emailAddress != null && message.hasOwnProperty("emailAddress")) {
                                properties.endpoint = 1;
                                if (!$util.isString(message.emailAddress))
                                    return "emailAddress: string expected";
                            }
                            if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber")) {
                                if (properties.endpoint === 1)
                                    return "endpoint: multiple values";
                                properties.endpoint = 1;
                                if (!$util.isString(message.phoneNumber))
                                    return "phoneNumber: string expected";
                            }
                            if (message.requestToken != null && message.hasOwnProperty("requestToken"))
                                if (!$util.isString(message.requestToken))
                                    return "requestToken: string expected";
                            if (message.lastVerificationTime != null && message.hasOwnProperty("lastVerificationTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.lastVerificationTime);
                                if (error)
                                    return "lastVerificationTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an EndpointVerificationInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo} EndpointVerificationInfo
                         */
                        EndpointVerificationInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo();
                            if (object.emailAddress != null)
                                message.emailAddress = String(object.emailAddress);
                            if (object.phoneNumber != null)
                                message.phoneNumber = String(object.phoneNumber);
                            if (object.requestToken != null)
                                message.requestToken = String(object.requestToken);
                            if (object.lastVerificationTime != null) {
                                if (typeof object.lastVerificationTime !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.lastVerificationTime: object expected");
                                message.lastVerificationTime = $root.google.protobuf.Timestamp.fromObject(object.lastVerificationTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an EndpointVerificationInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo} message EndpointVerificationInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        EndpointVerificationInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.requestToken = "";
                                object.lastVerificationTime = null;
                            }
                            if (message.emailAddress != null && message.hasOwnProperty("emailAddress")) {
                                object.emailAddress = message.emailAddress;
                                if (options.oneofs)
                                    object.endpoint = "emailAddress";
                            }
                            if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber")) {
                                object.phoneNumber = message.phoneNumber;
                                if (options.oneofs)
                                    object.endpoint = "phoneNumber";
                            }
                            if (message.requestToken != null && message.hasOwnProperty("requestToken"))
                                object.requestToken = message.requestToken;
                            if (message.lastVerificationTime != null && message.hasOwnProperty("lastVerificationTime"))
                                object.lastVerificationTime = $root.google.protobuf.Timestamp.toObject(message.lastVerificationTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this EndpointVerificationInfo to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        EndpointVerificationInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for EndpointVerificationInfo
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        EndpointVerificationInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo";
                        };
    
                        return EndpointVerificationInfo;
                    })();
    
                    v1.AccountVerificationInfo = (function() {
    
                        /**
                         * Properties of an AccountVerificationInfo.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IAccountVerificationInfo
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.IEndpointVerificationInfo>|null} [endpoints] AccountVerificationInfo endpoints
                         * @property {string|null} [languageCode] AccountVerificationInfo languageCode
                         * @property {google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.Result|null} [latestVerificationResult] AccountVerificationInfo latestVerificationResult
                         * @property {string|null} [username] AccountVerificationInfo username
                         */
    
                        /**
                         * Constructs a new AccountVerificationInfo.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an AccountVerificationInfo.
                         * @implements IAccountVerificationInfo
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IAccountVerificationInfo=} [properties] Properties to set
                         */
                        function AccountVerificationInfo(properties) {
                            this.endpoints = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AccountVerificationInfo endpoints.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.IEndpointVerificationInfo>} endpoints
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @instance
                         */
                        AccountVerificationInfo.prototype.endpoints = $util.emptyArray;
    
                        /**
                         * AccountVerificationInfo languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @instance
                         */
                        AccountVerificationInfo.prototype.languageCode = "";
    
                        /**
                         * AccountVerificationInfo latestVerificationResult.
                         * @member {google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.Result} latestVerificationResult
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @instance
                         */
                        AccountVerificationInfo.prototype.latestVerificationResult = 0;
    
                        /**
                         * AccountVerificationInfo username.
                         * @member {string} username
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @instance
                         */
                        AccountVerificationInfo.prototype.username = "";
    
                        /**
                         * Creates a new AccountVerificationInfo instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAccountVerificationInfo=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.AccountVerificationInfo} AccountVerificationInfo instance
                         */
                        AccountVerificationInfo.create = function create(properties) {
                            return new AccountVerificationInfo(properties);
                        };
    
                        /**
                         * Encodes the specified AccountVerificationInfo message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAccountVerificationInfo} message AccountVerificationInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountVerificationInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.endpoints != null && message.endpoints.length)
                                for (var i = 0; i < message.endpoints.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.encode(message.endpoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.username != null && Object.hasOwnProperty.call(message, "username"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.languageCode);
                            if (message.latestVerificationResult != null && Object.hasOwnProperty.call(message, "latestVerificationResult"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.latestVerificationResult);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AccountVerificationInfo message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAccountVerificationInfo} message AccountVerificationInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountVerificationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AccountVerificationInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.AccountVerificationInfo} AccountVerificationInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountVerificationInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.endpoints && message.endpoints.length))
                                            message.endpoints = [];
                                        message.endpoints.push($root.google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                case 7: {
                                        message.latestVerificationResult = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.username = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AccountVerificationInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.AccountVerificationInfo} AccountVerificationInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountVerificationInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AccountVerificationInfo message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AccountVerificationInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.endpoints != null && message.hasOwnProperty("endpoints")) {
                                if (!Array.isArray(message.endpoints))
                                    return "endpoints: array expected";
                                for (var i = 0; i < message.endpoints.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.verify(message.endpoints[i]);
                                    if (error)
                                        return "endpoints." + error;
                                }
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            if (message.latestVerificationResult != null && message.hasOwnProperty("latestVerificationResult"))
                                switch (message.latestVerificationResult) {
                                default:
                                    return "latestVerificationResult: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                    break;
                                }
                            if (message.username != null && message.hasOwnProperty("username"))
                                if (!$util.isString(message.username))
                                    return "username: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AccountVerificationInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.AccountVerificationInfo} AccountVerificationInfo
                         */
                        AccountVerificationInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo();
                            if (object.endpoints) {
                                if (!Array.isArray(object.endpoints))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.endpoints: array expected");
                                message.endpoints = [];
                                for (var i = 0; i < object.endpoints.length; ++i) {
                                    if (typeof object.endpoints[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.endpoints: object expected");
                                    message.endpoints[i] = $root.google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.fromObject(object.endpoints[i]);
                                }
                            }
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            switch (object.latestVerificationResult) {
                            default:
                                if (typeof object.latestVerificationResult === "number") {
                                    message.latestVerificationResult = object.latestVerificationResult;
                                    break;
                                }
                                break;
                            case "RESULT_UNSPECIFIED":
                            case 0:
                                message.latestVerificationResult = 0;
                                break;
                            case "SUCCESS_USER_VERIFIED":
                            case 1:
                                message.latestVerificationResult = 1;
                                break;
                            case "ERROR_USER_NOT_VERIFIED":
                            case 2:
                                message.latestVerificationResult = 2;
                                break;
                            case "ERROR_SITE_ONBOARDING_INCOMPLETE":
                            case 3:
                                message.latestVerificationResult = 3;
                                break;
                            case "ERROR_RECIPIENT_NOT_ALLOWED":
                            case 4:
                                message.latestVerificationResult = 4;
                                break;
                            case "ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED":
                            case 5:
                                message.latestVerificationResult = 5;
                                break;
                            case "ERROR_CRITICAL_INTERNAL":
                            case 6:
                                message.latestVerificationResult = 6;
                                break;
                            case "ERROR_CUSTOMER_QUOTA_EXHAUSTED":
                            case 7:
                                message.latestVerificationResult = 7;
                                break;
                            case "ERROR_VERIFICATION_BYPASSED":
                            case 8:
                                message.latestVerificationResult = 8;
                                break;
                            case "ERROR_VERDICT_MISMATCH":
                            case 9:
                                message.latestVerificationResult = 9;
                                break;
                            }
                            if (object.username != null)
                                message.username = String(object.username);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AccountVerificationInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.AccountVerificationInfo} message AccountVerificationInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AccountVerificationInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.endpoints = [];
                            if (options.defaults) {
                                object.username = "";
                                object.languageCode = "";
                                object.latestVerificationResult = options.enums === String ? "RESULT_UNSPECIFIED" : 0;
                            }
                            if (message.endpoints && message.endpoints.length) {
                                object.endpoints = [];
                                for (var j = 0; j < message.endpoints.length; ++j)
                                    object.endpoints[j] = $root.google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.toObject(message.endpoints[j], options);
                            }
                            if (message.username != null && message.hasOwnProperty("username"))
                                object.username = message.username;
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            if (message.latestVerificationResult != null && message.hasOwnProperty("latestVerificationResult"))
                                object.latestVerificationResult = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.Result[message.latestVerificationResult] === undefined ? message.latestVerificationResult : $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.Result[message.latestVerificationResult] : message.latestVerificationResult;
                            return object;
                        };
    
                        /**
                         * Converts this AccountVerificationInfo to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AccountVerificationInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AccountVerificationInfo
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AccountVerificationInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.AccountVerificationInfo";
                        };
    
                        /**
                         * Result enum.
                         * @name google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.Result
                         * @enum {number}
                         * @property {number} RESULT_UNSPECIFIED=0 RESULT_UNSPECIFIED value
                         * @property {number} SUCCESS_USER_VERIFIED=1 SUCCESS_USER_VERIFIED value
                         * @property {number} ERROR_USER_NOT_VERIFIED=2 ERROR_USER_NOT_VERIFIED value
                         * @property {number} ERROR_SITE_ONBOARDING_INCOMPLETE=3 ERROR_SITE_ONBOARDING_INCOMPLETE value
                         * @property {number} ERROR_RECIPIENT_NOT_ALLOWED=4 ERROR_RECIPIENT_NOT_ALLOWED value
                         * @property {number} ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED=5 ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED value
                         * @property {number} ERROR_CRITICAL_INTERNAL=6 ERROR_CRITICAL_INTERNAL value
                         * @property {number} ERROR_CUSTOMER_QUOTA_EXHAUSTED=7 ERROR_CUSTOMER_QUOTA_EXHAUSTED value
                         * @property {number} ERROR_VERIFICATION_BYPASSED=8 ERROR_VERIFICATION_BYPASSED value
                         * @property {number} ERROR_VERDICT_MISMATCH=9 ERROR_VERDICT_MISMATCH value
                         */
                        AccountVerificationInfo.Result = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "RESULT_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "SUCCESS_USER_VERIFIED"] = 1;
                            values[valuesById[2] = "ERROR_USER_NOT_VERIFIED"] = 2;
                            values[valuesById[3] = "ERROR_SITE_ONBOARDING_INCOMPLETE"] = 3;
                            values[valuesById[4] = "ERROR_RECIPIENT_NOT_ALLOWED"] = 4;
                            values[valuesById[5] = "ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED"] = 5;
                            values[valuesById[6] = "ERROR_CRITICAL_INTERNAL"] = 6;
                            values[valuesById[7] = "ERROR_CUSTOMER_QUOTA_EXHAUSTED"] = 7;
                            values[valuesById[8] = "ERROR_VERIFICATION_BYPASSED"] = 8;
                            values[valuesById[9] = "ERROR_VERDICT_MISMATCH"] = 9;
                            return values;
                        })();
    
                        return AccountVerificationInfo;
                    })();
    
                    v1.PrivatePasswordLeakVerification = (function() {
    
                        /**
                         * Properties of a PrivatePasswordLeakVerification.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IPrivatePasswordLeakVerification
                         * @property {Uint8Array|null} [lookupHashPrefix] PrivatePasswordLeakVerification lookupHashPrefix
                         * @property {Uint8Array|null} [encryptedUserCredentialsHash] PrivatePasswordLeakVerification encryptedUserCredentialsHash
                         * @property {Array.<Uint8Array>|null} [encryptedLeakMatchPrefixes] PrivatePasswordLeakVerification encryptedLeakMatchPrefixes
                         * @property {Uint8Array|null} [reencryptedUserCredentialsHash] PrivatePasswordLeakVerification reencryptedUserCredentialsHash
                         */
    
                        /**
                         * Constructs a new PrivatePasswordLeakVerification.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a PrivatePasswordLeakVerification.
                         * @implements IPrivatePasswordLeakVerification
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IPrivatePasswordLeakVerification=} [properties] Properties to set
                         */
                        function PrivatePasswordLeakVerification(properties) {
                            this.encryptedLeakMatchPrefixes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PrivatePasswordLeakVerification lookupHashPrefix.
                         * @member {Uint8Array} lookupHashPrefix
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @instance
                         */
                        PrivatePasswordLeakVerification.prototype.lookupHashPrefix = $util.newBuffer([]);
    
                        /**
                         * PrivatePasswordLeakVerification encryptedUserCredentialsHash.
                         * @member {Uint8Array} encryptedUserCredentialsHash
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @instance
                         */
                        PrivatePasswordLeakVerification.prototype.encryptedUserCredentialsHash = $util.newBuffer([]);
    
                        /**
                         * PrivatePasswordLeakVerification encryptedLeakMatchPrefixes.
                         * @member {Array.<Uint8Array>} encryptedLeakMatchPrefixes
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @instance
                         */
                        PrivatePasswordLeakVerification.prototype.encryptedLeakMatchPrefixes = $util.emptyArray;
    
                        /**
                         * PrivatePasswordLeakVerification reencryptedUserCredentialsHash.
                         * @member {Uint8Array} reencryptedUserCredentialsHash
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @instance
                         */
                        PrivatePasswordLeakVerification.prototype.reencryptedUserCredentialsHash = $util.newBuffer([]);
    
                        /**
                         * Creates a new PrivatePasswordLeakVerification instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IPrivatePasswordLeakVerification=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification} PrivatePasswordLeakVerification instance
                         */
                        PrivatePasswordLeakVerification.create = function create(properties) {
                            return new PrivatePasswordLeakVerification(properties);
                        };
    
                        /**
                         * Encodes the specified PrivatePasswordLeakVerification message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IPrivatePasswordLeakVerification} message PrivatePasswordLeakVerification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PrivatePasswordLeakVerification.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.lookupHashPrefix != null && Object.hasOwnProperty.call(message, "lookupHashPrefix"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.lookupHashPrefix);
                            if (message.encryptedUserCredentialsHash != null && Object.hasOwnProperty.call(message, "encryptedUserCredentialsHash"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.encryptedUserCredentialsHash);
                            if (message.encryptedLeakMatchPrefixes != null && message.encryptedLeakMatchPrefixes.length)
                                for (var i = 0; i < message.encryptedLeakMatchPrefixes.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.encryptedLeakMatchPrefixes[i]);
                            if (message.reencryptedUserCredentialsHash != null && Object.hasOwnProperty.call(message, "reencryptedUserCredentialsHash"))
                                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.reencryptedUserCredentialsHash);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PrivatePasswordLeakVerification message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IPrivatePasswordLeakVerification} message PrivatePasswordLeakVerification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PrivatePasswordLeakVerification.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PrivatePasswordLeakVerification message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification} PrivatePasswordLeakVerification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PrivatePasswordLeakVerification.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.lookupHashPrefix = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        message.encryptedUserCredentialsHash = reader.bytes();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.encryptedLeakMatchPrefixes && message.encryptedLeakMatchPrefixes.length))
                                            message.encryptedLeakMatchPrefixes = [];
                                        message.encryptedLeakMatchPrefixes.push(reader.bytes());
                                        break;
                                    }
                                case 4: {
                                        message.reencryptedUserCredentialsHash = reader.bytes();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PrivatePasswordLeakVerification message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification} PrivatePasswordLeakVerification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PrivatePasswordLeakVerification.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PrivatePasswordLeakVerification message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PrivatePasswordLeakVerification.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.lookupHashPrefix != null && message.hasOwnProperty("lookupHashPrefix"))
                                if (!(message.lookupHashPrefix && typeof message.lookupHashPrefix.length === "number" || $util.isString(message.lookupHashPrefix)))
                                    return "lookupHashPrefix: buffer expected";
                            if (message.encryptedUserCredentialsHash != null && message.hasOwnProperty("encryptedUserCredentialsHash"))
                                if (!(message.encryptedUserCredentialsHash && typeof message.encryptedUserCredentialsHash.length === "number" || $util.isString(message.encryptedUserCredentialsHash)))
                                    return "encryptedUserCredentialsHash: buffer expected";
                            if (message.encryptedLeakMatchPrefixes != null && message.hasOwnProperty("encryptedLeakMatchPrefixes")) {
                                if (!Array.isArray(message.encryptedLeakMatchPrefixes))
                                    return "encryptedLeakMatchPrefixes: array expected";
                                for (var i = 0; i < message.encryptedLeakMatchPrefixes.length; ++i)
                                    if (!(message.encryptedLeakMatchPrefixes[i] && typeof message.encryptedLeakMatchPrefixes[i].length === "number" || $util.isString(message.encryptedLeakMatchPrefixes[i])))
                                        return "encryptedLeakMatchPrefixes: buffer[] expected";
                            }
                            if (message.reencryptedUserCredentialsHash != null && message.hasOwnProperty("reencryptedUserCredentialsHash"))
                                if (!(message.reencryptedUserCredentialsHash && typeof message.reencryptedUserCredentialsHash.length === "number" || $util.isString(message.reencryptedUserCredentialsHash)))
                                    return "reencryptedUserCredentialsHash: buffer expected";
                            return null;
                        };
    
                        /**
                         * Creates a PrivatePasswordLeakVerification message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification} PrivatePasswordLeakVerification
                         */
                        PrivatePasswordLeakVerification.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification();
                            if (object.lookupHashPrefix != null)
                                if (typeof object.lookupHashPrefix === "string")
                                    $util.base64.decode(object.lookupHashPrefix, message.lookupHashPrefix = $util.newBuffer($util.base64.length(object.lookupHashPrefix)), 0);
                                else if (object.lookupHashPrefix.length >= 0)
                                    message.lookupHashPrefix = object.lookupHashPrefix;
                            if (object.encryptedUserCredentialsHash != null)
                                if (typeof object.encryptedUserCredentialsHash === "string")
                                    $util.base64.decode(object.encryptedUserCredentialsHash, message.encryptedUserCredentialsHash = $util.newBuffer($util.base64.length(object.encryptedUserCredentialsHash)), 0);
                                else if (object.encryptedUserCredentialsHash.length >= 0)
                                    message.encryptedUserCredentialsHash = object.encryptedUserCredentialsHash;
                            if (object.encryptedLeakMatchPrefixes) {
                                if (!Array.isArray(object.encryptedLeakMatchPrefixes))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.encryptedLeakMatchPrefixes: array expected");
                                message.encryptedLeakMatchPrefixes = [];
                                for (var i = 0; i < object.encryptedLeakMatchPrefixes.length; ++i)
                                    if (typeof object.encryptedLeakMatchPrefixes[i] === "string")
                                        $util.base64.decode(object.encryptedLeakMatchPrefixes[i], message.encryptedLeakMatchPrefixes[i] = $util.newBuffer($util.base64.length(object.encryptedLeakMatchPrefixes[i])), 0);
                                    else if (object.encryptedLeakMatchPrefixes[i].length >= 0)
                                        message.encryptedLeakMatchPrefixes[i] = object.encryptedLeakMatchPrefixes[i];
                            }
                            if (object.reencryptedUserCredentialsHash != null)
                                if (typeof object.reencryptedUserCredentialsHash === "string")
                                    $util.base64.decode(object.reencryptedUserCredentialsHash, message.reencryptedUserCredentialsHash = $util.newBuffer($util.base64.length(object.reencryptedUserCredentialsHash)), 0);
                                else if (object.reencryptedUserCredentialsHash.length >= 0)
                                    message.reencryptedUserCredentialsHash = object.reencryptedUserCredentialsHash;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PrivatePasswordLeakVerification message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification} message PrivatePasswordLeakVerification
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PrivatePasswordLeakVerification.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.encryptedLeakMatchPrefixes = [];
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.lookupHashPrefix = "";
                                else {
                                    object.lookupHashPrefix = [];
                                    if (options.bytes !== Array)
                                        object.lookupHashPrefix = $util.newBuffer(object.lookupHashPrefix);
                                }
                                if (options.bytes === String)
                                    object.encryptedUserCredentialsHash = "";
                                else {
                                    object.encryptedUserCredentialsHash = [];
                                    if (options.bytes !== Array)
                                        object.encryptedUserCredentialsHash = $util.newBuffer(object.encryptedUserCredentialsHash);
                                }
                                if (options.bytes === String)
                                    object.reencryptedUserCredentialsHash = "";
                                else {
                                    object.reencryptedUserCredentialsHash = [];
                                    if (options.bytes !== Array)
                                        object.reencryptedUserCredentialsHash = $util.newBuffer(object.reencryptedUserCredentialsHash);
                                }
                            }
                            if (message.lookupHashPrefix != null && message.hasOwnProperty("lookupHashPrefix"))
                                object.lookupHashPrefix = options.bytes === String ? $util.base64.encode(message.lookupHashPrefix, 0, message.lookupHashPrefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.lookupHashPrefix) : message.lookupHashPrefix;
                            if (message.encryptedUserCredentialsHash != null && message.hasOwnProperty("encryptedUserCredentialsHash"))
                                object.encryptedUserCredentialsHash = options.bytes === String ? $util.base64.encode(message.encryptedUserCredentialsHash, 0, message.encryptedUserCredentialsHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.encryptedUserCredentialsHash) : message.encryptedUserCredentialsHash;
                            if (message.encryptedLeakMatchPrefixes && message.encryptedLeakMatchPrefixes.length) {
                                object.encryptedLeakMatchPrefixes = [];
                                for (var j = 0; j < message.encryptedLeakMatchPrefixes.length; ++j)
                                    object.encryptedLeakMatchPrefixes[j] = options.bytes === String ? $util.base64.encode(message.encryptedLeakMatchPrefixes[j], 0, message.encryptedLeakMatchPrefixes[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.encryptedLeakMatchPrefixes[j]) : message.encryptedLeakMatchPrefixes[j];
                            }
                            if (message.reencryptedUserCredentialsHash != null && message.hasOwnProperty("reencryptedUserCredentialsHash"))
                                object.reencryptedUserCredentialsHash = options.bytes === String ? $util.base64.encode(message.reencryptedUserCredentialsHash, 0, message.reencryptedUserCredentialsHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.reencryptedUserCredentialsHash) : message.reencryptedUserCredentialsHash;
                            return object;
                        };
    
                        /**
                         * Converts this PrivatePasswordLeakVerification to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PrivatePasswordLeakVerification.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PrivatePasswordLeakVerification
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PrivatePasswordLeakVerification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification";
                        };
    
                        return PrivatePasswordLeakVerification;
                    })();
    
                    v1.Assessment = (function() {
    
                        /**
                         * Properties of an Assessment.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IAssessment
                         * @property {string|null} [name] Assessment name
                         * @property {google.cloud.recaptchaenterprise.v1.IEvent|null} [event] Assessment event
                         * @property {google.cloud.recaptchaenterprise.v1.IRiskAnalysis|null} [riskAnalysis] Assessment riskAnalysis
                         * @property {google.cloud.recaptchaenterprise.v1.ITokenProperties|null} [tokenProperties] Assessment tokenProperties
                         * @property {google.cloud.recaptchaenterprise.v1.IAccountVerificationInfo|null} [accountVerification] Assessment accountVerification
                         * @property {google.cloud.recaptchaenterprise.v1.IAccountDefenderAssessment|null} [accountDefenderAssessment] Assessment accountDefenderAssessment
                         * @property {google.cloud.recaptchaenterprise.v1.IPrivatePasswordLeakVerification|null} [privatePasswordLeakVerification] Assessment privatePasswordLeakVerification
                         * @property {google.cloud.recaptchaenterprise.v1.IFraudPreventionAssessment|null} [fraudPreventionAssessment] Assessment fraudPreventionAssessment
                         */
    
                        /**
                         * Constructs a new Assessment.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an Assessment.
                         * @implements IAssessment
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IAssessment=} [properties] Properties to set
                         */
                        function Assessment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Assessment name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         */
                        Assessment.prototype.name = "";
    
                        /**
                         * Assessment event.
                         * @member {google.cloud.recaptchaenterprise.v1.IEvent|null|undefined} event
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         */
                        Assessment.prototype.event = null;
    
                        /**
                         * Assessment riskAnalysis.
                         * @member {google.cloud.recaptchaenterprise.v1.IRiskAnalysis|null|undefined} riskAnalysis
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         */
                        Assessment.prototype.riskAnalysis = null;
    
                        /**
                         * Assessment tokenProperties.
                         * @member {google.cloud.recaptchaenterprise.v1.ITokenProperties|null|undefined} tokenProperties
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         */
                        Assessment.prototype.tokenProperties = null;
    
                        /**
                         * Assessment accountVerification.
                         * @member {google.cloud.recaptchaenterprise.v1.IAccountVerificationInfo|null|undefined} accountVerification
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         */
                        Assessment.prototype.accountVerification = null;
    
                        /**
                         * Assessment accountDefenderAssessment.
                         * @member {google.cloud.recaptchaenterprise.v1.IAccountDefenderAssessment|null|undefined} accountDefenderAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         */
                        Assessment.prototype.accountDefenderAssessment = null;
    
                        /**
                         * Assessment privatePasswordLeakVerification.
                         * @member {google.cloud.recaptchaenterprise.v1.IPrivatePasswordLeakVerification|null|undefined} privatePasswordLeakVerification
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         */
                        Assessment.prototype.privatePasswordLeakVerification = null;
    
                        /**
                         * Assessment fraudPreventionAssessment.
                         * @member {google.cloud.recaptchaenterprise.v1.IFraudPreventionAssessment|null|undefined} fraudPreventionAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         */
                        Assessment.prototype.fraudPreventionAssessment = null;
    
                        /**
                         * Creates a new Assessment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAssessment=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.Assessment} Assessment instance
                         */
                        Assessment.create = function create(properties) {
                            return new Assessment(properties);
                        };
    
                        /**
                         * Encodes the specified Assessment message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.Assessment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAssessment} message Assessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Assessment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.event != null && Object.hasOwnProperty.call(message, "event"))
                                $root.google.cloud.recaptchaenterprise.v1.Event.encode(message.event, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.riskAnalysis != null && Object.hasOwnProperty.call(message, "riskAnalysis"))
                                $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis.encode(message.riskAnalysis, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.tokenProperties != null && Object.hasOwnProperty.call(message, "tokenProperties"))
                                $root.google.cloud.recaptchaenterprise.v1.TokenProperties.encode(message.tokenProperties, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.accountVerification != null && Object.hasOwnProperty.call(message, "accountVerification"))
                                $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.encode(message.accountVerification, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.accountDefenderAssessment != null && Object.hasOwnProperty.call(message, "accountDefenderAssessment"))
                                $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.encode(message.accountDefenderAssessment, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.privatePasswordLeakVerification != null && Object.hasOwnProperty.call(message, "privatePasswordLeakVerification"))
                                $root.google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.encode(message.privatePasswordLeakVerification, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.fraudPreventionAssessment != null && Object.hasOwnProperty.call(message, "fraudPreventionAssessment"))
                                $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.encode(message.fraudPreventionAssessment, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Assessment message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.Assessment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAssessment} message Assessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Assessment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Assessment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.Assessment} Assessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Assessment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.Assessment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.event = $root.google.cloud.recaptchaenterprise.v1.Event.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.riskAnalysis = $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.tokenProperties = $root.google.cloud.recaptchaenterprise.v1.TokenProperties.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.accountVerification = $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.accountDefenderAssessment = $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.privatePasswordLeakVerification = $root.google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.fraudPreventionAssessment = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Assessment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.Assessment} Assessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Assessment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Assessment message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Assessment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.event != null && message.hasOwnProperty("event")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.Event.verify(message.event);
                                if (error)
                                    return "event." + error;
                            }
                            if (message.riskAnalysis != null && message.hasOwnProperty("riskAnalysis")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis.verify(message.riskAnalysis);
                                if (error)
                                    return "riskAnalysis." + error;
                            }
                            if (message.tokenProperties != null && message.hasOwnProperty("tokenProperties")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.TokenProperties.verify(message.tokenProperties);
                                if (error)
                                    return "tokenProperties." + error;
                            }
                            if (message.accountVerification != null && message.hasOwnProperty("accountVerification")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.verify(message.accountVerification);
                                if (error)
                                    return "accountVerification." + error;
                            }
                            if (message.accountDefenderAssessment != null && message.hasOwnProperty("accountDefenderAssessment")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.verify(message.accountDefenderAssessment);
                                if (error)
                                    return "accountDefenderAssessment." + error;
                            }
                            if (message.privatePasswordLeakVerification != null && message.hasOwnProperty("privatePasswordLeakVerification")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.verify(message.privatePasswordLeakVerification);
                                if (error)
                                    return "privatePasswordLeakVerification." + error;
                            }
                            if (message.fraudPreventionAssessment != null && message.hasOwnProperty("fraudPreventionAssessment")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.verify(message.fraudPreventionAssessment);
                                if (error)
                                    return "fraudPreventionAssessment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Assessment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.Assessment} Assessment
                         */
                        Assessment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.Assessment)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.Assessment();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.event != null) {
                                if (typeof object.event !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Assessment.event: object expected");
                                message.event = $root.google.cloud.recaptchaenterprise.v1.Event.fromObject(object.event);
                            }
                            if (object.riskAnalysis != null) {
                                if (typeof object.riskAnalysis !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Assessment.riskAnalysis: object expected");
                                message.riskAnalysis = $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis.fromObject(object.riskAnalysis);
                            }
                            if (object.tokenProperties != null) {
                                if (typeof object.tokenProperties !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Assessment.tokenProperties: object expected");
                                message.tokenProperties = $root.google.cloud.recaptchaenterprise.v1.TokenProperties.fromObject(object.tokenProperties);
                            }
                            if (object.accountVerification != null) {
                                if (typeof object.accountVerification !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Assessment.accountVerification: object expected");
                                message.accountVerification = $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.fromObject(object.accountVerification);
                            }
                            if (object.accountDefenderAssessment != null) {
                                if (typeof object.accountDefenderAssessment !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Assessment.accountDefenderAssessment: object expected");
                                message.accountDefenderAssessment = $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.fromObject(object.accountDefenderAssessment);
                            }
                            if (object.privatePasswordLeakVerification != null) {
                                if (typeof object.privatePasswordLeakVerification !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Assessment.privatePasswordLeakVerification: object expected");
                                message.privatePasswordLeakVerification = $root.google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.fromObject(object.privatePasswordLeakVerification);
                            }
                            if (object.fraudPreventionAssessment != null) {
                                if (typeof object.fraudPreventionAssessment !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Assessment.fraudPreventionAssessment: object expected");
                                message.fraudPreventionAssessment = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.fromObject(object.fraudPreventionAssessment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Assessment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.Assessment} message Assessment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Assessment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.event = null;
                                object.riskAnalysis = null;
                                object.tokenProperties = null;
                                object.accountVerification = null;
                                object.accountDefenderAssessment = null;
                                object.privatePasswordLeakVerification = null;
                                object.fraudPreventionAssessment = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.event != null && message.hasOwnProperty("event"))
                                object.event = $root.google.cloud.recaptchaenterprise.v1.Event.toObject(message.event, options);
                            if (message.riskAnalysis != null && message.hasOwnProperty("riskAnalysis"))
                                object.riskAnalysis = $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis.toObject(message.riskAnalysis, options);
                            if (message.tokenProperties != null && message.hasOwnProperty("tokenProperties"))
                                object.tokenProperties = $root.google.cloud.recaptchaenterprise.v1.TokenProperties.toObject(message.tokenProperties, options);
                            if (message.accountVerification != null && message.hasOwnProperty("accountVerification"))
                                object.accountVerification = $root.google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.toObject(message.accountVerification, options);
                            if (message.accountDefenderAssessment != null && message.hasOwnProperty("accountDefenderAssessment"))
                                object.accountDefenderAssessment = $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.toObject(message.accountDefenderAssessment, options);
                            if (message.privatePasswordLeakVerification != null && message.hasOwnProperty("privatePasswordLeakVerification"))
                                object.privatePasswordLeakVerification = $root.google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.toObject(message.privatePasswordLeakVerification, options);
                            if (message.fraudPreventionAssessment != null && message.hasOwnProperty("fraudPreventionAssessment"))
                                object.fraudPreventionAssessment = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.toObject(message.fraudPreventionAssessment, options);
                            return object;
                        };
    
                        /**
                         * Converts this Assessment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Assessment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Assessment
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.Assessment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Assessment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.Assessment";
                        };
    
                        return Assessment;
                    })();
    
                    v1.Event = (function() {
    
                        /**
                         * Properties of an Event.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IEvent
                         * @property {string|null} [token] Event token
                         * @property {string|null} [siteKey] Event siteKey
                         * @property {string|null} [userAgent] Event userAgent
                         * @property {string|null} [userIpAddress] Event userIpAddress
                         * @property {string|null} [expectedAction] Event expectedAction
                         * @property {Uint8Array|null} [hashedAccountId] Event hashedAccountId
                         * @property {google.cloud.recaptchaenterprise.v1.ITransactionData|null} [transactionData] Event transactionData
                         */
    
                        /**
                         * Constructs a new Event.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an Event.
                         * @implements IEvent
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IEvent=} [properties] Properties to set
                         */
                        function Event(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Event token.
                         * @member {string} token
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @instance
                         */
                        Event.prototype.token = "";
    
                        /**
                         * Event siteKey.
                         * @member {string} siteKey
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @instance
                         */
                        Event.prototype.siteKey = "";
    
                        /**
                         * Event userAgent.
                         * @member {string} userAgent
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @instance
                         */
                        Event.prototype.userAgent = "";
    
                        /**
                         * Event userIpAddress.
                         * @member {string} userIpAddress
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @instance
                         */
                        Event.prototype.userIpAddress = "";
    
                        /**
                         * Event expectedAction.
                         * @member {string} expectedAction
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @instance
                         */
                        Event.prototype.expectedAction = "";
    
                        /**
                         * Event hashedAccountId.
                         * @member {Uint8Array} hashedAccountId
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @instance
                         */
                        Event.prototype.hashedAccountId = $util.newBuffer([]);
    
                        /**
                         * Event transactionData.
                         * @member {google.cloud.recaptchaenterprise.v1.ITransactionData|null|undefined} transactionData
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @instance
                         */
                        Event.prototype.transactionData = null;
    
                        /**
                         * Creates a new Event instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IEvent=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.Event} Event instance
                         */
                        Event.create = function create(properties) {
                            return new Event(properties);
                        };
    
                        /**
                         * Encodes the specified Event message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.Event.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IEvent} message Event message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Event.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                            if (message.siteKey != null && Object.hasOwnProperty.call(message, "siteKey"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.siteKey);
                            if (message.userAgent != null && Object.hasOwnProperty.call(message, "userAgent"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.userAgent);
                            if (message.userIpAddress != null && Object.hasOwnProperty.call(message, "userIpAddress"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.userIpAddress);
                            if (message.expectedAction != null && Object.hasOwnProperty.call(message, "expectedAction"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.expectedAction);
                            if (message.hashedAccountId != null && Object.hasOwnProperty.call(message, "hashedAccountId"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.hashedAccountId);
                            if (message.transactionData != null && Object.hasOwnProperty.call(message, "transactionData"))
                                $root.google.cloud.recaptchaenterprise.v1.TransactionData.encode(message.transactionData, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Event message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.Event.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IEvent} message Event message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Event.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Event message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.Event} Event
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Event.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.Event();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.token = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.siteKey = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.userAgent = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.userIpAddress = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.expectedAction = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.hashedAccountId = reader.bytes();
                                        break;
                                    }
                                case 13: {
                                        message.transactionData = $root.google.cloud.recaptchaenterprise.v1.TransactionData.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Event message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.Event} Event
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Event.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Event message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Event.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.token != null && message.hasOwnProperty("token"))
                                if (!$util.isString(message.token))
                                    return "token: string expected";
                            if (message.siteKey != null && message.hasOwnProperty("siteKey"))
                                if (!$util.isString(message.siteKey))
                                    return "siteKey: string expected";
                            if (message.userAgent != null && message.hasOwnProperty("userAgent"))
                                if (!$util.isString(message.userAgent))
                                    return "userAgent: string expected";
                            if (message.userIpAddress != null && message.hasOwnProperty("userIpAddress"))
                                if (!$util.isString(message.userIpAddress))
                                    return "userIpAddress: string expected";
                            if (message.expectedAction != null && message.hasOwnProperty("expectedAction"))
                                if (!$util.isString(message.expectedAction))
                                    return "expectedAction: string expected";
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                if (!(message.hashedAccountId && typeof message.hashedAccountId.length === "number" || $util.isString(message.hashedAccountId)))
                                    return "hashedAccountId: buffer expected";
                            if (message.transactionData != null && message.hasOwnProperty("transactionData")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.TransactionData.verify(message.transactionData);
                                if (error)
                                    return "transactionData." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Event message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.Event} Event
                         */
                        Event.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.Event)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.Event();
                            if (object.token != null)
                                message.token = String(object.token);
                            if (object.siteKey != null)
                                message.siteKey = String(object.siteKey);
                            if (object.userAgent != null)
                                message.userAgent = String(object.userAgent);
                            if (object.userIpAddress != null)
                                message.userIpAddress = String(object.userIpAddress);
                            if (object.expectedAction != null)
                                message.expectedAction = String(object.expectedAction);
                            if (object.hashedAccountId != null)
                                if (typeof object.hashedAccountId === "string")
                                    $util.base64.decode(object.hashedAccountId, message.hashedAccountId = $util.newBuffer($util.base64.length(object.hashedAccountId)), 0);
                                else if (object.hashedAccountId.length >= 0)
                                    message.hashedAccountId = object.hashedAccountId;
                            if (object.transactionData != null) {
                                if (typeof object.transactionData !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Event.transactionData: object expected");
                                message.transactionData = $root.google.cloud.recaptchaenterprise.v1.TransactionData.fromObject(object.transactionData);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Event message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.Event} message Event
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Event.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.token = "";
                                object.siteKey = "";
                                object.userAgent = "";
                                object.userIpAddress = "";
                                object.expectedAction = "";
                                if (options.bytes === String)
                                    object.hashedAccountId = "";
                                else {
                                    object.hashedAccountId = [];
                                    if (options.bytes !== Array)
                                        object.hashedAccountId = $util.newBuffer(object.hashedAccountId);
                                }
                                object.transactionData = null;
                            }
                            if (message.token != null && message.hasOwnProperty("token"))
                                object.token = message.token;
                            if (message.siteKey != null && message.hasOwnProperty("siteKey"))
                                object.siteKey = message.siteKey;
                            if (message.userAgent != null && message.hasOwnProperty("userAgent"))
                                object.userAgent = message.userAgent;
                            if (message.userIpAddress != null && message.hasOwnProperty("userIpAddress"))
                                object.userIpAddress = message.userIpAddress;
                            if (message.expectedAction != null && message.hasOwnProperty("expectedAction"))
                                object.expectedAction = message.expectedAction;
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                object.hashedAccountId = options.bytes === String ? $util.base64.encode(message.hashedAccountId, 0, message.hashedAccountId.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashedAccountId) : message.hashedAccountId;
                            if (message.transactionData != null && message.hasOwnProperty("transactionData"))
                                object.transactionData = $root.google.cloud.recaptchaenterprise.v1.TransactionData.toObject(message.transactionData, options);
                            return object;
                        };
    
                        /**
                         * Converts this Event to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Event.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Event
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.Event
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.Event";
                        };
    
                        return Event;
                    })();
    
                    v1.TransactionData = (function() {
    
                        /**
                         * Properties of a TransactionData.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface ITransactionData
                         * @property {string|null} [transactionId] TransactionData transactionId
                         * @property {string|null} [paymentMethod] TransactionData paymentMethod
                         * @property {string|null} [cardBin] TransactionData cardBin
                         * @property {string|null} [cardLastFour] TransactionData cardLastFour
                         * @property {string|null} [currencyCode] TransactionData currencyCode
                         * @property {number|null} [value] TransactionData value
                         * @property {number|null} [shippingValue] TransactionData shippingValue
                         * @property {google.cloud.recaptchaenterprise.v1.TransactionData.IAddress|null} [shippingAddress] TransactionData shippingAddress
                         * @property {google.cloud.recaptchaenterprise.v1.TransactionData.IAddress|null} [billingAddress] TransactionData billingAddress
                         * @property {google.cloud.recaptchaenterprise.v1.TransactionData.IUser|null} [user] TransactionData user
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.TransactionData.IUser>|null} [merchants] TransactionData merchants
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.TransactionData.IItem>|null} [items] TransactionData items
                         * @property {google.cloud.recaptchaenterprise.v1.TransactionData.IGatewayInfo|null} [gatewayInfo] TransactionData gatewayInfo
                         */
    
                        /**
                         * Constructs a new TransactionData.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a TransactionData.
                         * @implements ITransactionData
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.ITransactionData=} [properties] Properties to set
                         */
                        function TransactionData(properties) {
                            this.merchants = [];
                            this.items = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TransactionData transactionId.
                         * @member {string|null|undefined} transactionId
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.transactionId = null;
    
                        /**
                         * TransactionData paymentMethod.
                         * @member {string} paymentMethod
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.paymentMethod = "";
    
                        /**
                         * TransactionData cardBin.
                         * @member {string} cardBin
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.cardBin = "";
    
                        /**
                         * TransactionData cardLastFour.
                         * @member {string} cardLastFour
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.cardLastFour = "";
    
                        /**
                         * TransactionData currencyCode.
                         * @member {string} currencyCode
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.currencyCode = "";
    
                        /**
                         * TransactionData value.
                         * @member {number} value
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.value = 0;
    
                        /**
                         * TransactionData shippingValue.
                         * @member {number} shippingValue
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.shippingValue = 0;
    
                        /**
                         * TransactionData shippingAddress.
                         * @member {google.cloud.recaptchaenterprise.v1.TransactionData.IAddress|null|undefined} shippingAddress
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.shippingAddress = null;
    
                        /**
                         * TransactionData billingAddress.
                         * @member {google.cloud.recaptchaenterprise.v1.TransactionData.IAddress|null|undefined} billingAddress
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.billingAddress = null;
    
                        /**
                         * TransactionData user.
                         * @member {google.cloud.recaptchaenterprise.v1.TransactionData.IUser|null|undefined} user
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.user = null;
    
                        /**
                         * TransactionData merchants.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.TransactionData.IUser>} merchants
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.merchants = $util.emptyArray;
    
                        /**
                         * TransactionData items.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.TransactionData.IItem>} items
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.items = $util.emptyArray;
    
                        /**
                         * TransactionData gatewayInfo.
                         * @member {google.cloud.recaptchaenterprise.v1.TransactionData.IGatewayInfo|null|undefined} gatewayInfo
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.gatewayInfo = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * TransactionData _transactionId.
                         * @member {"transactionId"|undefined} _transactionId
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         */
                        Object.defineProperty(TransactionData.prototype, "_transactionId", {
                            get: $util.oneOfGetter($oneOfFields = ["transactionId"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new TransactionData instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITransactionData=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.TransactionData} TransactionData instance
                         */
                        TransactionData.create = function create(properties) {
                            return new TransactionData(properties);
                        };
    
                        /**
                         * Encodes the specified TransactionData message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITransactionData} message TransactionData message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransactionData.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.paymentMethod != null && Object.hasOwnProperty.call(message, "paymentMethod"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.paymentMethod);
                            if (message.cardBin != null && Object.hasOwnProperty.call(message, "cardBin"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.cardBin);
                            if (message.cardLastFour != null && Object.hasOwnProperty.call(message, "cardLastFour"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.cardLastFour);
                            if (message.currencyCode != null && Object.hasOwnProperty.call(message, "currencyCode"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.currencyCode);
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 5, wireType 1 =*/41).double(message.value);
                            if (message.shippingAddress != null && Object.hasOwnProperty.call(message, "shippingAddress"))
                                $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.encode(message.shippingAddress, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.billingAddress != null && Object.hasOwnProperty.call(message, "billingAddress"))
                                $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.encode(message.billingAddress, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                                $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.encode(message.user, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.gatewayInfo != null && Object.hasOwnProperty.call(message, "gatewayInfo"))
                                $root.google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo.encode(message.gatewayInfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.transactionId != null && Object.hasOwnProperty.call(message, "transactionId"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.transactionId);
                            if (message.shippingValue != null && Object.hasOwnProperty.call(message, "shippingValue"))
                                writer.uint32(/* id 12, wireType 1 =*/97).double(message.shippingValue);
                            if (message.merchants != null && message.merchants.length)
                                for (var i = 0; i < message.merchants.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.encode(message.merchants[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            if (message.items != null && message.items.length)
                                for (var i = 0; i < message.items.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.TransactionData.Item.encode(message.items[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TransactionData message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITransactionData} message TransactionData message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransactionData.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TransactionData message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.TransactionData} TransactionData
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransactionData.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 11: {
                                        message.transactionId = reader.string();
                                        break;
                                    }
                                case 1: {
                                        message.paymentMethod = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.cardBin = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.cardLastFour = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.currencyCode = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.value = reader.double();
                                        break;
                                    }
                                case 12: {
                                        message.shippingValue = reader.double();
                                        break;
                                    }
                                case 6: {
                                        message.shippingAddress = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.billingAddress = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.user = $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 13: {
                                        if (!(message.merchants && message.merchants.length))
                                            message.merchants = [];
                                        message.merchants.push($root.google.cloud.recaptchaenterprise.v1.TransactionData.User.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 14: {
                                        if (!(message.items && message.items.length))
                                            message.items = [];
                                        message.items.push($root.google.cloud.recaptchaenterprise.v1.TransactionData.Item.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 10: {
                                        message.gatewayInfo = $root.google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TransactionData message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.TransactionData} TransactionData
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransactionData.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TransactionData message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TransactionData.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.transactionId != null && message.hasOwnProperty("transactionId")) {
                                properties._transactionId = 1;
                                if (!$util.isString(message.transactionId))
                                    return "transactionId: string expected";
                            }
                            if (message.paymentMethod != null && message.hasOwnProperty("paymentMethod"))
                                if (!$util.isString(message.paymentMethod))
                                    return "paymentMethod: string expected";
                            if (message.cardBin != null && message.hasOwnProperty("cardBin"))
                                if (!$util.isString(message.cardBin))
                                    return "cardBin: string expected";
                            if (message.cardLastFour != null && message.hasOwnProperty("cardLastFour"))
                                if (!$util.isString(message.cardLastFour))
                                    return "cardLastFour: string expected";
                            if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                                if (!$util.isString(message.currencyCode))
                                    return "currencyCode: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            if (message.shippingValue != null && message.hasOwnProperty("shippingValue"))
                                if (typeof message.shippingValue !== "number")
                                    return "shippingValue: number expected";
                            if (message.shippingAddress != null && message.hasOwnProperty("shippingAddress")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.verify(message.shippingAddress);
                                if (error)
                                    return "shippingAddress." + error;
                            }
                            if (message.billingAddress != null && message.hasOwnProperty("billingAddress")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.verify(message.billingAddress);
                                if (error)
                                    return "billingAddress." + error;
                            }
                            if (message.user != null && message.hasOwnProperty("user")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.verify(message.user);
                                if (error)
                                    return "user." + error;
                            }
                            if (message.merchants != null && message.hasOwnProperty("merchants")) {
                                if (!Array.isArray(message.merchants))
                                    return "merchants: array expected";
                                for (var i = 0; i < message.merchants.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.verify(message.merchants[i]);
                                    if (error)
                                        return "merchants." + error;
                                }
                            }
                            if (message.items != null && message.hasOwnProperty("items")) {
                                if (!Array.isArray(message.items))
                                    return "items: array expected";
                                for (var i = 0; i < message.items.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Item.verify(message.items[i]);
                                    if (error)
                                        return "items." + error;
                                }
                            }
                            if (message.gatewayInfo != null && message.hasOwnProperty("gatewayInfo")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo.verify(message.gatewayInfo);
                                if (error)
                                    return "gatewayInfo." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TransactionData message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.TransactionData} TransactionData
                         */
                        TransactionData.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.TransactionData)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData();
                            if (object.transactionId != null)
                                message.transactionId = String(object.transactionId);
                            if (object.paymentMethod != null)
                                message.paymentMethod = String(object.paymentMethod);
                            if (object.cardBin != null)
                                message.cardBin = String(object.cardBin);
                            if (object.cardLastFour != null)
                                message.cardLastFour = String(object.cardLastFour);
                            if (object.currencyCode != null)
                                message.currencyCode = String(object.currencyCode);
                            if (object.value != null)
                                message.value = Number(object.value);
                            if (object.shippingValue != null)
                                message.shippingValue = Number(object.shippingValue);
                            if (object.shippingAddress != null) {
                                if (typeof object.shippingAddress !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.shippingAddress: object expected");
                                message.shippingAddress = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.fromObject(object.shippingAddress);
                            }
                            if (object.billingAddress != null) {
                                if (typeof object.billingAddress !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.billingAddress: object expected");
                                message.billingAddress = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.fromObject(object.billingAddress);
                            }
                            if (object.user != null) {
                                if (typeof object.user !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.user: object expected");
                                message.user = $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.fromObject(object.user);
                            }
                            if (object.merchants) {
                                if (!Array.isArray(object.merchants))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.merchants: array expected");
                                message.merchants = [];
                                for (var i = 0; i < object.merchants.length; ++i) {
                                    if (typeof object.merchants[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.merchants: object expected");
                                    message.merchants[i] = $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.fromObject(object.merchants[i]);
                                }
                            }
                            if (object.items) {
                                if (!Array.isArray(object.items))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.items: array expected");
                                message.items = [];
                                for (var i = 0; i < object.items.length; ++i) {
                                    if (typeof object.items[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.items: object expected");
                                    message.items[i] = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Item.fromObject(object.items[i]);
                                }
                            }
                            if (object.gatewayInfo != null) {
                                if (typeof object.gatewayInfo !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.gatewayInfo: object expected");
                                message.gatewayInfo = $root.google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo.fromObject(object.gatewayInfo);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TransactionData message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.TransactionData} message TransactionData
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TransactionData.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.merchants = [];
                                object.items = [];
                            }
                            if (options.defaults) {
                                object.paymentMethod = "";
                                object.cardBin = "";
                                object.cardLastFour = "";
                                object.currencyCode = "";
                                object.value = 0;
                                object.shippingAddress = null;
                                object.billingAddress = null;
                                object.user = null;
                                object.gatewayInfo = null;
                                object.shippingValue = 0;
                            }
                            if (message.paymentMethod != null && message.hasOwnProperty("paymentMethod"))
                                object.paymentMethod = message.paymentMethod;
                            if (message.cardBin != null && message.hasOwnProperty("cardBin"))
                                object.cardBin = message.cardBin;
                            if (message.cardLastFour != null && message.hasOwnProperty("cardLastFour"))
                                object.cardLastFour = message.cardLastFour;
                            if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                                object.currencyCode = message.currencyCode;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            if (message.shippingAddress != null && message.hasOwnProperty("shippingAddress"))
                                object.shippingAddress = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.toObject(message.shippingAddress, options);
                            if (message.billingAddress != null && message.hasOwnProperty("billingAddress"))
                                object.billingAddress = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address.toObject(message.billingAddress, options);
                            if (message.user != null && message.hasOwnProperty("user"))
                                object.user = $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.toObject(message.user, options);
                            if (message.gatewayInfo != null && message.hasOwnProperty("gatewayInfo"))
                                object.gatewayInfo = $root.google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo.toObject(message.gatewayInfo, options);
                            if (message.transactionId != null && message.hasOwnProperty("transactionId")) {
                                object.transactionId = message.transactionId;
                                if (options.oneofs)
                                    object._transactionId = "transactionId";
                            }
                            if (message.shippingValue != null && message.hasOwnProperty("shippingValue"))
                                object.shippingValue = options.json && !isFinite(message.shippingValue) ? String(message.shippingValue) : message.shippingValue;
                            if (message.merchants && message.merchants.length) {
                                object.merchants = [];
                                for (var j = 0; j < message.merchants.length; ++j)
                                    object.merchants[j] = $root.google.cloud.recaptchaenterprise.v1.TransactionData.User.toObject(message.merchants[j], options);
                            }
                            if (message.items && message.items.length) {
                                object.items = [];
                                for (var j = 0; j < message.items.length; ++j)
                                    object.items[j] = $root.google.cloud.recaptchaenterprise.v1.TransactionData.Item.toObject(message.items[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TransactionData to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TransactionData.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TransactionData
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TransactionData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.TransactionData";
                        };
    
                        TransactionData.Address = (function() {
    
                            /**
                             * Properties of an Address.
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                             * @interface IAddress
                             * @property {string|null} [recipient] Address recipient
                             * @property {Array.<string>|null} [address] Address address
                             * @property {string|null} [locality] Address locality
                             * @property {string|null} [administrativeArea] Address administrativeArea
                             * @property {string|null} [regionCode] Address regionCode
                             * @property {string|null} [postalCode] Address postalCode
                             */
    
                            /**
                             * Constructs a new Address.
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                             * @classdesc Represents an Address.
                             * @implements IAddress
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IAddress=} [properties] Properties to set
                             */
                            function Address(properties) {
                                this.address = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Address recipient.
                             * @member {string} recipient
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.recipient = "";
    
                            /**
                             * Address address.
                             * @member {Array.<string>} address
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.address = $util.emptyArray;
    
                            /**
                             * Address locality.
                             * @member {string} locality
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.locality = "";
    
                            /**
                             * Address administrativeArea.
                             * @member {string} administrativeArea
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.administrativeArea = "";
    
                            /**
                             * Address regionCode.
                             * @member {string} regionCode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.regionCode = "";
    
                            /**
                             * Address postalCode.
                             * @member {string} postalCode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.postalCode = "";
    
                            /**
                             * Creates a new Address instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IAddress=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.Address} Address instance
                             */
                            Address.create = function create(properties) {
                                return new Address(properties);
                            };
    
                            /**
                             * Encodes the specified Address message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.Address.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IAddress} message Address message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Address.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.recipient != null && Object.hasOwnProperty.call(message, "recipient"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.recipient);
                                if (message.address != null && message.address.length)
                                    for (var i = 0; i < message.address.length; ++i)
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.address[i]);
                                if (message.locality != null && Object.hasOwnProperty.call(message, "locality"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.locality);
                                if (message.administrativeArea != null && Object.hasOwnProperty.call(message, "administrativeArea"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.administrativeArea);
                                if (message.regionCode != null && Object.hasOwnProperty.call(message, "regionCode"))
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.regionCode);
                                if (message.postalCode != null && Object.hasOwnProperty.call(message, "postalCode"))
                                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.postalCode);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Address message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.Address.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IAddress} message Address message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Address.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Address message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.Address} Address
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Address.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.recipient = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.address && message.address.length))
                                                message.address = [];
                                            message.address.push(reader.string());
                                            break;
                                        }
                                    case 3: {
                                            message.locality = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.administrativeArea = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.regionCode = reader.string();
                                            break;
                                        }
                                    case 6: {
                                            message.postalCode = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Address message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.Address} Address
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Address.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Address message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Address.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.recipient != null && message.hasOwnProperty("recipient"))
                                    if (!$util.isString(message.recipient))
                                        return "recipient: string expected";
                                if (message.address != null && message.hasOwnProperty("address")) {
                                    if (!Array.isArray(message.address))
                                        return "address: array expected";
                                    for (var i = 0; i < message.address.length; ++i)
                                        if (!$util.isString(message.address[i]))
                                            return "address: string[] expected";
                                }
                                if (message.locality != null && message.hasOwnProperty("locality"))
                                    if (!$util.isString(message.locality))
                                        return "locality: string expected";
                                if (message.administrativeArea != null && message.hasOwnProperty("administrativeArea"))
                                    if (!$util.isString(message.administrativeArea))
                                        return "administrativeArea: string expected";
                                if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                    if (!$util.isString(message.regionCode))
                                        return "regionCode: string expected";
                                if (message.postalCode != null && message.hasOwnProperty("postalCode"))
                                    if (!$util.isString(message.postalCode))
                                        return "postalCode: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an Address message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.Address} Address
                             */
                            Address.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData.Address();
                                if (object.recipient != null)
                                    message.recipient = String(object.recipient);
                                if (object.address) {
                                    if (!Array.isArray(object.address))
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.TransactionData.Address.address: array expected");
                                    message.address = [];
                                    for (var i = 0; i < object.address.length; ++i)
                                        message.address[i] = String(object.address[i]);
                                }
                                if (object.locality != null)
                                    message.locality = String(object.locality);
                                if (object.administrativeArea != null)
                                    message.administrativeArea = String(object.administrativeArea);
                                if (object.regionCode != null)
                                    message.regionCode = String(object.regionCode);
                                if (object.postalCode != null)
                                    message.postalCode = String(object.postalCode);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Address message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.Address} message Address
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Address.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.address = [];
                                if (options.defaults) {
                                    object.recipient = "";
                                    object.locality = "";
                                    object.administrativeArea = "";
                                    object.regionCode = "";
                                    object.postalCode = "";
                                }
                                if (message.recipient != null && message.hasOwnProperty("recipient"))
                                    object.recipient = message.recipient;
                                if (message.address && message.address.length) {
                                    object.address = [];
                                    for (var j = 0; j < message.address.length; ++j)
                                        object.address[j] = message.address[j];
                                }
                                if (message.locality != null && message.hasOwnProperty("locality"))
                                    object.locality = message.locality;
                                if (message.administrativeArea != null && message.hasOwnProperty("administrativeArea"))
                                    object.administrativeArea = message.administrativeArea;
                                if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                    object.regionCode = message.regionCode;
                                if (message.postalCode != null && message.hasOwnProperty("postalCode"))
                                    object.postalCode = message.postalCode;
                                return object;
                            };
    
                            /**
                             * Converts this Address to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Address.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Address
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Address
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Address.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.TransactionData.Address";
                            };
    
                            return Address;
                        })();
    
                        TransactionData.User = (function() {
    
                            /**
                             * Properties of a User.
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                             * @interface IUser
                             * @property {string|null} [accountId] User accountId
                             * @property {number|Long|null} [creationMs] User creationMs
                             * @property {string|null} [email] User email
                             * @property {boolean|null} [emailVerified] User emailVerified
                             * @property {string|null} [phoneNumber] User phoneNumber
                             * @property {boolean|null} [phoneVerified] User phoneVerified
                             */
    
                            /**
                             * Constructs a new User.
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                             * @classdesc Represents a User.
                             * @implements IUser
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IUser=} [properties] Properties to set
                             */
                            function User(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * User accountId.
                             * @member {string} accountId
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @instance
                             */
                            User.prototype.accountId = "";
    
                            /**
                             * User creationMs.
                             * @member {number|Long} creationMs
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @instance
                             */
                            User.prototype.creationMs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * User email.
                             * @member {string} email
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @instance
                             */
                            User.prototype.email = "";
    
                            /**
                             * User emailVerified.
                             * @member {boolean} emailVerified
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @instance
                             */
                            User.prototype.emailVerified = false;
    
                            /**
                             * User phoneNumber.
                             * @member {string} phoneNumber
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @instance
                             */
                            User.prototype.phoneNumber = "";
    
                            /**
                             * User phoneVerified.
                             * @member {boolean} phoneVerified
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @instance
                             */
                            User.prototype.phoneVerified = false;
    
                            /**
                             * Creates a new User instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IUser=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.User} User instance
                             */
                            User.create = function create(properties) {
                                return new User(properties);
                            };
    
                            /**
                             * Encodes the specified User message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.User.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IUser} message User message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            User.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.creationMs != null && Object.hasOwnProperty.call(message, "creationMs"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.creationMs);
                                if (message.email != null && Object.hasOwnProperty.call(message, "email"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.email);
                                if (message.emailVerified != null && Object.hasOwnProperty.call(message, "emailVerified"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.emailVerified);
                                if (message.phoneNumber != null && Object.hasOwnProperty.call(message, "phoneNumber"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.phoneNumber);
                                if (message.phoneVerified != null && Object.hasOwnProperty.call(message, "phoneVerified"))
                                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.phoneVerified);
                                if (message.accountId != null && Object.hasOwnProperty.call(message, "accountId"))
                                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.accountId);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified User message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.User.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IUser} message User message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            User.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a User message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.User} User
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            User.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData.User();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 6: {
                                            message.accountId = reader.string();
                                            break;
                                        }
                                    case 1: {
                                            message.creationMs = reader.int64();
                                            break;
                                        }
                                    case 2: {
                                            message.email = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.emailVerified = reader.bool();
                                            break;
                                        }
                                    case 4: {
                                            message.phoneNumber = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.phoneVerified = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a User message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.User} User
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            User.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a User message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            User.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.accountId != null && message.hasOwnProperty("accountId"))
                                    if (!$util.isString(message.accountId))
                                        return "accountId: string expected";
                                if (message.creationMs != null && message.hasOwnProperty("creationMs"))
                                    if (!$util.isInteger(message.creationMs) && !(message.creationMs && $util.isInteger(message.creationMs.low) && $util.isInteger(message.creationMs.high)))
                                        return "creationMs: integer|Long expected";
                                if (message.email != null && message.hasOwnProperty("email"))
                                    if (!$util.isString(message.email))
                                        return "email: string expected";
                                if (message.emailVerified != null && message.hasOwnProperty("emailVerified"))
                                    if (typeof message.emailVerified !== "boolean")
                                        return "emailVerified: boolean expected";
                                if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                                    if (!$util.isString(message.phoneNumber))
                                        return "phoneNumber: string expected";
                                if (message.phoneVerified != null && message.hasOwnProperty("phoneVerified"))
                                    if (typeof message.phoneVerified !== "boolean")
                                        return "phoneVerified: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a User message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.User} User
                             */
                            User.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1.TransactionData.User)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData.User();
                                if (object.accountId != null)
                                    message.accountId = String(object.accountId);
                                if (object.creationMs != null)
                                    if ($util.Long)
                                        (message.creationMs = $util.Long.fromValue(object.creationMs)).unsigned = false;
                                    else if (typeof object.creationMs === "string")
                                        message.creationMs = parseInt(object.creationMs, 10);
                                    else if (typeof object.creationMs === "number")
                                        message.creationMs = object.creationMs;
                                    else if (typeof object.creationMs === "object")
                                        message.creationMs = new $util.LongBits(object.creationMs.low >>> 0, object.creationMs.high >>> 0).toNumber();
                                if (object.email != null)
                                    message.email = String(object.email);
                                if (object.emailVerified != null)
                                    message.emailVerified = Boolean(object.emailVerified);
                                if (object.phoneNumber != null)
                                    message.phoneNumber = String(object.phoneNumber);
                                if (object.phoneVerified != null)
                                    message.phoneVerified = Boolean(object.phoneVerified);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a User message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.User} message User
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            User.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.creationMs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.creationMs = options.longs === String ? "0" : 0;
                                    object.email = "";
                                    object.emailVerified = false;
                                    object.phoneNumber = "";
                                    object.phoneVerified = false;
                                    object.accountId = "";
                                }
                                if (message.creationMs != null && message.hasOwnProperty("creationMs"))
                                    if (typeof message.creationMs === "number")
                                        object.creationMs = options.longs === String ? String(message.creationMs) : message.creationMs;
                                    else
                                        object.creationMs = options.longs === String ? $util.Long.prototype.toString.call(message.creationMs) : options.longs === Number ? new $util.LongBits(message.creationMs.low >>> 0, message.creationMs.high >>> 0).toNumber() : message.creationMs;
                                if (message.email != null && message.hasOwnProperty("email"))
                                    object.email = message.email;
                                if (message.emailVerified != null && message.hasOwnProperty("emailVerified"))
                                    object.emailVerified = message.emailVerified;
                                if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                                    object.phoneNumber = message.phoneNumber;
                                if (message.phoneVerified != null && message.hasOwnProperty("phoneVerified"))
                                    object.phoneVerified = message.phoneVerified;
                                if (message.accountId != null && message.hasOwnProperty("accountId"))
                                    object.accountId = message.accountId;
                                return object;
                            };
    
                            /**
                             * Converts this User to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            User.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for User
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.User
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            User.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.TransactionData.User";
                            };
    
                            return User;
                        })();
    
                        TransactionData.Item = (function() {
    
                            /**
                             * Properties of an Item.
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                             * @interface IItem
                             * @property {string|null} [name] Item name
                             * @property {number|null} [value] Item value
                             * @property {number|Long|null} [quantity] Item quantity
                             * @property {string|null} [merchantAccountId] Item merchantAccountId
                             */
    
                            /**
                             * Constructs a new Item.
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                             * @classdesc Represents an Item.
                             * @implements IItem
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IItem=} [properties] Properties to set
                             */
                            function Item(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Item name.
                             * @member {string} name
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @instance
                             */
                            Item.prototype.name = "";
    
                            /**
                             * Item value.
                             * @member {number} value
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @instance
                             */
                            Item.prototype.value = 0;
    
                            /**
                             * Item quantity.
                             * @member {number|Long} quantity
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @instance
                             */
                            Item.prototype.quantity = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Item merchantAccountId.
                             * @member {string} merchantAccountId
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @instance
                             */
                            Item.prototype.merchantAccountId = "";
    
                            /**
                             * Creates a new Item instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IItem=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.Item} Item instance
                             */
                            Item.create = function create(properties) {
                                return new Item(properties);
                            };
    
                            /**
                             * Encodes the specified Item message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.Item.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IItem} message Item message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Item.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);
                                if (message.quantity != null && Object.hasOwnProperty.call(message, "quantity"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.quantity);
                                if (message.merchantAccountId != null && Object.hasOwnProperty.call(message, "merchantAccountId"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.merchantAccountId);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Item message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.Item.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IItem} message Item message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Item.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Item message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.Item} Item
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Item.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData.Item();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.name = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.value = reader.double();
                                            break;
                                        }
                                    case 3: {
                                            message.quantity = reader.int64();
                                            break;
                                        }
                                    case 4: {
                                            message.merchantAccountId = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Item message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.Item} Item
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Item.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Item message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Item.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (typeof message.value !== "number")
                                        return "value: number expected";
                                if (message.quantity != null && message.hasOwnProperty("quantity"))
                                    if (!$util.isInteger(message.quantity) && !(message.quantity && $util.isInteger(message.quantity.low) && $util.isInteger(message.quantity.high)))
                                        return "quantity: integer|Long expected";
                                if (message.merchantAccountId != null && message.hasOwnProperty("merchantAccountId"))
                                    if (!$util.isString(message.merchantAccountId))
                                        return "merchantAccountId: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an Item message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.Item} Item
                             */
                            Item.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1.TransactionData.Item)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData.Item();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.value != null)
                                    message.value = Number(object.value);
                                if (object.quantity != null)
                                    if ($util.Long)
                                        (message.quantity = $util.Long.fromValue(object.quantity)).unsigned = false;
                                    else if (typeof object.quantity === "string")
                                        message.quantity = parseInt(object.quantity, 10);
                                    else if (typeof object.quantity === "number")
                                        message.quantity = object.quantity;
                                    else if (typeof object.quantity === "object")
                                        message.quantity = new $util.LongBits(object.quantity.low >>> 0, object.quantity.high >>> 0).toNumber();
                                if (object.merchantAccountId != null)
                                    message.merchantAccountId = String(object.merchantAccountId);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Item message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.Item} message Item
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Item.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.value = 0;
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.quantity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.quantity = options.longs === String ? "0" : 0;
                                    object.merchantAccountId = "";
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                                if (message.quantity != null && message.hasOwnProperty("quantity"))
                                    if (typeof message.quantity === "number")
                                        object.quantity = options.longs === String ? String(message.quantity) : message.quantity;
                                    else
                                        object.quantity = options.longs === String ? $util.Long.prototype.toString.call(message.quantity) : options.longs === Number ? new $util.LongBits(message.quantity.low >>> 0, message.quantity.high >>> 0).toNumber() : message.quantity;
                                if (message.merchantAccountId != null && message.hasOwnProperty("merchantAccountId"))
                                    object.merchantAccountId = message.merchantAccountId;
                                return object;
                            };
    
                            /**
                             * Converts this Item to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Item.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Item
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.Item
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.TransactionData.Item";
                            };
    
                            return Item;
                        })();
    
                        TransactionData.GatewayInfo = (function() {
    
                            /**
                             * Properties of a GatewayInfo.
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                             * @interface IGatewayInfo
                             * @property {string|null} [name] GatewayInfo name
                             * @property {string|null} [gatewayResponseCode] GatewayInfo gatewayResponseCode
                             * @property {string|null} [avsResponseCode] GatewayInfo avsResponseCode
                             * @property {string|null} [cvvResponseCode] GatewayInfo cvvResponseCode
                             */
    
                            /**
                             * Constructs a new GatewayInfo.
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData
                             * @classdesc Represents a GatewayInfo.
                             * @implements IGatewayInfo
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IGatewayInfo=} [properties] Properties to set
                             */
                            function GatewayInfo(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GatewayInfo name.
                             * @member {string} name
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @instance
                             */
                            GatewayInfo.prototype.name = "";
    
                            /**
                             * GatewayInfo gatewayResponseCode.
                             * @member {string} gatewayResponseCode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @instance
                             */
                            GatewayInfo.prototype.gatewayResponseCode = "";
    
                            /**
                             * GatewayInfo avsResponseCode.
                             * @member {string} avsResponseCode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @instance
                             */
                            GatewayInfo.prototype.avsResponseCode = "";
    
                            /**
                             * GatewayInfo cvvResponseCode.
                             * @member {string} cvvResponseCode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @instance
                             */
                            GatewayInfo.prototype.cvvResponseCode = "";
    
                            /**
                             * Creates a new GatewayInfo instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IGatewayInfo=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo} GatewayInfo instance
                             */
                            GatewayInfo.create = function create(properties) {
                                return new GatewayInfo(properties);
                            };
    
                            /**
                             * Encodes the specified GatewayInfo message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IGatewayInfo} message GatewayInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GatewayInfo.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.gatewayResponseCode != null && Object.hasOwnProperty.call(message, "gatewayResponseCode"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayResponseCode);
                                if (message.avsResponseCode != null && Object.hasOwnProperty.call(message, "avsResponseCode"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.avsResponseCode);
                                if (message.cvvResponseCode != null && Object.hasOwnProperty.call(message, "cvvResponseCode"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.cvvResponseCode);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GatewayInfo message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.IGatewayInfo} message GatewayInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GatewayInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GatewayInfo message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo} GatewayInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GatewayInfo.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.name = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.gatewayResponseCode = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.avsResponseCode = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.cvvResponseCode = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GatewayInfo message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo} GatewayInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GatewayInfo.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GatewayInfo message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GatewayInfo.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.gatewayResponseCode != null && message.hasOwnProperty("gatewayResponseCode"))
                                    if (!$util.isString(message.gatewayResponseCode))
                                        return "gatewayResponseCode: string expected";
                                if (message.avsResponseCode != null && message.hasOwnProperty("avsResponseCode"))
                                    if (!$util.isString(message.avsResponseCode))
                                        return "avsResponseCode: string expected";
                                if (message.cvvResponseCode != null && message.hasOwnProperty("cvvResponseCode"))
                                    if (!$util.isString(message.cvvResponseCode))
                                        return "cvvResponseCode: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a GatewayInfo message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo} GatewayInfo
                             */
                            GatewayInfo.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.gatewayResponseCode != null)
                                    message.gatewayResponseCode = String(object.gatewayResponseCode);
                                if (object.avsResponseCode != null)
                                    message.avsResponseCode = String(object.avsResponseCode);
                                if (object.cvvResponseCode != null)
                                    message.cvvResponseCode = String(object.cvvResponseCode);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GatewayInfo message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo} message GatewayInfo
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GatewayInfo.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.gatewayResponseCode = "";
                                    object.avsResponseCode = "";
                                    object.cvvResponseCode = "";
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.gatewayResponseCode != null && message.hasOwnProperty("gatewayResponseCode"))
                                    object.gatewayResponseCode = message.gatewayResponseCode;
                                if (message.avsResponseCode != null && message.hasOwnProperty("avsResponseCode"))
                                    object.avsResponseCode = message.avsResponseCode;
                                if (message.cvvResponseCode != null && message.hasOwnProperty("cvvResponseCode"))
                                    object.cvvResponseCode = message.cvvResponseCode;
                                return object;
                            };
    
                            /**
                             * Converts this GatewayInfo to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GatewayInfo.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for GatewayInfo
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            GatewayInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo";
                            };
    
                            return GatewayInfo;
                        })();
    
                        return TransactionData;
                    })();
    
                    v1.RiskAnalysis = (function() {
    
                        /**
                         * Properties of a RiskAnalysis.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IRiskAnalysis
                         * @property {number|null} [score] RiskAnalysis score
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.RiskAnalysis.ClassificationReason>|null} [reasons] RiskAnalysis reasons
                         */
    
                        /**
                         * Constructs a new RiskAnalysis.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a RiskAnalysis.
                         * @implements IRiskAnalysis
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IRiskAnalysis=} [properties] Properties to set
                         */
                        function RiskAnalysis(properties) {
                            this.reasons = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RiskAnalysis score.
                         * @member {number} score
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @instance
                         */
                        RiskAnalysis.prototype.score = 0;
    
                        /**
                         * RiskAnalysis reasons.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.RiskAnalysis.ClassificationReason>} reasons
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @instance
                         */
                        RiskAnalysis.prototype.reasons = $util.emptyArray;
    
                        /**
                         * Creates a new RiskAnalysis instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRiskAnalysis=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.RiskAnalysis} RiskAnalysis instance
                         */
                        RiskAnalysis.create = function create(properties) {
                            return new RiskAnalysis(properties);
                        };
    
                        /**
                         * Encodes the specified RiskAnalysis message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RiskAnalysis.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRiskAnalysis} message RiskAnalysis message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RiskAnalysis.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.score);
                            if (message.reasons != null && message.reasons.length) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                                for (var i = 0; i < message.reasons.length; ++i)
                                    writer.int32(message.reasons[i]);
                                writer.ldelim();
                            }
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RiskAnalysis message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RiskAnalysis.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRiskAnalysis} message RiskAnalysis message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RiskAnalysis.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RiskAnalysis message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.RiskAnalysis} RiskAnalysis
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RiskAnalysis.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.score = reader.float();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.reasons && message.reasons.length))
                                            message.reasons = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.reasons.push(reader.int32());
                                        } else
                                            message.reasons.push(reader.int32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RiskAnalysis message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.RiskAnalysis} RiskAnalysis
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RiskAnalysis.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RiskAnalysis message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RiskAnalysis.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.score != null && message.hasOwnProperty("score"))
                                if (typeof message.score !== "number")
                                    return "score: number expected";
                            if (message.reasons != null && message.hasOwnProperty("reasons")) {
                                if (!Array.isArray(message.reasons))
                                    return "reasons: array expected";
                                for (var i = 0; i < message.reasons.length; ++i)
                                    switch (message.reasons[i]) {
                                    default:
                                        return "reasons: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 7:
                                        break;
                                    }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RiskAnalysis message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.RiskAnalysis} RiskAnalysis
                         */
                        RiskAnalysis.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis();
                            if (object.score != null)
                                message.score = Number(object.score);
                            if (object.reasons) {
                                if (!Array.isArray(object.reasons))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.RiskAnalysis.reasons: array expected");
                                message.reasons = [];
                                for (var i = 0; i < object.reasons.length; ++i)
                                    switch (object.reasons[i]) {
                                    default:
                                        if (typeof object.reasons[i] === "number") {
                                            message.reasons[i] = object.reasons[i];
                                            break;
                                        }
                                    case "CLASSIFICATION_REASON_UNSPECIFIED":
                                    case 0:
                                        message.reasons[i] = 0;
                                        break;
                                    case "AUTOMATION":
                                    case 1:
                                        message.reasons[i] = 1;
                                        break;
                                    case "UNEXPECTED_ENVIRONMENT":
                                    case 2:
                                        message.reasons[i] = 2;
                                        break;
                                    case "TOO_MUCH_TRAFFIC":
                                    case 3:
                                        message.reasons[i] = 3;
                                        break;
                                    case "UNEXPECTED_USAGE_PATTERNS":
                                    case 4:
                                        message.reasons[i] = 4;
                                        break;
                                    case "LOW_CONFIDENCE_SCORE":
                                    case 5:
                                        message.reasons[i] = 5;
                                        break;
                                    case "SUSPECTED_CARDING":
                                    case 6:
                                        message.reasons[i] = 6;
                                        break;
                                    case "SUSPECTED_CHARGEBACK":
                                    case 7:
                                        message.reasons[i] = 7;
                                        break;
                                    }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RiskAnalysis message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.RiskAnalysis} message RiskAnalysis
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RiskAnalysis.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.reasons = [];
                            if (options.defaults)
                                object.score = 0;
                            if (message.score != null && message.hasOwnProperty("score"))
                                object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                            if (message.reasons && message.reasons.length) {
                                object.reasons = [];
                                for (var j = 0; j < message.reasons.length; ++j)
                                    object.reasons[j] = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis.ClassificationReason[message.reasons[j]] === undefined ? message.reasons[j] : $root.google.cloud.recaptchaenterprise.v1.RiskAnalysis.ClassificationReason[message.reasons[j]] : message.reasons[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this RiskAnalysis to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RiskAnalysis.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for RiskAnalysis
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.RiskAnalysis
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        RiskAnalysis.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.RiskAnalysis";
                        };
    
                        /**
                         * ClassificationReason enum.
                         * @name google.cloud.recaptchaenterprise.v1.RiskAnalysis.ClassificationReason
                         * @enum {number}
                         * @property {number} CLASSIFICATION_REASON_UNSPECIFIED=0 CLASSIFICATION_REASON_UNSPECIFIED value
                         * @property {number} AUTOMATION=1 AUTOMATION value
                         * @property {number} UNEXPECTED_ENVIRONMENT=2 UNEXPECTED_ENVIRONMENT value
                         * @property {number} TOO_MUCH_TRAFFIC=3 TOO_MUCH_TRAFFIC value
                         * @property {number} UNEXPECTED_USAGE_PATTERNS=4 UNEXPECTED_USAGE_PATTERNS value
                         * @property {number} LOW_CONFIDENCE_SCORE=5 LOW_CONFIDENCE_SCORE value
                         * @property {number} SUSPECTED_CARDING=6 SUSPECTED_CARDING value
                         * @property {number} SUSPECTED_CHARGEBACK=7 SUSPECTED_CHARGEBACK value
                         */
                        RiskAnalysis.ClassificationReason = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "CLASSIFICATION_REASON_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "AUTOMATION"] = 1;
                            values[valuesById[2] = "UNEXPECTED_ENVIRONMENT"] = 2;
                            values[valuesById[3] = "TOO_MUCH_TRAFFIC"] = 3;
                            values[valuesById[4] = "UNEXPECTED_USAGE_PATTERNS"] = 4;
                            values[valuesById[5] = "LOW_CONFIDENCE_SCORE"] = 5;
                            values[valuesById[6] = "SUSPECTED_CARDING"] = 6;
                            values[valuesById[7] = "SUSPECTED_CHARGEBACK"] = 7;
                            return values;
                        })();
    
                        return RiskAnalysis;
                    })();
    
                    v1.TokenProperties = (function() {
    
                        /**
                         * Properties of a TokenProperties.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface ITokenProperties
                         * @property {boolean|null} [valid] TokenProperties valid
                         * @property {google.cloud.recaptchaenterprise.v1.TokenProperties.InvalidReason|null} [invalidReason] TokenProperties invalidReason
                         * @property {google.protobuf.ITimestamp|null} [createTime] TokenProperties createTime
                         * @property {string|null} [hostname] TokenProperties hostname
                         * @property {string|null} [androidPackageName] TokenProperties androidPackageName
                         * @property {string|null} [iosBundleId] TokenProperties iosBundleId
                         * @property {string|null} [action] TokenProperties action
                         */
    
                        /**
                         * Constructs a new TokenProperties.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a TokenProperties.
                         * @implements ITokenProperties
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.ITokenProperties=} [properties] Properties to set
                         */
                        function TokenProperties(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TokenProperties valid.
                         * @member {boolean} valid
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.valid = false;
    
                        /**
                         * TokenProperties invalidReason.
                         * @member {google.cloud.recaptchaenterprise.v1.TokenProperties.InvalidReason} invalidReason
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.invalidReason = 0;
    
                        /**
                         * TokenProperties createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.createTime = null;
    
                        /**
                         * TokenProperties hostname.
                         * @member {string} hostname
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.hostname = "";
    
                        /**
                         * TokenProperties androidPackageName.
                         * @member {string} androidPackageName
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.androidPackageName = "";
    
                        /**
                         * TokenProperties iosBundleId.
                         * @member {string} iosBundleId
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.iosBundleId = "";
    
                        /**
                         * TokenProperties action.
                         * @member {string} action
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.action = "";
    
                        /**
                         * Creates a new TokenProperties instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITokenProperties=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.TokenProperties} TokenProperties instance
                         */
                        TokenProperties.create = function create(properties) {
                            return new TokenProperties(properties);
                        };
    
                        /**
                         * Encodes the specified TokenProperties message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TokenProperties.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITokenProperties} message TokenProperties message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TokenProperties.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.valid != null && Object.hasOwnProperty.call(message, "valid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.valid);
                            if (message.invalidReason != null && Object.hasOwnProperty.call(message, "invalidReason"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.invalidReason);
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.hostname != null && Object.hasOwnProperty.call(message, "hostname"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.hostname);
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.action);
                            if (message.androidPackageName != null && Object.hasOwnProperty.call(message, "androidPackageName"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.androidPackageName);
                            if (message.iosBundleId != null && Object.hasOwnProperty.call(message, "iosBundleId"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.iosBundleId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TokenProperties message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TokenProperties.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITokenProperties} message TokenProperties message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TokenProperties.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TokenProperties message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.TokenProperties} TokenProperties
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TokenProperties.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.TokenProperties();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.valid = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.invalidReason = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.hostname = reader.string();
                                        break;
                                    }
                                case 8: {
                                        message.androidPackageName = reader.string();
                                        break;
                                    }
                                case 9: {
                                        message.iosBundleId = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.action = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TokenProperties message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.TokenProperties} TokenProperties
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TokenProperties.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TokenProperties message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TokenProperties.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.valid != null && message.hasOwnProperty("valid"))
                                if (typeof message.valid !== "boolean")
                                    return "valid: boolean expected";
                            if (message.invalidReason != null && message.hasOwnProperty("invalidReason"))
                                switch (message.invalidReason) {
                                default:
                                    return "invalidReason: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.hostname != null && message.hasOwnProperty("hostname"))
                                if (!$util.isString(message.hostname))
                                    return "hostname: string expected";
                            if (message.androidPackageName != null && message.hasOwnProperty("androidPackageName"))
                                if (!$util.isString(message.androidPackageName))
                                    return "androidPackageName: string expected";
                            if (message.iosBundleId != null && message.hasOwnProperty("iosBundleId"))
                                if (!$util.isString(message.iosBundleId))
                                    return "iosBundleId: string expected";
                            if (message.action != null && message.hasOwnProperty("action"))
                                if (!$util.isString(message.action))
                                    return "action: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TokenProperties message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.TokenProperties} TokenProperties
                         */
                        TokenProperties.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.TokenProperties)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.TokenProperties();
                            if (object.valid != null)
                                message.valid = Boolean(object.valid);
                            switch (object.invalidReason) {
                            default:
                                if (typeof object.invalidReason === "number") {
                                    message.invalidReason = object.invalidReason;
                                    break;
                                }
                                break;
                            case "INVALID_REASON_UNSPECIFIED":
                            case 0:
                                message.invalidReason = 0;
                                break;
                            case "UNKNOWN_INVALID_REASON":
                            case 1:
                                message.invalidReason = 1;
                                break;
                            case "MALFORMED":
                            case 2:
                                message.invalidReason = 2;
                                break;
                            case "EXPIRED":
                            case 3:
                                message.invalidReason = 3;
                                break;
                            case "DUPE":
                            case 4:
                                message.invalidReason = 4;
                                break;
                            case "MISSING":
                            case 5:
                                message.invalidReason = 5;
                                break;
                            case "BROWSER_ERROR":
                            case 6:
                                message.invalidReason = 6;
                                break;
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.TokenProperties.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.hostname != null)
                                message.hostname = String(object.hostname);
                            if (object.androidPackageName != null)
                                message.androidPackageName = String(object.androidPackageName);
                            if (object.iosBundleId != null)
                                message.iosBundleId = String(object.iosBundleId);
                            if (object.action != null)
                                message.action = String(object.action);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TokenProperties message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.TokenProperties} message TokenProperties
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TokenProperties.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.valid = false;
                                object.invalidReason = options.enums === String ? "INVALID_REASON_UNSPECIFIED" : 0;
                                object.createTime = null;
                                object.hostname = "";
                                object.action = "";
                                object.androidPackageName = "";
                                object.iosBundleId = "";
                            }
                            if (message.valid != null && message.hasOwnProperty("valid"))
                                object.valid = message.valid;
                            if (message.invalidReason != null && message.hasOwnProperty("invalidReason"))
                                object.invalidReason = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.TokenProperties.InvalidReason[message.invalidReason] === undefined ? message.invalidReason : $root.google.cloud.recaptchaenterprise.v1.TokenProperties.InvalidReason[message.invalidReason] : message.invalidReason;
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.hostname != null && message.hasOwnProperty("hostname"))
                                object.hostname = message.hostname;
                            if (message.action != null && message.hasOwnProperty("action"))
                                object.action = message.action;
                            if (message.androidPackageName != null && message.hasOwnProperty("androidPackageName"))
                                object.androidPackageName = message.androidPackageName;
                            if (message.iosBundleId != null && message.hasOwnProperty("iosBundleId"))
                                object.iosBundleId = message.iosBundleId;
                            return object;
                        };
    
                        /**
                         * Converts this TokenProperties to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TokenProperties.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TokenProperties
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.TokenProperties
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TokenProperties.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.TokenProperties";
                        };
    
                        /**
                         * InvalidReason enum.
                         * @name google.cloud.recaptchaenterprise.v1.TokenProperties.InvalidReason
                         * @enum {number}
                         * @property {number} INVALID_REASON_UNSPECIFIED=0 INVALID_REASON_UNSPECIFIED value
                         * @property {number} UNKNOWN_INVALID_REASON=1 UNKNOWN_INVALID_REASON value
                         * @property {number} MALFORMED=2 MALFORMED value
                         * @property {number} EXPIRED=3 EXPIRED value
                         * @property {number} DUPE=4 DUPE value
                         * @property {number} MISSING=5 MISSING value
                         * @property {number} BROWSER_ERROR=6 BROWSER_ERROR value
                         */
                        TokenProperties.InvalidReason = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "INVALID_REASON_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "UNKNOWN_INVALID_REASON"] = 1;
                            values[valuesById[2] = "MALFORMED"] = 2;
                            values[valuesById[3] = "EXPIRED"] = 3;
                            values[valuesById[4] = "DUPE"] = 4;
                            values[valuesById[5] = "MISSING"] = 5;
                            values[valuesById[6] = "BROWSER_ERROR"] = 6;
                            return values;
                        })();
    
                        return TokenProperties;
                    })();
    
                    v1.FraudPreventionAssessment = (function() {
    
                        /**
                         * Properties of a FraudPreventionAssessment.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IFraudPreventionAssessment
                         * @property {number|null} [transactionRisk] FraudPreventionAssessment transactionRisk
                         * @property {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.IStolenInstrumentVerdict|null} [stolenInstrumentVerdict] FraudPreventionAssessment stolenInstrumentVerdict
                         * @property {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.ICardTestingVerdict|null} [cardTestingVerdict] FraudPreventionAssessment cardTestingVerdict
                         */
    
                        /**
                         * Constructs a new FraudPreventionAssessment.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a FraudPreventionAssessment.
                         * @implements IFraudPreventionAssessment
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IFraudPreventionAssessment=} [properties] Properties to set
                         */
                        function FraudPreventionAssessment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FraudPreventionAssessment transactionRisk.
                         * @member {number} transactionRisk
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @instance
                         */
                        FraudPreventionAssessment.prototype.transactionRisk = 0;
    
                        /**
                         * FraudPreventionAssessment stolenInstrumentVerdict.
                         * @member {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.IStolenInstrumentVerdict|null|undefined} stolenInstrumentVerdict
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @instance
                         */
                        FraudPreventionAssessment.prototype.stolenInstrumentVerdict = null;
    
                        /**
                         * FraudPreventionAssessment cardTestingVerdict.
                         * @member {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.ICardTestingVerdict|null|undefined} cardTestingVerdict
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @instance
                         */
                        FraudPreventionAssessment.prototype.cardTestingVerdict = null;
    
                        /**
                         * Creates a new FraudPreventionAssessment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IFraudPreventionAssessment=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment} FraudPreventionAssessment instance
                         */
                        FraudPreventionAssessment.create = function create(properties) {
                            return new FraudPreventionAssessment(properties);
                        };
    
                        /**
                         * Encodes the specified FraudPreventionAssessment message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IFraudPreventionAssessment} message FraudPreventionAssessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FraudPreventionAssessment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.transactionRisk != null && Object.hasOwnProperty.call(message, "transactionRisk"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.transactionRisk);
                            if (message.stolenInstrumentVerdict != null && Object.hasOwnProperty.call(message, "stolenInstrumentVerdict"))
                                $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict.encode(message.stolenInstrumentVerdict, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.cardTestingVerdict != null && Object.hasOwnProperty.call(message, "cardTestingVerdict"))
                                $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict.encode(message.cardTestingVerdict, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FraudPreventionAssessment message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IFraudPreventionAssessment} message FraudPreventionAssessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FraudPreventionAssessment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FraudPreventionAssessment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment} FraudPreventionAssessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FraudPreventionAssessment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.transactionRisk = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.stolenInstrumentVerdict = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.cardTestingVerdict = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FraudPreventionAssessment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment} FraudPreventionAssessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FraudPreventionAssessment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FraudPreventionAssessment message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FraudPreventionAssessment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.transactionRisk != null && message.hasOwnProperty("transactionRisk"))
                                if (typeof message.transactionRisk !== "number")
                                    return "transactionRisk: number expected";
                            if (message.stolenInstrumentVerdict != null && message.hasOwnProperty("stolenInstrumentVerdict")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict.verify(message.stolenInstrumentVerdict);
                                if (error)
                                    return "stolenInstrumentVerdict." + error;
                            }
                            if (message.cardTestingVerdict != null && message.hasOwnProperty("cardTestingVerdict")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict.verify(message.cardTestingVerdict);
                                if (error)
                                    return "cardTestingVerdict." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FraudPreventionAssessment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment} FraudPreventionAssessment
                         */
                        FraudPreventionAssessment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment();
                            if (object.transactionRisk != null)
                                message.transactionRisk = Number(object.transactionRisk);
                            if (object.stolenInstrumentVerdict != null) {
                                if (typeof object.stolenInstrumentVerdict !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.stolenInstrumentVerdict: object expected");
                                message.stolenInstrumentVerdict = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict.fromObject(object.stolenInstrumentVerdict);
                            }
                            if (object.cardTestingVerdict != null) {
                                if (typeof object.cardTestingVerdict !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.cardTestingVerdict: object expected");
                                message.cardTestingVerdict = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict.fromObject(object.cardTestingVerdict);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FraudPreventionAssessment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment} message FraudPreventionAssessment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FraudPreventionAssessment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.transactionRisk = 0;
                                object.stolenInstrumentVerdict = null;
                                object.cardTestingVerdict = null;
                            }
                            if (message.transactionRisk != null && message.hasOwnProperty("transactionRisk"))
                                object.transactionRisk = options.json && !isFinite(message.transactionRisk) ? String(message.transactionRisk) : message.transactionRisk;
                            if (message.stolenInstrumentVerdict != null && message.hasOwnProperty("stolenInstrumentVerdict"))
                                object.stolenInstrumentVerdict = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict.toObject(message.stolenInstrumentVerdict, options);
                            if (message.cardTestingVerdict != null && message.hasOwnProperty("cardTestingVerdict"))
                                object.cardTestingVerdict = $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict.toObject(message.cardTestingVerdict, options);
                            return object;
                        };
    
                        /**
                         * Converts this FraudPreventionAssessment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FraudPreventionAssessment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FraudPreventionAssessment
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FraudPreventionAssessment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment";
                        };
    
                        FraudPreventionAssessment.StolenInstrumentVerdict = (function() {
    
                            /**
                             * Properties of a StolenInstrumentVerdict.
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                             * @interface IStolenInstrumentVerdict
                             * @property {number|null} [risk] StolenInstrumentVerdict risk
                             */
    
                            /**
                             * Constructs a new StolenInstrumentVerdict.
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                             * @classdesc Represents a StolenInstrumentVerdict.
                             * @implements IStolenInstrumentVerdict
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.IStolenInstrumentVerdict=} [properties] Properties to set
                             */
                            function StolenInstrumentVerdict(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * StolenInstrumentVerdict risk.
                             * @member {number} risk
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @instance
                             */
                            StolenInstrumentVerdict.prototype.risk = 0;
    
                            /**
                             * Creates a new StolenInstrumentVerdict instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.IStolenInstrumentVerdict=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict} StolenInstrumentVerdict instance
                             */
                            StolenInstrumentVerdict.create = function create(properties) {
                                return new StolenInstrumentVerdict(properties);
                            };
    
                            /**
                             * Encodes the specified StolenInstrumentVerdict message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.IStolenInstrumentVerdict} message StolenInstrumentVerdict message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            StolenInstrumentVerdict.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.risk != null && Object.hasOwnProperty.call(message, "risk"))
                                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.risk);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified StolenInstrumentVerdict message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.IStolenInstrumentVerdict} message StolenInstrumentVerdict message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            StolenInstrumentVerdict.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a StolenInstrumentVerdict message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict} StolenInstrumentVerdict
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            StolenInstrumentVerdict.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.risk = reader.float();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a StolenInstrumentVerdict message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict} StolenInstrumentVerdict
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            StolenInstrumentVerdict.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a StolenInstrumentVerdict message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            StolenInstrumentVerdict.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.risk != null && message.hasOwnProperty("risk"))
                                    if (typeof message.risk !== "number")
                                        return "risk: number expected";
                                return null;
                            };
    
                            /**
                             * Creates a StolenInstrumentVerdict message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict} StolenInstrumentVerdict
                             */
                            StolenInstrumentVerdict.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict();
                                if (object.risk != null)
                                    message.risk = Number(object.risk);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a StolenInstrumentVerdict message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict} message StolenInstrumentVerdict
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            StolenInstrumentVerdict.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.risk = 0;
                                if (message.risk != null && message.hasOwnProperty("risk"))
                                    object.risk = options.json && !isFinite(message.risk) ? String(message.risk) : message.risk;
                                return object;
                            };
    
                            /**
                             * Converts this StolenInstrumentVerdict to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            StolenInstrumentVerdict.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for StolenInstrumentVerdict
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            StolenInstrumentVerdict.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict";
                            };
    
                            return StolenInstrumentVerdict;
                        })();
    
                        FraudPreventionAssessment.CardTestingVerdict = (function() {
    
                            /**
                             * Properties of a CardTestingVerdict.
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                             * @interface ICardTestingVerdict
                             * @property {number|null} [risk] CardTestingVerdict risk
                             */
    
                            /**
                             * Constructs a new CardTestingVerdict.
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
                             * @classdesc Represents a CardTestingVerdict.
                             * @implements ICardTestingVerdict
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.ICardTestingVerdict=} [properties] Properties to set
                             */
                            function CardTestingVerdict(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CardTestingVerdict risk.
                             * @member {number} risk
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @instance
                             */
                            CardTestingVerdict.prototype.risk = 0;
    
                            /**
                             * Creates a new CardTestingVerdict instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.ICardTestingVerdict=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict} CardTestingVerdict instance
                             */
                            CardTestingVerdict.create = function create(properties) {
                                return new CardTestingVerdict(properties);
                            };
    
                            /**
                             * Encodes the specified CardTestingVerdict message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.ICardTestingVerdict} message CardTestingVerdict message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardTestingVerdict.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.risk != null && Object.hasOwnProperty.call(message, "risk"))
                                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.risk);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CardTestingVerdict message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.ICardTestingVerdict} message CardTestingVerdict message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardTestingVerdict.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CardTestingVerdict message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict} CardTestingVerdict
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardTestingVerdict.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.risk = reader.float();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CardTestingVerdict message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict} CardTestingVerdict
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardTestingVerdict.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CardTestingVerdict message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CardTestingVerdict.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.risk != null && message.hasOwnProperty("risk"))
                                    if (typeof message.risk !== "number")
                                        return "risk: number expected";
                                return null;
                            };
    
                            /**
                             * Creates a CardTestingVerdict message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict} CardTestingVerdict
                             */
                            CardTestingVerdict.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict();
                                if (object.risk != null)
                                    message.risk = Number(object.risk);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CardTestingVerdict message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict} message CardTestingVerdict
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CardTestingVerdict.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.risk = 0;
                                if (message.risk != null && message.hasOwnProperty("risk"))
                                    object.risk = options.json && !isFinite(message.risk) ? String(message.risk) : message.risk;
                                return object;
                            };
    
                            /**
                             * Converts this CardTestingVerdict to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CardTestingVerdict.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for CardTestingVerdict
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            CardTestingVerdict.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict";
                            };
    
                            return CardTestingVerdict;
                        })();
    
                        return FraudPreventionAssessment;
                    })();
    
                    v1.AccountDefenderAssessment = (function() {
    
                        /**
                         * Properties of an AccountDefenderAssessment.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IAccountDefenderAssessment
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.AccountDefenderLabel>|null} [labels] AccountDefenderAssessment labels
                         */
    
                        /**
                         * Constructs a new AccountDefenderAssessment.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an AccountDefenderAssessment.
                         * @implements IAccountDefenderAssessment
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IAccountDefenderAssessment=} [properties] Properties to set
                         */
                        function AccountDefenderAssessment(properties) {
                            this.labels = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AccountDefenderAssessment labels.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.AccountDefenderLabel>} labels
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @instance
                         */
                        AccountDefenderAssessment.prototype.labels = $util.emptyArray;
    
                        /**
                         * Creates a new AccountDefenderAssessment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAccountDefenderAssessment=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment} AccountDefenderAssessment instance
                         */
                        AccountDefenderAssessment.create = function create(properties) {
                            return new AccountDefenderAssessment(properties);
                        };
    
                        /**
                         * Encodes the specified AccountDefenderAssessment message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAccountDefenderAssessment} message AccountDefenderAssessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountDefenderAssessment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.labels != null && message.labels.length) {
                                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                for (var i = 0; i < message.labels.length; ++i)
                                    writer.int32(message.labels[i]);
                                writer.ldelim();
                            }
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AccountDefenderAssessment message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAccountDefenderAssessment} message AccountDefenderAssessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountDefenderAssessment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AccountDefenderAssessment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment} AccountDefenderAssessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountDefenderAssessment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.labels && message.labels.length))
                                            message.labels = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.labels.push(reader.int32());
                                        } else
                                            message.labels.push(reader.int32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AccountDefenderAssessment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment} AccountDefenderAssessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountDefenderAssessment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AccountDefenderAssessment message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AccountDefenderAssessment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!Array.isArray(message.labels))
                                    return "labels: array expected";
                                for (var i = 0; i < message.labels.length; ++i)
                                    switch (message.labels[i]) {
                                    default:
                                        return "labels: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AccountDefenderAssessment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment} AccountDefenderAssessment
                         */
                        AccountDefenderAssessment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment();
                            if (object.labels) {
                                if (!Array.isArray(object.labels))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.labels: array expected");
                                message.labels = [];
                                for (var i = 0; i < object.labels.length; ++i)
                                    switch (object.labels[i]) {
                                    default:
                                        if (typeof object.labels[i] === "number") {
                                            message.labels[i] = object.labels[i];
                                            break;
                                        }
                                    case "ACCOUNT_DEFENDER_LABEL_UNSPECIFIED":
                                    case 0:
                                        message.labels[i] = 0;
                                        break;
                                    case "PROFILE_MATCH":
                                    case 1:
                                        message.labels[i] = 1;
                                        break;
                                    case "SUSPICIOUS_LOGIN_ACTIVITY":
                                    case 2:
                                        message.labels[i] = 2;
                                        break;
                                    case "SUSPICIOUS_ACCOUNT_CREATION":
                                    case 3:
                                        message.labels[i] = 3;
                                        break;
                                    case "RELATED_ACCOUNTS_NUMBER_HIGH":
                                    case 4:
                                        message.labels[i] = 4;
                                        break;
                                    }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AccountDefenderAssessment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment} message AccountDefenderAssessment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AccountDefenderAssessment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.labels = [];
                            if (message.labels && message.labels.length) {
                                object.labels = [];
                                for (var j = 0; j < message.labels.length; ++j)
                                    object.labels[j] = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.AccountDefenderLabel[message.labels[j]] === undefined ? message.labels[j] : $root.google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.AccountDefenderLabel[message.labels[j]] : message.labels[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AccountDefenderAssessment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AccountDefenderAssessment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AccountDefenderAssessment
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AccountDefenderAssessment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment";
                        };
    
                        /**
                         * AccountDefenderLabel enum.
                         * @name google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.AccountDefenderLabel
                         * @enum {number}
                         * @property {number} ACCOUNT_DEFENDER_LABEL_UNSPECIFIED=0 ACCOUNT_DEFENDER_LABEL_UNSPECIFIED value
                         * @property {number} PROFILE_MATCH=1 PROFILE_MATCH value
                         * @property {number} SUSPICIOUS_LOGIN_ACTIVITY=2 SUSPICIOUS_LOGIN_ACTIVITY value
                         * @property {number} SUSPICIOUS_ACCOUNT_CREATION=3 SUSPICIOUS_ACCOUNT_CREATION value
                         * @property {number} RELATED_ACCOUNTS_NUMBER_HIGH=4 RELATED_ACCOUNTS_NUMBER_HIGH value
                         */
                        AccountDefenderAssessment.AccountDefenderLabel = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ACCOUNT_DEFENDER_LABEL_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PROFILE_MATCH"] = 1;
                            values[valuesById[2] = "SUSPICIOUS_LOGIN_ACTIVITY"] = 2;
                            values[valuesById[3] = "SUSPICIOUS_ACCOUNT_CREATION"] = 3;
                            values[valuesById[4] = "RELATED_ACCOUNTS_NUMBER_HIGH"] = 4;
                            return values;
                        })();
    
                        return AccountDefenderAssessment;
                    })();
    
                    v1.CreateKeyRequest = (function() {
    
                        /**
                         * Properties of a CreateKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface ICreateKeyRequest
                         * @property {string|null} [parent] CreateKeyRequest parent
                         * @property {google.cloud.recaptchaenterprise.v1.IKey|null} [key] CreateKeyRequest key
                         */
    
                        /**
                         * Constructs a new CreateKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a CreateKeyRequest.
                         * @implements ICreateKeyRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateKeyRequest=} [properties] Properties to set
                         */
                        function CreateKeyRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateKeyRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @instance
                         */
                        CreateKeyRequest.prototype.parent = "";
    
                        /**
                         * CreateKeyRequest key.
                         * @member {google.cloud.recaptchaenterprise.v1.IKey|null|undefined} key
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @instance
                         */
                        CreateKeyRequest.prototype.key = null;
    
                        /**
                         * Creates a new CreateKeyRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateKeyRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.CreateKeyRequest} CreateKeyRequest instance
                         */
                        CreateKeyRequest.create = function create(properties) {
                            return new CreateKeyRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateKeyRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.CreateKeyRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateKeyRequest} message CreateKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateKeyRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                $root.google.cloud.recaptchaenterprise.v1.Key.encode(message.key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateKeyRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.CreateKeyRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ICreateKeyRequest} message CreateKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateKeyRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.CreateKeyRequest} CreateKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateKeyRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.CreateKeyRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.key = $root.google.cloud.recaptchaenterprise.v1.Key.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateKeyRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.CreateKeyRequest} CreateKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateKeyRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateKeyRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateKeyRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.key != null && message.hasOwnProperty("key")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.Key.verify(message.key);
                                if (error)
                                    return "key." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateKeyRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.CreateKeyRequest} CreateKeyRequest
                         */
                        CreateKeyRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.CreateKeyRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.CreateKeyRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.key != null) {
                                if (typeof object.key !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.CreateKeyRequest.key: object expected");
                                message.key = $root.google.cloud.recaptchaenterprise.v1.Key.fromObject(object.key);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateKeyRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.CreateKeyRequest} message CreateKeyRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateKeyRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.key = null;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = $root.google.cloud.recaptchaenterprise.v1.Key.toObject(message.key, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateKeyRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateKeyRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CreateKeyRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.CreateKeyRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CreateKeyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.CreateKeyRequest";
                        };
    
                        return CreateKeyRequest;
                    })();
    
                    v1.ListKeysRequest = (function() {
    
                        /**
                         * Properties of a ListKeysRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IListKeysRequest
                         * @property {string|null} [parent] ListKeysRequest parent
                         * @property {number|null} [pageSize] ListKeysRequest pageSize
                         * @property {string|null} [pageToken] ListKeysRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListKeysRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ListKeysRequest.
                         * @implements IListKeysRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysRequest=} [properties] Properties to set
                         */
                        function ListKeysRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListKeysRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @instance
                         */
                        ListKeysRequest.prototype.parent = "";
    
                        /**
                         * ListKeysRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @instance
                         */
                        ListKeysRequest.prototype.pageSize = 0;
    
                        /**
                         * ListKeysRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @instance
                         */
                        ListKeysRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListKeysRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ListKeysRequest} ListKeysRequest instance
                         */
                        ListKeysRequest.create = function create(properties) {
                            return new ListKeysRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListKeysRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListKeysRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysRequest} message ListKeysRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListKeysRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListKeysRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListKeysRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysRequest} message ListKeysRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListKeysRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListKeysRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ListKeysRequest} ListKeysRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListKeysRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ListKeysRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.pageSize = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.pageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListKeysRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ListKeysRequest} ListKeysRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListKeysRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListKeysRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListKeysRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListKeysRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ListKeysRequest} ListKeysRequest
                         */
                        ListKeysRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ListKeysRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ListKeysRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListKeysRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ListKeysRequest} message ListKeysRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListKeysRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListKeysRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListKeysRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListKeysRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListKeysRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ListKeysRequest";
                        };
    
                        return ListKeysRequest;
                    })();
    
                    v1.ListKeysResponse = (function() {
    
                        /**
                         * Properties of a ListKeysResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IListKeysResponse
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.IKey>|null} [keys] ListKeysResponse keys
                         * @property {string|null} [nextPageToken] ListKeysResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListKeysResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ListKeysResponse.
                         * @implements IListKeysResponse
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysResponse=} [properties] Properties to set
                         */
                        function ListKeysResponse(properties) {
                            this.keys = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListKeysResponse keys.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.IKey>} keys
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @instance
                         */
                        ListKeysResponse.prototype.keys = $util.emptyArray;
    
                        /**
                         * ListKeysResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @instance
                         */
                        ListKeysResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListKeysResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysResponse=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ListKeysResponse} ListKeysResponse instance
                         */
                        ListKeysResponse.create = function create(properties) {
                            return new ListKeysResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListKeysResponse message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListKeysResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysResponse} message ListKeysResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListKeysResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.keys != null && message.keys.length)
                                for (var i = 0; i < message.keys.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.Key.encode(message.keys[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListKeysResponse message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListKeysResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListKeysResponse} message ListKeysResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListKeysResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListKeysResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ListKeysResponse} ListKeysResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListKeysResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ListKeysResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.keys && message.keys.length))
                                            message.keys = [];
                                        message.keys.push($root.google.cloud.recaptchaenterprise.v1.Key.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.nextPageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListKeysResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ListKeysResponse} ListKeysResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListKeysResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListKeysResponse message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListKeysResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.keys != null && message.hasOwnProperty("keys")) {
                                if (!Array.isArray(message.keys))
                                    return "keys: array expected";
                                for (var i = 0; i < message.keys.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.Key.verify(message.keys[i]);
                                    if (error)
                                        return "keys." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListKeysResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ListKeysResponse} ListKeysResponse
                         */
                        ListKeysResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ListKeysResponse)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ListKeysResponse();
                            if (object.keys) {
                                if (!Array.isArray(object.keys))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.ListKeysResponse.keys: array expected");
                                message.keys = [];
                                for (var i = 0; i < object.keys.length; ++i) {
                                    if (typeof object.keys[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.ListKeysResponse.keys: object expected");
                                    message.keys[i] = $root.google.cloud.recaptchaenterprise.v1.Key.fromObject(object.keys[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListKeysResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ListKeysResponse} message ListKeysResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListKeysResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.keys = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.keys && message.keys.length) {
                                object.keys = [];
                                for (var j = 0; j < message.keys.length; ++j)
                                    object.keys[j] = $root.google.cloud.recaptchaenterprise.v1.Key.toObject(message.keys[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListKeysResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListKeysResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListKeysResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ListKeysResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListKeysResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ListKeysResponse";
                        };
    
                        return ListKeysResponse;
                    })();
    
                    v1.RetrieveLegacySecretKeyRequest = (function() {
    
                        /**
                         * Properties of a RetrieveLegacySecretKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IRetrieveLegacySecretKeyRequest
                         * @property {string|null} [key] RetrieveLegacySecretKeyRequest key
                         */
    
                        /**
                         * Constructs a new RetrieveLegacySecretKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a RetrieveLegacySecretKeyRequest.
                         * @implements IRetrieveLegacySecretKeyRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyRequest=} [properties] Properties to set
                         */
                        function RetrieveLegacySecretKeyRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RetrieveLegacySecretKeyRequest key.
                         * @member {string} key
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @instance
                         */
                        RetrieveLegacySecretKeyRequest.prototype.key = "";
    
                        /**
                         * Creates a new RetrieveLegacySecretKeyRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest} RetrieveLegacySecretKeyRequest instance
                         */
                        RetrieveLegacySecretKeyRequest.create = function create(properties) {
                            return new RetrieveLegacySecretKeyRequest(properties);
                        };
    
                        /**
                         * Encodes the specified RetrieveLegacySecretKeyRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyRequest} message RetrieveLegacySecretKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RetrieveLegacySecretKeyRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RetrieveLegacySecretKeyRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyRequest} message RetrieveLegacySecretKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RetrieveLegacySecretKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RetrieveLegacySecretKeyRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest} RetrieveLegacySecretKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RetrieveLegacySecretKeyRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.key = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RetrieveLegacySecretKeyRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest} RetrieveLegacySecretKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RetrieveLegacySecretKeyRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RetrieveLegacySecretKeyRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RetrieveLegacySecretKeyRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.key != null && message.hasOwnProperty("key"))
                                if (!$util.isString(message.key))
                                    return "key: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a RetrieveLegacySecretKeyRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest} RetrieveLegacySecretKeyRequest
                         */
                        RetrieveLegacySecretKeyRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest();
                            if (object.key != null)
                                message.key = String(object.key);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RetrieveLegacySecretKeyRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest} message RetrieveLegacySecretKeyRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RetrieveLegacySecretKeyRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.key = "";
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = message.key;
                            return object;
                        };
    
                        /**
                         * Converts this RetrieveLegacySecretKeyRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RetrieveLegacySecretKeyRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for RetrieveLegacySecretKeyRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        RetrieveLegacySecretKeyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest";
                        };
    
                        return RetrieveLegacySecretKeyRequest;
                    })();
    
                    v1.GetKeyRequest = (function() {
    
                        /**
                         * Properties of a GetKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IGetKeyRequest
                         * @property {string|null} [name] GetKeyRequest name
                         */
    
                        /**
                         * Constructs a new GetKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a GetKeyRequest.
                         * @implements IGetKeyRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IGetKeyRequest=} [properties] Properties to set
                         */
                        function GetKeyRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetKeyRequest name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @instance
                         */
                        GetKeyRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetKeyRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IGetKeyRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.GetKeyRequest} GetKeyRequest instance
                         */
                        GetKeyRequest.create = function create(properties) {
                            return new GetKeyRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetKeyRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.GetKeyRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IGetKeyRequest} message GetKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetKeyRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetKeyRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.GetKeyRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IGetKeyRequest} message GetKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetKeyRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.GetKeyRequest} GetKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetKeyRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.GetKeyRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetKeyRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.GetKeyRequest} GetKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetKeyRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetKeyRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetKeyRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetKeyRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.GetKeyRequest} GetKeyRequest
                         */
                        GetKeyRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.GetKeyRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.GetKeyRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetKeyRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.GetKeyRequest} message GetKeyRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetKeyRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetKeyRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetKeyRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GetKeyRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.GetKeyRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GetKeyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.GetKeyRequest";
                        };
    
                        return GetKeyRequest;
                    })();
    
                    v1.UpdateKeyRequest = (function() {
    
                        /**
                         * Properties of an UpdateKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IUpdateKeyRequest
                         * @property {google.cloud.recaptchaenterprise.v1.IKey|null} [key] UpdateKeyRequest key
                         * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateKeyRequest updateMask
                         */
    
                        /**
                         * Constructs a new UpdateKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an UpdateKeyRequest.
                         * @implements IUpdateKeyRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IUpdateKeyRequest=} [properties] Properties to set
                         */
                        function UpdateKeyRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateKeyRequest key.
                         * @member {google.cloud.recaptchaenterprise.v1.IKey|null|undefined} key
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @instance
                         */
                        UpdateKeyRequest.prototype.key = null;
    
                        /**
                         * UpdateKeyRequest updateMask.
                         * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @instance
                         */
                        UpdateKeyRequest.prototype.updateMask = null;
    
                        /**
                         * Creates a new UpdateKeyRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IUpdateKeyRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.UpdateKeyRequest} UpdateKeyRequest instance
                         */
                        UpdateKeyRequest.create = function create(properties) {
                            return new UpdateKeyRequest(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateKeyRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.UpdateKeyRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IUpdateKeyRequest} message UpdateKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateKeyRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                $root.google.cloud.recaptchaenterprise.v1.Key.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                                $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateKeyRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.UpdateKeyRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IUpdateKeyRequest} message UpdateKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateKeyRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.UpdateKeyRequest} UpdateKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateKeyRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.key = $root.google.cloud.recaptchaenterprise.v1.Key.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateKeyRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.UpdateKeyRequest} UpdateKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateKeyRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateKeyRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateKeyRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.key != null && message.hasOwnProperty("key")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.Key.verify(message.key);
                                if (error)
                                    return "key." + error;
                            }
                            if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                if (error)
                                    return "updateMask." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpdateKeyRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.UpdateKeyRequest} UpdateKeyRequest
                         */
                        UpdateKeyRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest();
                            if (object.key != null) {
                                if (typeof object.key !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.UpdateKeyRequest.key: object expected");
                                message.key = $root.google.cloud.recaptchaenterprise.v1.Key.fromObject(object.key);
                            }
                            if (object.updateMask != null) {
                                if (typeof object.updateMask !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.UpdateKeyRequest.updateMask: object expected");
                                message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateKeyRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.UpdateKeyRequest} message UpdateKeyRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateKeyRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.key = null;
                                object.updateMask = null;
                            }
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = $root.google.cloud.recaptchaenterprise.v1.Key.toObject(message.key, options);
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpdateKeyRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateKeyRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for UpdateKeyRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        UpdateKeyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.UpdateKeyRequest";
                        };
    
                        return UpdateKeyRequest;
                    })();
    
                    v1.DeleteKeyRequest = (function() {
    
                        /**
                         * Properties of a DeleteKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IDeleteKeyRequest
                         * @property {string|null} [name] DeleteKeyRequest name
                         */
    
                        /**
                         * Constructs a new DeleteKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a DeleteKeyRequest.
                         * @implements IDeleteKeyRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IDeleteKeyRequest=} [properties] Properties to set
                         */
                        function DeleteKeyRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteKeyRequest name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @instance
                         */
                        DeleteKeyRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteKeyRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IDeleteKeyRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.DeleteKeyRequest} DeleteKeyRequest instance
                         */
                        DeleteKeyRequest.create = function create(properties) {
                            return new DeleteKeyRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteKeyRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.DeleteKeyRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IDeleteKeyRequest} message DeleteKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteKeyRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteKeyRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.DeleteKeyRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IDeleteKeyRequest} message DeleteKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteKeyRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.DeleteKeyRequest} DeleteKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteKeyRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteKeyRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.DeleteKeyRequest} DeleteKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteKeyRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteKeyRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteKeyRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteKeyRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.DeleteKeyRequest} DeleteKeyRequest
                         */
                        DeleteKeyRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteKeyRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.DeleteKeyRequest} message DeleteKeyRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteKeyRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteKeyRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteKeyRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DeleteKeyRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DeleteKeyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.DeleteKeyRequest";
                        };
    
                        return DeleteKeyRequest;
                    })();
    
                    v1.MigrateKeyRequest = (function() {
    
                        /**
                         * Properties of a MigrateKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IMigrateKeyRequest
                         * @property {string|null} [name] MigrateKeyRequest name
                         * @property {boolean|null} [skipBillingCheck] MigrateKeyRequest skipBillingCheck
                         */
    
                        /**
                         * Constructs a new MigrateKeyRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a MigrateKeyRequest.
                         * @implements IMigrateKeyRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IMigrateKeyRequest=} [properties] Properties to set
                         */
                        function MigrateKeyRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * MigrateKeyRequest name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @instance
                         */
                        MigrateKeyRequest.prototype.name = "";
    
                        /**
                         * MigrateKeyRequest skipBillingCheck.
                         * @member {boolean} skipBillingCheck
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @instance
                         */
                        MigrateKeyRequest.prototype.skipBillingCheck = false;
    
                        /**
                         * Creates a new MigrateKeyRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IMigrateKeyRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.MigrateKeyRequest} MigrateKeyRequest instance
                         */
                        MigrateKeyRequest.create = function create(properties) {
                            return new MigrateKeyRequest(properties);
                        };
    
                        /**
                         * Encodes the specified MigrateKeyRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.MigrateKeyRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IMigrateKeyRequest} message MigrateKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MigrateKeyRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.skipBillingCheck != null && Object.hasOwnProperty.call(message, "skipBillingCheck"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.skipBillingCheck);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified MigrateKeyRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.MigrateKeyRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IMigrateKeyRequest} message MigrateKeyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MigrateKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a MigrateKeyRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.MigrateKeyRequest} MigrateKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MigrateKeyRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.skipBillingCheck = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a MigrateKeyRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.MigrateKeyRequest} MigrateKeyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MigrateKeyRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a MigrateKeyRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        MigrateKeyRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.skipBillingCheck != null && message.hasOwnProperty("skipBillingCheck"))
                                if (typeof message.skipBillingCheck !== "boolean")
                                    return "skipBillingCheck: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a MigrateKeyRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.MigrateKeyRequest} MigrateKeyRequest
                         */
                        MigrateKeyRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.skipBillingCheck != null)
                                message.skipBillingCheck = Boolean(object.skipBillingCheck);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a MigrateKeyRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.MigrateKeyRequest} message MigrateKeyRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        MigrateKeyRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.skipBillingCheck = false;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.skipBillingCheck != null && message.hasOwnProperty("skipBillingCheck"))
                                object.skipBillingCheck = message.skipBillingCheck;
                            return object;
                        };
    
                        /**
                         * Converts this MigrateKeyRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        MigrateKeyRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for MigrateKeyRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        MigrateKeyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.MigrateKeyRequest";
                        };
    
                        return MigrateKeyRequest;
                    })();
    
                    v1.GetMetricsRequest = (function() {
    
                        /**
                         * Properties of a GetMetricsRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IGetMetricsRequest
                         * @property {string|null} [name] GetMetricsRequest name
                         */
    
                        /**
                         * Constructs a new GetMetricsRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a GetMetricsRequest.
                         * @implements IGetMetricsRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IGetMetricsRequest=} [properties] Properties to set
                         */
                        function GetMetricsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetMetricsRequest name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @instance
                         */
                        GetMetricsRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetMetricsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IGetMetricsRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.GetMetricsRequest} GetMetricsRequest instance
                         */
                        GetMetricsRequest.create = function create(properties) {
                            return new GetMetricsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetMetricsRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.GetMetricsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IGetMetricsRequest} message GetMetricsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetMetricsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetMetricsRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.GetMetricsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IGetMetricsRequest} message GetMetricsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetMetricsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetMetricsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.GetMetricsRequest} GetMetricsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetMetricsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.GetMetricsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetMetricsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.GetMetricsRequest} GetMetricsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetMetricsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetMetricsRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetMetricsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetMetricsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.GetMetricsRequest} GetMetricsRequest
                         */
                        GetMetricsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.GetMetricsRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.GetMetricsRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetMetricsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.GetMetricsRequest} message GetMetricsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetMetricsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetMetricsRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetMetricsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GetMetricsRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.GetMetricsRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GetMetricsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.GetMetricsRequest";
                        };
    
                        return GetMetricsRequest;
                    })();
    
                    v1.Metrics = (function() {
    
                        /**
                         * Properties of a Metrics.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IMetrics
                         * @property {string|null} [name] Metrics name
                         * @property {google.protobuf.ITimestamp|null} [startTime] Metrics startTime
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.IScoreMetrics>|null} [scoreMetrics] Metrics scoreMetrics
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.IChallengeMetrics>|null} [challengeMetrics] Metrics challengeMetrics
                         */
    
                        /**
                         * Constructs a new Metrics.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a Metrics.
                         * @implements IMetrics
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IMetrics=} [properties] Properties to set
                         */
                        function Metrics(properties) {
                            this.scoreMetrics = [];
                            this.challengeMetrics = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Metrics name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @instance
                         */
                        Metrics.prototype.name = "";
    
                        /**
                         * Metrics startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @instance
                         */
                        Metrics.prototype.startTime = null;
    
                        /**
                         * Metrics scoreMetrics.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.IScoreMetrics>} scoreMetrics
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @instance
                         */
                        Metrics.prototype.scoreMetrics = $util.emptyArray;
    
                        /**
                         * Metrics challengeMetrics.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.IChallengeMetrics>} challengeMetrics
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @instance
                         */
                        Metrics.prototype.challengeMetrics = $util.emptyArray;
    
                        /**
                         * Creates a new Metrics instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IMetrics=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.Metrics} Metrics instance
                         */
                        Metrics.create = function create(properties) {
                            return new Metrics(properties);
                        };
    
                        /**
                         * Encodes the specified Metrics message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.Metrics.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IMetrics} message Metrics message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Metrics.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.scoreMetrics != null && message.scoreMetrics.length)
                                for (var i = 0; i < message.scoreMetrics.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.ScoreMetrics.encode(message.scoreMetrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.challengeMetrics != null && message.challengeMetrics.length)
                                for (var i = 0; i < message.challengeMetrics.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.ChallengeMetrics.encode(message.challengeMetrics[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Metrics message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.Metrics.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IMetrics} message Metrics message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Metrics.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Metrics message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.Metrics} Metrics
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Metrics.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.Metrics();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 4: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 1: {
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.scoreMetrics && message.scoreMetrics.length))
                                            message.scoreMetrics = [];
                                        message.scoreMetrics.push($root.google.cloud.recaptchaenterprise.v1.ScoreMetrics.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.challengeMetrics && message.challengeMetrics.length))
                                            message.challengeMetrics = [];
                                        message.challengeMetrics.push($root.google.cloud.recaptchaenterprise.v1.ChallengeMetrics.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Metrics message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.Metrics} Metrics
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Metrics.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Metrics message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Metrics.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.scoreMetrics != null && message.hasOwnProperty("scoreMetrics")) {
                                if (!Array.isArray(message.scoreMetrics))
                                    return "scoreMetrics: array expected";
                                for (var i = 0; i < message.scoreMetrics.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.ScoreMetrics.verify(message.scoreMetrics[i]);
                                    if (error)
                                        return "scoreMetrics." + error;
                                }
                            }
                            if (message.challengeMetrics != null && message.hasOwnProperty("challengeMetrics")) {
                                if (!Array.isArray(message.challengeMetrics))
                                    return "challengeMetrics: array expected";
                                for (var i = 0; i < message.challengeMetrics.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.ChallengeMetrics.verify(message.challengeMetrics[i]);
                                    if (error)
                                        return "challengeMetrics." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Metrics message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.Metrics} Metrics
                         */
                        Metrics.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.Metrics)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.Metrics();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Metrics.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.scoreMetrics) {
                                if (!Array.isArray(object.scoreMetrics))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Metrics.scoreMetrics: array expected");
                                message.scoreMetrics = [];
                                for (var i = 0; i < object.scoreMetrics.length; ++i) {
                                    if (typeof object.scoreMetrics[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.Metrics.scoreMetrics: object expected");
                                    message.scoreMetrics[i] = $root.google.cloud.recaptchaenterprise.v1.ScoreMetrics.fromObject(object.scoreMetrics[i]);
                                }
                            }
                            if (object.challengeMetrics) {
                                if (!Array.isArray(object.challengeMetrics))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Metrics.challengeMetrics: array expected");
                                message.challengeMetrics = [];
                                for (var i = 0; i < object.challengeMetrics.length; ++i) {
                                    if (typeof object.challengeMetrics[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.Metrics.challengeMetrics: object expected");
                                    message.challengeMetrics[i] = $root.google.cloud.recaptchaenterprise.v1.ChallengeMetrics.fromObject(object.challengeMetrics[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Metrics message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.Metrics} message Metrics
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Metrics.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.scoreMetrics = [];
                                object.challengeMetrics = [];
                            }
                            if (options.defaults) {
                                object.startTime = null;
                                object.name = "";
                            }
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.scoreMetrics && message.scoreMetrics.length) {
                                object.scoreMetrics = [];
                                for (var j = 0; j < message.scoreMetrics.length; ++j)
                                    object.scoreMetrics[j] = $root.google.cloud.recaptchaenterprise.v1.ScoreMetrics.toObject(message.scoreMetrics[j], options);
                            }
                            if (message.challengeMetrics && message.challengeMetrics.length) {
                                object.challengeMetrics = [];
                                for (var j = 0; j < message.challengeMetrics.length; ++j)
                                    object.challengeMetrics[j] = $root.google.cloud.recaptchaenterprise.v1.ChallengeMetrics.toObject(message.challengeMetrics[j], options);
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this Metrics to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Metrics.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Metrics
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.Metrics
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Metrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.Metrics";
                        };
    
                        return Metrics;
                    })();
    
                    v1.RetrieveLegacySecretKeyResponse = (function() {
    
                        /**
                         * Properties of a RetrieveLegacySecretKeyResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IRetrieveLegacySecretKeyResponse
                         * @property {string|null} [legacySecretKey] RetrieveLegacySecretKeyResponse legacySecretKey
                         */
    
                        /**
                         * Constructs a new RetrieveLegacySecretKeyResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a RetrieveLegacySecretKeyResponse.
                         * @implements IRetrieveLegacySecretKeyResponse
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyResponse=} [properties] Properties to set
                         */
                        function RetrieveLegacySecretKeyResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RetrieveLegacySecretKeyResponse legacySecretKey.
                         * @member {string} legacySecretKey
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @instance
                         */
                        RetrieveLegacySecretKeyResponse.prototype.legacySecretKey = "";
    
                        /**
                         * Creates a new RetrieveLegacySecretKeyResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyResponse=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse} RetrieveLegacySecretKeyResponse instance
                         */
                        RetrieveLegacySecretKeyResponse.create = function create(properties) {
                            return new RetrieveLegacySecretKeyResponse(properties);
                        };
    
                        /**
                         * Encodes the specified RetrieveLegacySecretKeyResponse message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyResponse} message RetrieveLegacySecretKeyResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RetrieveLegacySecretKeyResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.legacySecretKey != null && Object.hasOwnProperty.call(message, "legacySecretKey"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.legacySecretKey);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RetrieveLegacySecretKeyResponse message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyResponse} message RetrieveLegacySecretKeyResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RetrieveLegacySecretKeyResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RetrieveLegacySecretKeyResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse} RetrieveLegacySecretKeyResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RetrieveLegacySecretKeyResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.legacySecretKey = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RetrieveLegacySecretKeyResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse} RetrieveLegacySecretKeyResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RetrieveLegacySecretKeyResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RetrieveLegacySecretKeyResponse message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RetrieveLegacySecretKeyResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.legacySecretKey != null && message.hasOwnProperty("legacySecretKey"))
                                if (!$util.isString(message.legacySecretKey))
                                    return "legacySecretKey: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a RetrieveLegacySecretKeyResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse} RetrieveLegacySecretKeyResponse
                         */
                        RetrieveLegacySecretKeyResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse();
                            if (object.legacySecretKey != null)
                                message.legacySecretKey = String(object.legacySecretKey);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RetrieveLegacySecretKeyResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse} message RetrieveLegacySecretKeyResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RetrieveLegacySecretKeyResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.legacySecretKey = "";
                            if (message.legacySecretKey != null && message.hasOwnProperty("legacySecretKey"))
                                object.legacySecretKey = message.legacySecretKey;
                            return object;
                        };
    
                        /**
                         * Converts this RetrieveLegacySecretKeyResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RetrieveLegacySecretKeyResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for RetrieveLegacySecretKeyResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        RetrieveLegacySecretKeyResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse";
                        };
    
                        return RetrieveLegacySecretKeyResponse;
                    })();
    
                    v1.Key = (function() {
    
                        /**
                         * Properties of a Key.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IKey
                         * @property {string|null} [name] Key name
                         * @property {string|null} [displayName] Key displayName
                         * @property {google.cloud.recaptchaenterprise.v1.IWebKeySettings|null} [webSettings] Key webSettings
                         * @property {google.cloud.recaptchaenterprise.v1.IAndroidKeySettings|null} [androidSettings] Key androidSettings
                         * @property {google.cloud.recaptchaenterprise.v1.IIOSKeySettings|null} [iosSettings] Key iosSettings
                         * @property {Object.<string,string>|null} [labels] Key labels
                         * @property {google.protobuf.ITimestamp|null} [createTime] Key createTime
                         * @property {google.cloud.recaptchaenterprise.v1.ITestingOptions|null} [testingOptions] Key testingOptions
                         * @property {google.cloud.recaptchaenterprise.v1.IWafSettings|null} [wafSettings] Key wafSettings
                         */
    
                        /**
                         * Constructs a new Key.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a Key.
                         * @implements IKey
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IKey=} [properties] Properties to set
                         */
                        function Key(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Key name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.name = "";
    
                        /**
                         * Key displayName.
                         * @member {string} displayName
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.displayName = "";
    
                        /**
                         * Key webSettings.
                         * @member {google.cloud.recaptchaenterprise.v1.IWebKeySettings|null|undefined} webSettings
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.webSettings = null;
    
                        /**
                         * Key androidSettings.
                         * @member {google.cloud.recaptchaenterprise.v1.IAndroidKeySettings|null|undefined} androidSettings
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.androidSettings = null;
    
                        /**
                         * Key iosSettings.
                         * @member {google.cloud.recaptchaenterprise.v1.IIOSKeySettings|null|undefined} iosSettings
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.iosSettings = null;
    
                        /**
                         * Key labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.labels = $util.emptyObject;
    
                        /**
                         * Key createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.createTime = null;
    
                        /**
                         * Key testingOptions.
                         * @member {google.cloud.recaptchaenterprise.v1.ITestingOptions|null|undefined} testingOptions
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.testingOptions = null;
    
                        /**
                         * Key wafSettings.
                         * @member {google.cloud.recaptchaenterprise.v1.IWafSettings|null|undefined} wafSettings
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Key.prototype.wafSettings = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Key platformSettings.
                         * @member {"webSettings"|"androidSettings"|"iosSettings"|undefined} platformSettings
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         */
                        Object.defineProperty(Key.prototype, "platformSettings", {
                            get: $util.oneOfGetter($oneOfFields = ["webSettings", "androidSettings", "iosSettings"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Key instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IKey=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.Key} Key instance
                         */
                        Key.create = function create(properties) {
                            return new Key(properties);
                        };
    
                        /**
                         * Encodes the specified Key message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.Key.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IKey} message Key message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Key.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                            if (message.webSettings != null && Object.hasOwnProperty.call(message, "webSettings"))
                                $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.encode(message.webSettings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.androidSettings != null && Object.hasOwnProperty.call(message, "androidSettings"))
                                $root.google.cloud.recaptchaenterprise.v1.AndroidKeySettings.encode(message.androidSettings, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.iosSettings != null && Object.hasOwnProperty.call(message, "iosSettings"))
                                $root.google.cloud.recaptchaenterprise.v1.IOSKeySettings.encode(message.iosSettings, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.testingOptions != null && Object.hasOwnProperty.call(message, "testingOptions"))
                                $root.google.cloud.recaptchaenterprise.v1.TestingOptions.encode(message.testingOptions, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.wafSettings != null && Object.hasOwnProperty.call(message, "wafSettings"))
                                $root.google.cloud.recaptchaenterprise.v1.WafSettings.encode(message.wafSettings, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Key message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.Key.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IKey} message Key message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Key.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Key message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.Key} Key
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Key.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.Key(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.displayName = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.webSettings = $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.androidSettings = $root.google.cloud.recaptchaenterprise.v1.AndroidKeySettings.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.iosSettings = $root.google.cloud.recaptchaenterprise.v1.IOSKeySettings.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 7: {
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.testingOptions = $root.google.cloud.recaptchaenterprise.v1.TestingOptions.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.wafSettings = $root.google.cloud.recaptchaenterprise.v1.WafSettings.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Key message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.Key} Key
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Key.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Key message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Key.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.webSettings != null && message.hasOwnProperty("webSettings")) {
                                properties.platformSettings = 1;
                                {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.verify(message.webSettings);
                                    if (error)
                                        return "webSettings." + error;
                                }
                            }
                            if (message.androidSettings != null && message.hasOwnProperty("androidSettings")) {
                                if (properties.platformSettings === 1)
                                    return "platformSettings: multiple values";
                                properties.platformSettings = 1;
                                {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.AndroidKeySettings.verify(message.androidSettings);
                                    if (error)
                                        return "androidSettings." + error;
                                }
                            }
                            if (message.iosSettings != null && message.hasOwnProperty("iosSettings")) {
                                if (properties.platformSettings === 1)
                                    return "platformSettings: multiple values";
                                properties.platformSettings = 1;
                                {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.IOSKeySettings.verify(message.iosSettings);
                                    if (error)
                                        return "iosSettings." + error;
                                }
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.testingOptions != null && message.hasOwnProperty("testingOptions")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.TestingOptions.verify(message.testingOptions);
                                if (error)
                                    return "testingOptions." + error;
                            }
                            if (message.wafSettings != null && message.hasOwnProperty("wafSettings")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.WafSettings.verify(message.wafSettings);
                                if (error)
                                    return "wafSettings." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Key message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.Key} Key
                         */
                        Key.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.Key)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.Key();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.webSettings != null) {
                                if (typeof object.webSettings !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Key.webSettings: object expected");
                                message.webSettings = $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.fromObject(object.webSettings);
                            }
                            if (object.androidSettings != null) {
                                if (typeof object.androidSettings !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Key.androidSettings: object expected");
                                message.androidSettings = $root.google.cloud.recaptchaenterprise.v1.AndroidKeySettings.fromObject(object.androidSettings);
                            }
                            if (object.iosSettings != null) {
                                if (typeof object.iosSettings !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Key.iosSettings: object expected");
                                message.iosSettings = $root.google.cloud.recaptchaenterprise.v1.IOSKeySettings.fromObject(object.iosSettings);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Key.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Key.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.testingOptions != null) {
                                if (typeof object.testingOptions !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Key.testingOptions: object expected");
                                message.testingOptions = $root.google.cloud.recaptchaenterprise.v1.TestingOptions.fromObject(object.testingOptions);
                            }
                            if (object.wafSettings != null) {
                                if (typeof object.wafSettings !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.Key.wafSettings: object expected");
                                message.wafSettings = $root.google.cloud.recaptchaenterprise.v1.WafSettings.fromObject(object.wafSettings);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Key message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.Key} message Key
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Key.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.name = "";
                                object.displayName = "";
                                object.createTime = null;
                                object.testingOptions = null;
                                object.wafSettings = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.webSettings != null && message.hasOwnProperty("webSettings")) {
                                object.webSettings = $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.toObject(message.webSettings, options);
                                if (options.oneofs)
                                    object.platformSettings = "webSettings";
                            }
                            if (message.androidSettings != null && message.hasOwnProperty("androidSettings")) {
                                object.androidSettings = $root.google.cloud.recaptchaenterprise.v1.AndroidKeySettings.toObject(message.androidSettings, options);
                                if (options.oneofs)
                                    object.platformSettings = "androidSettings";
                            }
                            if (message.iosSettings != null && message.hasOwnProperty("iosSettings")) {
                                object.iosSettings = $root.google.cloud.recaptchaenterprise.v1.IOSKeySettings.toObject(message.iosSettings, options);
                                if (options.oneofs)
                                    object.platformSettings = "iosSettings";
                            }
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.testingOptions != null && message.hasOwnProperty("testingOptions"))
                                object.testingOptions = $root.google.cloud.recaptchaenterprise.v1.TestingOptions.toObject(message.testingOptions, options);
                            if (message.wafSettings != null && message.hasOwnProperty("wafSettings"))
                                object.wafSettings = $root.google.cloud.recaptchaenterprise.v1.WafSettings.toObject(message.wafSettings, options);
                            return object;
                        };
    
                        /**
                         * Converts this Key to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Key.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Key
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.Key
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Key.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.Key";
                        };
    
                        return Key;
                    })();
    
                    v1.TestingOptions = (function() {
    
                        /**
                         * Properties of a TestingOptions.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface ITestingOptions
                         * @property {number|null} [testingScore] TestingOptions testingScore
                         * @property {google.cloud.recaptchaenterprise.v1.TestingOptions.TestingChallenge|null} [testingChallenge] TestingOptions testingChallenge
                         */
    
                        /**
                         * Constructs a new TestingOptions.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a TestingOptions.
                         * @implements ITestingOptions
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.ITestingOptions=} [properties] Properties to set
                         */
                        function TestingOptions(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TestingOptions testingScore.
                         * @member {number} testingScore
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @instance
                         */
                        TestingOptions.prototype.testingScore = 0;
    
                        /**
                         * TestingOptions testingChallenge.
                         * @member {google.cloud.recaptchaenterprise.v1.TestingOptions.TestingChallenge} testingChallenge
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @instance
                         */
                        TestingOptions.prototype.testingChallenge = 0;
    
                        /**
                         * Creates a new TestingOptions instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITestingOptions=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.TestingOptions} TestingOptions instance
                         */
                        TestingOptions.create = function create(properties) {
                            return new TestingOptions(properties);
                        };
    
                        /**
                         * Encodes the specified TestingOptions message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TestingOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITestingOptions} message TestingOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TestingOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.testingScore != null && Object.hasOwnProperty.call(message, "testingScore"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.testingScore);
                            if (message.testingChallenge != null && Object.hasOwnProperty.call(message, "testingChallenge"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.testingChallenge);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TestingOptions message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.TestingOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ITestingOptions} message TestingOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TestingOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TestingOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.TestingOptions} TestingOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TestingOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.TestingOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.testingScore = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.testingChallenge = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TestingOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.TestingOptions} TestingOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TestingOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TestingOptions message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TestingOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.testingScore != null && message.hasOwnProperty("testingScore"))
                                if (typeof message.testingScore !== "number")
                                    return "testingScore: number expected";
                            if (message.testingChallenge != null && message.hasOwnProperty("testingChallenge"))
                                switch (message.testingChallenge) {
                                default:
                                    return "testingChallenge: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a TestingOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.TestingOptions} TestingOptions
                         */
                        TestingOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.TestingOptions)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.TestingOptions();
                            if (object.testingScore != null)
                                message.testingScore = Number(object.testingScore);
                            switch (object.testingChallenge) {
                            default:
                                if (typeof object.testingChallenge === "number") {
                                    message.testingChallenge = object.testingChallenge;
                                    break;
                                }
                                break;
                            case "TESTING_CHALLENGE_UNSPECIFIED":
                            case 0:
                                message.testingChallenge = 0;
                                break;
                            case "NOCAPTCHA":
                            case 1:
                                message.testingChallenge = 1;
                                break;
                            case "UNSOLVABLE_CHALLENGE":
                            case 2:
                                message.testingChallenge = 2;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TestingOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.TestingOptions} message TestingOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TestingOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.testingScore = 0;
                                object.testingChallenge = options.enums === String ? "TESTING_CHALLENGE_UNSPECIFIED" : 0;
                            }
                            if (message.testingScore != null && message.hasOwnProperty("testingScore"))
                                object.testingScore = options.json && !isFinite(message.testingScore) ? String(message.testingScore) : message.testingScore;
                            if (message.testingChallenge != null && message.hasOwnProperty("testingChallenge"))
                                object.testingChallenge = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.TestingOptions.TestingChallenge[message.testingChallenge] === undefined ? message.testingChallenge : $root.google.cloud.recaptchaenterprise.v1.TestingOptions.TestingChallenge[message.testingChallenge] : message.testingChallenge;
                            return object;
                        };
    
                        /**
                         * Converts this TestingOptions to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TestingOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TestingOptions
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.TestingOptions
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TestingOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.TestingOptions";
                        };
    
                        /**
                         * TestingChallenge enum.
                         * @name google.cloud.recaptchaenterprise.v1.TestingOptions.TestingChallenge
                         * @enum {number}
                         * @property {number} TESTING_CHALLENGE_UNSPECIFIED=0 TESTING_CHALLENGE_UNSPECIFIED value
                         * @property {number} NOCAPTCHA=1 NOCAPTCHA value
                         * @property {number} UNSOLVABLE_CHALLENGE=2 UNSOLVABLE_CHALLENGE value
                         */
                        TestingOptions.TestingChallenge = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TESTING_CHALLENGE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "NOCAPTCHA"] = 1;
                            values[valuesById[2] = "UNSOLVABLE_CHALLENGE"] = 2;
                            return values;
                        })();
    
                        return TestingOptions;
                    })();
    
                    v1.WebKeySettings = (function() {
    
                        /**
                         * Properties of a WebKeySettings.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IWebKeySettings
                         * @property {boolean|null} [allowAllDomains] WebKeySettings allowAllDomains
                         * @property {Array.<string>|null} [allowedDomains] WebKeySettings allowedDomains
                         * @property {boolean|null} [allowAmpTraffic] WebKeySettings allowAmpTraffic
                         * @property {google.cloud.recaptchaenterprise.v1.WebKeySettings.IntegrationType|null} [integrationType] WebKeySettings integrationType
                         * @property {google.cloud.recaptchaenterprise.v1.WebKeySettings.ChallengeSecurityPreference|null} [challengeSecurityPreference] WebKeySettings challengeSecurityPreference
                         */
    
                        /**
                         * Constructs a new WebKeySettings.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a WebKeySettings.
                         * @implements IWebKeySettings
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IWebKeySettings=} [properties] Properties to set
                         */
                        function WebKeySettings(properties) {
                            this.allowedDomains = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * WebKeySettings allowAllDomains.
                         * @member {boolean} allowAllDomains
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @instance
                         */
                        WebKeySettings.prototype.allowAllDomains = false;
    
                        /**
                         * WebKeySettings allowedDomains.
                         * @member {Array.<string>} allowedDomains
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @instance
                         */
                        WebKeySettings.prototype.allowedDomains = $util.emptyArray;
    
                        /**
                         * WebKeySettings allowAmpTraffic.
                         * @member {boolean} allowAmpTraffic
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @instance
                         */
                        WebKeySettings.prototype.allowAmpTraffic = false;
    
                        /**
                         * WebKeySettings integrationType.
                         * @member {google.cloud.recaptchaenterprise.v1.WebKeySettings.IntegrationType} integrationType
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @instance
                         */
                        WebKeySettings.prototype.integrationType = 0;
    
                        /**
                         * WebKeySettings challengeSecurityPreference.
                         * @member {google.cloud.recaptchaenterprise.v1.WebKeySettings.ChallengeSecurityPreference} challengeSecurityPreference
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @instance
                         */
                        WebKeySettings.prototype.challengeSecurityPreference = 0;
    
                        /**
                         * Creates a new WebKeySettings instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IWebKeySettings=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.WebKeySettings} WebKeySettings instance
                         */
                        WebKeySettings.create = function create(properties) {
                            return new WebKeySettings(properties);
                        };
    
                        /**
                         * Encodes the specified WebKeySettings message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.WebKeySettings.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IWebKeySettings} message WebKeySettings message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WebKeySettings.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.allowedDomains != null && message.allowedDomains.length)
                                for (var i = 0; i < message.allowedDomains.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowedDomains[i]);
                            if (message.allowAmpTraffic != null && Object.hasOwnProperty.call(message, "allowAmpTraffic"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAmpTraffic);
                            if (message.allowAllDomains != null && Object.hasOwnProperty.call(message, "allowAllDomains"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.allowAllDomains);
                            if (message.integrationType != null && Object.hasOwnProperty.call(message, "integrationType"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.integrationType);
                            if (message.challengeSecurityPreference != null && Object.hasOwnProperty.call(message, "challengeSecurityPreference"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.challengeSecurityPreference);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified WebKeySettings message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.WebKeySettings.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IWebKeySettings} message WebKeySettings message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WebKeySettings.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a WebKeySettings message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.WebKeySettings} WebKeySettings
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WebKeySettings.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.WebKeySettings();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3: {
                                        message.allowAllDomains = reader.bool();
                                        break;
                                    }
                                case 1: {
                                        if (!(message.allowedDomains && message.allowedDomains.length))
                                            message.allowedDomains = [];
                                        message.allowedDomains.push(reader.string());
                                        break;
                                    }
                                case 2: {
                                        message.allowAmpTraffic = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.integrationType = reader.int32();
                                        break;
                                    }
                                case 5: {
                                        message.challengeSecurityPreference = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a WebKeySettings message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.WebKeySettings} WebKeySettings
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WebKeySettings.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a WebKeySettings message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        WebKeySettings.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.allowAllDomains != null && message.hasOwnProperty("allowAllDomains"))
                                if (typeof message.allowAllDomains !== "boolean")
                                    return "allowAllDomains: boolean expected";
                            if (message.allowedDomains != null && message.hasOwnProperty("allowedDomains")) {
                                if (!Array.isArray(message.allowedDomains))
                                    return "allowedDomains: array expected";
                                for (var i = 0; i < message.allowedDomains.length; ++i)
                                    if (!$util.isString(message.allowedDomains[i]))
                                        return "allowedDomains: string[] expected";
                            }
                            if (message.allowAmpTraffic != null && message.hasOwnProperty("allowAmpTraffic"))
                                if (typeof message.allowAmpTraffic !== "boolean")
                                    return "allowAmpTraffic: boolean expected";
                            if (message.integrationType != null && message.hasOwnProperty("integrationType"))
                                switch (message.integrationType) {
                                default:
                                    return "integrationType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.challengeSecurityPreference != null && message.hasOwnProperty("challengeSecurityPreference"))
                                switch (message.challengeSecurityPreference) {
                                default:
                                    return "challengeSecurityPreference: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a WebKeySettings message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.WebKeySettings} WebKeySettings
                         */
                        WebKeySettings.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.WebKeySettings)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.WebKeySettings();
                            if (object.allowAllDomains != null)
                                message.allowAllDomains = Boolean(object.allowAllDomains);
                            if (object.allowedDomains) {
                                if (!Array.isArray(object.allowedDomains))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.WebKeySettings.allowedDomains: array expected");
                                message.allowedDomains = [];
                                for (var i = 0; i < object.allowedDomains.length; ++i)
                                    message.allowedDomains[i] = String(object.allowedDomains[i]);
                            }
                            if (object.allowAmpTraffic != null)
                                message.allowAmpTraffic = Boolean(object.allowAmpTraffic);
                            switch (object.integrationType) {
                            default:
                                if (typeof object.integrationType === "number") {
                                    message.integrationType = object.integrationType;
                                    break;
                                }
                                break;
                            case "INTEGRATION_TYPE_UNSPECIFIED":
                            case 0:
                                message.integrationType = 0;
                                break;
                            case "SCORE":
                            case 1:
                                message.integrationType = 1;
                                break;
                            case "CHECKBOX":
                            case 2:
                                message.integrationType = 2;
                                break;
                            case "INVISIBLE":
                            case 3:
                                message.integrationType = 3;
                                break;
                            }
                            switch (object.challengeSecurityPreference) {
                            default:
                                if (typeof object.challengeSecurityPreference === "number") {
                                    message.challengeSecurityPreference = object.challengeSecurityPreference;
                                    break;
                                }
                                break;
                            case "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED":
                            case 0:
                                message.challengeSecurityPreference = 0;
                                break;
                            case "USABILITY":
                            case 1:
                                message.challengeSecurityPreference = 1;
                                break;
                            case "BALANCE":
                            case 2:
                                message.challengeSecurityPreference = 2;
                                break;
                            case "SECURITY":
                            case 3:
                                message.challengeSecurityPreference = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a WebKeySettings message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.WebKeySettings} message WebKeySettings
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        WebKeySettings.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.allowedDomains = [];
                            if (options.defaults) {
                                object.allowAmpTraffic = false;
                                object.allowAllDomains = false;
                                object.integrationType = options.enums === String ? "INTEGRATION_TYPE_UNSPECIFIED" : 0;
                                object.challengeSecurityPreference = options.enums === String ? "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED" : 0;
                            }
                            if (message.allowedDomains && message.allowedDomains.length) {
                                object.allowedDomains = [];
                                for (var j = 0; j < message.allowedDomains.length; ++j)
                                    object.allowedDomains[j] = message.allowedDomains[j];
                            }
                            if (message.allowAmpTraffic != null && message.hasOwnProperty("allowAmpTraffic"))
                                object.allowAmpTraffic = message.allowAmpTraffic;
                            if (message.allowAllDomains != null && message.hasOwnProperty("allowAllDomains"))
                                object.allowAllDomains = message.allowAllDomains;
                            if (message.integrationType != null && message.hasOwnProperty("integrationType"))
                                object.integrationType = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.IntegrationType[message.integrationType] === undefined ? message.integrationType : $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.IntegrationType[message.integrationType] : message.integrationType;
                            if (message.challengeSecurityPreference != null && message.hasOwnProperty("challengeSecurityPreference"))
                                object.challengeSecurityPreference = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.ChallengeSecurityPreference[message.challengeSecurityPreference] === undefined ? message.challengeSecurityPreference : $root.google.cloud.recaptchaenterprise.v1.WebKeySettings.ChallengeSecurityPreference[message.challengeSecurityPreference] : message.challengeSecurityPreference;
                            return object;
                        };
    
                        /**
                         * Converts this WebKeySettings to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        WebKeySettings.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for WebKeySettings
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.WebKeySettings
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        WebKeySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.WebKeySettings";
                        };
    
                        /**
                         * IntegrationType enum.
                         * @name google.cloud.recaptchaenterprise.v1.WebKeySettings.IntegrationType
                         * @enum {number}
                         * @property {number} INTEGRATION_TYPE_UNSPECIFIED=0 INTEGRATION_TYPE_UNSPECIFIED value
                         * @property {number} SCORE=1 SCORE value
                         * @property {number} CHECKBOX=2 CHECKBOX value
                         * @property {number} INVISIBLE=3 INVISIBLE value
                         */
                        WebKeySettings.IntegrationType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "INTEGRATION_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "SCORE"] = 1;
                            values[valuesById[2] = "CHECKBOX"] = 2;
                            values[valuesById[3] = "INVISIBLE"] = 3;
                            return values;
                        })();
    
                        /**
                         * ChallengeSecurityPreference enum.
                         * @name google.cloud.recaptchaenterprise.v1.WebKeySettings.ChallengeSecurityPreference
                         * @enum {number}
                         * @property {number} CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED=0 CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED value
                         * @property {number} USABILITY=1 USABILITY value
                         * @property {number} BALANCE=2 BALANCE value
                         * @property {number} SECURITY=3 SECURITY value
                         */
                        WebKeySettings.ChallengeSecurityPreference = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "USABILITY"] = 1;
                            values[valuesById[2] = "BALANCE"] = 2;
                            values[valuesById[3] = "SECURITY"] = 3;
                            return values;
                        })();
    
                        return WebKeySettings;
                    })();
    
                    v1.AndroidKeySettings = (function() {
    
                        /**
                         * Properties of an AndroidKeySettings.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IAndroidKeySettings
                         * @property {boolean|null} [allowAllPackageNames] AndroidKeySettings allowAllPackageNames
                         * @property {Array.<string>|null} [allowedPackageNames] AndroidKeySettings allowedPackageNames
                         */
    
                        /**
                         * Constructs a new AndroidKeySettings.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents an AndroidKeySettings.
                         * @implements IAndroidKeySettings
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IAndroidKeySettings=} [properties] Properties to set
                         */
                        function AndroidKeySettings(properties) {
                            this.allowedPackageNames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AndroidKeySettings allowAllPackageNames.
                         * @member {boolean} allowAllPackageNames
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @instance
                         */
                        AndroidKeySettings.prototype.allowAllPackageNames = false;
    
                        /**
                         * AndroidKeySettings allowedPackageNames.
                         * @member {Array.<string>} allowedPackageNames
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @instance
                         */
                        AndroidKeySettings.prototype.allowedPackageNames = $util.emptyArray;
    
                        /**
                         * Creates a new AndroidKeySettings instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAndroidKeySettings=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.AndroidKeySettings} AndroidKeySettings instance
                         */
                        AndroidKeySettings.create = function create(properties) {
                            return new AndroidKeySettings(properties);
                        };
    
                        /**
                         * Encodes the specified AndroidKeySettings message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AndroidKeySettings.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAndroidKeySettings} message AndroidKeySettings message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AndroidKeySettings.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.allowedPackageNames != null && message.allowedPackageNames.length)
                                for (var i = 0; i < message.allowedPackageNames.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowedPackageNames[i]);
                            if (message.allowAllPackageNames != null && Object.hasOwnProperty.call(message, "allowAllPackageNames"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAllPackageNames);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AndroidKeySettings message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.AndroidKeySettings.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IAndroidKeySettings} message AndroidKeySettings message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AndroidKeySettings.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AndroidKeySettings message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.AndroidKeySettings} AndroidKeySettings
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AndroidKeySettings.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.AndroidKeySettings();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2: {
                                        message.allowAllPackageNames = reader.bool();
                                        break;
                                    }
                                case 1: {
                                        if (!(message.allowedPackageNames && message.allowedPackageNames.length))
                                            message.allowedPackageNames = [];
                                        message.allowedPackageNames.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AndroidKeySettings message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.AndroidKeySettings} AndroidKeySettings
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AndroidKeySettings.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AndroidKeySettings message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AndroidKeySettings.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.allowAllPackageNames != null && message.hasOwnProperty("allowAllPackageNames"))
                                if (typeof message.allowAllPackageNames !== "boolean")
                                    return "allowAllPackageNames: boolean expected";
                            if (message.allowedPackageNames != null && message.hasOwnProperty("allowedPackageNames")) {
                                if (!Array.isArray(message.allowedPackageNames))
                                    return "allowedPackageNames: array expected";
                                for (var i = 0; i < message.allowedPackageNames.length; ++i)
                                    if (!$util.isString(message.allowedPackageNames[i]))
                                        return "allowedPackageNames: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AndroidKeySettings message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.AndroidKeySettings} AndroidKeySettings
                         */
                        AndroidKeySettings.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.AndroidKeySettings)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.AndroidKeySettings();
                            if (object.allowAllPackageNames != null)
                                message.allowAllPackageNames = Boolean(object.allowAllPackageNames);
                            if (object.allowedPackageNames) {
                                if (!Array.isArray(object.allowedPackageNames))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.AndroidKeySettings.allowedPackageNames: array expected");
                                message.allowedPackageNames = [];
                                for (var i = 0; i < object.allowedPackageNames.length; ++i)
                                    message.allowedPackageNames[i] = String(object.allowedPackageNames[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AndroidKeySettings message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.AndroidKeySettings} message AndroidKeySettings
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AndroidKeySettings.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.allowedPackageNames = [];
                            if (options.defaults)
                                object.allowAllPackageNames = false;
                            if (message.allowedPackageNames && message.allowedPackageNames.length) {
                                object.allowedPackageNames = [];
                                for (var j = 0; j < message.allowedPackageNames.length; ++j)
                                    object.allowedPackageNames[j] = message.allowedPackageNames[j];
                            }
                            if (message.allowAllPackageNames != null && message.hasOwnProperty("allowAllPackageNames"))
                                object.allowAllPackageNames = message.allowAllPackageNames;
                            return object;
                        };
    
                        /**
                         * Converts this AndroidKeySettings to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AndroidKeySettings.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AndroidKeySettings
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.AndroidKeySettings
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AndroidKeySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.AndroidKeySettings";
                        };
    
                        return AndroidKeySettings;
                    })();
    
                    v1.IOSKeySettings = (function() {
    
                        /**
                         * Properties of a IOSKeySettings.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IIOSKeySettings
                         * @property {boolean|null} [allowAllBundleIds] IOSKeySettings allowAllBundleIds
                         * @property {Array.<string>|null} [allowedBundleIds] IOSKeySettings allowedBundleIds
                         */
    
                        /**
                         * Constructs a new IOSKeySettings.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a IOSKeySettings.
                         * @implements IIOSKeySettings
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IIOSKeySettings=} [properties] Properties to set
                         */
                        function IOSKeySettings(properties) {
                            this.allowedBundleIds = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * IOSKeySettings allowAllBundleIds.
                         * @member {boolean} allowAllBundleIds
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @instance
                         */
                        IOSKeySettings.prototype.allowAllBundleIds = false;
    
                        /**
                         * IOSKeySettings allowedBundleIds.
                         * @member {Array.<string>} allowedBundleIds
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @instance
                         */
                        IOSKeySettings.prototype.allowedBundleIds = $util.emptyArray;
    
                        /**
                         * Creates a new IOSKeySettings instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IIOSKeySettings=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.IOSKeySettings} IOSKeySettings instance
                         */
                        IOSKeySettings.create = function create(properties) {
                            return new IOSKeySettings(properties);
                        };
    
                        /**
                         * Encodes the specified IOSKeySettings message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.IOSKeySettings.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IIOSKeySettings} message IOSKeySettings message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        IOSKeySettings.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.allowedBundleIds != null && message.allowedBundleIds.length)
                                for (var i = 0; i < message.allowedBundleIds.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowedBundleIds[i]);
                            if (message.allowAllBundleIds != null && Object.hasOwnProperty.call(message, "allowAllBundleIds"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAllBundleIds);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified IOSKeySettings message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.IOSKeySettings.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IIOSKeySettings} message IOSKeySettings message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        IOSKeySettings.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a IOSKeySettings message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.IOSKeySettings} IOSKeySettings
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        IOSKeySettings.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.IOSKeySettings();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2: {
                                        message.allowAllBundleIds = reader.bool();
                                        break;
                                    }
                                case 1: {
                                        if (!(message.allowedBundleIds && message.allowedBundleIds.length))
                                            message.allowedBundleIds = [];
                                        message.allowedBundleIds.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a IOSKeySettings message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.IOSKeySettings} IOSKeySettings
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        IOSKeySettings.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a IOSKeySettings message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        IOSKeySettings.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.allowAllBundleIds != null && message.hasOwnProperty("allowAllBundleIds"))
                                if (typeof message.allowAllBundleIds !== "boolean")
                                    return "allowAllBundleIds: boolean expected";
                            if (message.allowedBundleIds != null && message.hasOwnProperty("allowedBundleIds")) {
                                if (!Array.isArray(message.allowedBundleIds))
                                    return "allowedBundleIds: array expected";
                                for (var i = 0; i < message.allowedBundleIds.length; ++i)
                                    if (!$util.isString(message.allowedBundleIds[i]))
                                        return "allowedBundleIds: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a IOSKeySettings message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.IOSKeySettings} IOSKeySettings
                         */
                        IOSKeySettings.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.IOSKeySettings)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.IOSKeySettings();
                            if (object.allowAllBundleIds != null)
                                message.allowAllBundleIds = Boolean(object.allowAllBundleIds);
                            if (object.allowedBundleIds) {
                                if (!Array.isArray(object.allowedBundleIds))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.IOSKeySettings.allowedBundleIds: array expected");
                                message.allowedBundleIds = [];
                                for (var i = 0; i < object.allowedBundleIds.length; ++i)
                                    message.allowedBundleIds[i] = String(object.allowedBundleIds[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a IOSKeySettings message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IOSKeySettings} message IOSKeySettings
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        IOSKeySettings.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.allowedBundleIds = [];
                            if (options.defaults)
                                object.allowAllBundleIds = false;
                            if (message.allowedBundleIds && message.allowedBundleIds.length) {
                                object.allowedBundleIds = [];
                                for (var j = 0; j < message.allowedBundleIds.length; ++j)
                                    object.allowedBundleIds[j] = message.allowedBundleIds[j];
                            }
                            if (message.allowAllBundleIds != null && message.hasOwnProperty("allowAllBundleIds"))
                                object.allowAllBundleIds = message.allowAllBundleIds;
                            return object;
                        };
    
                        /**
                         * Converts this IOSKeySettings to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        IOSKeySettings.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for IOSKeySettings
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.IOSKeySettings
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        IOSKeySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.IOSKeySettings";
                        };
    
                        return IOSKeySettings;
                    })();
    
                    v1.ScoreDistribution = (function() {
    
                        /**
                         * Properties of a ScoreDistribution.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IScoreDistribution
                         * @property {Object.<string,number|Long>|null} [scoreBuckets] ScoreDistribution scoreBuckets
                         */
    
                        /**
                         * Constructs a new ScoreDistribution.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ScoreDistribution.
                         * @implements IScoreDistribution
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IScoreDistribution=} [properties] Properties to set
                         */
                        function ScoreDistribution(properties) {
                            this.scoreBuckets = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ScoreDistribution scoreBuckets.
                         * @member {Object.<string,number|Long>} scoreBuckets
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @instance
                         */
                        ScoreDistribution.prototype.scoreBuckets = $util.emptyObject;
    
                        /**
                         * Creates a new ScoreDistribution instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IScoreDistribution=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ScoreDistribution} ScoreDistribution instance
                         */
                        ScoreDistribution.create = function create(properties) {
                            return new ScoreDistribution(properties);
                        };
    
                        /**
                         * Encodes the specified ScoreDistribution message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ScoreDistribution.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IScoreDistribution} message ScoreDistribution message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ScoreDistribution.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.scoreBuckets != null && Object.hasOwnProperty.call(message, "scoreBuckets"))
                                for (var keys = Object.keys(message.scoreBuckets), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int64(message.scoreBuckets[keys[i]]).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ScoreDistribution message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ScoreDistribution.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IScoreDistribution} message ScoreDistribution message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ScoreDistribution.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ScoreDistribution message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ScoreDistribution} ScoreDistribution
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ScoreDistribution.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (message.scoreBuckets === $util.emptyObject)
                                            message.scoreBuckets = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = 0;
                                        value = 0;
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.int32();
                                                break;
                                            case 2:
                                                value = reader.int64();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.scoreBuckets[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ScoreDistribution message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ScoreDistribution} ScoreDistribution
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ScoreDistribution.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ScoreDistribution message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ScoreDistribution.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.scoreBuckets != null && message.hasOwnProperty("scoreBuckets")) {
                                if (!$util.isObject(message.scoreBuckets))
                                    return "scoreBuckets: object expected";
                                var key = Object.keys(message.scoreBuckets);
                                for (var i = 0; i < key.length; ++i) {
                                    if (!$util.key32Re.test(key[i]))
                                        return "scoreBuckets: integer key{k:int32} expected";
                                    if (!$util.isInteger(message.scoreBuckets[key[i]]) && !(message.scoreBuckets[key[i]] && $util.isInteger(message.scoreBuckets[key[i]].low) && $util.isInteger(message.scoreBuckets[key[i]].high)))
                                        return "scoreBuckets: integer|Long{k:int32} expected";
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ScoreDistribution message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ScoreDistribution} ScoreDistribution
                         */
                        ScoreDistribution.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution();
                            if (object.scoreBuckets) {
                                if (typeof object.scoreBuckets !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.ScoreDistribution.scoreBuckets: object expected");
                                message.scoreBuckets = {};
                                for (var keys = Object.keys(object.scoreBuckets), i = 0; i < keys.length; ++i)
                                    if ($util.Long)
                                        (message.scoreBuckets[keys[i]] = $util.Long.fromValue(object.scoreBuckets[keys[i]])).unsigned = false;
                                    else if (typeof object.scoreBuckets[keys[i]] === "string")
                                        message.scoreBuckets[keys[i]] = parseInt(object.scoreBuckets[keys[i]], 10);
                                    else if (typeof object.scoreBuckets[keys[i]] === "number")
                                        message.scoreBuckets[keys[i]] = object.scoreBuckets[keys[i]];
                                    else if (typeof object.scoreBuckets[keys[i]] === "object")
                                        message.scoreBuckets[keys[i]] = new $util.LongBits(object.scoreBuckets[keys[i]].low >>> 0, object.scoreBuckets[keys[i]].high >>> 0).toNumber();
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ScoreDistribution message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ScoreDistribution} message ScoreDistribution
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ScoreDistribution.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.scoreBuckets = {};
                            var keys2;
                            if (message.scoreBuckets && (keys2 = Object.keys(message.scoreBuckets)).length) {
                                object.scoreBuckets = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    if (typeof message.scoreBuckets[keys2[j]] === "number")
                                        object.scoreBuckets[keys2[j]] = options.longs === String ? String(message.scoreBuckets[keys2[j]]) : message.scoreBuckets[keys2[j]];
                                    else
                                        object.scoreBuckets[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.scoreBuckets[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.scoreBuckets[keys2[j]].low >>> 0, message.scoreBuckets[keys2[j]].high >>> 0).toNumber() : message.scoreBuckets[keys2[j]];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ScoreDistribution to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ScoreDistribution.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ScoreDistribution
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreDistribution
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ScoreDistribution.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ScoreDistribution";
                        };
    
                        return ScoreDistribution;
                    })();
    
                    v1.ScoreMetrics = (function() {
    
                        /**
                         * Properties of a ScoreMetrics.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IScoreMetrics
                         * @property {google.cloud.recaptchaenterprise.v1.IScoreDistribution|null} [overallMetrics] ScoreMetrics overallMetrics
                         * @property {Object.<string,google.cloud.recaptchaenterprise.v1.IScoreDistribution>|null} [actionMetrics] ScoreMetrics actionMetrics
                         */
    
                        /**
                         * Constructs a new ScoreMetrics.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ScoreMetrics.
                         * @implements IScoreMetrics
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IScoreMetrics=} [properties] Properties to set
                         */
                        function ScoreMetrics(properties) {
                            this.actionMetrics = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ScoreMetrics overallMetrics.
                         * @member {google.cloud.recaptchaenterprise.v1.IScoreDistribution|null|undefined} overallMetrics
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @instance
                         */
                        ScoreMetrics.prototype.overallMetrics = null;
    
                        /**
                         * ScoreMetrics actionMetrics.
                         * @member {Object.<string,google.cloud.recaptchaenterprise.v1.IScoreDistribution>} actionMetrics
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @instance
                         */
                        ScoreMetrics.prototype.actionMetrics = $util.emptyObject;
    
                        /**
                         * Creates a new ScoreMetrics instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IScoreMetrics=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ScoreMetrics} ScoreMetrics instance
                         */
                        ScoreMetrics.create = function create(properties) {
                            return new ScoreMetrics(properties);
                        };
    
                        /**
                         * Encodes the specified ScoreMetrics message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ScoreMetrics.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IScoreMetrics} message ScoreMetrics message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ScoreMetrics.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.overallMetrics != null && Object.hasOwnProperty.call(message, "overallMetrics"))
                                $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.encode(message.overallMetrics, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.actionMetrics != null && Object.hasOwnProperty.call(message, "actionMetrics"))
                                for (var keys = Object.keys(message.actionMetrics), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.encode(message.actionMetrics[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ScoreMetrics message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ScoreMetrics.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IScoreMetrics} message ScoreMetrics message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ScoreMetrics.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ScoreMetrics message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ScoreMetrics} ScoreMetrics
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ScoreMetrics.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ScoreMetrics(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.overallMetrics = $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (message.actionMetrics === $util.emptyObject)
                                            message.actionMetrics = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = null;
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.decode(reader, reader.uint32());
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.actionMetrics[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ScoreMetrics message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ScoreMetrics} ScoreMetrics
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ScoreMetrics.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ScoreMetrics message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ScoreMetrics.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.overallMetrics != null && message.hasOwnProperty("overallMetrics")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.verify(message.overallMetrics);
                                if (error)
                                    return "overallMetrics." + error;
                            }
                            if (message.actionMetrics != null && message.hasOwnProperty("actionMetrics")) {
                                if (!$util.isObject(message.actionMetrics))
                                    return "actionMetrics: object expected";
                                var key = Object.keys(message.actionMetrics);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.verify(message.actionMetrics[key[i]]);
                                    if (error)
                                        return "actionMetrics." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ScoreMetrics message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ScoreMetrics} ScoreMetrics
                         */
                        ScoreMetrics.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ScoreMetrics)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ScoreMetrics();
                            if (object.overallMetrics != null) {
                                if (typeof object.overallMetrics !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.ScoreMetrics.overallMetrics: object expected");
                                message.overallMetrics = $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.fromObject(object.overallMetrics);
                            }
                            if (object.actionMetrics) {
                                if (typeof object.actionMetrics !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.ScoreMetrics.actionMetrics: object expected");
                                message.actionMetrics = {};
                                for (var keys = Object.keys(object.actionMetrics), i = 0; i < keys.length; ++i) {
                                    if (typeof object.actionMetrics[keys[i]] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.ScoreMetrics.actionMetrics: object expected");
                                    message.actionMetrics[keys[i]] = $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.fromObject(object.actionMetrics[keys[i]]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ScoreMetrics message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ScoreMetrics} message ScoreMetrics
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ScoreMetrics.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.actionMetrics = {};
                            if (options.defaults)
                                object.overallMetrics = null;
                            if (message.overallMetrics != null && message.hasOwnProperty("overallMetrics"))
                                object.overallMetrics = $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.toObject(message.overallMetrics, options);
                            var keys2;
                            if (message.actionMetrics && (keys2 = Object.keys(message.actionMetrics)).length) {
                                object.actionMetrics = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.actionMetrics[keys2[j]] = $root.google.cloud.recaptchaenterprise.v1.ScoreDistribution.toObject(message.actionMetrics[keys2[j]], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ScoreMetrics to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ScoreMetrics.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ScoreMetrics
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ScoreMetrics
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ScoreMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ScoreMetrics";
                        };
    
                        return ScoreMetrics;
                    })();
    
                    v1.ChallengeMetrics = (function() {
    
                        /**
                         * Properties of a ChallengeMetrics.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IChallengeMetrics
                         * @property {number|Long|null} [pageloadCount] ChallengeMetrics pageloadCount
                         * @property {number|Long|null} [nocaptchaCount] ChallengeMetrics nocaptchaCount
                         * @property {number|Long|null} [failedCount] ChallengeMetrics failedCount
                         * @property {number|Long|null} [passedCount] ChallengeMetrics passedCount
                         */
    
                        /**
                         * Constructs a new ChallengeMetrics.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ChallengeMetrics.
                         * @implements IChallengeMetrics
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IChallengeMetrics=} [properties] Properties to set
                         */
                        function ChallengeMetrics(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ChallengeMetrics pageloadCount.
                         * @member {number|Long} pageloadCount
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @instance
                         */
                        ChallengeMetrics.prototype.pageloadCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ChallengeMetrics nocaptchaCount.
                         * @member {number|Long} nocaptchaCount
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @instance
                         */
                        ChallengeMetrics.prototype.nocaptchaCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ChallengeMetrics failedCount.
                         * @member {number|Long} failedCount
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @instance
                         */
                        ChallengeMetrics.prototype.failedCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ChallengeMetrics passedCount.
                         * @member {number|Long} passedCount
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @instance
                         */
                        ChallengeMetrics.prototype.passedCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new ChallengeMetrics instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IChallengeMetrics=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ChallengeMetrics} ChallengeMetrics instance
                         */
                        ChallengeMetrics.create = function create(properties) {
                            return new ChallengeMetrics(properties);
                        };
    
                        /**
                         * Encodes the specified ChallengeMetrics message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ChallengeMetrics.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IChallengeMetrics} message ChallengeMetrics message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ChallengeMetrics.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pageloadCount != null && Object.hasOwnProperty.call(message, "pageloadCount"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.pageloadCount);
                            if (message.nocaptchaCount != null && Object.hasOwnProperty.call(message, "nocaptchaCount"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.nocaptchaCount);
                            if (message.failedCount != null && Object.hasOwnProperty.call(message, "failedCount"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.failedCount);
                            if (message.passedCount != null && Object.hasOwnProperty.call(message, "passedCount"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.passedCount);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ChallengeMetrics message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ChallengeMetrics.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IChallengeMetrics} message ChallengeMetrics message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ChallengeMetrics.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ChallengeMetrics message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ChallengeMetrics} ChallengeMetrics
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ChallengeMetrics.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ChallengeMetrics();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.pageloadCount = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.nocaptchaCount = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.failedCount = reader.int64();
                                        break;
                                    }
                                case 4: {
                                        message.passedCount = reader.int64();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ChallengeMetrics message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ChallengeMetrics} ChallengeMetrics
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ChallengeMetrics.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ChallengeMetrics message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ChallengeMetrics.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pageloadCount != null && message.hasOwnProperty("pageloadCount"))
                                if (!$util.isInteger(message.pageloadCount) && !(message.pageloadCount && $util.isInteger(message.pageloadCount.low) && $util.isInteger(message.pageloadCount.high)))
                                    return "pageloadCount: integer|Long expected";
                            if (message.nocaptchaCount != null && message.hasOwnProperty("nocaptchaCount"))
                                if (!$util.isInteger(message.nocaptchaCount) && !(message.nocaptchaCount && $util.isInteger(message.nocaptchaCount.low) && $util.isInteger(message.nocaptchaCount.high)))
                                    return "nocaptchaCount: integer|Long expected";
                            if (message.failedCount != null && message.hasOwnProperty("failedCount"))
                                if (!$util.isInteger(message.failedCount) && !(message.failedCount && $util.isInteger(message.failedCount.low) && $util.isInteger(message.failedCount.high)))
                                    return "failedCount: integer|Long expected";
                            if (message.passedCount != null && message.hasOwnProperty("passedCount"))
                                if (!$util.isInteger(message.passedCount) && !(message.passedCount && $util.isInteger(message.passedCount.low) && $util.isInteger(message.passedCount.high)))
                                    return "passedCount: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a ChallengeMetrics message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ChallengeMetrics} ChallengeMetrics
                         */
                        ChallengeMetrics.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ChallengeMetrics)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ChallengeMetrics();
                            if (object.pageloadCount != null)
                                if ($util.Long)
                                    (message.pageloadCount = $util.Long.fromValue(object.pageloadCount)).unsigned = false;
                                else if (typeof object.pageloadCount === "string")
                                    message.pageloadCount = parseInt(object.pageloadCount, 10);
                                else if (typeof object.pageloadCount === "number")
                                    message.pageloadCount = object.pageloadCount;
                                else if (typeof object.pageloadCount === "object")
                                    message.pageloadCount = new $util.LongBits(object.pageloadCount.low >>> 0, object.pageloadCount.high >>> 0).toNumber();
                            if (object.nocaptchaCount != null)
                                if ($util.Long)
                                    (message.nocaptchaCount = $util.Long.fromValue(object.nocaptchaCount)).unsigned = false;
                                else if (typeof object.nocaptchaCount === "string")
                                    message.nocaptchaCount = parseInt(object.nocaptchaCount, 10);
                                else if (typeof object.nocaptchaCount === "number")
                                    message.nocaptchaCount = object.nocaptchaCount;
                                else if (typeof object.nocaptchaCount === "object")
                                    message.nocaptchaCount = new $util.LongBits(object.nocaptchaCount.low >>> 0, object.nocaptchaCount.high >>> 0).toNumber();
                            if (object.failedCount != null)
                                if ($util.Long)
                                    (message.failedCount = $util.Long.fromValue(object.failedCount)).unsigned = false;
                                else if (typeof object.failedCount === "string")
                                    message.failedCount = parseInt(object.failedCount, 10);
                                else if (typeof object.failedCount === "number")
                                    message.failedCount = object.failedCount;
                                else if (typeof object.failedCount === "object")
                                    message.failedCount = new $util.LongBits(object.failedCount.low >>> 0, object.failedCount.high >>> 0).toNumber();
                            if (object.passedCount != null)
                                if ($util.Long)
                                    (message.passedCount = $util.Long.fromValue(object.passedCount)).unsigned = false;
                                else if (typeof object.passedCount === "string")
                                    message.passedCount = parseInt(object.passedCount, 10);
                                else if (typeof object.passedCount === "number")
                                    message.passedCount = object.passedCount;
                                else if (typeof object.passedCount === "object")
                                    message.passedCount = new $util.LongBits(object.passedCount.low >>> 0, object.passedCount.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ChallengeMetrics message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ChallengeMetrics} message ChallengeMetrics
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ChallengeMetrics.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.pageloadCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.pageloadCount = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.nocaptchaCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.nocaptchaCount = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.failedCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.failedCount = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.passedCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.passedCount = options.longs === String ? "0" : 0;
                            }
                            if (message.pageloadCount != null && message.hasOwnProperty("pageloadCount"))
                                if (typeof message.pageloadCount === "number")
                                    object.pageloadCount = options.longs === String ? String(message.pageloadCount) : message.pageloadCount;
                                else
                                    object.pageloadCount = options.longs === String ? $util.Long.prototype.toString.call(message.pageloadCount) : options.longs === Number ? new $util.LongBits(message.pageloadCount.low >>> 0, message.pageloadCount.high >>> 0).toNumber() : message.pageloadCount;
                            if (message.nocaptchaCount != null && message.hasOwnProperty("nocaptchaCount"))
                                if (typeof message.nocaptchaCount === "number")
                                    object.nocaptchaCount = options.longs === String ? String(message.nocaptchaCount) : message.nocaptchaCount;
                                else
                                    object.nocaptchaCount = options.longs === String ? $util.Long.prototype.toString.call(message.nocaptchaCount) : options.longs === Number ? new $util.LongBits(message.nocaptchaCount.low >>> 0, message.nocaptchaCount.high >>> 0).toNumber() : message.nocaptchaCount;
                            if (message.failedCount != null && message.hasOwnProperty("failedCount"))
                                if (typeof message.failedCount === "number")
                                    object.failedCount = options.longs === String ? String(message.failedCount) : message.failedCount;
                                else
                                    object.failedCount = options.longs === String ? $util.Long.prototype.toString.call(message.failedCount) : options.longs === Number ? new $util.LongBits(message.failedCount.low >>> 0, message.failedCount.high >>> 0).toNumber() : message.failedCount;
                            if (message.passedCount != null && message.hasOwnProperty("passedCount"))
                                if (typeof message.passedCount === "number")
                                    object.passedCount = options.longs === String ? String(message.passedCount) : message.passedCount;
                                else
                                    object.passedCount = options.longs === String ? $util.Long.prototype.toString.call(message.passedCount) : options.longs === Number ? new $util.LongBits(message.passedCount.low >>> 0, message.passedCount.high >>> 0).toNumber() : message.passedCount;
                            return object;
                        };
    
                        /**
                         * Converts this ChallengeMetrics to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ChallengeMetrics.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ChallengeMetrics
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ChallengeMetrics
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ChallengeMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ChallengeMetrics";
                        };
    
                        return ChallengeMetrics;
                    })();
    
                    v1.ListRelatedAccountGroupMembershipsRequest = (function() {
    
                        /**
                         * Properties of a ListRelatedAccountGroupMembershipsRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IListRelatedAccountGroupMembershipsRequest
                         * @property {string|null} [parent] ListRelatedAccountGroupMembershipsRequest parent
                         * @property {number|null} [pageSize] ListRelatedAccountGroupMembershipsRequest pageSize
                         * @property {string|null} [pageToken] ListRelatedAccountGroupMembershipsRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListRelatedAccountGroupMembershipsRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ListRelatedAccountGroupMembershipsRequest.
                         * @implements IListRelatedAccountGroupMembershipsRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsRequest=} [properties] Properties to set
                         */
                        function ListRelatedAccountGroupMembershipsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListRelatedAccountGroupMembershipsRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @instance
                         */
                        ListRelatedAccountGroupMembershipsRequest.prototype.parent = "";
    
                        /**
                         * ListRelatedAccountGroupMembershipsRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @instance
                         */
                        ListRelatedAccountGroupMembershipsRequest.prototype.pageSize = 0;
    
                        /**
                         * ListRelatedAccountGroupMembershipsRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @instance
                         */
                        ListRelatedAccountGroupMembershipsRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListRelatedAccountGroupMembershipsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest} ListRelatedAccountGroupMembershipsRequest instance
                         */
                        ListRelatedAccountGroupMembershipsRequest.create = function create(properties) {
                            return new ListRelatedAccountGroupMembershipsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListRelatedAccountGroupMembershipsRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsRequest} message ListRelatedAccountGroupMembershipsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListRelatedAccountGroupMembershipsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListRelatedAccountGroupMembershipsRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsRequest} message ListRelatedAccountGroupMembershipsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListRelatedAccountGroupMembershipsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListRelatedAccountGroupMembershipsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest} ListRelatedAccountGroupMembershipsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListRelatedAccountGroupMembershipsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.pageSize = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.pageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListRelatedAccountGroupMembershipsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest} ListRelatedAccountGroupMembershipsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListRelatedAccountGroupMembershipsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListRelatedAccountGroupMembershipsRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListRelatedAccountGroupMembershipsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListRelatedAccountGroupMembershipsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest} ListRelatedAccountGroupMembershipsRequest
                         */
                        ListRelatedAccountGroupMembershipsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListRelatedAccountGroupMembershipsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest} message ListRelatedAccountGroupMembershipsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListRelatedAccountGroupMembershipsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListRelatedAccountGroupMembershipsRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListRelatedAccountGroupMembershipsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListRelatedAccountGroupMembershipsRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListRelatedAccountGroupMembershipsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest";
                        };
    
                        return ListRelatedAccountGroupMembershipsRequest;
                    })();
    
                    v1.ListRelatedAccountGroupMembershipsResponse = (function() {
    
                        /**
                         * Properties of a ListRelatedAccountGroupMembershipsResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IListRelatedAccountGroupMembershipsResponse
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership>|null} [relatedAccountGroupMemberships] ListRelatedAccountGroupMembershipsResponse relatedAccountGroupMemberships
                         * @property {string|null} [nextPageToken] ListRelatedAccountGroupMembershipsResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListRelatedAccountGroupMembershipsResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ListRelatedAccountGroupMembershipsResponse.
                         * @implements IListRelatedAccountGroupMembershipsResponse
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsResponse=} [properties] Properties to set
                         */
                        function ListRelatedAccountGroupMembershipsResponse(properties) {
                            this.relatedAccountGroupMemberships = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListRelatedAccountGroupMembershipsResponse relatedAccountGroupMemberships.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership>} relatedAccountGroupMemberships
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @instance
                         */
                        ListRelatedAccountGroupMembershipsResponse.prototype.relatedAccountGroupMemberships = $util.emptyArray;
    
                        /**
                         * ListRelatedAccountGroupMembershipsResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @instance
                         */
                        ListRelatedAccountGroupMembershipsResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListRelatedAccountGroupMembershipsResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsResponse=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse} ListRelatedAccountGroupMembershipsResponse instance
                         */
                        ListRelatedAccountGroupMembershipsResponse.create = function create(properties) {
                            return new ListRelatedAccountGroupMembershipsResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListRelatedAccountGroupMembershipsResponse message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsResponse} message ListRelatedAccountGroupMembershipsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListRelatedAccountGroupMembershipsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.relatedAccountGroupMemberships != null && message.relatedAccountGroupMemberships.length)
                                for (var i = 0; i < message.relatedAccountGroupMemberships.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.encode(message.relatedAccountGroupMemberships[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListRelatedAccountGroupMembershipsResponse message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupMembershipsResponse} message ListRelatedAccountGroupMembershipsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListRelatedAccountGroupMembershipsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListRelatedAccountGroupMembershipsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse} ListRelatedAccountGroupMembershipsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListRelatedAccountGroupMembershipsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.relatedAccountGroupMemberships && message.relatedAccountGroupMemberships.length))
                                            message.relatedAccountGroupMemberships = [];
                                        message.relatedAccountGroupMemberships.push($root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.nextPageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListRelatedAccountGroupMembershipsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse} ListRelatedAccountGroupMembershipsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListRelatedAccountGroupMembershipsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListRelatedAccountGroupMembershipsResponse message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListRelatedAccountGroupMembershipsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.relatedAccountGroupMemberships != null && message.hasOwnProperty("relatedAccountGroupMemberships")) {
                                if (!Array.isArray(message.relatedAccountGroupMemberships))
                                    return "relatedAccountGroupMemberships: array expected";
                                for (var i = 0; i < message.relatedAccountGroupMemberships.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.verify(message.relatedAccountGroupMemberships[i]);
                                    if (error)
                                        return "relatedAccountGroupMemberships." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListRelatedAccountGroupMembershipsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse} ListRelatedAccountGroupMembershipsResponse
                         */
                        ListRelatedAccountGroupMembershipsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse();
                            if (object.relatedAccountGroupMemberships) {
                                if (!Array.isArray(object.relatedAccountGroupMemberships))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse.relatedAccountGroupMemberships: array expected");
                                message.relatedAccountGroupMemberships = [];
                                for (var i = 0; i < object.relatedAccountGroupMemberships.length; ++i) {
                                    if (typeof object.relatedAccountGroupMemberships[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse.relatedAccountGroupMemberships: object expected");
                                    message.relatedAccountGroupMemberships[i] = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.fromObject(object.relatedAccountGroupMemberships[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListRelatedAccountGroupMembershipsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse} message ListRelatedAccountGroupMembershipsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListRelatedAccountGroupMembershipsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.relatedAccountGroupMemberships = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.relatedAccountGroupMemberships && message.relatedAccountGroupMemberships.length) {
                                object.relatedAccountGroupMemberships = [];
                                for (var j = 0; j < message.relatedAccountGroupMemberships.length; ++j)
                                    object.relatedAccountGroupMemberships[j] = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.toObject(message.relatedAccountGroupMemberships[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListRelatedAccountGroupMembershipsResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListRelatedAccountGroupMembershipsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListRelatedAccountGroupMembershipsResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListRelatedAccountGroupMembershipsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse";
                        };
    
                        return ListRelatedAccountGroupMembershipsResponse;
                    })();
    
                    v1.ListRelatedAccountGroupsRequest = (function() {
    
                        /**
                         * Properties of a ListRelatedAccountGroupsRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IListRelatedAccountGroupsRequest
                         * @property {string|null} [parent] ListRelatedAccountGroupsRequest parent
                         * @property {number|null} [pageSize] ListRelatedAccountGroupsRequest pageSize
                         * @property {string|null} [pageToken] ListRelatedAccountGroupsRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListRelatedAccountGroupsRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ListRelatedAccountGroupsRequest.
                         * @implements IListRelatedAccountGroupsRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsRequest=} [properties] Properties to set
                         */
                        function ListRelatedAccountGroupsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListRelatedAccountGroupsRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @instance
                         */
                        ListRelatedAccountGroupsRequest.prototype.parent = "";
    
                        /**
                         * ListRelatedAccountGroupsRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @instance
                         */
                        ListRelatedAccountGroupsRequest.prototype.pageSize = 0;
    
                        /**
                         * ListRelatedAccountGroupsRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @instance
                         */
                        ListRelatedAccountGroupsRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListRelatedAccountGroupsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest} ListRelatedAccountGroupsRequest instance
                         */
                        ListRelatedAccountGroupsRequest.create = function create(properties) {
                            return new ListRelatedAccountGroupsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListRelatedAccountGroupsRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsRequest} message ListRelatedAccountGroupsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListRelatedAccountGroupsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListRelatedAccountGroupsRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsRequest} message ListRelatedAccountGroupsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListRelatedAccountGroupsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListRelatedAccountGroupsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest} ListRelatedAccountGroupsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListRelatedAccountGroupsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.pageSize = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.pageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListRelatedAccountGroupsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest} ListRelatedAccountGroupsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListRelatedAccountGroupsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListRelatedAccountGroupsRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListRelatedAccountGroupsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListRelatedAccountGroupsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest} ListRelatedAccountGroupsRequest
                         */
                        ListRelatedAccountGroupsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListRelatedAccountGroupsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest} message ListRelatedAccountGroupsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListRelatedAccountGroupsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListRelatedAccountGroupsRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListRelatedAccountGroupsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListRelatedAccountGroupsRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListRelatedAccountGroupsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest";
                        };
    
                        return ListRelatedAccountGroupsRequest;
                    })();
    
                    v1.ListRelatedAccountGroupsResponse = (function() {
    
                        /**
                         * Properties of a ListRelatedAccountGroupsResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IListRelatedAccountGroupsResponse
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup>|null} [relatedAccountGroups] ListRelatedAccountGroupsResponse relatedAccountGroups
                         * @property {string|null} [nextPageToken] ListRelatedAccountGroupsResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListRelatedAccountGroupsResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a ListRelatedAccountGroupsResponse.
                         * @implements IListRelatedAccountGroupsResponse
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsResponse=} [properties] Properties to set
                         */
                        function ListRelatedAccountGroupsResponse(properties) {
                            this.relatedAccountGroups = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListRelatedAccountGroupsResponse relatedAccountGroups.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup>} relatedAccountGroups
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @instance
                         */
                        ListRelatedAccountGroupsResponse.prototype.relatedAccountGroups = $util.emptyArray;
    
                        /**
                         * ListRelatedAccountGroupsResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @instance
                         */
                        ListRelatedAccountGroupsResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListRelatedAccountGroupsResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsResponse=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse} ListRelatedAccountGroupsResponse instance
                         */
                        ListRelatedAccountGroupsResponse.create = function create(properties) {
                            return new ListRelatedAccountGroupsResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListRelatedAccountGroupsResponse message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsResponse} message ListRelatedAccountGroupsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListRelatedAccountGroupsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.relatedAccountGroups != null && message.relatedAccountGroups.length)
                                for (var i = 0; i < message.relatedAccountGroups.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup.encode(message.relatedAccountGroups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListRelatedAccountGroupsResponse message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IListRelatedAccountGroupsResponse} message ListRelatedAccountGroupsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListRelatedAccountGroupsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListRelatedAccountGroupsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse} ListRelatedAccountGroupsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListRelatedAccountGroupsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.relatedAccountGroups && message.relatedAccountGroups.length))
                                            message.relatedAccountGroups = [];
                                        message.relatedAccountGroups.push($root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.nextPageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListRelatedAccountGroupsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse} ListRelatedAccountGroupsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListRelatedAccountGroupsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListRelatedAccountGroupsResponse message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListRelatedAccountGroupsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.relatedAccountGroups != null && message.hasOwnProperty("relatedAccountGroups")) {
                                if (!Array.isArray(message.relatedAccountGroups))
                                    return "relatedAccountGroups: array expected";
                                for (var i = 0; i < message.relatedAccountGroups.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup.verify(message.relatedAccountGroups[i]);
                                    if (error)
                                        return "relatedAccountGroups." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListRelatedAccountGroupsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse} ListRelatedAccountGroupsResponse
                         */
                        ListRelatedAccountGroupsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse();
                            if (object.relatedAccountGroups) {
                                if (!Array.isArray(object.relatedAccountGroups))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse.relatedAccountGroups: array expected");
                                message.relatedAccountGroups = [];
                                for (var i = 0; i < object.relatedAccountGroups.length; ++i) {
                                    if (typeof object.relatedAccountGroups[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse.relatedAccountGroups: object expected");
                                    message.relatedAccountGroups[i] = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup.fromObject(object.relatedAccountGroups[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListRelatedAccountGroupsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse} message ListRelatedAccountGroupsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListRelatedAccountGroupsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.relatedAccountGroups = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.relatedAccountGroups && message.relatedAccountGroups.length) {
                                object.relatedAccountGroups = [];
                                for (var j = 0; j < message.relatedAccountGroups.length; ++j)
                                    object.relatedAccountGroups[j] = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup.toObject(message.relatedAccountGroups[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListRelatedAccountGroupsResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListRelatedAccountGroupsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListRelatedAccountGroupsResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListRelatedAccountGroupsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse";
                        };
    
                        return ListRelatedAccountGroupsResponse;
                    })();
    
                    v1.SearchRelatedAccountGroupMembershipsRequest = (function() {
    
                        /**
                         * Properties of a SearchRelatedAccountGroupMembershipsRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface ISearchRelatedAccountGroupMembershipsRequest
                         * @property {string|null} [project] SearchRelatedAccountGroupMembershipsRequest project
                         * @property {Uint8Array|null} [hashedAccountId] SearchRelatedAccountGroupMembershipsRequest hashedAccountId
                         * @property {number|null} [pageSize] SearchRelatedAccountGroupMembershipsRequest pageSize
                         * @property {string|null} [pageToken] SearchRelatedAccountGroupMembershipsRequest pageToken
                         */
    
                        /**
                         * Constructs a new SearchRelatedAccountGroupMembershipsRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a SearchRelatedAccountGroupMembershipsRequest.
                         * @implements ISearchRelatedAccountGroupMembershipsRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsRequest=} [properties] Properties to set
                         */
                        function SearchRelatedAccountGroupMembershipsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SearchRelatedAccountGroupMembershipsRequest project.
                         * @member {string} project
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @instance
                         */
                        SearchRelatedAccountGroupMembershipsRequest.prototype.project = "";
    
                        /**
                         * SearchRelatedAccountGroupMembershipsRequest hashedAccountId.
                         * @member {Uint8Array} hashedAccountId
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @instance
                         */
                        SearchRelatedAccountGroupMembershipsRequest.prototype.hashedAccountId = $util.newBuffer([]);
    
                        /**
                         * SearchRelatedAccountGroupMembershipsRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @instance
                         */
                        SearchRelatedAccountGroupMembershipsRequest.prototype.pageSize = 0;
    
                        /**
                         * SearchRelatedAccountGroupMembershipsRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @instance
                         */
                        SearchRelatedAccountGroupMembershipsRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new SearchRelatedAccountGroupMembershipsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest} SearchRelatedAccountGroupMembershipsRequest instance
                         */
                        SearchRelatedAccountGroupMembershipsRequest.create = function create(properties) {
                            return new SearchRelatedAccountGroupMembershipsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified SearchRelatedAccountGroupMembershipsRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsRequest} message SearchRelatedAccountGroupMembershipsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SearchRelatedAccountGroupMembershipsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.project != null && Object.hasOwnProperty.call(message, "project"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.project);
                            if (message.hashedAccountId != null && Object.hasOwnProperty.call(message, "hashedAccountId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hashedAccountId);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SearchRelatedAccountGroupMembershipsRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsRequest} message SearchRelatedAccountGroupMembershipsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SearchRelatedAccountGroupMembershipsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SearchRelatedAccountGroupMembershipsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest} SearchRelatedAccountGroupMembershipsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SearchRelatedAccountGroupMembershipsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.project = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.hashedAccountId = reader.bytes();
                                        break;
                                    }
                                case 3: {
                                        message.pageSize = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.pageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SearchRelatedAccountGroupMembershipsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest} SearchRelatedAccountGroupMembershipsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SearchRelatedAccountGroupMembershipsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SearchRelatedAccountGroupMembershipsRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SearchRelatedAccountGroupMembershipsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.project != null && message.hasOwnProperty("project"))
                                if (!$util.isString(message.project))
                                    return "project: string expected";
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                if (!(message.hashedAccountId && typeof message.hashedAccountId.length === "number" || $util.isString(message.hashedAccountId)))
                                    return "hashedAccountId: buffer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a SearchRelatedAccountGroupMembershipsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest} SearchRelatedAccountGroupMembershipsRequest
                         */
                        SearchRelatedAccountGroupMembershipsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest();
                            if (object.project != null)
                                message.project = String(object.project);
                            if (object.hashedAccountId != null)
                                if (typeof object.hashedAccountId === "string")
                                    $util.base64.decode(object.hashedAccountId, message.hashedAccountId = $util.newBuffer($util.base64.length(object.hashedAccountId)), 0);
                                else if (object.hashedAccountId.length >= 0)
                                    message.hashedAccountId = object.hashedAccountId;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SearchRelatedAccountGroupMembershipsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest} message SearchRelatedAccountGroupMembershipsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SearchRelatedAccountGroupMembershipsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.project = "";
                                if (options.bytes === String)
                                    object.hashedAccountId = "";
                                else {
                                    object.hashedAccountId = [];
                                    if (options.bytes !== Array)
                                        object.hashedAccountId = $util.newBuffer(object.hashedAccountId);
                                }
                                object.pageSize = 0;
                                object.pageToken = "";
                            }
                            if (message.project != null && message.hasOwnProperty("project"))
                                object.project = message.project;
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                object.hashedAccountId = options.bytes === String ? $util.base64.encode(message.hashedAccountId, 0, message.hashedAccountId.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashedAccountId) : message.hashedAccountId;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this SearchRelatedAccountGroupMembershipsRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SearchRelatedAccountGroupMembershipsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SearchRelatedAccountGroupMembershipsRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SearchRelatedAccountGroupMembershipsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest";
                        };
    
                        return SearchRelatedAccountGroupMembershipsRequest;
                    })();
    
                    v1.SearchRelatedAccountGroupMembershipsResponse = (function() {
    
                        /**
                         * Properties of a SearchRelatedAccountGroupMembershipsResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface ISearchRelatedAccountGroupMembershipsResponse
                         * @property {Array.<google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership>|null} [relatedAccountGroupMemberships] SearchRelatedAccountGroupMembershipsResponse relatedAccountGroupMemberships
                         * @property {string|null} [nextPageToken] SearchRelatedAccountGroupMembershipsResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new SearchRelatedAccountGroupMembershipsResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a SearchRelatedAccountGroupMembershipsResponse.
                         * @implements ISearchRelatedAccountGroupMembershipsResponse
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsResponse=} [properties] Properties to set
                         */
                        function SearchRelatedAccountGroupMembershipsResponse(properties) {
                            this.relatedAccountGroupMemberships = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SearchRelatedAccountGroupMembershipsResponse relatedAccountGroupMemberships.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership>} relatedAccountGroupMemberships
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @instance
                         */
                        SearchRelatedAccountGroupMembershipsResponse.prototype.relatedAccountGroupMemberships = $util.emptyArray;
    
                        /**
                         * SearchRelatedAccountGroupMembershipsResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @instance
                         */
                        SearchRelatedAccountGroupMembershipsResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new SearchRelatedAccountGroupMembershipsResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsResponse=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse} SearchRelatedAccountGroupMembershipsResponse instance
                         */
                        SearchRelatedAccountGroupMembershipsResponse.create = function create(properties) {
                            return new SearchRelatedAccountGroupMembershipsResponse(properties);
                        };
    
                        /**
                         * Encodes the specified SearchRelatedAccountGroupMembershipsResponse message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsResponse} message SearchRelatedAccountGroupMembershipsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SearchRelatedAccountGroupMembershipsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.relatedAccountGroupMemberships != null && message.relatedAccountGroupMemberships.length)
                                for (var i = 0; i < message.relatedAccountGroupMemberships.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.encode(message.relatedAccountGroupMemberships[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SearchRelatedAccountGroupMembershipsResponse message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.ISearchRelatedAccountGroupMembershipsResponse} message SearchRelatedAccountGroupMembershipsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SearchRelatedAccountGroupMembershipsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SearchRelatedAccountGroupMembershipsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse} SearchRelatedAccountGroupMembershipsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SearchRelatedAccountGroupMembershipsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.relatedAccountGroupMemberships && message.relatedAccountGroupMemberships.length))
                                            message.relatedAccountGroupMemberships = [];
                                        message.relatedAccountGroupMemberships.push($root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.nextPageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SearchRelatedAccountGroupMembershipsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse} SearchRelatedAccountGroupMembershipsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SearchRelatedAccountGroupMembershipsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SearchRelatedAccountGroupMembershipsResponse message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SearchRelatedAccountGroupMembershipsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.relatedAccountGroupMemberships != null && message.hasOwnProperty("relatedAccountGroupMemberships")) {
                                if (!Array.isArray(message.relatedAccountGroupMemberships))
                                    return "relatedAccountGroupMemberships: array expected";
                                for (var i = 0; i < message.relatedAccountGroupMemberships.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.verify(message.relatedAccountGroupMemberships[i]);
                                    if (error)
                                        return "relatedAccountGroupMemberships." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a SearchRelatedAccountGroupMembershipsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse} SearchRelatedAccountGroupMembershipsResponse
                         */
                        SearchRelatedAccountGroupMembershipsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse();
                            if (object.relatedAccountGroupMemberships) {
                                if (!Array.isArray(object.relatedAccountGroupMemberships))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse.relatedAccountGroupMemberships: array expected");
                                message.relatedAccountGroupMemberships = [];
                                for (var i = 0; i < object.relatedAccountGroupMemberships.length; ++i) {
                                    if (typeof object.relatedAccountGroupMemberships[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse.relatedAccountGroupMemberships: object expected");
                                    message.relatedAccountGroupMemberships[i] = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.fromObject(object.relatedAccountGroupMemberships[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SearchRelatedAccountGroupMembershipsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse} message SearchRelatedAccountGroupMembershipsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SearchRelatedAccountGroupMembershipsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.relatedAccountGroupMemberships = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.relatedAccountGroupMemberships && message.relatedAccountGroupMemberships.length) {
                                object.relatedAccountGroupMemberships = [];
                                for (var j = 0; j < message.relatedAccountGroupMemberships.length; ++j)
                                    object.relatedAccountGroupMemberships[j] = $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.toObject(message.relatedAccountGroupMemberships[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this SearchRelatedAccountGroupMembershipsResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SearchRelatedAccountGroupMembershipsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SearchRelatedAccountGroupMembershipsResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SearchRelatedAccountGroupMembershipsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse";
                        };
    
                        return SearchRelatedAccountGroupMembershipsResponse;
                    })();
    
                    v1.RelatedAccountGroupMembership = (function() {
    
                        /**
                         * Properties of a RelatedAccountGroupMembership.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IRelatedAccountGroupMembership
                         * @property {string|null} [name] RelatedAccountGroupMembership name
                         * @property {Uint8Array|null} [hashedAccountId] RelatedAccountGroupMembership hashedAccountId
                         */
    
                        /**
                         * Constructs a new RelatedAccountGroupMembership.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a RelatedAccountGroupMembership.
                         * @implements IRelatedAccountGroupMembership
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership=} [properties] Properties to set
                         */
                        function RelatedAccountGroupMembership(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RelatedAccountGroupMembership name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @instance
                         */
                        RelatedAccountGroupMembership.prototype.name = "";
    
                        /**
                         * RelatedAccountGroupMembership hashedAccountId.
                         * @member {Uint8Array} hashedAccountId
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @instance
                         */
                        RelatedAccountGroupMembership.prototype.hashedAccountId = $util.newBuffer([]);
    
                        /**
                         * Creates a new RelatedAccountGroupMembership instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership} RelatedAccountGroupMembership instance
                         */
                        RelatedAccountGroupMembership.create = function create(properties) {
                            return new RelatedAccountGroupMembership(properties);
                        };
    
                        /**
                         * Encodes the specified RelatedAccountGroupMembership message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership} message RelatedAccountGroupMembership message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RelatedAccountGroupMembership.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.hashedAccountId != null && Object.hasOwnProperty.call(message, "hashedAccountId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hashedAccountId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RelatedAccountGroupMembership message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership} message RelatedAccountGroupMembership message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RelatedAccountGroupMembership.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RelatedAccountGroupMembership message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership} RelatedAccountGroupMembership
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RelatedAccountGroupMembership.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.hashedAccountId = reader.bytes();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RelatedAccountGroupMembership message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership} RelatedAccountGroupMembership
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RelatedAccountGroupMembership.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RelatedAccountGroupMembership message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RelatedAccountGroupMembership.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                if (!(message.hashedAccountId && typeof message.hashedAccountId.length === "number" || $util.isString(message.hashedAccountId)))
                                    return "hashedAccountId: buffer expected";
                            return null;
                        };
    
                        /**
                         * Creates a RelatedAccountGroupMembership message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership} RelatedAccountGroupMembership
                         */
                        RelatedAccountGroupMembership.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.hashedAccountId != null)
                                if (typeof object.hashedAccountId === "string")
                                    $util.base64.decode(object.hashedAccountId, message.hashedAccountId = $util.newBuffer($util.base64.length(object.hashedAccountId)), 0);
                                else if (object.hashedAccountId.length >= 0)
                                    message.hashedAccountId = object.hashedAccountId;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RelatedAccountGroupMembership message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership} message RelatedAccountGroupMembership
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RelatedAccountGroupMembership.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                if (options.bytes === String)
                                    object.hashedAccountId = "";
                                else {
                                    object.hashedAccountId = [];
                                    if (options.bytes !== Array)
                                        object.hashedAccountId = $util.newBuffer(object.hashedAccountId);
                                }
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                object.hashedAccountId = options.bytes === String ? $util.base64.encode(message.hashedAccountId, 0, message.hashedAccountId.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashedAccountId) : message.hashedAccountId;
                            return object;
                        };
    
                        /**
                         * Converts this RelatedAccountGroupMembership to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RelatedAccountGroupMembership.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for RelatedAccountGroupMembership
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        RelatedAccountGroupMembership.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership";
                        };
    
                        return RelatedAccountGroupMembership;
                    })();
    
                    v1.RelatedAccountGroup = (function() {
    
                        /**
                         * Properties of a RelatedAccountGroup.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IRelatedAccountGroup
                         * @property {string|null} [name] RelatedAccountGroup name
                         */
    
                        /**
                         * Constructs a new RelatedAccountGroup.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a RelatedAccountGroup.
                         * @implements IRelatedAccountGroup
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup=} [properties] Properties to set
                         */
                        function RelatedAccountGroup(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RelatedAccountGroup name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @instance
                         */
                        RelatedAccountGroup.prototype.name = "";
    
                        /**
                         * Creates a new RelatedAccountGroup instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.RelatedAccountGroup} RelatedAccountGroup instance
                         */
                        RelatedAccountGroup.create = function create(properties) {
                            return new RelatedAccountGroup(properties);
                        };
    
                        /**
                         * Encodes the specified RelatedAccountGroup message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroup.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup} message RelatedAccountGroup message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RelatedAccountGroup.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RelatedAccountGroup message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.RelatedAccountGroup.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup} message RelatedAccountGroup message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RelatedAccountGroup.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RelatedAccountGroup message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.RelatedAccountGroup} RelatedAccountGroup
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RelatedAccountGroup.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RelatedAccountGroup message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.RelatedAccountGroup} RelatedAccountGroup
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RelatedAccountGroup.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RelatedAccountGroup message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RelatedAccountGroup.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a RelatedAccountGroup message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.RelatedAccountGroup} RelatedAccountGroup
                         */
                        RelatedAccountGroup.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RelatedAccountGroup message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.RelatedAccountGroup} message RelatedAccountGroup
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RelatedAccountGroup.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this RelatedAccountGroup to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RelatedAccountGroup.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for RelatedAccountGroup
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        RelatedAccountGroup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.RelatedAccountGroup";
                        };
    
                        return RelatedAccountGroup;
                    })();
    
                    v1.WafSettings = (function() {
    
                        /**
                         * Properties of a WafSettings.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @interface IWafSettings
                         * @property {google.cloud.recaptchaenterprise.v1.WafSettings.WafService|null} [wafService] WafSettings wafService
                         * @property {google.cloud.recaptchaenterprise.v1.WafSettings.WafFeature|null} [wafFeature] WafSettings wafFeature
                         */
    
                        /**
                         * Constructs a new WafSettings.
                         * @memberof google.cloud.recaptchaenterprise.v1
                         * @classdesc Represents a WafSettings.
                         * @implements IWafSettings
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1.IWafSettings=} [properties] Properties to set
                         */
                        function WafSettings(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * WafSettings wafService.
                         * @member {google.cloud.recaptchaenterprise.v1.WafSettings.WafService} wafService
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @instance
                         */
                        WafSettings.prototype.wafService = 0;
    
                        /**
                         * WafSettings wafFeature.
                         * @member {google.cloud.recaptchaenterprise.v1.WafSettings.WafFeature} wafFeature
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @instance
                         */
                        WafSettings.prototype.wafFeature = 0;
    
                        /**
                         * Creates a new WafSettings instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IWafSettings=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1.WafSettings} WafSettings instance
                         */
                        WafSettings.create = function create(properties) {
                            return new WafSettings(properties);
                        };
    
                        /**
                         * Encodes the specified WafSettings message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.WafSettings.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IWafSettings} message WafSettings message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WafSettings.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.wafService != null && Object.hasOwnProperty.call(message, "wafService"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.wafService);
                            if (message.wafFeature != null && Object.hasOwnProperty.call(message, "wafFeature"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.wafFeature);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified WafSettings message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1.WafSettings.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.IWafSettings} message WafSettings message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WafSettings.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a WafSettings message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1.WafSettings} WafSettings
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WafSettings.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1.WafSettings();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.wafService = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.wafFeature = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a WafSettings message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1.WafSettings} WafSettings
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WafSettings.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a WafSettings message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        WafSettings.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.wafService != null && message.hasOwnProperty("wafService"))
                                switch (message.wafService) {
                                default:
                                    return "wafService: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.wafFeature != null && message.hasOwnProperty("wafFeature"))
                                switch (message.wafFeature) {
                                default:
                                    return "wafFeature: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a WafSettings message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1.WafSettings} WafSettings
                         */
                        WafSettings.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1.WafSettings)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1.WafSettings();
                            switch (object.wafService) {
                            default:
                                if (typeof object.wafService === "number") {
                                    message.wafService = object.wafService;
                                    break;
                                }
                                break;
                            case "WAF_SERVICE_UNSPECIFIED":
                            case 0:
                                message.wafService = 0;
                                break;
                            case "CA":
                            case 1:
                                message.wafService = 1;
                                break;
                            }
                            switch (object.wafFeature) {
                            default:
                                if (typeof object.wafFeature === "number") {
                                    message.wafFeature = object.wafFeature;
                                    break;
                                }
                                break;
                            case "WAF_FEATURE_UNSPECIFIED":
                            case 0:
                                message.wafFeature = 0;
                                break;
                            case "CHALLENGE_PAGE":
                            case 1:
                                message.wafFeature = 1;
                                break;
                            case "SESSION_TOKEN":
                            case 2:
                                message.wafFeature = 2;
                                break;
                            case "ACTION_TOKEN":
                            case 3:
                                message.wafFeature = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a WafSettings message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1.WafSettings} message WafSettings
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        WafSettings.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.wafService = options.enums === String ? "WAF_SERVICE_UNSPECIFIED" : 0;
                                object.wafFeature = options.enums === String ? "WAF_FEATURE_UNSPECIFIED" : 0;
                            }
                            if (message.wafService != null && message.hasOwnProperty("wafService"))
                                object.wafService = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.WafSettings.WafService[message.wafService] === undefined ? message.wafService : $root.google.cloud.recaptchaenterprise.v1.WafSettings.WafService[message.wafService] : message.wafService;
                            if (message.wafFeature != null && message.hasOwnProperty("wafFeature"))
                                object.wafFeature = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1.WafSettings.WafFeature[message.wafFeature] === undefined ? message.wafFeature : $root.google.cloud.recaptchaenterprise.v1.WafSettings.WafFeature[message.wafFeature] : message.wafFeature;
                            return object;
                        };
    
                        /**
                         * Converts this WafSettings to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        WafSettings.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for WafSettings
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1.WafSettings
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        WafSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1.WafSettings";
                        };
    
                        /**
                         * WafFeature enum.
                         * @name google.cloud.recaptchaenterprise.v1.WafSettings.WafFeature
                         * @enum {number}
                         * @property {number} WAF_FEATURE_UNSPECIFIED=0 WAF_FEATURE_UNSPECIFIED value
                         * @property {number} CHALLENGE_PAGE=1 CHALLENGE_PAGE value
                         * @property {number} SESSION_TOKEN=2 SESSION_TOKEN value
                         * @property {number} ACTION_TOKEN=3 ACTION_TOKEN value
                         */
                        WafSettings.WafFeature = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "WAF_FEATURE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "CHALLENGE_PAGE"] = 1;
                            values[valuesById[2] = "SESSION_TOKEN"] = 2;
                            values[valuesById[3] = "ACTION_TOKEN"] = 3;
                            return values;
                        })();
    
                        /**
                         * WafService enum.
                         * @name google.cloud.recaptchaenterprise.v1.WafSettings.WafService
                         * @enum {number}
                         * @property {number} WAF_SERVICE_UNSPECIFIED=0 WAF_SERVICE_UNSPECIFIED value
                         * @property {number} CA=1 CA value
                         */
                        WafSettings.WafService = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "WAF_SERVICE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "CA"] = 1;
                            return values;
                        })();
    
                        return WafSettings;
                    })();
    
                    return v1;
                })();
    
                recaptchaenterprise.v1beta1 = (function() {
    
                    /**
                     * Namespace v1beta1.
                     * @memberof google.cloud.recaptchaenterprise
                     * @namespace
                     */
                    var v1beta1 = {};
    
                    v1beta1.RecaptchaEnterpriseServiceV1Beta1 = (function() {
    
                        /**
                         * Constructs a new RecaptchaEnterpriseServiceV1Beta1 service.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents a RecaptchaEnterpriseServiceV1Beta1
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function RecaptchaEnterpriseServiceV1Beta1(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (RecaptchaEnterpriseServiceV1Beta1.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = RecaptchaEnterpriseServiceV1Beta1;
    
                        /**
                         * Creates new RecaptchaEnterpriseServiceV1Beta1 service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {RecaptchaEnterpriseServiceV1Beta1} RPC service. Useful where requests and/or responses are streamed.
                         */
                        RecaptchaEnterpriseServiceV1Beta1.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1|createAssessment}.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1
                         * @typedef CreateAssessmentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1beta1.Assessment} [response] Assessment
                         */
    
                        /**
                         * Calls CreateAssessment.
                         * @function createAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ICreateAssessmentRequest} request CreateAssessmentRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1.CreateAssessmentCallback} callback Node-style callback called with the error, if any, and Assessment
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseServiceV1Beta1.prototype.createAssessment = function createAssessment(request, callback) {
                            return this.rpcCall(createAssessment, $root.google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest, $root.google.cloud.recaptchaenterprise.v1beta1.Assessment, request, callback);
                        }, "name", { value: "CreateAssessment" });
    
                        /**
                         * Calls CreateAssessment.
                         * @function createAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ICreateAssessmentRequest} request CreateAssessmentRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1beta1.Assessment>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1|annotateAssessment}.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1
                         * @typedef AnnotateAssessmentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse} [response] AnnotateAssessmentResponse
                         */
    
                        /**
                         * Calls AnnotateAssessment.
                         * @function annotateAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentRequest} request AnnotateAssessmentRequest message or plain object
                         * @param {google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1.AnnotateAssessmentCallback} callback Node-style callback called with the error, if any, and AnnotateAssessmentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(RecaptchaEnterpriseServiceV1Beta1.prototype.annotateAssessment = function annotateAssessment(request, callback) {
                            return this.rpcCall(annotateAssessment, $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest, $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse, request, callback);
                        }, "name", { value: "AnnotateAssessment" });
    
                        /**
                         * Calls AnnotateAssessment.
                         * @function annotateAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1
                         * @instance
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentRequest} request AnnotateAssessmentRequest message or plain object
                         * @returns {Promise<google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse>} Promise
                         * @variation 2
                         */
    
                        return RecaptchaEnterpriseServiceV1Beta1;
                    })();
    
                    v1beta1.CreateAssessmentRequest = (function() {
    
                        /**
                         * Properties of a CreateAssessmentRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface ICreateAssessmentRequest
                         * @property {string|null} [parent] CreateAssessmentRequest parent
                         * @property {google.cloud.recaptchaenterprise.v1beta1.IAssessment|null} [assessment] CreateAssessmentRequest assessment
                         */
    
                        /**
                         * Constructs a new CreateAssessmentRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents a CreateAssessmentRequest.
                         * @implements ICreateAssessmentRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ICreateAssessmentRequest=} [properties] Properties to set
                         */
                        function CreateAssessmentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateAssessmentRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @instance
                         */
                        CreateAssessmentRequest.prototype.parent = "";
    
                        /**
                         * CreateAssessmentRequest assessment.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.IAssessment|null|undefined} assessment
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @instance
                         */
                        CreateAssessmentRequest.prototype.assessment = null;
    
                        /**
                         * Creates a new CreateAssessmentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ICreateAssessmentRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest} CreateAssessmentRequest instance
                         */
                        CreateAssessmentRequest.create = function create(properties) {
                            return new CreateAssessmentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateAssessmentRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ICreateAssessmentRequest} message CreateAssessmentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateAssessmentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.assessment != null && Object.hasOwnProperty.call(message, "assessment"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.Assessment.encode(message.assessment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateAssessmentRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ICreateAssessmentRequest} message CreateAssessmentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateAssessmentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateAssessmentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest} CreateAssessmentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateAssessmentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.assessment = $root.google.cloud.recaptchaenterprise.v1beta1.Assessment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateAssessmentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest} CreateAssessmentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateAssessmentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateAssessmentRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateAssessmentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.assessment != null && message.hasOwnProperty("assessment")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.Assessment.verify(message.assessment);
                                if (error)
                                    return "assessment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateAssessmentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest} CreateAssessmentRequest
                         */
                        CreateAssessmentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.assessment != null) {
                                if (typeof object.assessment !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest.assessment: object expected");
                                message.assessment = $root.google.cloud.recaptchaenterprise.v1beta1.Assessment.fromObject(object.assessment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateAssessmentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest} message CreateAssessmentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateAssessmentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.assessment = null;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.assessment != null && message.hasOwnProperty("assessment"))
                                object.assessment = $root.google.cloud.recaptchaenterprise.v1beta1.Assessment.toObject(message.assessment, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateAssessmentRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateAssessmentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CreateAssessmentRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CreateAssessmentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest";
                        };
    
                        return CreateAssessmentRequest;
                    })();
    
                    v1beta1.TransactionEvent = (function() {
    
                        /**
                         * Properties of a TransactionEvent.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface ITransactionEvent
                         * @property {google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.TransactionEventType|null} [eventType] TransactionEvent eventType
                         * @property {string|null} [reason] TransactionEvent reason
                         * @property {number|null} [value] TransactionEvent value
                         * @property {google.protobuf.ITimestamp|null} [eventTime] TransactionEvent eventTime
                         */
    
                        /**
                         * Constructs a new TransactionEvent.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents a TransactionEvent.
                         * @implements ITransactionEvent
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITransactionEvent=} [properties] Properties to set
                         */
                        function TransactionEvent(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TransactionEvent eventType.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.TransactionEventType} eventType
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @instance
                         */
                        TransactionEvent.prototype.eventType = 0;
    
                        /**
                         * TransactionEvent reason.
                         * @member {string} reason
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @instance
                         */
                        TransactionEvent.prototype.reason = "";
    
                        /**
                         * TransactionEvent value.
                         * @member {number} value
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @instance
                         */
                        TransactionEvent.prototype.value = 0;
    
                        /**
                         * TransactionEvent eventTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} eventTime
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @instance
                         */
                        TransactionEvent.prototype.eventTime = null;
    
                        /**
                         * Creates a new TransactionEvent instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITransactionEvent=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionEvent} TransactionEvent instance
                         */
                        TransactionEvent.create = function create(properties) {
                            return new TransactionEvent(properties);
                        };
    
                        /**
                         * Encodes the specified TransactionEvent message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITransactionEvent} message TransactionEvent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransactionEvent.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.eventType != null && Object.hasOwnProperty.call(message, "eventType"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eventType);
                            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.value);
                            if (message.eventTime != null && Object.hasOwnProperty.call(message, "eventTime"))
                                $root.google.protobuf.Timestamp.encode(message.eventTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TransactionEvent message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITransactionEvent} message TransactionEvent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransactionEvent.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TransactionEvent message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionEvent} TransactionEvent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransactionEvent.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.eventType = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.reason = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.value = reader.double();
                                        break;
                                    }
                                case 4: {
                                        message.eventTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TransactionEvent message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionEvent} TransactionEvent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransactionEvent.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TransactionEvent message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TransactionEvent.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.eventType != null && message.hasOwnProperty("eventType"))
                                switch (message.eventType) {
                                default:
                                    return "eventType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 18:
                                    break;
                                }
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                if (!$util.isString(message.reason))
                                    return "reason: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            if (message.eventTime != null && message.hasOwnProperty("eventTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.eventTime);
                                if (error)
                                    return "eventTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TransactionEvent message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionEvent} TransactionEvent
                         */
                        TransactionEvent.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent();
                            switch (object.eventType) {
                            default:
                                if (typeof object.eventType === "number") {
                                    message.eventType = object.eventType;
                                    break;
                                }
                                break;
                            case "TRANSACTION_EVENT_TYPE_UNSPECIFIED":
                            case 0:
                                message.eventType = 0;
                                break;
                            case "MERCHANT_APPROVE":
                            case 1:
                                message.eventType = 1;
                                break;
                            case "MERCHANT_DENY":
                            case 2:
                                message.eventType = 2;
                                break;
                            case "MANUAL_REVIEW":
                            case 3:
                                message.eventType = 3;
                                break;
                            case "AUTHORIZATION":
                            case 4:
                                message.eventType = 4;
                                break;
                            case "AUTHORIZATION_DECLINE":
                            case 5:
                                message.eventType = 5;
                                break;
                            case "PAYMENT_CAPTURE":
                            case 6:
                                message.eventType = 6;
                                break;
                            case "PAYMENT_CAPTURE_DECLINE":
                            case 7:
                                message.eventType = 7;
                                break;
                            case "CANCEL":
                            case 8:
                                message.eventType = 8;
                                break;
                            case "CHARGEBACK_INQUIRY":
                            case 9:
                                message.eventType = 9;
                                break;
                            case "CHARGEBACK_ALERT":
                            case 10:
                                message.eventType = 10;
                                break;
                            case "FRAUD_NOTIFICATION":
                            case 11:
                                message.eventType = 11;
                                break;
                            case "CHARGEBACK":
                            case 12:
                                message.eventType = 12;
                                break;
                            case "CHARGEBACK_REPRESENTMENT":
                            case 13:
                                message.eventType = 13;
                                break;
                            case "CHARGEBACK_REVERSE":
                            case 14:
                                message.eventType = 14;
                                break;
                            case "REFUND_REQUEST":
                            case 15:
                                message.eventType = 15;
                                break;
                            case "REFUND_DECLINE":
                            case 16:
                                message.eventType = 16;
                                break;
                            case "REFUND":
                            case 17:
                                message.eventType = 17;
                                break;
                            case "REFUND_REVERSE":
                            case 18:
                                message.eventType = 18;
                                break;
                            }
                            if (object.reason != null)
                                message.reason = String(object.reason);
                            if (object.value != null)
                                message.value = Number(object.value);
                            if (object.eventTime != null) {
                                if (typeof object.eventTime !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.eventTime: object expected");
                                message.eventTime = $root.google.protobuf.Timestamp.fromObject(object.eventTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TransactionEvent message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionEvent} message TransactionEvent
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TransactionEvent.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.eventType = options.enums === String ? "TRANSACTION_EVENT_TYPE_UNSPECIFIED" : 0;
                                object.reason = "";
                                object.value = 0;
                                object.eventTime = null;
                            }
                            if (message.eventType != null && message.hasOwnProperty("eventType"))
                                object.eventType = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.TransactionEventType[message.eventType] === undefined ? message.eventType : $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.TransactionEventType[message.eventType] : message.eventType;
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                object.reason = message.reason;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            if (message.eventTime != null && message.hasOwnProperty("eventTime"))
                                object.eventTime = $root.google.protobuf.Timestamp.toObject(message.eventTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this TransactionEvent to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TransactionEvent.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TransactionEvent
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TransactionEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.TransactionEvent";
                        };
    
                        /**
                         * TransactionEventType enum.
                         * @name google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.TransactionEventType
                         * @enum {number}
                         * @property {number} TRANSACTION_EVENT_TYPE_UNSPECIFIED=0 TRANSACTION_EVENT_TYPE_UNSPECIFIED value
                         * @property {number} MERCHANT_APPROVE=1 MERCHANT_APPROVE value
                         * @property {number} MERCHANT_DENY=2 MERCHANT_DENY value
                         * @property {number} MANUAL_REVIEW=3 MANUAL_REVIEW value
                         * @property {number} AUTHORIZATION=4 AUTHORIZATION value
                         * @property {number} AUTHORIZATION_DECLINE=5 AUTHORIZATION_DECLINE value
                         * @property {number} PAYMENT_CAPTURE=6 PAYMENT_CAPTURE value
                         * @property {number} PAYMENT_CAPTURE_DECLINE=7 PAYMENT_CAPTURE_DECLINE value
                         * @property {number} CANCEL=8 CANCEL value
                         * @property {number} CHARGEBACK_INQUIRY=9 CHARGEBACK_INQUIRY value
                         * @property {number} CHARGEBACK_ALERT=10 CHARGEBACK_ALERT value
                         * @property {number} FRAUD_NOTIFICATION=11 FRAUD_NOTIFICATION value
                         * @property {number} CHARGEBACK=12 CHARGEBACK value
                         * @property {number} CHARGEBACK_REPRESENTMENT=13 CHARGEBACK_REPRESENTMENT value
                         * @property {number} CHARGEBACK_REVERSE=14 CHARGEBACK_REVERSE value
                         * @property {number} REFUND_REQUEST=15 REFUND_REQUEST value
                         * @property {number} REFUND_DECLINE=16 REFUND_DECLINE value
                         * @property {number} REFUND=17 REFUND value
                         * @property {number} REFUND_REVERSE=18 REFUND_REVERSE value
                         */
                        TransactionEvent.TransactionEventType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TRANSACTION_EVENT_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "MERCHANT_APPROVE"] = 1;
                            values[valuesById[2] = "MERCHANT_DENY"] = 2;
                            values[valuesById[3] = "MANUAL_REVIEW"] = 3;
                            values[valuesById[4] = "AUTHORIZATION"] = 4;
                            values[valuesById[5] = "AUTHORIZATION_DECLINE"] = 5;
                            values[valuesById[6] = "PAYMENT_CAPTURE"] = 6;
                            values[valuesById[7] = "PAYMENT_CAPTURE_DECLINE"] = 7;
                            values[valuesById[8] = "CANCEL"] = 8;
                            values[valuesById[9] = "CHARGEBACK_INQUIRY"] = 9;
                            values[valuesById[10] = "CHARGEBACK_ALERT"] = 10;
                            values[valuesById[11] = "FRAUD_NOTIFICATION"] = 11;
                            values[valuesById[12] = "CHARGEBACK"] = 12;
                            values[valuesById[13] = "CHARGEBACK_REPRESENTMENT"] = 13;
                            values[valuesById[14] = "CHARGEBACK_REVERSE"] = 14;
                            values[valuesById[15] = "REFUND_REQUEST"] = 15;
                            values[valuesById[16] = "REFUND_DECLINE"] = 16;
                            values[valuesById[17] = "REFUND"] = 17;
                            values[valuesById[18] = "REFUND_REVERSE"] = 18;
                            return values;
                        })();
    
                        return TransactionEvent;
                    })();
    
                    v1beta1.AnnotateAssessmentRequest = (function() {
    
                        /**
                         * Properties of an AnnotateAssessmentRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface IAnnotateAssessmentRequest
                         * @property {string|null} [name] AnnotateAssessmentRequest name
                         * @property {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Annotation|null} [annotation] AnnotateAssessmentRequest annotation
                         * @property {Array.<google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Reason>|null} [reasons] AnnotateAssessmentRequest reasons
                         * @property {Uint8Array|null} [hashedAccountId] AnnotateAssessmentRequest hashedAccountId
                         * @property {google.cloud.recaptchaenterprise.v1beta1.ITransactionEvent|null} [transactionEvent] AnnotateAssessmentRequest transactionEvent
                         */
    
                        /**
                         * Constructs a new AnnotateAssessmentRequest.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents an AnnotateAssessmentRequest.
                         * @implements IAnnotateAssessmentRequest
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentRequest=} [properties] Properties to set
                         */
                        function AnnotateAssessmentRequest(properties) {
                            this.reasons = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateAssessmentRequest name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.name = "";
    
                        /**
                         * AnnotateAssessmentRequest annotation.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Annotation} annotation
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.annotation = 0;
    
                        /**
                         * AnnotateAssessmentRequest reasons.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Reason>} reasons
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.reasons = $util.emptyArray;
    
                        /**
                         * AnnotateAssessmentRequest hashedAccountId.
                         * @member {Uint8Array} hashedAccountId
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.hashedAccountId = $util.newBuffer([]);
    
                        /**
                         * AnnotateAssessmentRequest transactionEvent.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.ITransactionEvent|null|undefined} transactionEvent
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @instance
                         */
                        AnnotateAssessmentRequest.prototype.transactionEvent = null;
    
                        /**
                         * Creates a new AnnotateAssessmentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentRequest=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest} AnnotateAssessmentRequest instance
                         */
                        AnnotateAssessmentRequest.create = function create(properties) {
                            return new AnnotateAssessmentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateAssessmentRequest message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentRequest} message AnnotateAssessmentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateAssessmentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.annotation != null && Object.hasOwnProperty.call(message, "annotation"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.annotation);
                            if (message.reasons != null && message.reasons.length) {
                                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                                for (var i = 0; i < message.reasons.length; ++i)
                                    writer.int32(message.reasons[i]);
                                writer.ldelim();
                            }
                            if (message.hashedAccountId != null && Object.hasOwnProperty.call(message, "hashedAccountId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.hashedAccountId);
                            if (message.transactionEvent != null && Object.hasOwnProperty.call(message, "transactionEvent"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.encode(message.transactionEvent, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateAssessmentRequest message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentRequest} message AnnotateAssessmentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateAssessmentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateAssessmentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest} AnnotateAssessmentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateAssessmentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.annotation = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.reasons && message.reasons.length))
                                            message.reasons = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.reasons.push(reader.int32());
                                        } else
                                            message.reasons.push(reader.int32());
                                        break;
                                    }
                                case 4: {
                                        message.hashedAccountId = reader.bytes();
                                        break;
                                    }
                                case 5: {
                                        message.transactionEvent = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateAssessmentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest} AnnotateAssessmentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateAssessmentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateAssessmentRequest message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateAssessmentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.annotation != null && message.hasOwnProperty("annotation"))
                                switch (message.annotation) {
                                default:
                                    return "annotation: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.reasons != null && message.hasOwnProperty("reasons")) {
                                if (!Array.isArray(message.reasons))
                                    return "reasons: array expected";
                                for (var i = 0; i < message.reasons.length; ++i)
                                    switch (message.reasons[i]) {
                                    default:
                                        return "reasons: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 8:
                                    case 9:
                                    case 10:
                                    case 11:
                                    case 12:
                                    case 13:
                                    case 2:
                                    case 7:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 14:
                                        break;
                                    }
                            }
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                if (!(message.hashedAccountId && typeof message.hashedAccountId.length === "number" || $util.isString(message.hashedAccountId)))
                                    return "hashedAccountId: buffer expected";
                            if (message.transactionEvent != null && message.hasOwnProperty("transactionEvent")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.verify(message.transactionEvent);
                                if (error)
                                    return "transactionEvent." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateAssessmentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest} AnnotateAssessmentRequest
                         */
                        AnnotateAssessmentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            switch (object.annotation) {
                            default:
                                if (typeof object.annotation === "number") {
                                    message.annotation = object.annotation;
                                    break;
                                }
                                break;
                            case "ANNOTATION_UNSPECIFIED":
                            case 0:
                                message.annotation = 0;
                                break;
                            case "LEGITIMATE":
                            case 1:
                                message.annotation = 1;
                                break;
                            case "FRAUDULENT":
                            case 2:
                                message.annotation = 2;
                                break;
                            case "PASSWORD_CORRECT":
                            case 3:
                                message.annotation = 3;
                                break;
                            case "PASSWORD_INCORRECT":
                            case 4:
                                message.annotation = 4;
                                break;
                            }
                            if (object.reasons) {
                                if (!Array.isArray(object.reasons))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.reasons: array expected");
                                message.reasons = [];
                                for (var i = 0; i < object.reasons.length; ++i)
                                    switch (object.reasons[i]) {
                                    default:
                                        if (typeof object.reasons[i] === "number") {
                                            message.reasons[i] = object.reasons[i];
                                            break;
                                        }
                                    case "REASON_UNSPECIFIED":
                                    case 0:
                                        message.reasons[i] = 0;
                                        break;
                                    case "CHARGEBACK":
                                    case 1:
                                        message.reasons[i] = 1;
                                        break;
                                    case "CHARGEBACK_FRAUD":
                                    case 8:
                                        message.reasons[i] = 8;
                                        break;
                                    case "CHARGEBACK_DISPUTE":
                                    case 9:
                                        message.reasons[i] = 9;
                                        break;
                                    case "REFUND":
                                    case 10:
                                        message.reasons[i] = 10;
                                        break;
                                    case "REFUND_FRAUD":
                                    case 11:
                                        message.reasons[i] = 11;
                                        break;
                                    case "TRANSACTION_ACCEPTED":
                                    case 12:
                                        message.reasons[i] = 12;
                                        break;
                                    case "TRANSACTION_DECLINED":
                                    case 13:
                                        message.reasons[i] = 13;
                                        break;
                                    case "PAYMENT_HEURISTICS":
                                    case 2:
                                        message.reasons[i] = 2;
                                        break;
                                    case "INITIATED_TWO_FACTOR":
                                    case 7:
                                        message.reasons[i] = 7;
                                        break;
                                    case "PASSED_TWO_FACTOR":
                                    case 3:
                                        message.reasons[i] = 3;
                                        break;
                                    case "FAILED_TWO_FACTOR":
                                    case 4:
                                        message.reasons[i] = 4;
                                        break;
                                    case "CORRECT_PASSWORD":
                                    case 5:
                                        message.reasons[i] = 5;
                                        break;
                                    case "INCORRECT_PASSWORD":
                                    case 6:
                                        message.reasons[i] = 6;
                                        break;
                                    case "SOCIAL_SPAM":
                                    case 14:
                                        message.reasons[i] = 14;
                                        break;
                                    }
                            }
                            if (object.hashedAccountId != null)
                                if (typeof object.hashedAccountId === "string")
                                    $util.base64.decode(object.hashedAccountId, message.hashedAccountId = $util.newBuffer($util.base64.length(object.hashedAccountId)), 0);
                                else if (object.hashedAccountId.length >= 0)
                                    message.hashedAccountId = object.hashedAccountId;
                            if (object.transactionEvent != null) {
                                if (typeof object.transactionEvent !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.transactionEvent: object expected");
                                message.transactionEvent = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.fromObject(object.transactionEvent);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateAssessmentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest} message AnnotateAssessmentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateAssessmentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.reasons = [];
                            if (options.defaults) {
                                object.name = "";
                                object.annotation = options.enums === String ? "ANNOTATION_UNSPECIFIED" : 0;
                                if (options.bytes === String)
                                    object.hashedAccountId = "";
                                else {
                                    object.hashedAccountId = [];
                                    if (options.bytes !== Array)
                                        object.hashedAccountId = $util.newBuffer(object.hashedAccountId);
                                }
                                object.transactionEvent = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.annotation != null && message.hasOwnProperty("annotation"))
                                object.annotation = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Annotation[message.annotation] === undefined ? message.annotation : $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Annotation[message.annotation] : message.annotation;
                            if (message.reasons && message.reasons.length) {
                                object.reasons = [];
                                for (var j = 0; j < message.reasons.length; ++j)
                                    object.reasons[j] = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Reason[message.reasons[j]] === undefined ? message.reasons[j] : $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Reason[message.reasons[j]] : message.reasons[j];
                            }
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                object.hashedAccountId = options.bytes === String ? $util.base64.encode(message.hashedAccountId, 0, message.hashedAccountId.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashedAccountId) : message.hashedAccountId;
                            if (message.transactionEvent != null && message.hasOwnProperty("transactionEvent"))
                                object.transactionEvent = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.toObject(message.transactionEvent, options);
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateAssessmentRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateAssessmentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateAssessmentRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateAssessmentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest";
                        };
    
                        /**
                         * Annotation enum.
                         * @name google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Annotation
                         * @enum {number}
                         * @property {number} ANNOTATION_UNSPECIFIED=0 ANNOTATION_UNSPECIFIED value
                         * @property {number} LEGITIMATE=1 LEGITIMATE value
                         * @property {number} FRAUDULENT=2 FRAUDULENT value
                         * @property {number} PASSWORD_CORRECT=3 PASSWORD_CORRECT value
                         * @property {number} PASSWORD_INCORRECT=4 PASSWORD_INCORRECT value
                         */
                        AnnotateAssessmentRequest.Annotation = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ANNOTATION_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "LEGITIMATE"] = 1;
                            values[valuesById[2] = "FRAUDULENT"] = 2;
                            values[valuesById[3] = "PASSWORD_CORRECT"] = 3;
                            values[valuesById[4] = "PASSWORD_INCORRECT"] = 4;
                            return values;
                        })();
    
                        /**
                         * Reason enum.
                         * @name google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Reason
                         * @enum {number}
                         * @property {number} REASON_UNSPECIFIED=0 REASON_UNSPECIFIED value
                         * @property {number} CHARGEBACK=1 CHARGEBACK value
                         * @property {number} CHARGEBACK_FRAUD=8 CHARGEBACK_FRAUD value
                         * @property {number} CHARGEBACK_DISPUTE=9 CHARGEBACK_DISPUTE value
                         * @property {number} REFUND=10 REFUND value
                         * @property {number} REFUND_FRAUD=11 REFUND_FRAUD value
                         * @property {number} TRANSACTION_ACCEPTED=12 TRANSACTION_ACCEPTED value
                         * @property {number} TRANSACTION_DECLINED=13 TRANSACTION_DECLINED value
                         * @property {number} PAYMENT_HEURISTICS=2 PAYMENT_HEURISTICS value
                         * @property {number} INITIATED_TWO_FACTOR=7 INITIATED_TWO_FACTOR value
                         * @property {number} PASSED_TWO_FACTOR=3 PASSED_TWO_FACTOR value
                         * @property {number} FAILED_TWO_FACTOR=4 FAILED_TWO_FACTOR value
                         * @property {number} CORRECT_PASSWORD=5 CORRECT_PASSWORD value
                         * @property {number} INCORRECT_PASSWORD=6 INCORRECT_PASSWORD value
                         * @property {number} SOCIAL_SPAM=14 SOCIAL_SPAM value
                         */
                        AnnotateAssessmentRequest.Reason = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "REASON_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "CHARGEBACK"] = 1;
                            values[valuesById[8] = "CHARGEBACK_FRAUD"] = 8;
                            values[valuesById[9] = "CHARGEBACK_DISPUTE"] = 9;
                            values[valuesById[10] = "REFUND"] = 10;
                            values[valuesById[11] = "REFUND_FRAUD"] = 11;
                            values[valuesById[12] = "TRANSACTION_ACCEPTED"] = 12;
                            values[valuesById[13] = "TRANSACTION_DECLINED"] = 13;
                            values[valuesById[2] = "PAYMENT_HEURISTICS"] = 2;
                            values[valuesById[7] = "INITIATED_TWO_FACTOR"] = 7;
                            values[valuesById[3] = "PASSED_TWO_FACTOR"] = 3;
                            values[valuesById[4] = "FAILED_TWO_FACTOR"] = 4;
                            values[valuesById[5] = "CORRECT_PASSWORD"] = 5;
                            values[valuesById[6] = "INCORRECT_PASSWORD"] = 6;
                            values[valuesById[14] = "SOCIAL_SPAM"] = 14;
                            return values;
                        })();
    
                        return AnnotateAssessmentRequest;
                    })();
    
                    v1beta1.AnnotateAssessmentResponse = (function() {
    
                        /**
                         * Properties of an AnnotateAssessmentResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface IAnnotateAssessmentResponse
                         */
    
                        /**
                         * Constructs a new AnnotateAssessmentResponse.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents an AnnotateAssessmentResponse.
                         * @implements IAnnotateAssessmentResponse
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentResponse=} [properties] Properties to set
                         */
                        function AnnotateAssessmentResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new AnnotateAssessmentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentResponse=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse} AnnotateAssessmentResponse instance
                         */
                        AnnotateAssessmentResponse.create = function create(properties) {
                            return new AnnotateAssessmentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateAssessmentResponse message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentResponse} message AnnotateAssessmentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateAssessmentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateAssessmentResponse message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentResponse} message AnnotateAssessmentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateAssessmentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateAssessmentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse} AnnotateAssessmentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateAssessmentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateAssessmentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse} AnnotateAssessmentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateAssessmentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateAssessmentResponse message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateAssessmentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateAssessmentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse} AnnotateAssessmentResponse
                         */
                        AnnotateAssessmentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse)
                                return object;
                            return new $root.google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse();
                        };
    
                        /**
                         * Creates a plain object from an AnnotateAssessmentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse} message AnnotateAssessmentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateAssessmentResponse.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this AnnotateAssessmentResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateAssessmentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateAssessmentResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateAssessmentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse";
                        };
    
                        return AnnotateAssessmentResponse;
                    })();
    
                    v1beta1.PasswordLeakVerification = (function() {
    
                        /**
                         * Properties of a PasswordLeakVerification.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface IPasswordLeakVerification
                         * @property {Uint8Array|null} [hashedUserCredentials] PasswordLeakVerification hashedUserCredentials
                         * @property {boolean|null} [credentialsLeaked] PasswordLeakVerification credentialsLeaked
                         * @property {string|null} [canonicalizedUsername] PasswordLeakVerification canonicalizedUsername
                         */
    
                        /**
                         * Constructs a new PasswordLeakVerification.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents a PasswordLeakVerification.
                         * @implements IPasswordLeakVerification
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IPasswordLeakVerification=} [properties] Properties to set
                         */
                        function PasswordLeakVerification(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PasswordLeakVerification hashedUserCredentials.
                         * @member {Uint8Array} hashedUserCredentials
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @instance
                         */
                        PasswordLeakVerification.prototype.hashedUserCredentials = $util.newBuffer([]);
    
                        /**
                         * PasswordLeakVerification credentialsLeaked.
                         * @member {boolean} credentialsLeaked
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @instance
                         */
                        PasswordLeakVerification.prototype.credentialsLeaked = false;
    
                        /**
                         * PasswordLeakVerification canonicalizedUsername.
                         * @member {string} canonicalizedUsername
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @instance
                         */
                        PasswordLeakVerification.prototype.canonicalizedUsername = "";
    
                        /**
                         * Creates a new PasswordLeakVerification instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IPasswordLeakVerification=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification} PasswordLeakVerification instance
                         */
                        PasswordLeakVerification.create = function create(properties) {
                            return new PasswordLeakVerification(properties);
                        };
    
                        /**
                         * Encodes the specified PasswordLeakVerification message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IPasswordLeakVerification} message PasswordLeakVerification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PasswordLeakVerification.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.hashedUserCredentials != null && Object.hasOwnProperty.call(message, "hashedUserCredentials"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hashedUserCredentials);
                            if (message.credentialsLeaked != null && Object.hasOwnProperty.call(message, "credentialsLeaked"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.credentialsLeaked);
                            if (message.canonicalizedUsername != null && Object.hasOwnProperty.call(message, "canonicalizedUsername"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.canonicalizedUsername);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PasswordLeakVerification message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IPasswordLeakVerification} message PasswordLeakVerification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PasswordLeakVerification.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PasswordLeakVerification message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification} PasswordLeakVerification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PasswordLeakVerification.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.hashedUserCredentials = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        message.credentialsLeaked = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.canonicalizedUsername = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PasswordLeakVerification message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification} PasswordLeakVerification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PasswordLeakVerification.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PasswordLeakVerification message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PasswordLeakVerification.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.hashedUserCredentials != null && message.hasOwnProperty("hashedUserCredentials"))
                                if (!(message.hashedUserCredentials && typeof message.hashedUserCredentials.length === "number" || $util.isString(message.hashedUserCredentials)))
                                    return "hashedUserCredentials: buffer expected";
                            if (message.credentialsLeaked != null && message.hasOwnProperty("credentialsLeaked"))
                                if (typeof message.credentialsLeaked !== "boolean")
                                    return "credentialsLeaked: boolean expected";
                            if (message.canonicalizedUsername != null && message.hasOwnProperty("canonicalizedUsername"))
                                if (!$util.isString(message.canonicalizedUsername))
                                    return "canonicalizedUsername: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a PasswordLeakVerification message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification} PasswordLeakVerification
                         */
                        PasswordLeakVerification.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification();
                            if (object.hashedUserCredentials != null)
                                if (typeof object.hashedUserCredentials === "string")
                                    $util.base64.decode(object.hashedUserCredentials, message.hashedUserCredentials = $util.newBuffer($util.base64.length(object.hashedUserCredentials)), 0);
                                else if (object.hashedUserCredentials.length >= 0)
                                    message.hashedUserCredentials = object.hashedUserCredentials;
                            if (object.credentialsLeaked != null)
                                message.credentialsLeaked = Boolean(object.credentialsLeaked);
                            if (object.canonicalizedUsername != null)
                                message.canonicalizedUsername = String(object.canonicalizedUsername);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PasswordLeakVerification message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification} message PasswordLeakVerification
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PasswordLeakVerification.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.hashedUserCredentials = "";
                                else {
                                    object.hashedUserCredentials = [];
                                    if (options.bytes !== Array)
                                        object.hashedUserCredentials = $util.newBuffer(object.hashedUserCredentials);
                                }
                                object.credentialsLeaked = false;
                                object.canonicalizedUsername = "";
                            }
                            if (message.hashedUserCredentials != null && message.hasOwnProperty("hashedUserCredentials"))
                                object.hashedUserCredentials = options.bytes === String ? $util.base64.encode(message.hashedUserCredentials, 0, message.hashedUserCredentials.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashedUserCredentials) : message.hashedUserCredentials;
                            if (message.credentialsLeaked != null && message.hasOwnProperty("credentialsLeaked"))
                                object.credentialsLeaked = message.credentialsLeaked;
                            if (message.canonicalizedUsername != null && message.hasOwnProperty("canonicalizedUsername"))
                                object.canonicalizedUsername = message.canonicalizedUsername;
                            return object;
                        };
    
                        /**
                         * Converts this PasswordLeakVerification to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PasswordLeakVerification.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PasswordLeakVerification
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PasswordLeakVerification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification";
                        };
    
                        return PasswordLeakVerification;
                    })();
    
                    v1beta1.Assessment = (function() {
    
                        /**
                         * Properties of an Assessment.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface IAssessment
                         * @property {string|null} [name] Assessment name
                         * @property {google.cloud.recaptchaenterprise.v1beta1.IEvent|null} [event] Assessment event
                         * @property {number|null} [score] Assessment score
                         * @property {google.cloud.recaptchaenterprise.v1beta1.ITokenProperties|null} [tokenProperties] Assessment tokenProperties
                         * @property {Array.<google.cloud.recaptchaenterprise.v1beta1.Assessment.ClassificationReason>|null} [reasons] Assessment reasons
                         * @property {google.cloud.recaptchaenterprise.v1beta1.IPasswordLeakVerification|null} [passwordLeakVerification] Assessment passwordLeakVerification
                         * @property {google.cloud.recaptchaenterprise.v1beta1.IAccountDefenderAssessment|null} [accountDefenderAssessment] Assessment accountDefenderAssessment
                         * @property {google.cloud.recaptchaenterprise.v1beta1.IFraudPreventionAssessment|null} [fraudPreventionAssessment] Assessment fraudPreventionAssessment
                         */
    
                        /**
                         * Constructs a new Assessment.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents an Assessment.
                         * @implements IAssessment
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAssessment=} [properties] Properties to set
                         */
                        function Assessment(properties) {
                            this.reasons = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Assessment name.
                         * @member {string} name
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         */
                        Assessment.prototype.name = "";
    
                        /**
                         * Assessment event.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.IEvent|null|undefined} event
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         */
                        Assessment.prototype.event = null;
    
                        /**
                         * Assessment score.
                         * @member {number} score
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         */
                        Assessment.prototype.score = 0;
    
                        /**
                         * Assessment tokenProperties.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.ITokenProperties|null|undefined} tokenProperties
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         */
                        Assessment.prototype.tokenProperties = null;
    
                        /**
                         * Assessment reasons.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1beta1.Assessment.ClassificationReason>} reasons
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         */
                        Assessment.prototype.reasons = $util.emptyArray;
    
                        /**
                         * Assessment passwordLeakVerification.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.IPasswordLeakVerification|null|undefined} passwordLeakVerification
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         */
                        Assessment.prototype.passwordLeakVerification = null;
    
                        /**
                         * Assessment accountDefenderAssessment.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.IAccountDefenderAssessment|null|undefined} accountDefenderAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         */
                        Assessment.prototype.accountDefenderAssessment = null;
    
                        /**
                         * Assessment fraudPreventionAssessment.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.IFraudPreventionAssessment|null|undefined} fraudPreventionAssessment
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         */
                        Assessment.prototype.fraudPreventionAssessment = null;
    
                        /**
                         * Creates a new Assessment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAssessment=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.Assessment} Assessment instance
                         */
                        Assessment.create = function create(properties) {
                            return new Assessment(properties);
                        };
    
                        /**
                         * Encodes the specified Assessment message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.Assessment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAssessment} message Assessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Assessment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.event != null && Object.hasOwnProperty.call(message, "event"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.Event.encode(message.event, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.score);
                            if (message.tokenProperties != null && Object.hasOwnProperty.call(message, "tokenProperties"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties.encode(message.tokenProperties, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.reasons != null && message.reasons.length) {
                                writer.uint32(/* id 5, wireType 2 =*/42).fork();
                                for (var i = 0; i < message.reasons.length; ++i)
                                    writer.int32(message.reasons[i]);
                                writer.ldelim();
                            }
                            if (message.passwordLeakVerification != null && Object.hasOwnProperty.call(message, "passwordLeakVerification"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification.encode(message.passwordLeakVerification, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.accountDefenderAssessment != null && Object.hasOwnProperty.call(message, "accountDefenderAssessment"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.encode(message.accountDefenderAssessment, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.fraudPreventionAssessment != null && Object.hasOwnProperty.call(message, "fraudPreventionAssessment"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.encode(message.fraudPreventionAssessment, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Assessment message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.Assessment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAssessment} message Assessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Assessment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Assessment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.Assessment} Assessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Assessment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.Assessment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.event = $root.google.cloud.recaptchaenterprise.v1beta1.Event.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.score = reader.float();
                                        break;
                                    }
                                case 4: {
                                        message.tokenProperties = $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        if (!(message.reasons && message.reasons.length))
                                            message.reasons = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.reasons.push(reader.int32());
                                        } else
                                            message.reasons.push(reader.int32());
                                        break;
                                    }
                                case 7: {
                                        message.passwordLeakVerification = $root.google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.accountDefenderAssessment = $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.fraudPreventionAssessment = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Assessment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.Assessment} Assessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Assessment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Assessment message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Assessment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.event != null && message.hasOwnProperty("event")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.Event.verify(message.event);
                                if (error)
                                    return "event." + error;
                            }
                            if (message.score != null && message.hasOwnProperty("score"))
                                if (typeof message.score !== "number")
                                    return "score: number expected";
                            if (message.tokenProperties != null && message.hasOwnProperty("tokenProperties")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties.verify(message.tokenProperties);
                                if (error)
                                    return "tokenProperties." + error;
                            }
                            if (message.reasons != null && message.hasOwnProperty("reasons")) {
                                if (!Array.isArray(message.reasons))
                                    return "reasons: array expected";
                                for (var i = 0; i < message.reasons.length; ++i)
                                    switch (message.reasons[i]) {
                                    default:
                                        return "reasons: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 7:
                                        break;
                                    }
                            }
                            if (message.passwordLeakVerification != null && message.hasOwnProperty("passwordLeakVerification")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification.verify(message.passwordLeakVerification);
                                if (error)
                                    return "passwordLeakVerification." + error;
                            }
                            if (message.accountDefenderAssessment != null && message.hasOwnProperty("accountDefenderAssessment")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.verify(message.accountDefenderAssessment);
                                if (error)
                                    return "accountDefenderAssessment." + error;
                            }
                            if (message.fraudPreventionAssessment != null && message.hasOwnProperty("fraudPreventionAssessment")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.verify(message.fraudPreventionAssessment);
                                if (error)
                                    return "fraudPreventionAssessment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Assessment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.Assessment} Assessment
                         */
                        Assessment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.Assessment)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.Assessment();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.event != null) {
                                if (typeof object.event !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.Assessment.event: object expected");
                                message.event = $root.google.cloud.recaptchaenterprise.v1beta1.Event.fromObject(object.event);
                            }
                            if (object.score != null)
                                message.score = Number(object.score);
                            if (object.tokenProperties != null) {
                                if (typeof object.tokenProperties !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.Assessment.tokenProperties: object expected");
                                message.tokenProperties = $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties.fromObject(object.tokenProperties);
                            }
                            if (object.reasons) {
                                if (!Array.isArray(object.reasons))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.Assessment.reasons: array expected");
                                message.reasons = [];
                                for (var i = 0; i < object.reasons.length; ++i)
                                    switch (object.reasons[i]) {
                                    default:
                                        if (typeof object.reasons[i] === "number") {
                                            message.reasons[i] = object.reasons[i];
                                            break;
                                        }
                                    case "CLASSIFICATION_REASON_UNSPECIFIED":
                                    case 0:
                                        message.reasons[i] = 0;
                                        break;
                                    case "AUTOMATION":
                                    case 1:
                                        message.reasons[i] = 1;
                                        break;
                                    case "UNEXPECTED_ENVIRONMENT":
                                    case 2:
                                        message.reasons[i] = 2;
                                        break;
                                    case "TOO_MUCH_TRAFFIC":
                                    case 3:
                                        message.reasons[i] = 3;
                                        break;
                                    case "UNEXPECTED_USAGE_PATTERNS":
                                    case 4:
                                        message.reasons[i] = 4;
                                        break;
                                    case "LOW_CONFIDENCE_SCORE":
                                    case 5:
                                        message.reasons[i] = 5;
                                        break;
                                    case "SUSPECTED_CARDING":
                                    case 6:
                                        message.reasons[i] = 6;
                                        break;
                                    case "SUSPECTED_CHARGEBACK":
                                    case 7:
                                        message.reasons[i] = 7;
                                        break;
                                    }
                            }
                            if (object.passwordLeakVerification != null) {
                                if (typeof object.passwordLeakVerification !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.Assessment.passwordLeakVerification: object expected");
                                message.passwordLeakVerification = $root.google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification.fromObject(object.passwordLeakVerification);
                            }
                            if (object.accountDefenderAssessment != null) {
                                if (typeof object.accountDefenderAssessment !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.Assessment.accountDefenderAssessment: object expected");
                                message.accountDefenderAssessment = $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.fromObject(object.accountDefenderAssessment);
                            }
                            if (object.fraudPreventionAssessment != null) {
                                if (typeof object.fraudPreventionAssessment !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.Assessment.fraudPreventionAssessment: object expected");
                                message.fraudPreventionAssessment = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.fromObject(object.fraudPreventionAssessment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Assessment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.Assessment} message Assessment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Assessment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.reasons = [];
                            if (options.defaults) {
                                object.name = "";
                                object.event = null;
                                object.score = 0;
                                object.tokenProperties = null;
                                object.passwordLeakVerification = null;
                                object.accountDefenderAssessment = null;
                                object.fraudPreventionAssessment = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.event != null && message.hasOwnProperty("event"))
                                object.event = $root.google.cloud.recaptchaenterprise.v1beta1.Event.toObject(message.event, options);
                            if (message.score != null && message.hasOwnProperty("score"))
                                object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                            if (message.tokenProperties != null && message.hasOwnProperty("tokenProperties"))
                                object.tokenProperties = $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties.toObject(message.tokenProperties, options);
                            if (message.reasons && message.reasons.length) {
                                object.reasons = [];
                                for (var j = 0; j < message.reasons.length; ++j)
                                    object.reasons[j] = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1beta1.Assessment.ClassificationReason[message.reasons[j]] === undefined ? message.reasons[j] : $root.google.cloud.recaptchaenterprise.v1beta1.Assessment.ClassificationReason[message.reasons[j]] : message.reasons[j];
                            }
                            if (message.passwordLeakVerification != null && message.hasOwnProperty("passwordLeakVerification"))
                                object.passwordLeakVerification = $root.google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification.toObject(message.passwordLeakVerification, options);
                            if (message.accountDefenderAssessment != null && message.hasOwnProperty("accountDefenderAssessment"))
                                object.accountDefenderAssessment = $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.toObject(message.accountDefenderAssessment, options);
                            if (message.fraudPreventionAssessment != null && message.hasOwnProperty("fraudPreventionAssessment"))
                                object.fraudPreventionAssessment = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.toObject(message.fraudPreventionAssessment, options);
                            return object;
                        };
    
                        /**
                         * Converts this Assessment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Assessment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Assessment
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Assessment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Assessment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.Assessment";
                        };
    
                        /**
                         * ClassificationReason enum.
                         * @name google.cloud.recaptchaenterprise.v1beta1.Assessment.ClassificationReason
                         * @enum {number}
                         * @property {number} CLASSIFICATION_REASON_UNSPECIFIED=0 CLASSIFICATION_REASON_UNSPECIFIED value
                         * @property {number} AUTOMATION=1 AUTOMATION value
                         * @property {number} UNEXPECTED_ENVIRONMENT=2 UNEXPECTED_ENVIRONMENT value
                         * @property {number} TOO_MUCH_TRAFFIC=3 TOO_MUCH_TRAFFIC value
                         * @property {number} UNEXPECTED_USAGE_PATTERNS=4 UNEXPECTED_USAGE_PATTERNS value
                         * @property {number} LOW_CONFIDENCE_SCORE=5 LOW_CONFIDENCE_SCORE value
                         * @property {number} SUSPECTED_CARDING=6 SUSPECTED_CARDING value
                         * @property {number} SUSPECTED_CHARGEBACK=7 SUSPECTED_CHARGEBACK value
                         */
                        Assessment.ClassificationReason = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "CLASSIFICATION_REASON_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "AUTOMATION"] = 1;
                            values[valuesById[2] = "UNEXPECTED_ENVIRONMENT"] = 2;
                            values[valuesById[3] = "TOO_MUCH_TRAFFIC"] = 3;
                            values[valuesById[4] = "UNEXPECTED_USAGE_PATTERNS"] = 4;
                            values[valuesById[5] = "LOW_CONFIDENCE_SCORE"] = 5;
                            values[valuesById[6] = "SUSPECTED_CARDING"] = 6;
                            values[valuesById[7] = "SUSPECTED_CHARGEBACK"] = 7;
                            return values;
                        })();
    
                        return Assessment;
                    })();
    
                    v1beta1.Event = (function() {
    
                        /**
                         * Properties of an Event.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface IEvent
                         * @property {string|null} [token] Event token
                         * @property {string|null} [siteKey] Event siteKey
                         * @property {string|null} [userAgent] Event userAgent
                         * @property {string|null} [userIpAddress] Event userIpAddress
                         * @property {string|null} [expectedAction] Event expectedAction
                         * @property {Uint8Array|null} [hashedAccountId] Event hashedAccountId
                         * @property {google.cloud.recaptchaenterprise.v1beta1.ITransactionData|null} [transactionData] Event transactionData
                         */
    
                        /**
                         * Constructs a new Event.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents an Event.
                         * @implements IEvent
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IEvent=} [properties] Properties to set
                         */
                        function Event(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Event token.
                         * @member {string} token
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @instance
                         */
                        Event.prototype.token = "";
    
                        /**
                         * Event siteKey.
                         * @member {string} siteKey
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @instance
                         */
                        Event.prototype.siteKey = "";
    
                        /**
                         * Event userAgent.
                         * @member {string} userAgent
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @instance
                         */
                        Event.prototype.userAgent = "";
    
                        /**
                         * Event userIpAddress.
                         * @member {string} userIpAddress
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @instance
                         */
                        Event.prototype.userIpAddress = "";
    
                        /**
                         * Event expectedAction.
                         * @member {string} expectedAction
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @instance
                         */
                        Event.prototype.expectedAction = "";
    
                        /**
                         * Event hashedAccountId.
                         * @member {Uint8Array} hashedAccountId
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @instance
                         */
                        Event.prototype.hashedAccountId = $util.newBuffer([]);
    
                        /**
                         * Event transactionData.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.ITransactionData|null|undefined} transactionData
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @instance
                         */
                        Event.prototype.transactionData = null;
    
                        /**
                         * Creates a new Event instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IEvent=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.Event} Event instance
                         */
                        Event.create = function create(properties) {
                            return new Event(properties);
                        };
    
                        /**
                         * Encodes the specified Event message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.Event.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IEvent} message Event message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Event.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                            if (message.siteKey != null && Object.hasOwnProperty.call(message, "siteKey"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.siteKey);
                            if (message.userAgent != null && Object.hasOwnProperty.call(message, "userAgent"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.userAgent);
                            if (message.userIpAddress != null && Object.hasOwnProperty.call(message, "userIpAddress"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.userIpAddress);
                            if (message.expectedAction != null && Object.hasOwnProperty.call(message, "expectedAction"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.expectedAction);
                            if (message.hashedAccountId != null && Object.hasOwnProperty.call(message, "hashedAccountId"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.hashedAccountId);
                            if (message.transactionData != null && Object.hasOwnProperty.call(message, "transactionData"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.encode(message.transactionData, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Event message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.Event.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IEvent} message Event message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Event.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Event message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.Event} Event
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Event.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.Event();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.token = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.siteKey = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.userAgent = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.userIpAddress = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.expectedAction = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.hashedAccountId = reader.bytes();
                                        break;
                                    }
                                case 13: {
                                        message.transactionData = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Event message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.Event} Event
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Event.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Event message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Event.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.token != null && message.hasOwnProperty("token"))
                                if (!$util.isString(message.token))
                                    return "token: string expected";
                            if (message.siteKey != null && message.hasOwnProperty("siteKey"))
                                if (!$util.isString(message.siteKey))
                                    return "siteKey: string expected";
                            if (message.userAgent != null && message.hasOwnProperty("userAgent"))
                                if (!$util.isString(message.userAgent))
                                    return "userAgent: string expected";
                            if (message.userIpAddress != null && message.hasOwnProperty("userIpAddress"))
                                if (!$util.isString(message.userIpAddress))
                                    return "userIpAddress: string expected";
                            if (message.expectedAction != null && message.hasOwnProperty("expectedAction"))
                                if (!$util.isString(message.expectedAction))
                                    return "expectedAction: string expected";
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                if (!(message.hashedAccountId && typeof message.hashedAccountId.length === "number" || $util.isString(message.hashedAccountId)))
                                    return "hashedAccountId: buffer expected";
                            if (message.transactionData != null && message.hasOwnProperty("transactionData")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.verify(message.transactionData);
                                if (error)
                                    return "transactionData." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Event message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.Event} Event
                         */
                        Event.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.Event)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.Event();
                            if (object.token != null)
                                message.token = String(object.token);
                            if (object.siteKey != null)
                                message.siteKey = String(object.siteKey);
                            if (object.userAgent != null)
                                message.userAgent = String(object.userAgent);
                            if (object.userIpAddress != null)
                                message.userIpAddress = String(object.userIpAddress);
                            if (object.expectedAction != null)
                                message.expectedAction = String(object.expectedAction);
                            if (object.hashedAccountId != null)
                                if (typeof object.hashedAccountId === "string")
                                    $util.base64.decode(object.hashedAccountId, message.hashedAccountId = $util.newBuffer($util.base64.length(object.hashedAccountId)), 0);
                                else if (object.hashedAccountId.length >= 0)
                                    message.hashedAccountId = object.hashedAccountId;
                            if (object.transactionData != null) {
                                if (typeof object.transactionData !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.Event.transactionData: object expected");
                                message.transactionData = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.fromObject(object.transactionData);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Event message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.Event} message Event
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Event.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.token = "";
                                object.siteKey = "";
                                object.userAgent = "";
                                object.userIpAddress = "";
                                object.expectedAction = "";
                                if (options.bytes === String)
                                    object.hashedAccountId = "";
                                else {
                                    object.hashedAccountId = [];
                                    if (options.bytes !== Array)
                                        object.hashedAccountId = $util.newBuffer(object.hashedAccountId);
                                }
                                object.transactionData = null;
                            }
                            if (message.token != null && message.hasOwnProperty("token"))
                                object.token = message.token;
                            if (message.siteKey != null && message.hasOwnProperty("siteKey"))
                                object.siteKey = message.siteKey;
                            if (message.userAgent != null && message.hasOwnProperty("userAgent"))
                                object.userAgent = message.userAgent;
                            if (message.userIpAddress != null && message.hasOwnProperty("userIpAddress"))
                                object.userIpAddress = message.userIpAddress;
                            if (message.expectedAction != null && message.hasOwnProperty("expectedAction"))
                                object.expectedAction = message.expectedAction;
                            if (message.hashedAccountId != null && message.hasOwnProperty("hashedAccountId"))
                                object.hashedAccountId = options.bytes === String ? $util.base64.encode(message.hashedAccountId, 0, message.hashedAccountId.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashedAccountId) : message.hashedAccountId;
                            if (message.transactionData != null && message.hasOwnProperty("transactionData"))
                                object.transactionData = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.toObject(message.transactionData, options);
                            return object;
                        };
    
                        /**
                         * Converts this Event to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Event.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Event
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.Event
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.Event";
                        };
    
                        return Event;
                    })();
    
                    v1beta1.TransactionData = (function() {
    
                        /**
                         * Properties of a TransactionData.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface ITransactionData
                         * @property {string|null} [transactionId] TransactionData transactionId
                         * @property {string|null} [paymentMethod] TransactionData paymentMethod
                         * @property {string|null} [cardBin] TransactionData cardBin
                         * @property {string|null} [cardLastFour] TransactionData cardLastFour
                         * @property {string|null} [currencyCode] TransactionData currencyCode
                         * @property {number|null} [value] TransactionData value
                         * @property {number|null} [shippingValue] TransactionData shippingValue
                         * @property {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IAddress|null} [shippingAddress] TransactionData shippingAddress
                         * @property {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IAddress|null} [billingAddress] TransactionData billingAddress
                         * @property {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IUser|null} [user] TransactionData user
                         * @property {Array.<google.cloud.recaptchaenterprise.v1beta1.TransactionData.IUser>|null} [merchants] TransactionData merchants
                         * @property {Array.<google.cloud.recaptchaenterprise.v1beta1.TransactionData.IItem>|null} [items] TransactionData items
                         * @property {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IGatewayInfo|null} [gatewayInfo] TransactionData gatewayInfo
                         */
    
                        /**
                         * Constructs a new TransactionData.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents a TransactionData.
                         * @implements ITransactionData
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITransactionData=} [properties] Properties to set
                         */
                        function TransactionData(properties) {
                            this.merchants = [];
                            this.items = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TransactionData transactionId.
                         * @member {string|null|undefined} transactionId
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.transactionId = null;
    
                        /**
                         * TransactionData paymentMethod.
                         * @member {string} paymentMethod
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.paymentMethod = "";
    
                        /**
                         * TransactionData cardBin.
                         * @member {string} cardBin
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.cardBin = "";
    
                        /**
                         * TransactionData cardLastFour.
                         * @member {string} cardLastFour
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.cardLastFour = "";
    
                        /**
                         * TransactionData currencyCode.
                         * @member {string} currencyCode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.currencyCode = "";
    
                        /**
                         * TransactionData value.
                         * @member {number} value
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.value = 0;
    
                        /**
                         * TransactionData shippingValue.
                         * @member {number} shippingValue
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.shippingValue = 0;
    
                        /**
                         * TransactionData shippingAddress.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IAddress|null|undefined} shippingAddress
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.shippingAddress = null;
    
                        /**
                         * TransactionData billingAddress.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IAddress|null|undefined} billingAddress
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.billingAddress = null;
    
                        /**
                         * TransactionData user.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IUser|null|undefined} user
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.user = null;
    
                        /**
                         * TransactionData merchants.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1beta1.TransactionData.IUser>} merchants
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.merchants = $util.emptyArray;
    
                        /**
                         * TransactionData items.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1beta1.TransactionData.IItem>} items
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.items = $util.emptyArray;
    
                        /**
                         * TransactionData gatewayInfo.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IGatewayInfo|null|undefined} gatewayInfo
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        TransactionData.prototype.gatewayInfo = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * TransactionData _transactionId.
                         * @member {"transactionId"|undefined} _transactionId
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         */
                        Object.defineProperty(TransactionData.prototype, "_transactionId", {
                            get: $util.oneOfGetter($oneOfFields = ["transactionId"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new TransactionData instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITransactionData=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData} TransactionData instance
                         */
                        TransactionData.create = function create(properties) {
                            return new TransactionData(properties);
                        };
    
                        /**
                         * Encodes the specified TransactionData message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITransactionData} message TransactionData message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransactionData.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.paymentMethod != null && Object.hasOwnProperty.call(message, "paymentMethod"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.paymentMethod);
                            if (message.cardBin != null && Object.hasOwnProperty.call(message, "cardBin"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.cardBin);
                            if (message.cardLastFour != null && Object.hasOwnProperty.call(message, "cardLastFour"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.cardLastFour);
                            if (message.currencyCode != null && Object.hasOwnProperty.call(message, "currencyCode"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.currencyCode);
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 5, wireType 1 =*/41).double(message.value);
                            if (message.shippingAddress != null && Object.hasOwnProperty.call(message, "shippingAddress"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.encode(message.shippingAddress, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.billingAddress != null && Object.hasOwnProperty.call(message, "billingAddress"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.encode(message.billingAddress, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.encode(message.user, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.gatewayInfo != null && Object.hasOwnProperty.call(message, "gatewayInfo"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo.encode(message.gatewayInfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.transactionId != null && Object.hasOwnProperty.call(message, "transactionId"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.transactionId);
                            if (message.shippingValue != null && Object.hasOwnProperty.call(message, "shippingValue"))
                                writer.uint32(/* id 12, wireType 1 =*/97).double(message.shippingValue);
                            if (message.merchants != null && message.merchants.length)
                                for (var i = 0; i < message.merchants.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.encode(message.merchants[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            if (message.items != null && message.items.length)
                                for (var i = 0; i < message.items.length; ++i)
                                    $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item.encode(message.items[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TransactionData message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITransactionData} message TransactionData message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TransactionData.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TransactionData message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData} TransactionData
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransactionData.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 11: {
                                        message.transactionId = reader.string();
                                        break;
                                    }
                                case 1: {
                                        message.paymentMethod = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.cardBin = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.cardLastFour = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.currencyCode = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.value = reader.double();
                                        break;
                                    }
                                case 12: {
                                        message.shippingValue = reader.double();
                                        break;
                                    }
                                case 6: {
                                        message.shippingAddress = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.billingAddress = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.user = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 13: {
                                        if (!(message.merchants && message.merchants.length))
                                            message.merchants = [];
                                        message.merchants.push($root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 14: {
                                        if (!(message.items && message.items.length))
                                            message.items = [];
                                        message.items.push($root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 10: {
                                        message.gatewayInfo = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TransactionData message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData} TransactionData
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TransactionData.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TransactionData message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TransactionData.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.transactionId != null && message.hasOwnProperty("transactionId")) {
                                properties._transactionId = 1;
                                if (!$util.isString(message.transactionId))
                                    return "transactionId: string expected";
                            }
                            if (message.paymentMethod != null && message.hasOwnProperty("paymentMethod"))
                                if (!$util.isString(message.paymentMethod))
                                    return "paymentMethod: string expected";
                            if (message.cardBin != null && message.hasOwnProperty("cardBin"))
                                if (!$util.isString(message.cardBin))
                                    return "cardBin: string expected";
                            if (message.cardLastFour != null && message.hasOwnProperty("cardLastFour"))
                                if (!$util.isString(message.cardLastFour))
                                    return "cardLastFour: string expected";
                            if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                                if (!$util.isString(message.currencyCode))
                                    return "currencyCode: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            if (message.shippingValue != null && message.hasOwnProperty("shippingValue"))
                                if (typeof message.shippingValue !== "number")
                                    return "shippingValue: number expected";
                            if (message.shippingAddress != null && message.hasOwnProperty("shippingAddress")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.verify(message.shippingAddress);
                                if (error)
                                    return "shippingAddress." + error;
                            }
                            if (message.billingAddress != null && message.hasOwnProperty("billingAddress")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.verify(message.billingAddress);
                                if (error)
                                    return "billingAddress." + error;
                            }
                            if (message.user != null && message.hasOwnProperty("user")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.verify(message.user);
                                if (error)
                                    return "user." + error;
                            }
                            if (message.merchants != null && message.hasOwnProperty("merchants")) {
                                if (!Array.isArray(message.merchants))
                                    return "merchants: array expected";
                                for (var i = 0; i < message.merchants.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.verify(message.merchants[i]);
                                    if (error)
                                        return "merchants." + error;
                                }
                            }
                            if (message.items != null && message.hasOwnProperty("items")) {
                                if (!Array.isArray(message.items))
                                    return "items: array expected";
                                for (var i = 0; i < message.items.length; ++i) {
                                    var error = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item.verify(message.items[i]);
                                    if (error)
                                        return "items." + error;
                                }
                            }
                            if (message.gatewayInfo != null && message.hasOwnProperty("gatewayInfo")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo.verify(message.gatewayInfo);
                                if (error)
                                    return "gatewayInfo." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TransactionData message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData} TransactionData
                         */
                        TransactionData.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData();
                            if (object.transactionId != null)
                                message.transactionId = String(object.transactionId);
                            if (object.paymentMethod != null)
                                message.paymentMethod = String(object.paymentMethod);
                            if (object.cardBin != null)
                                message.cardBin = String(object.cardBin);
                            if (object.cardLastFour != null)
                                message.cardLastFour = String(object.cardLastFour);
                            if (object.currencyCode != null)
                                message.currencyCode = String(object.currencyCode);
                            if (object.value != null)
                                message.value = Number(object.value);
                            if (object.shippingValue != null)
                                message.shippingValue = Number(object.shippingValue);
                            if (object.shippingAddress != null) {
                                if (typeof object.shippingAddress !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.shippingAddress: object expected");
                                message.shippingAddress = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.fromObject(object.shippingAddress);
                            }
                            if (object.billingAddress != null) {
                                if (typeof object.billingAddress !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.billingAddress: object expected");
                                message.billingAddress = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.fromObject(object.billingAddress);
                            }
                            if (object.user != null) {
                                if (typeof object.user !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.user: object expected");
                                message.user = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.fromObject(object.user);
                            }
                            if (object.merchants) {
                                if (!Array.isArray(object.merchants))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.merchants: array expected");
                                message.merchants = [];
                                for (var i = 0; i < object.merchants.length; ++i) {
                                    if (typeof object.merchants[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.merchants: object expected");
                                    message.merchants[i] = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.fromObject(object.merchants[i]);
                                }
                            }
                            if (object.items) {
                                if (!Array.isArray(object.items))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.items: array expected");
                                message.items = [];
                                for (var i = 0; i < object.items.length; ++i) {
                                    if (typeof object.items[i] !== "object")
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.items: object expected");
                                    message.items[i] = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item.fromObject(object.items[i]);
                                }
                            }
                            if (object.gatewayInfo != null) {
                                if (typeof object.gatewayInfo !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.gatewayInfo: object expected");
                                message.gatewayInfo = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo.fromObject(object.gatewayInfo);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TransactionData message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData} message TransactionData
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TransactionData.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.merchants = [];
                                object.items = [];
                            }
                            if (options.defaults) {
                                object.paymentMethod = "";
                                object.cardBin = "";
                                object.cardLastFour = "";
                                object.currencyCode = "";
                                object.value = 0;
                                object.shippingAddress = null;
                                object.billingAddress = null;
                                object.user = null;
                                object.gatewayInfo = null;
                                object.shippingValue = 0;
                            }
                            if (message.paymentMethod != null && message.hasOwnProperty("paymentMethod"))
                                object.paymentMethod = message.paymentMethod;
                            if (message.cardBin != null && message.hasOwnProperty("cardBin"))
                                object.cardBin = message.cardBin;
                            if (message.cardLastFour != null && message.hasOwnProperty("cardLastFour"))
                                object.cardLastFour = message.cardLastFour;
                            if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                                object.currencyCode = message.currencyCode;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            if (message.shippingAddress != null && message.hasOwnProperty("shippingAddress"))
                                object.shippingAddress = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.toObject(message.shippingAddress, options);
                            if (message.billingAddress != null && message.hasOwnProperty("billingAddress"))
                                object.billingAddress = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.toObject(message.billingAddress, options);
                            if (message.user != null && message.hasOwnProperty("user"))
                                object.user = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.toObject(message.user, options);
                            if (message.gatewayInfo != null && message.hasOwnProperty("gatewayInfo"))
                                object.gatewayInfo = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo.toObject(message.gatewayInfo, options);
                            if (message.transactionId != null && message.hasOwnProperty("transactionId")) {
                                object.transactionId = message.transactionId;
                                if (options.oneofs)
                                    object._transactionId = "transactionId";
                            }
                            if (message.shippingValue != null && message.hasOwnProperty("shippingValue"))
                                object.shippingValue = options.json && !isFinite(message.shippingValue) ? String(message.shippingValue) : message.shippingValue;
                            if (message.merchants && message.merchants.length) {
                                object.merchants = [];
                                for (var j = 0; j < message.merchants.length; ++j)
                                    object.merchants[j] = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.toObject(message.merchants[j], options);
                            }
                            if (message.items && message.items.length) {
                                object.items = [];
                                for (var j = 0; j < message.items.length; ++j)
                                    object.items[j] = $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item.toObject(message.items[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TransactionData to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TransactionData.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TransactionData
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TransactionData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.TransactionData";
                        };
    
                        TransactionData.Address = (function() {
    
                            /**
                             * Properties of an Address.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                             * @interface IAddress
                             * @property {string|null} [recipient] Address recipient
                             * @property {Array.<string>|null} [address] Address address
                             * @property {string|null} [locality] Address locality
                             * @property {string|null} [administrativeArea] Address administrativeArea
                             * @property {string|null} [regionCode] Address regionCode
                             * @property {string|null} [postalCode] Address postalCode
                             */
    
                            /**
                             * Constructs a new Address.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                             * @classdesc Represents an Address.
                             * @implements IAddress
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IAddress=} [properties] Properties to set
                             */
                            function Address(properties) {
                                this.address = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Address recipient.
                             * @member {string} recipient
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.recipient = "";
    
                            /**
                             * Address address.
                             * @member {Array.<string>} address
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.address = $util.emptyArray;
    
                            /**
                             * Address locality.
                             * @member {string} locality
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.locality = "";
    
                            /**
                             * Address administrativeArea.
                             * @member {string} administrativeArea
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.administrativeArea = "";
    
                            /**
                             * Address regionCode.
                             * @member {string} regionCode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.regionCode = "";
    
                            /**
                             * Address postalCode.
                             * @member {string} postalCode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @instance
                             */
                            Address.prototype.postalCode = "";
    
                            /**
                             * Creates a new Address instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IAddress=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address} Address instance
                             */
                            Address.create = function create(properties) {
                                return new Address(properties);
                            };
    
                            /**
                             * Encodes the specified Address message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IAddress} message Address message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Address.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.recipient != null && Object.hasOwnProperty.call(message, "recipient"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.recipient);
                                if (message.address != null && message.address.length)
                                    for (var i = 0; i < message.address.length; ++i)
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.address[i]);
                                if (message.locality != null && Object.hasOwnProperty.call(message, "locality"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.locality);
                                if (message.administrativeArea != null && Object.hasOwnProperty.call(message, "administrativeArea"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.administrativeArea);
                                if (message.regionCode != null && Object.hasOwnProperty.call(message, "regionCode"))
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.regionCode);
                                if (message.postalCode != null && Object.hasOwnProperty.call(message, "postalCode"))
                                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.postalCode);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Address message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IAddress} message Address message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Address.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Address message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address} Address
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Address.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.recipient = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.address && message.address.length))
                                                message.address = [];
                                            message.address.push(reader.string());
                                            break;
                                        }
                                    case 3: {
                                            message.locality = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.administrativeArea = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.regionCode = reader.string();
                                            break;
                                        }
                                    case 6: {
                                            message.postalCode = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Address message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address} Address
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Address.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Address message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Address.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.recipient != null && message.hasOwnProperty("recipient"))
                                    if (!$util.isString(message.recipient))
                                        return "recipient: string expected";
                                if (message.address != null && message.hasOwnProperty("address")) {
                                    if (!Array.isArray(message.address))
                                        return "address: array expected";
                                    for (var i = 0; i < message.address.length; ++i)
                                        if (!$util.isString(message.address[i]))
                                            return "address: string[] expected";
                                }
                                if (message.locality != null && message.hasOwnProperty("locality"))
                                    if (!$util.isString(message.locality))
                                        return "locality: string expected";
                                if (message.administrativeArea != null && message.hasOwnProperty("administrativeArea"))
                                    if (!$util.isString(message.administrativeArea))
                                        return "administrativeArea: string expected";
                                if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                    if (!$util.isString(message.regionCode))
                                        return "regionCode: string expected";
                                if (message.postalCode != null && message.hasOwnProperty("postalCode"))
                                    if (!$util.isString(message.postalCode))
                                        return "postalCode: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an Address message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address} Address
                             */
                            Address.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address();
                                if (object.recipient != null)
                                    message.recipient = String(object.recipient);
                                if (object.address) {
                                    if (!Array.isArray(object.address))
                                        throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.address: array expected");
                                    message.address = [];
                                    for (var i = 0; i < object.address.length; ++i)
                                        message.address[i] = String(object.address[i]);
                                }
                                if (object.locality != null)
                                    message.locality = String(object.locality);
                                if (object.administrativeArea != null)
                                    message.administrativeArea = String(object.administrativeArea);
                                if (object.regionCode != null)
                                    message.regionCode = String(object.regionCode);
                                if (object.postalCode != null)
                                    message.postalCode = String(object.postalCode);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Address message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address} message Address
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Address.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.address = [];
                                if (options.defaults) {
                                    object.recipient = "";
                                    object.locality = "";
                                    object.administrativeArea = "";
                                    object.regionCode = "";
                                    object.postalCode = "";
                                }
                                if (message.recipient != null && message.hasOwnProperty("recipient"))
                                    object.recipient = message.recipient;
                                if (message.address && message.address.length) {
                                    object.address = [];
                                    for (var j = 0; j < message.address.length; ++j)
                                        object.address[j] = message.address[j];
                                }
                                if (message.locality != null && message.hasOwnProperty("locality"))
                                    object.locality = message.locality;
                                if (message.administrativeArea != null && message.hasOwnProperty("administrativeArea"))
                                    object.administrativeArea = message.administrativeArea;
                                if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                    object.regionCode = message.regionCode;
                                if (message.postalCode != null && message.hasOwnProperty("postalCode"))
                                    object.postalCode = message.postalCode;
                                return object;
                            };
    
                            /**
                             * Converts this Address to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Address.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Address
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Address.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address";
                            };
    
                            return Address;
                        })();
    
                        TransactionData.User = (function() {
    
                            /**
                             * Properties of a User.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                             * @interface IUser
                             * @property {string|null} [accountId] User accountId
                             * @property {number|Long|null} [creationMs] User creationMs
                             * @property {string|null} [email] User email
                             * @property {boolean|null} [emailVerified] User emailVerified
                             * @property {string|null} [phoneNumber] User phoneNumber
                             * @property {boolean|null} [phoneVerified] User phoneVerified
                             */
    
                            /**
                             * Constructs a new User.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                             * @classdesc Represents a User.
                             * @implements IUser
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IUser=} [properties] Properties to set
                             */
                            function User(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * User accountId.
                             * @member {string} accountId
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @instance
                             */
                            User.prototype.accountId = "";
    
                            /**
                             * User creationMs.
                             * @member {number|Long} creationMs
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @instance
                             */
                            User.prototype.creationMs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * User email.
                             * @member {string} email
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @instance
                             */
                            User.prototype.email = "";
    
                            /**
                             * User emailVerified.
                             * @member {boolean} emailVerified
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @instance
                             */
                            User.prototype.emailVerified = false;
    
                            /**
                             * User phoneNumber.
                             * @member {string} phoneNumber
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @instance
                             */
                            User.prototype.phoneNumber = "";
    
                            /**
                             * User phoneVerified.
                             * @member {boolean} phoneVerified
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @instance
                             */
                            User.prototype.phoneVerified = false;
    
                            /**
                             * Creates a new User instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IUser=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.User} User instance
                             */
                            User.create = function create(properties) {
                                return new User(properties);
                            };
    
                            /**
                             * Encodes the specified User message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IUser} message User message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            User.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.creationMs != null && Object.hasOwnProperty.call(message, "creationMs"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.creationMs);
                                if (message.email != null && Object.hasOwnProperty.call(message, "email"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.email);
                                if (message.emailVerified != null && Object.hasOwnProperty.call(message, "emailVerified"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.emailVerified);
                                if (message.phoneNumber != null && Object.hasOwnProperty.call(message, "phoneNumber"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.phoneNumber);
                                if (message.phoneVerified != null && Object.hasOwnProperty.call(message, "phoneVerified"))
                                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.phoneVerified);
                                if (message.accountId != null && Object.hasOwnProperty.call(message, "accountId"))
                                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.accountId);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified User message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IUser} message User message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            User.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a User message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.User} User
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            User.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 6: {
                                            message.accountId = reader.string();
                                            break;
                                        }
                                    case 1: {
                                            message.creationMs = reader.int64();
                                            break;
                                        }
                                    case 2: {
                                            message.email = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.emailVerified = reader.bool();
                                            break;
                                        }
                                    case 4: {
                                            message.phoneNumber = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.phoneVerified = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a User message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.User} User
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            User.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a User message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            User.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.accountId != null && message.hasOwnProperty("accountId"))
                                    if (!$util.isString(message.accountId))
                                        return "accountId: string expected";
                                if (message.creationMs != null && message.hasOwnProperty("creationMs"))
                                    if (!$util.isInteger(message.creationMs) && !(message.creationMs && $util.isInteger(message.creationMs.low) && $util.isInteger(message.creationMs.high)))
                                        return "creationMs: integer|Long expected";
                                if (message.email != null && message.hasOwnProperty("email"))
                                    if (!$util.isString(message.email))
                                        return "email: string expected";
                                if (message.emailVerified != null && message.hasOwnProperty("emailVerified"))
                                    if (typeof message.emailVerified !== "boolean")
                                        return "emailVerified: boolean expected";
                                if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                                    if (!$util.isString(message.phoneNumber))
                                        return "phoneNumber: string expected";
                                if (message.phoneVerified != null && message.hasOwnProperty("phoneVerified"))
                                    if (typeof message.phoneVerified !== "boolean")
                                        return "phoneVerified: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a User message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.User} User
                             */
                            User.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.User();
                                if (object.accountId != null)
                                    message.accountId = String(object.accountId);
                                if (object.creationMs != null)
                                    if ($util.Long)
                                        (message.creationMs = $util.Long.fromValue(object.creationMs)).unsigned = false;
                                    else if (typeof object.creationMs === "string")
                                        message.creationMs = parseInt(object.creationMs, 10);
                                    else if (typeof object.creationMs === "number")
                                        message.creationMs = object.creationMs;
                                    else if (typeof object.creationMs === "object")
                                        message.creationMs = new $util.LongBits(object.creationMs.low >>> 0, object.creationMs.high >>> 0).toNumber();
                                if (object.email != null)
                                    message.email = String(object.email);
                                if (object.emailVerified != null)
                                    message.emailVerified = Boolean(object.emailVerified);
                                if (object.phoneNumber != null)
                                    message.phoneNumber = String(object.phoneNumber);
                                if (object.phoneVerified != null)
                                    message.phoneVerified = Boolean(object.phoneVerified);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a User message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.User} message User
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            User.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.creationMs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.creationMs = options.longs === String ? "0" : 0;
                                    object.email = "";
                                    object.emailVerified = false;
                                    object.phoneNumber = "";
                                    object.phoneVerified = false;
                                    object.accountId = "";
                                }
                                if (message.creationMs != null && message.hasOwnProperty("creationMs"))
                                    if (typeof message.creationMs === "number")
                                        object.creationMs = options.longs === String ? String(message.creationMs) : message.creationMs;
                                    else
                                        object.creationMs = options.longs === String ? $util.Long.prototype.toString.call(message.creationMs) : options.longs === Number ? new $util.LongBits(message.creationMs.low >>> 0, message.creationMs.high >>> 0).toNumber() : message.creationMs;
                                if (message.email != null && message.hasOwnProperty("email"))
                                    object.email = message.email;
                                if (message.emailVerified != null && message.hasOwnProperty("emailVerified"))
                                    object.emailVerified = message.emailVerified;
                                if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                                    object.phoneNumber = message.phoneNumber;
                                if (message.phoneVerified != null && message.hasOwnProperty("phoneVerified"))
                                    object.phoneVerified = message.phoneVerified;
                                if (message.accountId != null && message.hasOwnProperty("accountId"))
                                    object.accountId = message.accountId;
                                return object;
                            };
    
                            /**
                             * Converts this User to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            User.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for User
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            User.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.TransactionData.User";
                            };
    
                            return User;
                        })();
    
                        TransactionData.Item = (function() {
    
                            /**
                             * Properties of an Item.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                             * @interface IItem
                             * @property {string|null} [name] Item name
                             * @property {number|null} [value] Item value
                             * @property {number|Long|null} [quantity] Item quantity
                             * @property {string|null} [merchantAccountId] Item merchantAccountId
                             */
    
                            /**
                             * Constructs a new Item.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                             * @classdesc Represents an Item.
                             * @implements IItem
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IItem=} [properties] Properties to set
                             */
                            function Item(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Item name.
                             * @member {string} name
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @instance
                             */
                            Item.prototype.name = "";
    
                            /**
                             * Item value.
                             * @member {number} value
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @instance
                             */
                            Item.prototype.value = 0;
    
                            /**
                             * Item quantity.
                             * @member {number|Long} quantity
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @instance
                             */
                            Item.prototype.quantity = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Item merchantAccountId.
                             * @member {string} merchantAccountId
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @instance
                             */
                            Item.prototype.merchantAccountId = "";
    
                            /**
                             * Creates a new Item instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IItem=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item} Item instance
                             */
                            Item.create = function create(properties) {
                                return new Item(properties);
                            };
    
                            /**
                             * Encodes the specified Item message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IItem} message Item message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Item.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);
                                if (message.quantity != null && Object.hasOwnProperty.call(message, "quantity"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.quantity);
                                if (message.merchantAccountId != null && Object.hasOwnProperty.call(message, "merchantAccountId"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.merchantAccountId);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Item message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IItem} message Item message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Item.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Item message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item} Item
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Item.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.name = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.value = reader.double();
                                            break;
                                        }
                                    case 3: {
                                            message.quantity = reader.int64();
                                            break;
                                        }
                                    case 4: {
                                            message.merchantAccountId = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Item message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item} Item
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Item.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Item message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Item.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (typeof message.value !== "number")
                                        return "value: number expected";
                                if (message.quantity != null && message.hasOwnProperty("quantity"))
                                    if (!$util.isInteger(message.quantity) && !(message.quantity && $util.isInteger(message.quantity.low) && $util.isInteger(message.quantity.high)))
                                        return "quantity: integer|Long expected";
                                if (message.merchantAccountId != null && message.hasOwnProperty("merchantAccountId"))
                                    if (!$util.isString(message.merchantAccountId))
                                        return "merchantAccountId: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an Item message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item} Item
                             */
                            Item.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.value != null)
                                    message.value = Number(object.value);
                                if (object.quantity != null)
                                    if ($util.Long)
                                        (message.quantity = $util.Long.fromValue(object.quantity)).unsigned = false;
                                    else if (typeof object.quantity === "string")
                                        message.quantity = parseInt(object.quantity, 10);
                                    else if (typeof object.quantity === "number")
                                        message.quantity = object.quantity;
                                    else if (typeof object.quantity === "object")
                                        message.quantity = new $util.LongBits(object.quantity.low >>> 0, object.quantity.high >>> 0).toNumber();
                                if (object.merchantAccountId != null)
                                    message.merchantAccountId = String(object.merchantAccountId);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Item message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item} message Item
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Item.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.value = 0;
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.quantity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.quantity = options.longs === String ? "0" : 0;
                                    object.merchantAccountId = "";
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                                if (message.quantity != null && message.hasOwnProperty("quantity"))
                                    if (typeof message.quantity === "number")
                                        object.quantity = options.longs === String ? String(message.quantity) : message.quantity;
                                    else
                                        object.quantity = options.longs === String ? $util.Long.prototype.toString.call(message.quantity) : options.longs === Number ? new $util.LongBits(message.quantity.low >>> 0, message.quantity.high >>> 0).toNumber() : message.quantity;
                                if (message.merchantAccountId != null && message.hasOwnProperty("merchantAccountId"))
                                    object.merchantAccountId = message.merchantAccountId;
                                return object;
                            };
    
                            /**
                             * Converts this Item to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Item.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Item
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item";
                            };
    
                            return Item;
                        })();
    
                        TransactionData.GatewayInfo = (function() {
    
                            /**
                             * Properties of a GatewayInfo.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                             * @interface IGatewayInfo
                             * @property {string|null} [name] GatewayInfo name
                             * @property {string|null} [gatewayResponseCode] GatewayInfo gatewayResponseCode
                             * @property {string|null} [avsResponseCode] GatewayInfo avsResponseCode
                             * @property {string|null} [cvvResponseCode] GatewayInfo cvvResponseCode
                             */
    
                            /**
                             * Constructs a new GatewayInfo.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData
                             * @classdesc Represents a GatewayInfo.
                             * @implements IGatewayInfo
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IGatewayInfo=} [properties] Properties to set
                             */
                            function GatewayInfo(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GatewayInfo name.
                             * @member {string} name
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @instance
                             */
                            GatewayInfo.prototype.name = "";
    
                            /**
                             * GatewayInfo gatewayResponseCode.
                             * @member {string} gatewayResponseCode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @instance
                             */
                            GatewayInfo.prototype.gatewayResponseCode = "";
    
                            /**
                             * GatewayInfo avsResponseCode.
                             * @member {string} avsResponseCode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @instance
                             */
                            GatewayInfo.prototype.avsResponseCode = "";
    
                            /**
                             * GatewayInfo cvvResponseCode.
                             * @member {string} cvvResponseCode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @instance
                             */
                            GatewayInfo.prototype.cvvResponseCode = "";
    
                            /**
                             * Creates a new GatewayInfo instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IGatewayInfo=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo} GatewayInfo instance
                             */
                            GatewayInfo.create = function create(properties) {
                                return new GatewayInfo(properties);
                            };
    
                            /**
                             * Encodes the specified GatewayInfo message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IGatewayInfo} message GatewayInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GatewayInfo.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.gatewayResponseCode != null && Object.hasOwnProperty.call(message, "gatewayResponseCode"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayResponseCode);
                                if (message.avsResponseCode != null && Object.hasOwnProperty.call(message, "avsResponseCode"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.avsResponseCode);
                                if (message.cvvResponseCode != null && Object.hasOwnProperty.call(message, "cvvResponseCode"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.cvvResponseCode);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GatewayInfo message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.IGatewayInfo} message GatewayInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GatewayInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GatewayInfo message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo} GatewayInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GatewayInfo.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.name = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.gatewayResponseCode = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.avsResponseCode = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.cvvResponseCode = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GatewayInfo message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo} GatewayInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GatewayInfo.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GatewayInfo message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GatewayInfo.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.gatewayResponseCode != null && message.hasOwnProperty("gatewayResponseCode"))
                                    if (!$util.isString(message.gatewayResponseCode))
                                        return "gatewayResponseCode: string expected";
                                if (message.avsResponseCode != null && message.hasOwnProperty("avsResponseCode"))
                                    if (!$util.isString(message.avsResponseCode))
                                        return "avsResponseCode: string expected";
                                if (message.cvvResponseCode != null && message.hasOwnProperty("cvvResponseCode"))
                                    if (!$util.isString(message.cvvResponseCode))
                                        return "cvvResponseCode: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a GatewayInfo message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo} GatewayInfo
                             */
                            GatewayInfo.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.gatewayResponseCode != null)
                                    message.gatewayResponseCode = String(object.gatewayResponseCode);
                                if (object.avsResponseCode != null)
                                    message.avsResponseCode = String(object.avsResponseCode);
                                if (object.cvvResponseCode != null)
                                    message.cvvResponseCode = String(object.cvvResponseCode);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GatewayInfo message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo} message GatewayInfo
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GatewayInfo.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.gatewayResponseCode = "";
                                    object.avsResponseCode = "";
                                    object.cvvResponseCode = "";
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.gatewayResponseCode != null && message.hasOwnProperty("gatewayResponseCode"))
                                    object.gatewayResponseCode = message.gatewayResponseCode;
                                if (message.avsResponseCode != null && message.hasOwnProperty("avsResponseCode"))
                                    object.avsResponseCode = message.avsResponseCode;
                                if (message.cvvResponseCode != null && message.hasOwnProperty("cvvResponseCode"))
                                    object.cvvResponseCode = message.cvvResponseCode;
                                return object;
                            };
    
                            /**
                             * Converts this GatewayInfo to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GatewayInfo.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for GatewayInfo
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            GatewayInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo";
                            };
    
                            return GatewayInfo;
                        })();
    
                        return TransactionData;
                    })();
    
                    v1beta1.TokenProperties = (function() {
    
                        /**
                         * Properties of a TokenProperties.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface ITokenProperties
                         * @property {boolean|null} [valid] TokenProperties valid
                         * @property {google.cloud.recaptchaenterprise.v1beta1.TokenProperties.InvalidReason|null} [invalidReason] TokenProperties invalidReason
                         * @property {google.protobuf.ITimestamp|null} [createTime] TokenProperties createTime
                         * @property {string|null} [hostname] TokenProperties hostname
                         * @property {string|null} [action] TokenProperties action
                         */
    
                        /**
                         * Constructs a new TokenProperties.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents a TokenProperties.
                         * @implements ITokenProperties
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITokenProperties=} [properties] Properties to set
                         */
                        function TokenProperties(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TokenProperties valid.
                         * @member {boolean} valid
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.valid = false;
    
                        /**
                         * TokenProperties invalidReason.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.TokenProperties.InvalidReason} invalidReason
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.invalidReason = 0;
    
                        /**
                         * TokenProperties createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.createTime = null;
    
                        /**
                         * TokenProperties hostname.
                         * @member {string} hostname
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.hostname = "";
    
                        /**
                         * TokenProperties action.
                         * @member {string} action
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @instance
                         */
                        TokenProperties.prototype.action = "";
    
                        /**
                         * Creates a new TokenProperties instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITokenProperties=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TokenProperties} TokenProperties instance
                         */
                        TokenProperties.create = function create(properties) {
                            return new TokenProperties(properties);
                        };
    
                        /**
                         * Encodes the specified TokenProperties message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TokenProperties.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITokenProperties} message TokenProperties message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TokenProperties.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.valid != null && Object.hasOwnProperty.call(message, "valid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.valid);
                            if (message.invalidReason != null && Object.hasOwnProperty.call(message, "invalidReason"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.invalidReason);
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.hostname != null && Object.hasOwnProperty.call(message, "hostname"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.hostname);
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.action);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TokenProperties message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.TokenProperties.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.ITokenProperties} message TokenProperties message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TokenProperties.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TokenProperties message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TokenProperties} TokenProperties
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TokenProperties.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.valid = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.invalidReason = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.hostname = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.action = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TokenProperties message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TokenProperties} TokenProperties
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TokenProperties.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TokenProperties message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TokenProperties.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.valid != null && message.hasOwnProperty("valid"))
                                if (typeof message.valid !== "boolean")
                                    return "valid: boolean expected";
                            if (message.invalidReason != null && message.hasOwnProperty("invalidReason"))
                                switch (message.invalidReason) {
                                default:
                                    return "invalidReason: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                    break;
                                }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.hostname != null && message.hasOwnProperty("hostname"))
                                if (!$util.isString(message.hostname))
                                    return "hostname: string expected";
                            if (message.action != null && message.hasOwnProperty("action"))
                                if (!$util.isString(message.action))
                                    return "action: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TokenProperties message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.TokenProperties} TokenProperties
                         */
                        TokenProperties.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties();
                            if (object.valid != null)
                                message.valid = Boolean(object.valid);
                            switch (object.invalidReason) {
                            default:
                                if (typeof object.invalidReason === "number") {
                                    message.invalidReason = object.invalidReason;
                                    break;
                                }
                                break;
                            case "INVALID_REASON_UNSPECIFIED":
                            case 0:
                                message.invalidReason = 0;
                                break;
                            case "UNKNOWN_INVALID_REASON":
                            case 1:
                                message.invalidReason = 1;
                                break;
                            case "MALFORMED":
                            case 2:
                                message.invalidReason = 2;
                                break;
                            case "EXPIRED":
                            case 3:
                                message.invalidReason = 3;
                                break;
                            case "DUPE":
                            case 4:
                                message.invalidReason = 4;
                                break;
                            case "SITE_MISMATCH":
                            case 5:
                                message.invalidReason = 5;
                                break;
                            case "MISSING":
                            case 6:
                                message.invalidReason = 6;
                                break;
                            case "BROWSER_ERROR":
                            case 7:
                                message.invalidReason = 7;
                                break;
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.TokenProperties.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.hostname != null)
                                message.hostname = String(object.hostname);
                            if (object.action != null)
                                message.action = String(object.action);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TokenProperties message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.TokenProperties} message TokenProperties
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TokenProperties.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.valid = false;
                                object.invalidReason = options.enums === String ? "INVALID_REASON_UNSPECIFIED" : 0;
                                object.createTime = null;
                                object.hostname = "";
                                object.action = "";
                            }
                            if (message.valid != null && message.hasOwnProperty("valid"))
                                object.valid = message.valid;
                            if (message.invalidReason != null && message.hasOwnProperty("invalidReason"))
                                object.invalidReason = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties.InvalidReason[message.invalidReason] === undefined ? message.invalidReason : $root.google.cloud.recaptchaenterprise.v1beta1.TokenProperties.InvalidReason[message.invalidReason] : message.invalidReason;
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.hostname != null && message.hasOwnProperty("hostname"))
                                object.hostname = message.hostname;
                            if (message.action != null && message.hasOwnProperty("action"))
                                object.action = message.action;
                            return object;
                        };
    
                        /**
                         * Converts this TokenProperties to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TokenProperties.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TokenProperties
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.TokenProperties
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TokenProperties.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.TokenProperties";
                        };
    
                        /**
                         * InvalidReason enum.
                         * @name google.cloud.recaptchaenterprise.v1beta1.TokenProperties.InvalidReason
                         * @enum {number}
                         * @property {number} INVALID_REASON_UNSPECIFIED=0 INVALID_REASON_UNSPECIFIED value
                         * @property {number} UNKNOWN_INVALID_REASON=1 UNKNOWN_INVALID_REASON value
                         * @property {number} MALFORMED=2 MALFORMED value
                         * @property {number} EXPIRED=3 EXPIRED value
                         * @property {number} DUPE=4 DUPE value
                         * @property {number} SITE_MISMATCH=5 SITE_MISMATCH value
                         * @property {number} MISSING=6 MISSING value
                         * @property {number} BROWSER_ERROR=7 BROWSER_ERROR value
                         */
                        TokenProperties.InvalidReason = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "INVALID_REASON_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "UNKNOWN_INVALID_REASON"] = 1;
                            values[valuesById[2] = "MALFORMED"] = 2;
                            values[valuesById[3] = "EXPIRED"] = 3;
                            values[valuesById[4] = "DUPE"] = 4;
                            values[valuesById[5] = "SITE_MISMATCH"] = 5;
                            values[valuesById[6] = "MISSING"] = 6;
                            values[valuesById[7] = "BROWSER_ERROR"] = 7;
                            return values;
                        })();
    
                        return TokenProperties;
                    })();
    
                    v1beta1.FraudPreventionAssessment = (function() {
    
                        /**
                         * Properties of a FraudPreventionAssessment.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface IFraudPreventionAssessment
                         * @property {number|null} [transactionRisk] FraudPreventionAssessment transactionRisk
                         * @property {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.IStolenInstrumentVerdict|null} [stolenInstrumentVerdict] FraudPreventionAssessment stolenInstrumentVerdict
                         * @property {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.ICardTestingVerdict|null} [cardTestingVerdict] FraudPreventionAssessment cardTestingVerdict
                         */
    
                        /**
                         * Constructs a new FraudPreventionAssessment.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents a FraudPreventionAssessment.
                         * @implements IFraudPreventionAssessment
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IFraudPreventionAssessment=} [properties] Properties to set
                         */
                        function FraudPreventionAssessment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FraudPreventionAssessment transactionRisk.
                         * @member {number} transactionRisk
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @instance
                         */
                        FraudPreventionAssessment.prototype.transactionRisk = 0;
    
                        /**
                         * FraudPreventionAssessment stolenInstrumentVerdict.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.IStolenInstrumentVerdict|null|undefined} stolenInstrumentVerdict
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @instance
                         */
                        FraudPreventionAssessment.prototype.stolenInstrumentVerdict = null;
    
                        /**
                         * FraudPreventionAssessment cardTestingVerdict.
                         * @member {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.ICardTestingVerdict|null|undefined} cardTestingVerdict
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @instance
                         */
                        FraudPreventionAssessment.prototype.cardTestingVerdict = null;
    
                        /**
                         * Creates a new FraudPreventionAssessment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IFraudPreventionAssessment=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment} FraudPreventionAssessment instance
                         */
                        FraudPreventionAssessment.create = function create(properties) {
                            return new FraudPreventionAssessment(properties);
                        };
    
                        /**
                         * Encodes the specified FraudPreventionAssessment message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IFraudPreventionAssessment} message FraudPreventionAssessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FraudPreventionAssessment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.transactionRisk != null && Object.hasOwnProperty.call(message, "transactionRisk"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.transactionRisk);
                            if (message.stolenInstrumentVerdict != null && Object.hasOwnProperty.call(message, "stolenInstrumentVerdict"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict.encode(message.stolenInstrumentVerdict, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.cardTestingVerdict != null && Object.hasOwnProperty.call(message, "cardTestingVerdict"))
                                $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict.encode(message.cardTestingVerdict, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FraudPreventionAssessment message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IFraudPreventionAssessment} message FraudPreventionAssessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FraudPreventionAssessment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FraudPreventionAssessment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment} FraudPreventionAssessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FraudPreventionAssessment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.transactionRisk = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.stolenInstrumentVerdict = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.cardTestingVerdict = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FraudPreventionAssessment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment} FraudPreventionAssessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FraudPreventionAssessment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FraudPreventionAssessment message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FraudPreventionAssessment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.transactionRisk != null && message.hasOwnProperty("transactionRisk"))
                                if (typeof message.transactionRisk !== "number")
                                    return "transactionRisk: number expected";
                            if (message.stolenInstrumentVerdict != null && message.hasOwnProperty("stolenInstrumentVerdict")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict.verify(message.stolenInstrumentVerdict);
                                if (error)
                                    return "stolenInstrumentVerdict." + error;
                            }
                            if (message.cardTestingVerdict != null && message.hasOwnProperty("cardTestingVerdict")) {
                                var error = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict.verify(message.cardTestingVerdict);
                                if (error)
                                    return "cardTestingVerdict." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FraudPreventionAssessment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment} FraudPreventionAssessment
                         */
                        FraudPreventionAssessment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment();
                            if (object.transactionRisk != null)
                                message.transactionRisk = Number(object.transactionRisk);
                            if (object.stolenInstrumentVerdict != null) {
                                if (typeof object.stolenInstrumentVerdict !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.stolenInstrumentVerdict: object expected");
                                message.stolenInstrumentVerdict = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict.fromObject(object.stolenInstrumentVerdict);
                            }
                            if (object.cardTestingVerdict != null) {
                                if (typeof object.cardTestingVerdict !== "object")
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.cardTestingVerdict: object expected");
                                message.cardTestingVerdict = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict.fromObject(object.cardTestingVerdict);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FraudPreventionAssessment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment} message FraudPreventionAssessment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FraudPreventionAssessment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.transactionRisk = 0;
                                object.stolenInstrumentVerdict = null;
                                object.cardTestingVerdict = null;
                            }
                            if (message.transactionRisk != null && message.hasOwnProperty("transactionRisk"))
                                object.transactionRisk = options.json && !isFinite(message.transactionRisk) ? String(message.transactionRisk) : message.transactionRisk;
                            if (message.stolenInstrumentVerdict != null && message.hasOwnProperty("stolenInstrumentVerdict"))
                                object.stolenInstrumentVerdict = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict.toObject(message.stolenInstrumentVerdict, options);
                            if (message.cardTestingVerdict != null && message.hasOwnProperty("cardTestingVerdict"))
                                object.cardTestingVerdict = $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict.toObject(message.cardTestingVerdict, options);
                            return object;
                        };
    
                        /**
                         * Converts this FraudPreventionAssessment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FraudPreventionAssessment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FraudPreventionAssessment
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FraudPreventionAssessment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment";
                        };
    
                        FraudPreventionAssessment.StolenInstrumentVerdict = (function() {
    
                            /**
                             * Properties of a StolenInstrumentVerdict.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                             * @interface IStolenInstrumentVerdict
                             * @property {number|null} [risk] StolenInstrumentVerdict risk
                             */
    
                            /**
                             * Constructs a new StolenInstrumentVerdict.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                             * @classdesc Represents a StolenInstrumentVerdict.
                             * @implements IStolenInstrumentVerdict
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.IStolenInstrumentVerdict=} [properties] Properties to set
                             */
                            function StolenInstrumentVerdict(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * StolenInstrumentVerdict risk.
                             * @member {number} risk
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @instance
                             */
                            StolenInstrumentVerdict.prototype.risk = 0;
    
                            /**
                             * Creates a new StolenInstrumentVerdict instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.IStolenInstrumentVerdict=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict} StolenInstrumentVerdict instance
                             */
                            StolenInstrumentVerdict.create = function create(properties) {
                                return new StolenInstrumentVerdict(properties);
                            };
    
                            /**
                             * Encodes the specified StolenInstrumentVerdict message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.IStolenInstrumentVerdict} message StolenInstrumentVerdict message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            StolenInstrumentVerdict.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.risk != null && Object.hasOwnProperty.call(message, "risk"))
                                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.risk);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified StolenInstrumentVerdict message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.IStolenInstrumentVerdict} message StolenInstrumentVerdict message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            StolenInstrumentVerdict.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a StolenInstrumentVerdict message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict} StolenInstrumentVerdict
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            StolenInstrumentVerdict.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.risk = reader.float();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a StolenInstrumentVerdict message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict} StolenInstrumentVerdict
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            StolenInstrumentVerdict.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a StolenInstrumentVerdict message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            StolenInstrumentVerdict.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.risk != null && message.hasOwnProperty("risk"))
                                    if (typeof message.risk !== "number")
                                        return "risk: number expected";
                                return null;
                            };
    
                            /**
                             * Creates a StolenInstrumentVerdict message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict} StolenInstrumentVerdict
                             */
                            StolenInstrumentVerdict.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict();
                                if (object.risk != null)
                                    message.risk = Number(object.risk);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a StolenInstrumentVerdict message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict} message StolenInstrumentVerdict
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            StolenInstrumentVerdict.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.risk = 0;
                                if (message.risk != null && message.hasOwnProperty("risk"))
                                    object.risk = options.json && !isFinite(message.risk) ? String(message.risk) : message.risk;
                                return object;
                            };
    
                            /**
                             * Converts this StolenInstrumentVerdict to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            StolenInstrumentVerdict.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for StolenInstrumentVerdict
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            StolenInstrumentVerdict.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict";
                            };
    
                            return StolenInstrumentVerdict;
                        })();
    
                        FraudPreventionAssessment.CardTestingVerdict = (function() {
    
                            /**
                             * Properties of a CardTestingVerdict.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                             * @interface ICardTestingVerdict
                             * @property {number|null} [risk] CardTestingVerdict risk
                             */
    
                            /**
                             * Constructs a new CardTestingVerdict.
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
                             * @classdesc Represents a CardTestingVerdict.
                             * @implements ICardTestingVerdict
                             * @constructor
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.ICardTestingVerdict=} [properties] Properties to set
                             */
                            function CardTestingVerdict(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CardTestingVerdict risk.
                             * @member {number} risk
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @instance
                             */
                            CardTestingVerdict.prototype.risk = 0;
    
                            /**
                             * Creates a new CardTestingVerdict instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.ICardTestingVerdict=} [properties] Properties to set
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict} CardTestingVerdict instance
                             */
                            CardTestingVerdict.create = function create(properties) {
                                return new CardTestingVerdict(properties);
                            };
    
                            /**
                             * Encodes the specified CardTestingVerdict message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.ICardTestingVerdict} message CardTestingVerdict message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardTestingVerdict.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.risk != null && Object.hasOwnProperty.call(message, "risk"))
                                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.risk);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CardTestingVerdict message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.ICardTestingVerdict} message CardTestingVerdict message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardTestingVerdict.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CardTestingVerdict message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict} CardTestingVerdict
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardTestingVerdict.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.risk = reader.float();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CardTestingVerdict message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict} CardTestingVerdict
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardTestingVerdict.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CardTestingVerdict message.
                             * @function verify
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CardTestingVerdict.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.risk != null && message.hasOwnProperty("risk"))
                                    if (typeof message.risk !== "number")
                                        return "risk: number expected";
                                return null;
                            };
    
                            /**
                             * Creates a CardTestingVerdict message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict} CardTestingVerdict
                             */
                            CardTestingVerdict.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict)
                                    return object;
                                var message = new $root.google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict();
                                if (object.risk != null)
                                    message.risk = Number(object.risk);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CardTestingVerdict message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict} message CardTestingVerdict
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CardTestingVerdict.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.risk = 0;
                                if (message.risk != null && message.hasOwnProperty("risk"))
                                    object.risk = options.json && !isFinite(message.risk) ? String(message.risk) : message.risk;
                                return object;
                            };
    
                            /**
                             * Converts this CardTestingVerdict to JSON.
                             * @function toJSON
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CardTestingVerdict.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for CardTestingVerdict
                             * @function getTypeUrl
                             * @memberof google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            CardTestingVerdict.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict";
                            };
    
                            return CardTestingVerdict;
                        })();
    
                        return FraudPreventionAssessment;
                    })();
    
                    v1beta1.AccountDefenderAssessment = (function() {
    
                        /**
                         * Properties of an AccountDefenderAssessment.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @interface IAccountDefenderAssessment
                         * @property {Array.<google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.AccountDefenderLabel>|null} [labels] AccountDefenderAssessment labels
                         */
    
                        /**
                         * Constructs a new AccountDefenderAssessment.
                         * @memberof google.cloud.recaptchaenterprise.v1beta1
                         * @classdesc Represents an AccountDefenderAssessment.
                         * @implements IAccountDefenderAssessment
                         * @constructor
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAccountDefenderAssessment=} [properties] Properties to set
                         */
                        function AccountDefenderAssessment(properties) {
                            this.labels = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AccountDefenderAssessment labels.
                         * @member {Array.<google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.AccountDefenderLabel>} labels
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @instance
                         */
                        AccountDefenderAssessment.prototype.labels = $util.emptyArray;
    
                        /**
                         * Creates a new AccountDefenderAssessment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAccountDefenderAssessment=} [properties] Properties to set
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment} AccountDefenderAssessment instance
                         */
                        AccountDefenderAssessment.create = function create(properties) {
                            return new AccountDefenderAssessment(properties);
                        };
    
                        /**
                         * Encodes the specified AccountDefenderAssessment message. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAccountDefenderAssessment} message AccountDefenderAssessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountDefenderAssessment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.labels != null && message.labels.length) {
                                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                for (var i = 0; i < message.labels.length; ++i)
                                    writer.int32(message.labels[i]);
                                writer.ldelim();
                            }
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AccountDefenderAssessment message, length delimited. Does not implicitly {@link google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.IAccountDefenderAssessment} message AccountDefenderAssessment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountDefenderAssessment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AccountDefenderAssessment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment} AccountDefenderAssessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountDefenderAssessment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.labels && message.labels.length))
                                            message.labels = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.labels.push(reader.int32());
                                        } else
                                            message.labels.push(reader.int32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AccountDefenderAssessment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment} AccountDefenderAssessment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountDefenderAssessment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AccountDefenderAssessment message.
                         * @function verify
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AccountDefenderAssessment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!Array.isArray(message.labels))
                                    return "labels: array expected";
                                for (var i = 0; i < message.labels.length; ++i)
                                    switch (message.labels[i]) {
                                    default:
                                        return "labels: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AccountDefenderAssessment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment} AccountDefenderAssessment
                         */
                        AccountDefenderAssessment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment)
                                return object;
                            var message = new $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment();
                            if (object.labels) {
                                if (!Array.isArray(object.labels))
                                    throw TypeError(".google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.labels: array expected");
                                message.labels = [];
                                for (var i = 0; i < object.labels.length; ++i)
                                    switch (object.labels[i]) {
                                    default:
                                        if (typeof object.labels[i] === "number") {
                                            message.labels[i] = object.labels[i];
                                            break;
                                        }
                                    case "ACCOUNT_DEFENDER_LABEL_UNSPECIFIED":
                                    case 0:
                                        message.labels[i] = 0;
                                        break;
                                    case "PROFILE_MATCH":
                                    case 1:
                                        message.labels[i] = 1;
                                        break;
                                    case "SUSPICIOUS_LOGIN_ACTIVITY":
                                    case 2:
                                        message.labels[i] = 2;
                                        break;
                                    case "SUSPICIOUS_ACCOUNT_CREATION":
                                    case 3:
                                        message.labels[i] = 3;
                                        break;
                                    case "RELATED_ACCOUNTS_NUMBER_HIGH":
                                    case 4:
                                        message.labels[i] = 4;
                                        break;
                                    }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AccountDefenderAssessment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment} message AccountDefenderAssessment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AccountDefenderAssessment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.labels = [];
                            if (message.labels && message.labels.length) {
                                object.labels = [];
                                for (var j = 0; j < message.labels.length; ++j)
                                    object.labels[j] = options.enums === String ? $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.AccountDefenderLabel[message.labels[j]] === undefined ? message.labels[j] : $root.google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.AccountDefenderLabel[message.labels[j]] : message.labels[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AccountDefenderAssessment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AccountDefenderAssessment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AccountDefenderAssessment
                         * @function getTypeUrl
                         * @memberof google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AccountDefenderAssessment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment";
                        };
    
                        /**
                         * AccountDefenderLabel enum.
                         * @name google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.AccountDefenderLabel
                         * @enum {number}
                         * @property {number} ACCOUNT_DEFENDER_LABEL_UNSPECIFIED=0 ACCOUNT_DEFENDER_LABEL_UNSPECIFIED value
                         * @property {number} PROFILE_MATCH=1 PROFILE_MATCH value
                         * @property {number} SUSPICIOUS_LOGIN_ACTIVITY=2 SUSPICIOUS_LOGIN_ACTIVITY value
                         * @property {number} SUSPICIOUS_ACCOUNT_CREATION=3 SUSPICIOUS_ACCOUNT_CREATION value
                         * @property {number} RELATED_ACCOUNTS_NUMBER_HIGH=4 RELATED_ACCOUNTS_NUMBER_HIGH value
                         */
                        AccountDefenderAssessment.AccountDefenderLabel = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ACCOUNT_DEFENDER_LABEL_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PROFILE_MATCH"] = 1;
                            values[valuesById[2] = "SUSPICIOUS_LOGIN_ACTIVITY"] = 2;
                            values[valuesById[3] = "SUSPICIOUS_ACCOUNT_CREATION"] = 3;
                            values[valuesById[4] = "RELATED_ACCOUNTS_NUMBER_HIGH"] = 4;
                            return values;
                        })();
    
                        return AccountDefenderAssessment;
                    })();
    
                    return v1beta1;
                })();
    
                return recaptchaenterprise;
            })();
    
            return cloud;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            api.CommonLanguageSettings = (function() {
    
                /**
                 * Properties of a CommonLanguageSettings.
                 * @memberof google.api
                 * @interface ICommonLanguageSettings
                 * @property {string|null} [referenceDocsUri] CommonLanguageSettings referenceDocsUri
                 * @property {Array.<google.api.ClientLibraryDestination>|null} [destinations] CommonLanguageSettings destinations
                 */
    
                /**
                 * Constructs a new CommonLanguageSettings.
                 * @memberof google.api
                 * @classdesc Represents a CommonLanguageSettings.
                 * @implements ICommonLanguageSettings
                 * @constructor
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 */
                function CommonLanguageSettings(properties) {
                    this.destinations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CommonLanguageSettings referenceDocsUri.
                 * @member {string} referenceDocsUri
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.referenceDocsUri = "";
    
                /**
                 * CommonLanguageSettings destinations.
                 * @member {Array.<google.api.ClientLibraryDestination>} destinations
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.destinations = $util.emptyArray;
    
                /**
                 * Creates a new CommonLanguageSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings instance
                 */
                CommonLanguageSettings.create = function create(properties) {
                    return new CommonLanguageSettings(properties);
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.referenceDocsUri != null && Object.hasOwnProperty.call(message, "referenceDocsUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.referenceDocsUri);
                    if (message.destinations != null && message.destinations.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.destinations.length; ++i)
                            writer.int32(message.destinations[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message, length delimited. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CommonLanguageSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.referenceDocsUri = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.destinations && message.destinations.length))
                                    message.destinations = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.destinations.push(reader.int32());
                                } else
                                    message.destinations.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CommonLanguageSettings message.
                 * @function verify
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonLanguageSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        if (!$util.isString(message.referenceDocsUri))
                            return "referenceDocsUri: string expected";
                    if (message.destinations != null && message.hasOwnProperty("destinations")) {
                        if (!Array.isArray(message.destinations))
                            return "destinations: array expected";
                        for (var i = 0; i < message.destinations.length; ++i)
                            switch (message.destinations[i]) {
                            default:
                                return "destinations: enum value[] expected";
                            case 0:
                            case 10:
                            case 20:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a CommonLanguageSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 */
                CommonLanguageSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CommonLanguageSettings)
                        return object;
                    var message = new $root.google.api.CommonLanguageSettings();
                    if (object.referenceDocsUri != null)
                        message.referenceDocsUri = String(object.referenceDocsUri);
                    if (object.destinations) {
                        if (!Array.isArray(object.destinations))
                            throw TypeError(".google.api.CommonLanguageSettings.destinations: array expected");
                        message.destinations = [];
                        for (var i = 0; i < object.destinations.length; ++i)
                            switch (object.destinations[i]) {
                            default:
                                if (typeof object.destinations[i] === "number") {
                                    message.destinations[i] = object.destinations[i];
                                    break;
                                }
                            case "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":
                            case 0:
                                message.destinations[i] = 0;
                                break;
                            case "GITHUB":
                            case 10:
                                message.destinations[i] = 10;
                                break;
                            case "PACKAGE_MANAGER":
                            case 20:
                                message.destinations[i] = 20;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CommonLanguageSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.CommonLanguageSettings} message CommonLanguageSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonLanguageSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.destinations = [];
                    if (options.defaults)
                        object.referenceDocsUri = "";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        object.referenceDocsUri = message.referenceDocsUri;
                    if (message.destinations && message.destinations.length) {
                        object.destinations = [];
                        for (var j = 0; j < message.destinations.length; ++j)
                            object.destinations[j] = options.enums === String ? $root.google.api.ClientLibraryDestination[message.destinations[j]] === undefined ? message.destinations[j] : $root.google.api.ClientLibraryDestination[message.destinations[j]] : message.destinations[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this CommonLanguageSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonLanguageSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CommonLanguageSettings
                 * @function getTypeUrl
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CommonLanguageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CommonLanguageSettings";
                };
    
                return CommonLanguageSettings;
            })();
    
            api.ClientLibrarySettings = (function() {
    
                /**
                 * Properties of a ClientLibrarySettings.
                 * @memberof google.api
                 * @interface IClientLibrarySettings
                 * @property {string|null} [version] ClientLibrarySettings version
                 * @property {google.api.LaunchStage|null} [launchStage] ClientLibrarySettings launchStage
                 * @property {boolean|null} [restNumericEnums] ClientLibrarySettings restNumericEnums
                 * @property {google.api.IJavaSettings|null} [javaSettings] ClientLibrarySettings javaSettings
                 * @property {google.api.ICppSettings|null} [cppSettings] ClientLibrarySettings cppSettings
                 * @property {google.api.IPhpSettings|null} [phpSettings] ClientLibrarySettings phpSettings
                 * @property {google.api.IPythonSettings|null} [pythonSettings] ClientLibrarySettings pythonSettings
                 * @property {google.api.INodeSettings|null} [nodeSettings] ClientLibrarySettings nodeSettings
                 * @property {google.api.IDotnetSettings|null} [dotnetSettings] ClientLibrarySettings dotnetSettings
                 * @property {google.api.IRubySettings|null} [rubySettings] ClientLibrarySettings rubySettings
                 * @property {google.api.IGoSettings|null} [goSettings] ClientLibrarySettings goSettings
                 */
    
                /**
                 * Constructs a new ClientLibrarySettings.
                 * @memberof google.api
                 * @classdesc Represents a ClientLibrarySettings.
                 * @implements IClientLibrarySettings
                 * @constructor
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 */
                function ClientLibrarySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ClientLibrarySettings version.
                 * @member {string} version
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.version = "";
    
                /**
                 * ClientLibrarySettings launchStage.
                 * @member {google.api.LaunchStage} launchStage
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.launchStage = 0;
    
                /**
                 * ClientLibrarySettings restNumericEnums.
                 * @member {boolean} restNumericEnums
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.restNumericEnums = false;
    
                /**
                 * ClientLibrarySettings javaSettings.
                 * @member {google.api.IJavaSettings|null|undefined} javaSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.javaSettings = null;
    
                /**
                 * ClientLibrarySettings cppSettings.
                 * @member {google.api.ICppSettings|null|undefined} cppSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.cppSettings = null;
    
                /**
                 * ClientLibrarySettings phpSettings.
                 * @member {google.api.IPhpSettings|null|undefined} phpSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.phpSettings = null;
    
                /**
                 * ClientLibrarySettings pythonSettings.
                 * @member {google.api.IPythonSettings|null|undefined} pythonSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.pythonSettings = null;
    
                /**
                 * ClientLibrarySettings nodeSettings.
                 * @member {google.api.INodeSettings|null|undefined} nodeSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.nodeSettings = null;
    
                /**
                 * ClientLibrarySettings dotnetSettings.
                 * @member {google.api.IDotnetSettings|null|undefined} dotnetSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.dotnetSettings = null;
    
                /**
                 * ClientLibrarySettings rubySettings.
                 * @member {google.api.IRubySettings|null|undefined} rubySettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.rubySettings = null;
    
                /**
                 * ClientLibrarySettings goSettings.
                 * @member {google.api.IGoSettings|null|undefined} goSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.goSettings = null;
    
                /**
                 * Creates a new ClientLibrarySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings instance
                 */
                ClientLibrarySettings.create = function create(properties) {
                    return new ClientLibrarySettings(properties);
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                    if (message.launchStage != null && Object.hasOwnProperty.call(message, "launchStage"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.launchStage);
                    if (message.restNumericEnums != null && Object.hasOwnProperty.call(message, "restNumericEnums"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.restNumericEnums);
                    if (message.javaSettings != null && Object.hasOwnProperty.call(message, "javaSettings"))
                        $root.google.api.JavaSettings.encode(message.javaSettings, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                    if (message.cppSettings != null && Object.hasOwnProperty.call(message, "cppSettings"))
                        $root.google.api.CppSettings.encode(message.cppSettings, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                    if (message.phpSettings != null && Object.hasOwnProperty.call(message, "phpSettings"))
                        $root.google.api.PhpSettings.encode(message.phpSettings, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                    if (message.pythonSettings != null && Object.hasOwnProperty.call(message, "pythonSettings"))
                        $root.google.api.PythonSettings.encode(message.pythonSettings, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                    if (message.nodeSettings != null && Object.hasOwnProperty.call(message, "nodeSettings"))
                        $root.google.api.NodeSettings.encode(message.nodeSettings, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                    if (message.dotnetSettings != null && Object.hasOwnProperty.call(message, "dotnetSettings"))
                        $root.google.api.DotnetSettings.encode(message.dotnetSettings, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                    if (message.rubySettings != null && Object.hasOwnProperty.call(message, "rubySettings"))
                        $root.google.api.RubySettings.encode(message.rubySettings, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                    if (message.goSettings != null && Object.hasOwnProperty.call(message, "goSettings"))
                        $root.google.api.GoSettings.encode(message.goSettings, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message, length delimited. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ClientLibrarySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.version = reader.string();
                                break;
                            }
                        case 2: {
                                message.launchStage = reader.int32();
                                break;
                            }
                        case 3: {
                                message.restNumericEnums = reader.bool();
                                break;
                            }
                        case 21: {
                                message.javaSettings = $root.google.api.JavaSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 22: {
                                message.cppSettings = $root.google.api.CppSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 23: {
                                message.phpSettings = $root.google.api.PhpSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 24: {
                                message.pythonSettings = $root.google.api.PythonSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 25: {
                                message.nodeSettings = $root.google.api.NodeSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 26: {
                                message.dotnetSettings = $root.google.api.DotnetSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 27: {
                                message.rubySettings = $root.google.api.RubySettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 28: {
                                message.goSettings = $root.google.api.GoSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ClientLibrarySettings message.
                 * @function verify
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ClientLibrarySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        switch (message.launchStage) {
                        default:
                            return "launchStage: enum value expected";
                        case 0:
                        case 6:
                        case 7:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        if (typeof message.restNumericEnums !== "boolean")
                            return "restNumericEnums: boolean expected";
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings")) {
                        var error = $root.google.api.JavaSettings.verify(message.javaSettings);
                        if (error)
                            return "javaSettings." + error;
                    }
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings")) {
                        var error = $root.google.api.CppSettings.verify(message.cppSettings);
                        if (error)
                            return "cppSettings." + error;
                    }
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings")) {
                        var error = $root.google.api.PhpSettings.verify(message.phpSettings);
                        if (error)
                            return "phpSettings." + error;
                    }
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings")) {
                        var error = $root.google.api.PythonSettings.verify(message.pythonSettings);
                        if (error)
                            return "pythonSettings." + error;
                    }
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings")) {
                        var error = $root.google.api.NodeSettings.verify(message.nodeSettings);
                        if (error)
                            return "nodeSettings." + error;
                    }
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings")) {
                        var error = $root.google.api.DotnetSettings.verify(message.dotnetSettings);
                        if (error)
                            return "dotnetSettings." + error;
                    }
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings")) {
                        var error = $root.google.api.RubySettings.verify(message.rubySettings);
                        if (error)
                            return "rubySettings." + error;
                    }
                    if (message.goSettings != null && message.hasOwnProperty("goSettings")) {
                        var error = $root.google.api.GoSettings.verify(message.goSettings);
                        if (error)
                            return "goSettings." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ClientLibrarySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 */
                ClientLibrarySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ClientLibrarySettings)
                        return object;
                    var message = new $root.google.api.ClientLibrarySettings();
                    if (object.version != null)
                        message.version = String(object.version);
                    switch (object.launchStage) {
                    default:
                        if (typeof object.launchStage === "number") {
                            message.launchStage = object.launchStage;
                            break;
                        }
                        break;
                    case "LAUNCH_STAGE_UNSPECIFIED":
                    case 0:
                        message.launchStage = 0;
                        break;
                    case "UNIMPLEMENTED":
                    case 6:
                        message.launchStage = 6;
                        break;
                    case "PRELAUNCH":
                    case 7:
                        message.launchStage = 7;
                        break;
                    case "EARLY_ACCESS":
                    case 1:
                        message.launchStage = 1;
                        break;
                    case "ALPHA":
                    case 2:
                        message.launchStage = 2;
                        break;
                    case "BETA":
                    case 3:
                        message.launchStage = 3;
                        break;
                    case "GA":
                    case 4:
                        message.launchStage = 4;
                        break;
                    case "DEPRECATED":
                    case 5:
                        message.launchStage = 5;
                        break;
                    }
                    if (object.restNumericEnums != null)
                        message.restNumericEnums = Boolean(object.restNumericEnums);
                    if (object.javaSettings != null) {
                        if (typeof object.javaSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.javaSettings: object expected");
                        message.javaSettings = $root.google.api.JavaSettings.fromObject(object.javaSettings);
                    }
                    if (object.cppSettings != null) {
                        if (typeof object.cppSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.cppSettings: object expected");
                        message.cppSettings = $root.google.api.CppSettings.fromObject(object.cppSettings);
                    }
                    if (object.phpSettings != null) {
                        if (typeof object.phpSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.phpSettings: object expected");
                        message.phpSettings = $root.google.api.PhpSettings.fromObject(object.phpSettings);
                    }
                    if (object.pythonSettings != null) {
                        if (typeof object.pythonSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.pythonSettings: object expected");
                        message.pythonSettings = $root.google.api.PythonSettings.fromObject(object.pythonSettings);
                    }
                    if (object.nodeSettings != null) {
                        if (typeof object.nodeSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.nodeSettings: object expected");
                        message.nodeSettings = $root.google.api.NodeSettings.fromObject(object.nodeSettings);
                    }
                    if (object.dotnetSettings != null) {
                        if (typeof object.dotnetSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.dotnetSettings: object expected");
                        message.dotnetSettings = $root.google.api.DotnetSettings.fromObject(object.dotnetSettings);
                    }
                    if (object.rubySettings != null) {
                        if (typeof object.rubySettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.rubySettings: object expected");
                        message.rubySettings = $root.google.api.RubySettings.fromObject(object.rubySettings);
                    }
                    if (object.goSettings != null) {
                        if (typeof object.goSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.goSettings: object expected");
                        message.goSettings = $root.google.api.GoSettings.fromObject(object.goSettings);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ClientLibrarySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.ClientLibrarySettings} message ClientLibrarySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ClientLibrarySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.version = "";
                        object.launchStage = options.enums === String ? "LAUNCH_STAGE_UNSPECIFIED" : 0;
                        object.restNumericEnums = false;
                        object.javaSettings = null;
                        object.cppSettings = null;
                        object.phpSettings = null;
                        object.pythonSettings = null;
                        object.nodeSettings = null;
                        object.dotnetSettings = null;
                        object.rubySettings = null;
                        object.goSettings = null;
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        object.launchStage = options.enums === String ? $root.google.api.LaunchStage[message.launchStage] === undefined ? message.launchStage : $root.google.api.LaunchStage[message.launchStage] : message.launchStage;
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        object.restNumericEnums = message.restNumericEnums;
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings"))
                        object.javaSettings = $root.google.api.JavaSettings.toObject(message.javaSettings, options);
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings"))
                        object.cppSettings = $root.google.api.CppSettings.toObject(message.cppSettings, options);
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings"))
                        object.phpSettings = $root.google.api.PhpSettings.toObject(message.phpSettings, options);
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings"))
                        object.pythonSettings = $root.google.api.PythonSettings.toObject(message.pythonSettings, options);
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings"))
                        object.nodeSettings = $root.google.api.NodeSettings.toObject(message.nodeSettings, options);
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings"))
                        object.dotnetSettings = $root.google.api.DotnetSettings.toObject(message.dotnetSettings, options);
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings"))
                        object.rubySettings = $root.google.api.RubySettings.toObject(message.rubySettings, options);
                    if (message.goSettings != null && message.hasOwnProperty("goSettings"))
                        object.goSettings = $root.google.api.GoSettings.toObject(message.goSettings, options);
                    return object;
                };
    
                /**
                 * Converts this ClientLibrarySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ClientLibrarySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ClientLibrarySettings
                 * @function getTypeUrl
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ClientLibrarySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ClientLibrarySettings";
                };
    
                return ClientLibrarySettings;
            })();
    
            api.Publishing = (function() {
    
                /**
                 * Properties of a Publishing.
                 * @memberof google.api
                 * @interface IPublishing
                 * @property {Array.<google.api.IMethodSettings>|null} [methodSettings] Publishing methodSettings
                 * @property {string|null} [newIssueUri] Publishing newIssueUri
                 * @property {string|null} [documentationUri] Publishing documentationUri
                 * @property {string|null} [apiShortName] Publishing apiShortName
                 * @property {string|null} [githubLabel] Publishing githubLabel
                 * @property {Array.<string>|null} [codeownerGithubTeams] Publishing codeownerGithubTeams
                 * @property {string|null} [docTagPrefix] Publishing docTagPrefix
                 * @property {google.api.ClientLibraryOrganization|null} [organization] Publishing organization
                 * @property {Array.<google.api.IClientLibrarySettings>|null} [librarySettings] Publishing librarySettings
                 */
    
                /**
                 * Constructs a new Publishing.
                 * @memberof google.api
                 * @classdesc Represents a Publishing.
                 * @implements IPublishing
                 * @constructor
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 */
                function Publishing(properties) {
                    this.methodSettings = [];
                    this.codeownerGithubTeams = [];
                    this.librarySettings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Publishing methodSettings.
                 * @member {Array.<google.api.IMethodSettings>} methodSettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.methodSettings = $util.emptyArray;
    
                /**
                 * Publishing newIssueUri.
                 * @member {string} newIssueUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.newIssueUri = "";
    
                /**
                 * Publishing documentationUri.
                 * @member {string} documentationUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.documentationUri = "";
    
                /**
                 * Publishing apiShortName.
                 * @member {string} apiShortName
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.apiShortName = "";
    
                /**
                 * Publishing githubLabel.
                 * @member {string} githubLabel
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.githubLabel = "";
    
                /**
                 * Publishing codeownerGithubTeams.
                 * @member {Array.<string>} codeownerGithubTeams
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.codeownerGithubTeams = $util.emptyArray;
    
                /**
                 * Publishing docTagPrefix.
                 * @member {string} docTagPrefix
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.docTagPrefix = "";
    
                /**
                 * Publishing organization.
                 * @member {google.api.ClientLibraryOrganization} organization
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.organization = 0;
    
                /**
                 * Publishing librarySettings.
                 * @member {Array.<google.api.IClientLibrarySettings>} librarySettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.librarySettings = $util.emptyArray;
    
                /**
                 * Creates a new Publishing instance using the specified properties.
                 * @function create
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 * @returns {google.api.Publishing} Publishing instance
                 */
                Publishing.create = function create(properties) {
                    return new Publishing(properties);
                };
    
                /**
                 * Encodes the specified Publishing message. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.methodSettings != null && message.methodSettings.length)
                        for (var i = 0; i < message.methodSettings.length; ++i)
                            $root.google.api.MethodSettings.encode(message.methodSettings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.newIssueUri != null && Object.hasOwnProperty.call(message, "newIssueUri"))
                        writer.uint32(/* id 101, wireType 2 =*/810).string(message.newIssueUri);
                    if (message.documentationUri != null && Object.hasOwnProperty.call(message, "documentationUri"))
                        writer.uint32(/* id 102, wireType 2 =*/818).string(message.documentationUri);
                    if (message.apiShortName != null && Object.hasOwnProperty.call(message, "apiShortName"))
                        writer.uint32(/* id 103, wireType 2 =*/826).string(message.apiShortName);
                    if (message.githubLabel != null && Object.hasOwnProperty.call(message, "githubLabel"))
                        writer.uint32(/* id 104, wireType 2 =*/834).string(message.githubLabel);
                    if (message.codeownerGithubTeams != null && message.codeownerGithubTeams.length)
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            writer.uint32(/* id 105, wireType 2 =*/842).string(message.codeownerGithubTeams[i]);
                    if (message.docTagPrefix != null && Object.hasOwnProperty.call(message, "docTagPrefix"))
                        writer.uint32(/* id 106, wireType 2 =*/850).string(message.docTagPrefix);
                    if (message.organization != null && Object.hasOwnProperty.call(message, "organization"))
                        writer.uint32(/* id 107, wireType 0 =*/856).int32(message.organization);
                    if (message.librarySettings != null && message.librarySettings.length)
                        for (var i = 0; i < message.librarySettings.length; ++i)
                            $root.google.api.ClientLibrarySettings.encode(message.librarySettings[i], writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Publishing message, length delimited. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Publishing();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.methodSettings && message.methodSettings.length))
                                    message.methodSettings = [];
                                message.methodSettings.push($root.google.api.MethodSettings.decode(reader, reader.uint32()));
                                break;
                            }
                        case 101: {
                                message.newIssueUri = reader.string();
                                break;
                            }
                        case 102: {
                                message.documentationUri = reader.string();
                                break;
                            }
                        case 103: {
                                message.apiShortName = reader.string();
                                break;
                            }
                        case 104: {
                                message.githubLabel = reader.string();
                                break;
                            }
                        case 105: {
                                if (!(message.codeownerGithubTeams && message.codeownerGithubTeams.length))
                                    message.codeownerGithubTeams = [];
                                message.codeownerGithubTeams.push(reader.string());
                                break;
                            }
                        case 106: {
                                message.docTagPrefix = reader.string();
                                break;
                            }
                        case 107: {
                                message.organization = reader.int32();
                                break;
                            }
                        case 109: {
                                if (!(message.librarySettings && message.librarySettings.length))
                                    message.librarySettings = [];
                                message.librarySettings.push($root.google.api.ClientLibrarySettings.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Publishing message.
                 * @function verify
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Publishing.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.methodSettings != null && message.hasOwnProperty("methodSettings")) {
                        if (!Array.isArray(message.methodSettings))
                            return "methodSettings: array expected";
                        for (var i = 0; i < message.methodSettings.length; ++i) {
                            var error = $root.google.api.MethodSettings.verify(message.methodSettings[i]);
                            if (error)
                                return "methodSettings." + error;
                        }
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        if (!$util.isString(message.newIssueUri))
                            return "newIssueUri: string expected";
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        if (!$util.isString(message.documentationUri))
                            return "documentationUri: string expected";
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        if (!$util.isString(message.apiShortName))
                            return "apiShortName: string expected";
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        if (!$util.isString(message.githubLabel))
                            return "githubLabel: string expected";
                    if (message.codeownerGithubTeams != null && message.hasOwnProperty("codeownerGithubTeams")) {
                        if (!Array.isArray(message.codeownerGithubTeams))
                            return "codeownerGithubTeams: array expected";
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            if (!$util.isString(message.codeownerGithubTeams[i]))
                                return "codeownerGithubTeams: string[] expected";
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        if (!$util.isString(message.docTagPrefix))
                            return "docTagPrefix: string expected";
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        switch (message.organization) {
                        default:
                            return "organization: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.librarySettings != null && message.hasOwnProperty("librarySettings")) {
                        if (!Array.isArray(message.librarySettings))
                            return "librarySettings: array expected";
                        for (var i = 0; i < message.librarySettings.length; ++i) {
                            var error = $root.google.api.ClientLibrarySettings.verify(message.librarySettings[i]);
                            if (error)
                                return "librarySettings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Publishing message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Publishing} Publishing
                 */
                Publishing.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Publishing)
                        return object;
                    var message = new $root.google.api.Publishing();
                    if (object.methodSettings) {
                        if (!Array.isArray(object.methodSettings))
                            throw TypeError(".google.api.Publishing.methodSettings: array expected");
                        message.methodSettings = [];
                        for (var i = 0; i < object.methodSettings.length; ++i) {
                            if (typeof object.methodSettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.methodSettings: object expected");
                            message.methodSettings[i] = $root.google.api.MethodSettings.fromObject(object.methodSettings[i]);
                        }
                    }
                    if (object.newIssueUri != null)
                        message.newIssueUri = String(object.newIssueUri);
                    if (object.documentationUri != null)
                        message.documentationUri = String(object.documentationUri);
                    if (object.apiShortName != null)
                        message.apiShortName = String(object.apiShortName);
                    if (object.githubLabel != null)
                        message.githubLabel = String(object.githubLabel);
                    if (object.codeownerGithubTeams) {
                        if (!Array.isArray(object.codeownerGithubTeams))
                            throw TypeError(".google.api.Publishing.codeownerGithubTeams: array expected");
                        message.codeownerGithubTeams = [];
                        for (var i = 0; i < object.codeownerGithubTeams.length; ++i)
                            message.codeownerGithubTeams[i] = String(object.codeownerGithubTeams[i]);
                    }
                    if (object.docTagPrefix != null)
                        message.docTagPrefix = String(object.docTagPrefix);
                    switch (object.organization) {
                    default:
                        if (typeof object.organization === "number") {
                            message.organization = object.organization;
                            break;
                        }
                        break;
                    case "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":
                    case 0:
                        message.organization = 0;
                        break;
                    case "CLOUD":
                    case 1:
                        message.organization = 1;
                        break;
                    case "ADS":
                    case 2:
                        message.organization = 2;
                        break;
                    case "PHOTOS":
                    case 3:
                        message.organization = 3;
                        break;
                    case "STREET_VIEW":
                    case 4:
                        message.organization = 4;
                        break;
                    }
                    if (object.librarySettings) {
                        if (!Array.isArray(object.librarySettings))
                            throw TypeError(".google.api.Publishing.librarySettings: array expected");
                        message.librarySettings = [];
                        for (var i = 0; i < object.librarySettings.length; ++i) {
                            if (typeof object.librarySettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.librarySettings: object expected");
                            message.librarySettings[i] = $root.google.api.ClientLibrarySettings.fromObject(object.librarySettings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Publishing message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.Publishing} message Publishing
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Publishing.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.methodSettings = [];
                        object.codeownerGithubTeams = [];
                        object.librarySettings = [];
                    }
                    if (options.defaults) {
                        object.newIssueUri = "";
                        object.documentationUri = "";
                        object.apiShortName = "";
                        object.githubLabel = "";
                        object.docTagPrefix = "";
                        object.organization = options.enums === String ? "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED" : 0;
                    }
                    if (message.methodSettings && message.methodSettings.length) {
                        object.methodSettings = [];
                        for (var j = 0; j < message.methodSettings.length; ++j)
                            object.methodSettings[j] = $root.google.api.MethodSettings.toObject(message.methodSettings[j], options);
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        object.newIssueUri = message.newIssueUri;
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        object.documentationUri = message.documentationUri;
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        object.apiShortName = message.apiShortName;
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        object.githubLabel = message.githubLabel;
                    if (message.codeownerGithubTeams && message.codeownerGithubTeams.length) {
                        object.codeownerGithubTeams = [];
                        for (var j = 0; j < message.codeownerGithubTeams.length; ++j)
                            object.codeownerGithubTeams[j] = message.codeownerGithubTeams[j];
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        object.docTagPrefix = message.docTagPrefix;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = options.enums === String ? $root.google.api.ClientLibraryOrganization[message.organization] === undefined ? message.organization : $root.google.api.ClientLibraryOrganization[message.organization] : message.organization;
                    if (message.librarySettings && message.librarySettings.length) {
                        object.librarySettings = [];
                        for (var j = 0; j < message.librarySettings.length; ++j)
                            object.librarySettings[j] = $root.google.api.ClientLibrarySettings.toObject(message.librarySettings[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Publishing to JSON.
                 * @function toJSON
                 * @memberof google.api.Publishing
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Publishing.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Publishing
                 * @function getTypeUrl
                 * @memberof google.api.Publishing
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Publishing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Publishing";
                };
    
                return Publishing;
            })();
    
            api.JavaSettings = (function() {
    
                /**
                 * Properties of a JavaSettings.
                 * @memberof google.api
                 * @interface IJavaSettings
                 * @property {string|null} [libraryPackage] JavaSettings libraryPackage
                 * @property {Object.<string,string>|null} [serviceClassNames] JavaSettings serviceClassNames
                 * @property {google.api.ICommonLanguageSettings|null} [common] JavaSettings common
                 */
    
                /**
                 * Constructs a new JavaSettings.
                 * @memberof google.api
                 * @classdesc Represents a JavaSettings.
                 * @implements IJavaSettings
                 * @constructor
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 */
                function JavaSettings(properties) {
                    this.serviceClassNames = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * JavaSettings libraryPackage.
                 * @member {string} libraryPackage
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.libraryPackage = "";
    
                /**
                 * JavaSettings serviceClassNames.
                 * @member {Object.<string,string>} serviceClassNames
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.serviceClassNames = $util.emptyObject;
    
                /**
                 * JavaSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.common = null;
    
                /**
                 * Creates a new JavaSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 * @returns {google.api.JavaSettings} JavaSettings instance
                 */
                JavaSettings.create = function create(properties) {
                    return new JavaSettings(properties);
                };
    
                /**
                 * Encodes the specified JavaSettings message. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.libraryPackage != null && Object.hasOwnProperty.call(message, "libraryPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.libraryPackage);
                    if (message.serviceClassNames != null && Object.hasOwnProperty.call(message, "serviceClassNames"))
                        for (var keys = Object.keys(message.serviceClassNames), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.serviceClassNames[keys[i]]).ldelim();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified JavaSettings message, length delimited. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.JavaSettings(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.libraryPackage = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.serviceClassNames === $util.emptyObject)
                                    message.serviceClassNames = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.serviceClassNames[key] = value;
                                break;
                            }
                        case 3: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a JavaSettings message.
                 * @function verify
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                JavaSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        if (!$util.isString(message.libraryPackage))
                            return "libraryPackage: string expected";
                    if (message.serviceClassNames != null && message.hasOwnProperty("serviceClassNames")) {
                        if (!$util.isObject(message.serviceClassNames))
                            return "serviceClassNames: object expected";
                        var key = Object.keys(message.serviceClassNames);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.serviceClassNames[key[i]]))
                                return "serviceClassNames: string{k:string} expected";
                    }
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a JavaSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.JavaSettings} JavaSettings
                 */
                JavaSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.JavaSettings)
                        return object;
                    var message = new $root.google.api.JavaSettings();
                    if (object.libraryPackage != null)
                        message.libraryPackage = String(object.libraryPackage);
                    if (object.serviceClassNames) {
                        if (typeof object.serviceClassNames !== "object")
                            throw TypeError(".google.api.JavaSettings.serviceClassNames: object expected");
                        message.serviceClassNames = {};
                        for (var keys = Object.keys(object.serviceClassNames), i = 0; i < keys.length; ++i)
                            message.serviceClassNames[keys[i]] = String(object.serviceClassNames[keys[i]]);
                    }
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.JavaSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a JavaSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.JavaSettings} message JavaSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                JavaSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.serviceClassNames = {};
                    if (options.defaults) {
                        object.libraryPackage = "";
                        object.common = null;
                    }
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        object.libraryPackage = message.libraryPackage;
                    var keys2;
                    if (message.serviceClassNames && (keys2 = Object.keys(message.serviceClassNames)).length) {
                        object.serviceClassNames = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.serviceClassNames[keys2[j]] = message.serviceClassNames[keys2[j]];
                    }
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this JavaSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.JavaSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                JavaSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for JavaSettings
                 * @function getTypeUrl
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                JavaSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.JavaSettings";
                };
    
                return JavaSettings;
            })();
    
            api.CppSettings = (function() {
    
                /**
                 * Properties of a CppSettings.
                 * @memberof google.api
                 * @interface ICppSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] CppSettings common
                 */
    
                /**
                 * Constructs a new CppSettings.
                 * @memberof google.api
                 * @classdesc Represents a CppSettings.
                 * @implements ICppSettings
                 * @constructor
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 */
                function CppSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CppSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.CppSettings
                 * @instance
                 */
                CppSettings.prototype.common = null;
    
                /**
                 * Creates a new CppSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 * @returns {google.api.CppSettings} CppSettings instance
                 */
                CppSettings.create = function create(properties) {
                    return new CppSettings(properties);
                };
    
                /**
                 * Encodes the specified CppSettings message. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CppSettings message, length delimited. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CppSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CppSettings message.
                 * @function verify
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CppSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CppSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CppSettings} CppSettings
                 */
                CppSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CppSettings)
                        return object;
                    var message = new $root.google.api.CppSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.CppSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CppSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.CppSettings} message CppSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CppSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this CppSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CppSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CppSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CppSettings
                 * @function getTypeUrl
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CppSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CppSettings";
                };
    
                return CppSettings;
            })();
    
            api.PhpSettings = (function() {
    
                /**
                 * Properties of a PhpSettings.
                 * @memberof google.api
                 * @interface IPhpSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PhpSettings common
                 */
    
                /**
                 * Constructs a new PhpSettings.
                 * @memberof google.api
                 * @classdesc Represents a PhpSettings.
                 * @implements IPhpSettings
                 * @constructor
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 */
                function PhpSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PhpSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PhpSettings
                 * @instance
                 */
                PhpSettings.prototype.common = null;
    
                /**
                 * Creates a new PhpSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 * @returns {google.api.PhpSettings} PhpSettings instance
                 */
                PhpSettings.create = function create(properties) {
                    return new PhpSettings(properties);
                };
    
                /**
                 * Encodes the specified PhpSettings message. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PhpSettings message, length delimited. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PhpSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PhpSettings message.
                 * @function verify
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PhpSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PhpSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PhpSettings} PhpSettings
                 */
                PhpSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PhpSettings)
                        return object;
                    var message = new $root.google.api.PhpSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PhpSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PhpSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.PhpSettings} message PhpSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PhpSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PhpSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PhpSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PhpSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PhpSettings
                 * @function getTypeUrl
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PhpSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PhpSettings";
                };
    
                return PhpSettings;
            })();
    
            api.PythonSettings = (function() {
    
                /**
                 * Properties of a PythonSettings.
                 * @memberof google.api
                 * @interface IPythonSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PythonSettings common
                 */
    
                /**
                 * Constructs a new PythonSettings.
                 * @memberof google.api
                 * @classdesc Represents a PythonSettings.
                 * @implements IPythonSettings
                 * @constructor
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 */
                function PythonSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PythonSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PythonSettings
                 * @instance
                 */
                PythonSettings.prototype.common = null;
    
                /**
                 * Creates a new PythonSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 * @returns {google.api.PythonSettings} PythonSettings instance
                 */
                PythonSettings.create = function create(properties) {
                    return new PythonSettings(properties);
                };
    
                /**
                 * Encodes the specified PythonSettings message. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PythonSettings message, length delimited. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PythonSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PythonSettings message.
                 * @function verify
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PythonSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PythonSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PythonSettings} PythonSettings
                 */
                PythonSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PythonSettings)
                        return object;
                    var message = new $root.google.api.PythonSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PythonSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PythonSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.PythonSettings} message PythonSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PythonSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PythonSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PythonSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PythonSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PythonSettings
                 * @function getTypeUrl
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PythonSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PythonSettings";
                };
    
                return PythonSettings;
            })();
    
            api.NodeSettings = (function() {
    
                /**
                 * Properties of a NodeSettings.
                 * @memberof google.api
                 * @interface INodeSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] NodeSettings common
                 */
    
                /**
                 * Constructs a new NodeSettings.
                 * @memberof google.api
                 * @classdesc Represents a NodeSettings.
                 * @implements INodeSettings
                 * @constructor
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 */
                function NodeSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * NodeSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.NodeSettings
                 * @instance
                 */
                NodeSettings.prototype.common = null;
    
                /**
                 * Creates a new NodeSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 * @returns {google.api.NodeSettings} NodeSettings instance
                 */
                NodeSettings.create = function create(properties) {
                    return new NodeSettings(properties);
                };
    
                /**
                 * Encodes the specified NodeSettings message. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified NodeSettings message, length delimited. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.NodeSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a NodeSettings message.
                 * @function verify
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NodeSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a NodeSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.NodeSettings} NodeSettings
                 */
                NodeSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.NodeSettings)
                        return object;
                    var message = new $root.google.api.NodeSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.NodeSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a NodeSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.NodeSettings} message NodeSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NodeSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this NodeSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.NodeSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NodeSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for NodeSettings
                 * @function getTypeUrl
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NodeSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.NodeSettings";
                };
    
                return NodeSettings;
            })();
    
            api.DotnetSettings = (function() {
    
                /**
                 * Properties of a DotnetSettings.
                 * @memberof google.api
                 * @interface IDotnetSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] DotnetSettings common
                 */
    
                /**
                 * Constructs a new DotnetSettings.
                 * @memberof google.api
                 * @classdesc Represents a DotnetSettings.
                 * @implements IDotnetSettings
                 * @constructor
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 */
                function DotnetSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DotnetSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.common = null;
    
                /**
                 * Creates a new DotnetSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 * @returns {google.api.DotnetSettings} DotnetSettings instance
                 */
                DotnetSettings.create = function create(properties) {
                    return new DotnetSettings(properties);
                };
    
                /**
                 * Encodes the specified DotnetSettings message. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DotnetSettings message, length delimited. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.DotnetSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DotnetSettings message.
                 * @function verify
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DotnetSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DotnetSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 */
                DotnetSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.DotnetSettings)
                        return object;
                    var message = new $root.google.api.DotnetSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.DotnetSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DotnetSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.DotnetSettings} message DotnetSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DotnetSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this DotnetSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.DotnetSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DotnetSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DotnetSettings
                 * @function getTypeUrl
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DotnetSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.DotnetSettings";
                };
    
                return DotnetSettings;
            })();
    
            api.RubySettings = (function() {
    
                /**
                 * Properties of a RubySettings.
                 * @memberof google.api
                 * @interface IRubySettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] RubySettings common
                 */
    
                /**
                 * Constructs a new RubySettings.
                 * @memberof google.api
                 * @classdesc Represents a RubySettings.
                 * @implements IRubySettings
                 * @constructor
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 */
                function RubySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RubySettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.RubySettings
                 * @instance
                 */
                RubySettings.prototype.common = null;
    
                /**
                 * Creates a new RubySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 * @returns {google.api.RubySettings} RubySettings instance
                 */
                RubySettings.create = function create(properties) {
                    return new RubySettings(properties);
                };
    
                /**
                 * Encodes the specified RubySettings message. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RubySettings message, length delimited. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.RubySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RubySettings message.
                 * @function verify
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RubySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RubySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.RubySettings} RubySettings
                 */
                RubySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.RubySettings)
                        return object;
                    var message = new $root.google.api.RubySettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.RubySettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RubySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.RubySettings} message RubySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RubySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this RubySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.RubySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RubySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RubySettings
                 * @function getTypeUrl
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RubySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.RubySettings";
                };
    
                return RubySettings;
            })();
    
            api.GoSettings = (function() {
    
                /**
                 * Properties of a GoSettings.
                 * @memberof google.api
                 * @interface IGoSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] GoSettings common
                 */
    
                /**
                 * Constructs a new GoSettings.
                 * @memberof google.api
                 * @classdesc Represents a GoSettings.
                 * @implements IGoSettings
                 * @constructor
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 */
                function GoSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GoSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.GoSettings
                 * @instance
                 */
                GoSettings.prototype.common = null;
    
                /**
                 * Creates a new GoSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 * @returns {google.api.GoSettings} GoSettings instance
                 */
                GoSettings.create = function create(properties) {
                    return new GoSettings(properties);
                };
    
                /**
                 * Encodes the specified GoSettings message. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GoSettings message, length delimited. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.GoSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GoSettings message.
                 * @function verify
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GoSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GoSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.GoSettings} GoSettings
                 */
                GoSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.GoSettings)
                        return object;
                    var message = new $root.google.api.GoSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.GoSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GoSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.GoSettings} message GoSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GoSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this GoSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.GoSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GoSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GoSettings
                 * @function getTypeUrl
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GoSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.GoSettings";
                };
    
                return GoSettings;
            })();
    
            api.MethodSettings = (function() {
    
                /**
                 * Properties of a MethodSettings.
                 * @memberof google.api
                 * @interface IMethodSettings
                 * @property {string|null} [selector] MethodSettings selector
                 * @property {google.api.MethodSettings.ILongRunning|null} [longRunning] MethodSettings longRunning
                 */
    
                /**
                 * Constructs a new MethodSettings.
                 * @memberof google.api
                 * @classdesc Represents a MethodSettings.
                 * @implements IMethodSettings
                 * @constructor
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 */
                function MethodSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodSettings selector.
                 * @member {string} selector
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.selector = "";
    
                /**
                 * MethodSettings longRunning.
                 * @member {google.api.MethodSettings.ILongRunning|null|undefined} longRunning
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.longRunning = null;
    
                /**
                 * Creates a new MethodSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 * @returns {google.api.MethodSettings} MethodSettings instance
                 */
                MethodSettings.create = function create(properties) {
                    return new MethodSettings(properties);
                };
    
                /**
                 * Encodes the specified MethodSettings message. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.longRunning != null && Object.hasOwnProperty.call(message, "longRunning"))
                        $root.google.api.MethodSettings.LongRunning.encode(message.longRunning, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodSettings message, length delimited. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.longRunning = $root.google.api.MethodSettings.LongRunning.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodSettings message.
                 * @function verify
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.longRunning != null && message.hasOwnProperty("longRunning")) {
                        var error = $root.google.api.MethodSettings.LongRunning.verify(message.longRunning);
                        if (error)
                            return "longRunning." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.MethodSettings} MethodSettings
                 */
                MethodSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.MethodSettings)
                        return object;
                    var message = new $root.google.api.MethodSettings();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.longRunning != null) {
                        if (typeof object.longRunning !== "object")
                            throw TypeError(".google.api.MethodSettings.longRunning: object expected");
                        message.longRunning = $root.google.api.MethodSettings.LongRunning.fromObject(object.longRunning);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.MethodSettings} message MethodSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.selector = "";
                        object.longRunning = null;
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.longRunning != null && message.hasOwnProperty("longRunning"))
                        object.longRunning = $root.google.api.MethodSettings.LongRunning.toObject(message.longRunning, options);
                    return object;
                };
    
                /**
                 * Converts this MethodSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.MethodSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodSettings
                 * @function getTypeUrl
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.MethodSettings";
                };
    
                MethodSettings.LongRunning = (function() {
    
                    /**
                     * Properties of a LongRunning.
                     * @memberof google.api.MethodSettings
                     * @interface ILongRunning
                     * @property {google.protobuf.IDuration|null} [initialPollDelay] LongRunning initialPollDelay
                     * @property {number|null} [pollDelayMultiplier] LongRunning pollDelayMultiplier
                     * @property {google.protobuf.IDuration|null} [maxPollDelay] LongRunning maxPollDelay
                     * @property {google.protobuf.IDuration|null} [totalPollTimeout] LongRunning totalPollTimeout
                     */
    
                    /**
                     * Constructs a new LongRunning.
                     * @memberof google.api.MethodSettings
                     * @classdesc Represents a LongRunning.
                     * @implements ILongRunning
                     * @constructor
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     */
                    function LongRunning(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LongRunning initialPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} initialPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.initialPollDelay = null;
    
                    /**
                     * LongRunning pollDelayMultiplier.
                     * @member {number} pollDelayMultiplier
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.pollDelayMultiplier = 0;
    
                    /**
                     * LongRunning maxPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} maxPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.maxPollDelay = null;
    
                    /**
                     * LongRunning totalPollTimeout.
                     * @member {google.protobuf.IDuration|null|undefined} totalPollTimeout
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.totalPollTimeout = null;
    
                    /**
                     * Creates a new LongRunning instance using the specified properties.
                     * @function create
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning instance
                     */
                    LongRunning.create = function create(properties) {
                        return new LongRunning(properties);
                    };
    
                    /**
                     * Encodes the specified LongRunning message. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.initialPollDelay != null && Object.hasOwnProperty.call(message, "initialPollDelay"))
                            $root.google.protobuf.Duration.encode(message.initialPollDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pollDelayMultiplier != null && Object.hasOwnProperty.call(message, "pollDelayMultiplier"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.pollDelayMultiplier);
                        if (message.maxPollDelay != null && Object.hasOwnProperty.call(message, "maxPollDelay"))
                            $root.google.protobuf.Duration.encode(message.maxPollDelay, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.totalPollTimeout != null && Object.hasOwnProperty.call(message, "totalPollTimeout"))
                            $root.google.protobuf.Duration.encode(message.totalPollTimeout, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LongRunning message, length delimited. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings.LongRunning();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.initialPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.pollDelayMultiplier = reader.float();
                                    break;
                                }
                            case 3: {
                                    message.maxPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.totalPollTimeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LongRunning message.
                     * @function verify
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LongRunning.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.initialPollDelay);
                            if (error)
                                return "initialPollDelay." + error;
                        }
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            if (typeof message.pollDelayMultiplier !== "number")
                                return "pollDelayMultiplier: number expected";
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.maxPollDelay);
                            if (error)
                                return "maxPollDelay." + error;
                        }
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout")) {
                            var error = $root.google.protobuf.Duration.verify(message.totalPollTimeout);
                            if (error)
                                return "totalPollTimeout." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LongRunning message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     */
                    LongRunning.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.MethodSettings.LongRunning)
                            return object;
                        var message = new $root.google.api.MethodSettings.LongRunning();
                        if (object.initialPollDelay != null) {
                            if (typeof object.initialPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.initialPollDelay: object expected");
                            message.initialPollDelay = $root.google.protobuf.Duration.fromObject(object.initialPollDelay);
                        }
                        if (object.pollDelayMultiplier != null)
                            message.pollDelayMultiplier = Number(object.pollDelayMultiplier);
                        if (object.maxPollDelay != null) {
                            if (typeof object.maxPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.maxPollDelay: object expected");
                            message.maxPollDelay = $root.google.protobuf.Duration.fromObject(object.maxPollDelay);
                        }
                        if (object.totalPollTimeout != null) {
                            if (typeof object.totalPollTimeout !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected");
                            message.totalPollTimeout = $root.google.protobuf.Duration.fromObject(object.totalPollTimeout);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LongRunning message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.LongRunning} message LongRunning
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LongRunning.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.initialPollDelay = null;
                            object.pollDelayMultiplier = 0;
                            object.maxPollDelay = null;
                            object.totalPollTimeout = null;
                        }
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay"))
                            object.initialPollDelay = $root.google.protobuf.Duration.toObject(message.initialPollDelay, options);
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            object.pollDelayMultiplier = options.json && !isFinite(message.pollDelayMultiplier) ? String(message.pollDelayMultiplier) : message.pollDelayMultiplier;
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay"))
                            object.maxPollDelay = $root.google.protobuf.Duration.toObject(message.maxPollDelay, options);
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout"))
                            object.totalPollTimeout = $root.google.protobuf.Duration.toObject(message.totalPollTimeout, options);
                        return object;
                    };
    
                    /**
                     * Converts this LongRunning to JSON.
                     * @function toJSON
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LongRunning.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for LongRunning
                     * @function getTypeUrl
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    LongRunning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.MethodSettings.LongRunning";
                    };
    
                    return LongRunning;
                })();
    
                return MethodSettings;
            })();
    
            /**
             * ClientLibraryOrganization enum.
             * @name google.api.ClientLibraryOrganization
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED=0 CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED value
             * @property {number} CLOUD=1 CLOUD value
             * @property {number} ADS=2 ADS value
             * @property {number} PHOTOS=3 PHOTOS value
             * @property {number} STREET_VIEW=4 STREET_VIEW value
             */
            api.ClientLibraryOrganization = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CLOUD"] = 1;
                values[valuesById[2] = "ADS"] = 2;
                values[valuesById[3] = "PHOTOS"] = 3;
                values[valuesById[4] = "STREET_VIEW"] = 4;
                return values;
            })();
    
            /**
             * ClientLibraryDestination enum.
             * @name google.api.ClientLibraryDestination
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_DESTINATION_UNSPECIFIED=0 CLIENT_LIBRARY_DESTINATION_UNSPECIFIED value
             * @property {number} GITHUB=10 GITHUB value
             * @property {number} PACKAGE_MANAGER=20 PACKAGE_MANAGER value
             */
            api.ClientLibraryDestination = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED"] = 0;
                values[valuesById[10] = "GITHUB"] = 10;
                values[valuesById[20] = "PACKAGE_MANAGER"] = 20;
                return values;
            })();
    
            /**
             * LaunchStage enum.
             * @name google.api.LaunchStage
             * @enum {number}
             * @property {number} LAUNCH_STAGE_UNSPECIFIED=0 LAUNCH_STAGE_UNSPECIFIED value
             * @property {number} UNIMPLEMENTED=6 UNIMPLEMENTED value
             * @property {number} PRELAUNCH=7 PRELAUNCH value
             * @property {number} EARLY_ACCESS=1 EARLY_ACCESS value
             * @property {number} ALPHA=2 ALPHA value
             * @property {number} BETA=3 BETA value
             * @property {number} GA=4 GA value
             * @property {number} DEPRECATED=5 DEPRECATED value
             */
            api.LaunchStage = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "LAUNCH_STAGE_UNSPECIFIED"] = 0;
                values[valuesById[6] = "UNIMPLEMENTED"] = 6;
                values[valuesById[7] = "PRELAUNCH"] = 7;
                values[valuesById[1] = "EARLY_ACCESS"] = 1;
                values[valuesById[2] = "ALPHA"] = 2;
                values[valuesById[3] = "BETA"] = 3;
                values[valuesById[4] = "GA"] = 4;
                values[valuesById[5] = "DEPRECATED"] = 5;
                return values;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 * @property {Array.<google.api.ResourceDescriptor.Style>|null} [style] ResourceDescriptor style
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    this.style = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * ResourceDescriptor style.
                 * @member {Array.<google.api.ResourceDescriptor.Style>} style
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.style = $util.emptyArray;
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    if (message.style != null && message.style.length) {
                        writer.uint32(/* id 10, wireType 2 =*/82).fork();
                        for (var i = 0; i < message.style.length; ++i)
                            writer.int32(message.style[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.pattern && message.pattern.length))
                                    message.pattern = [];
                                message.pattern.push(reader.string());
                                break;
                            }
                        case 3: {
                                message.nameField = reader.string();
                                break;
                            }
                        case 4: {
                                message.history = reader.int32();
                                break;
                            }
                        case 5: {
                                message.plural = reader.string();
                                break;
                            }
                        case 6: {
                                message.singular = reader.string();
                                break;
                            }
                        case 10: {
                                if (!(message.style && message.style.length))
                                    message.style = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.style.push(reader.int32());
                                } else
                                    message.style.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    if (message.style != null && message.hasOwnProperty("style")) {
                        if (!Array.isArray(message.style))
                            return "style: array expected";
                        for (var i = 0; i < message.style.length; ++i)
                            switch (message.style[i]) {
                            default:
                                return "style: enum value[] expected";
                            case 0:
                            case 1:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    default:
                        if (typeof object.history === "number") {
                            message.history = object.history;
                            break;
                        }
                        break;
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    if (object.style) {
                        if (!Array.isArray(object.style))
                            throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                        message.style = [];
                        for (var i = 0; i < object.style.length; ++i)
                            switch (object.style[i]) {
                            default:
                                if (typeof object.style[i] === "number") {
                                    message.style[i] = object.style[i];
                                    break;
                                }
                            case "STYLE_UNSPECIFIED":
                            case 0:
                                message.style[i] = 0;
                                break;
                            case "DECLARATIVE_FRIENDLY":
                            case 1:
                                message.style[i] = 1;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.pattern = [];
                        object.style = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] === undefined ? message.history : $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    if (message.style && message.style.length) {
                        object.style = [];
                        for (var j = 0; j < message.style.length; ++j)
                            object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] === undefined ? message.style[j] : $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceDescriptor
                 * @function getTypeUrl
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceDescriptor";
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                /**
                 * Style enum.
                 * @name google.api.ResourceDescriptor.Style
                 * @enum {number}
                 * @property {number} STYLE_UNSPECIFIED=0 STYLE_UNSPECIFIED value
                 * @property {number} DECLARATIVE_FRIENDLY=1 DECLARATIVE_FRIENDLY value
                 */
                ResourceDescriptor.Style = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                message.childType = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceReference
                 * @function getTypeUrl
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceReference";
                };
    
                return ResourceReference;
            })();
    
            return api;
        })();
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {string|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {string} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 13: {
                                message.edition = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        if (!$util.isString(message.edition))
                            return "edition: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    if (object.edition != null)
                        message.edition = String(object.edition);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 42: {
                                message.phpGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                    message[".google.api.resourceDefinition"] = [];
                                message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] MessageOptions deprecatedLegacyJsonFieldConflicts
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 11: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {boolean|null} [debugRedact] FieldOptions debugRedact
                 * @property {google.protobuf.FieldOptions.OptionRetention|null} [retention] FieldOptions retention
                 * @property {google.protobuf.FieldOptions.OptionTargetType|null} [target] FieldOptions target
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions debugRedact.
                 * @member {boolean} debugRedact
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.debugRedact = false;
    
                /**
                 * FieldOptions retention.
                 * @member {google.protobuf.FieldOptions.OptionRetention} retention
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.retention = 0;
    
                /**
                 * FieldOptions target.
                 * @member {google.protobuf.FieldOptions.OptionTargetType} target
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.target = 0;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.debugRedact);
                    if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.retention);
                    if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.target);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 16: {
                                message.debugRedact = reader.bool();
                                break;
                            }
                        case 17: {
                                message.retention = reader.int32();
                                break;
                            }
                        case 18: {
                                message.target = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1052: {
                                if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                    message[".google.api.fieldBehavior"] = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message[".google.api.fieldBehavior"].push(reader.int32());
                                } else
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                                break;
                            }
                        case 1055: {
                                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        if (typeof message.debugRedact !== "boolean")
                            return "debugRedact: boolean expected";
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        switch (message.retention) {
                        default:
                            return "retention: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.target != null && message.hasOwnProperty("target"))
                        switch (message.target) {
                        default:
                            return "target: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.debugRedact != null)
                        message.debugRedact = Boolean(object.debugRedact);
                    switch (object.retention) {
                    default:
                        if (typeof object.retention === "number") {
                            message.retention = object.retention;
                            break;
                        }
                        break;
                    case "RETENTION_UNKNOWN":
                    case 0:
                        message.retention = 0;
                        break;
                    case "RETENTION_RUNTIME":
                    case 1:
                        message.retention = 1;
                        break;
                    case "RETENTION_SOURCE":
                    case 2:
                        message.retention = 2;
                        break;
                    }
                    switch (object.target) {
                    default:
                        if (typeof object.target === "number") {
                            message.target = object.target;
                            break;
                        }
                        break;
                    case "TARGET_TYPE_UNKNOWN":
                    case 0:
                        message.target = 0;
                        break;
                    case "TARGET_TYPE_FILE":
                    case 1:
                        message.target = 1;
                        break;
                    case "TARGET_TYPE_EXTENSION_RANGE":
                    case 2:
                        message.target = 2;
                        break;
                    case "TARGET_TYPE_MESSAGE":
                    case 3:
                        message.target = 3;
                        break;
                    case "TARGET_TYPE_FIELD":
                    case 4:
                        message.target = 4;
                        break;
                    case "TARGET_TYPE_ONEOF":
                    case 5:
                        message.target = 5;
                        break;
                    case "TARGET_TYPE_ENUM":
                    case 6:
                        message.target = 6;
                        break;
                    case "TARGET_TYPE_ENUM_ENTRY":
                    case 7:
                        message.target = 7;
                        break;
                    case "TARGET_TYPE_SERVICE":
                    case 8:
                        message.target = 8;
                        break;
                    case "TARGET_TYPE_METHOD":
                    case 9:
                        message.target = 9;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                                if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                                    message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                                    break;
                                }
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                        object.debugRedact = false;
                        object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                        object.target = options.enums === String ? "TARGET_TYPE_UNKNOWN" : 0;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        object.debugRedact = message.debugRedact;
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === undefined ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.target] === undefined ? message.target : $root.google.protobuf.FieldOptions.OptionTargetType[message.target] : message.target;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === undefined ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                /**
                 * OptionRetention enum.
                 * @name google.protobuf.FieldOptions.OptionRetention
                 * @enum {number}
                 * @property {number} RETENTION_UNKNOWN=0 RETENTION_UNKNOWN value
                 * @property {number} RETENTION_RUNTIME=1 RETENTION_RUNTIME value
                 * @property {number} RETENTION_SOURCE=2 RETENTION_SOURCE value
                 */
                FieldOptions.OptionRetention = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
                    values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
                    values[valuesById[2] = "RETENTION_SOURCE"] = 2;
                    return values;
                })();
    
                /**
                 * OptionTargetType enum.
                 * @name google.protobuf.FieldOptions.OptionTargetType
                 * @enum {number}
                 * @property {number} TARGET_TYPE_UNKNOWN=0 TARGET_TYPE_UNKNOWN value
                 * @property {number} TARGET_TYPE_FILE=1 TARGET_TYPE_FILE value
                 * @property {number} TARGET_TYPE_EXTENSION_RANGE=2 TARGET_TYPE_EXTENSION_RANGE value
                 * @property {number} TARGET_TYPE_MESSAGE=3 TARGET_TYPE_MESSAGE value
                 * @property {number} TARGET_TYPE_FIELD=4 TARGET_TYPE_FIELD value
                 * @property {number} TARGET_TYPE_ONEOF=5 TARGET_TYPE_ONEOF value
                 * @property {number} TARGET_TYPE_ENUM=6 TARGET_TYPE_ENUM value
                 * @property {number} TARGET_TYPE_ENUM_ENTRY=7 TARGET_TYPE_ENUM_ENTRY value
                 * @property {number} TARGET_TYPE_SERVICE=8 TARGET_TYPE_SERVICE value
                 * @property {number} TARGET_TYPE_METHOD=9 TARGET_TYPE_METHOD value
                 */
                FieldOptions.OptionTargetType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
                    values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
                    values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
                    values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
                    values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
                    values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
                    values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
                    values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
                    values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] EnumOptions deprecatedLegacyJsonFieldConflicts
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 6: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Duration
                 * @function getTypeUrl
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Duration";
                };
    
                return Duration;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Empty
                 * @function getTypeUrl
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Empty";
                };
    
                return Empty;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.paths && message.paths.length))
                                    message.paths = [];
                                message.paths.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldMask
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldMask.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldMask";
                };
    
                return FieldMask;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Timestamp
                 * @function getTypeUrl
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Timestamp";
                };
    
                return Timestamp;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();

    return $root;
});
