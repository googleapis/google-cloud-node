// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as recaptchaenterpriseserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.RecaptchaEnterpriseServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient
          .servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient
          .apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient
          .port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            fallback: true,
          }
        );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.recaptchaEnterpriseServiceStub, undefined);
      await client.initialize();
      assert(client.recaptchaEnterpriseServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      assert(client.recaptchaEnterpriseServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.recaptchaEnterpriseServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('createAssessment', () => {
    it('invokes createAssessment without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Assessment()
      );
      client.innerApiCalls.createAssessment = stubSimpleCall(expectedResponse);
      const [response] = await client.createAssessment(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAssessment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAssessment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAssessment without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Assessment()
      );
      client.innerApiCalls.createAssessment =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAssessment(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IAssessment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAssessment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAssessment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAssessment with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAssessment = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAssessment(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAssessment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAssessment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAssessment with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createAssessment(request), expectedError);
    });
  });

  describe('annotateAssessment', () => {
    it('invokes annotateAssessment without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse()
      );
      client.innerApiCalls.annotateAssessment =
        stubSimpleCall(expectedResponse);
      const [response] = await client.annotateAssessment(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.annotateAssessment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.annotateAssessment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes annotateAssessment without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse()
      );
      client.innerApiCalls.annotateAssessment =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.annotateAssessment(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IAnnotateAssessmentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.annotateAssessment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.annotateAssessment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes annotateAssessment with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.annotateAssessment = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.annotateAssessment(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.annotateAssessment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.annotateAssessment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes annotateAssessment with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.annotateAssessment(request), expectedError);
    });
  });

  describe('createKey', () => {
    it('invokes createKey without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.CreateKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.CreateKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Key()
      );
      client.innerApiCalls.createKey = stubSimpleCall(expectedResponse);
      const [response] = await client.createKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKey without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.CreateKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.CreateKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Key()
      );
      client.innerApiCalls.createKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKey with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.CreateKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.CreateKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createKey = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.createKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKey with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.CreateKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.CreateKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createKey(request), expectedError);
    });
  });

  describe('retrieveLegacySecretKey', () => {
    it('invokes retrieveLegacySecretKey without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest',
        ['key']
      );
      request.key = defaultValue1;
      const expectedHeaderRequestParams = `key=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse()
      );
      client.innerApiCalls.retrieveLegacySecretKey =
        stubSimpleCall(expectedResponse);
      const [response] = await client.retrieveLegacySecretKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.retrieveLegacySecretKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.retrieveLegacySecretKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes retrieveLegacySecretKey without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest',
        ['key']
      );
      request.key = defaultValue1;
      const expectedHeaderRequestParams = `key=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse()
      );
      client.innerApiCalls.retrieveLegacySecretKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.retrieveLegacySecretKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IRetrieveLegacySecretKeyResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.retrieveLegacySecretKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.retrieveLegacySecretKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes retrieveLegacySecretKey with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest',
        ['key']
      );
      request.key = defaultValue1;
      const expectedHeaderRequestParams = `key=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.retrieveLegacySecretKey = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.retrieveLegacySecretKey(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.retrieveLegacySecretKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.retrieveLegacySecretKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes retrieveLegacySecretKey with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest',
        ['key']
      );
      request.key = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.retrieveLegacySecretKey(request),
        expectedError
      );
    });
  });

  describe('getKey', () => {
    it('invokes getKey without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.GetKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.GetKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Key()
      );
      client.innerApiCalls.getKey = stubSimpleCall(expectedResponse);
      const [response] = await client.getKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getKey as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKey without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.GetKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.GetKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Key()
      );
      client.innerApiCalls.getKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getKey as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKey with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.GetKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.GetKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getKey = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getKey(request), expectedError);
      const actualRequest = (client.innerApiCalls.getKey as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKey with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.GetKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.GetKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getKey(request), expectedError);
    });
  });

  describe('updateKey', () => {
    it('invokes updateKey without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest()
      );
      request.key ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest',
        ['key', 'name']
      );
      request.key.name = defaultValue1;
      const expectedHeaderRequestParams = `key.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Key()
      );
      client.innerApiCalls.updateKey = stubSimpleCall(expectedResponse);
      const [response] = await client.updateKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateKey without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest()
      );
      request.key ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest',
        ['key', 'name']
      );
      request.key.name = defaultValue1;
      const expectedHeaderRequestParams = `key.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Key()
      );
      client.innerApiCalls.updateKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateKey with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest()
      );
      request.key ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest',
        ['key', 'name']
      );
      request.key.name = defaultValue1;
      const expectedHeaderRequestParams = `key.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateKey = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.updateKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateKey with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest()
      );
      request.key ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.UpdateKeyRequest',
        ['key', 'name']
      );
      request.key.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateKey(request), expectedError);
    });
  });

  describe('deleteKey', () => {
    it('invokes deleteKey without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteKey = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteKey without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteKey with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteKey = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.deleteKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteKey with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.DeleteKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteKey(request), expectedError);
    });
  });

  describe('migrateKey', () => {
    it('invokes migrateKey without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Key()
      );
      client.innerApiCalls.migrateKey = stubSimpleCall(expectedResponse);
      const [response] = await client.migrateKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.migrateKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.migrateKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes migrateKey without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Key()
      );
      client.innerApiCalls.migrateKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.migrateKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.migrateKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.migrateKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes migrateKey with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.migrateKey = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.migrateKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.migrateKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.migrateKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes migrateKey with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.MigrateKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.migrateKey(request), expectedError);
    });
  });

  describe('getMetrics', () => {
    it('invokes getMetrics without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.GetMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.GetMetricsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Metrics()
      );
      client.innerApiCalls.getMetrics = stubSimpleCall(expectedResponse);
      const [response] = await client.getMetrics(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetrics without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.GetMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.GetMetricsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.Metrics()
      );
      client.innerApiCalls.getMetrics =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getMetrics(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IMetrics | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetrics with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.GetMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.GetMetricsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getMetrics = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getMetrics(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetrics with closed client', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.GetMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.GetMetricsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getMetrics(request), expectedError);
    });
  });

  describe('listKeys', () => {
    it('invokes listKeys without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
      ];
      client.innerApiCalls.listKeys = stubSimpleCall(expectedResponse);
      const [response] = await client.listKeys(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKeys without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
      ];
      client.innerApiCalls.listKeys =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listKeys(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recaptchaenterprise.v1.IKey[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKeys with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listKeys = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listKeys(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKeysStream without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
      ];
      client.descriptors.page.listKeys.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listKeysStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.Key[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.recaptchaenterprise.v1.Key) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listKeys.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listKeys, request)
      );
      assert(
        (client.descriptors.page.listKeys.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listKeysStream with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listKeys.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listKeysStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.Key[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.recaptchaenterprise.v1.Key) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listKeys.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listKeys, request)
      );
      assert(
        (client.descriptors.page.listKeys.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listKeys without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.Key()
        ),
      ];
      client.descriptors.page.listKeys.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.recaptchaenterprise.v1.IKey[] = [];
      const iterable = client.listKeysAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listKeys.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listKeys.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listKeys with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listKeys.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listKeysAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.IKey[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listKeys.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listKeys.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listRelatedAccountGroups', () => {
    it('invokes listRelatedAccountGroups without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
      ];
      client.innerApiCalls.listRelatedAccountGroups =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listRelatedAccountGroups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRelatedAccountGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRelatedAccountGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRelatedAccountGroups without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
      ];
      client.innerApiCalls.listRelatedAccountGroups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRelatedAccountGroups(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRelatedAccountGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRelatedAccountGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRelatedAccountGroups with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listRelatedAccountGroups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listRelatedAccountGroups(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listRelatedAccountGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRelatedAccountGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRelatedAccountGroupsStream without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
      ];
      client.descriptors.page.listRelatedAccountGroups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRelatedAccountGroupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listRelatedAccountGroups
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listRelatedAccountGroups, request)
      );
      assert(
        (
          client.descriptors.page.listRelatedAccountGroups
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listRelatedAccountGroupsStream with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRelatedAccountGroups.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listRelatedAccountGroupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listRelatedAccountGroups
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listRelatedAccountGroups, request)
      );
      assert(
        (
          client.descriptors.page.listRelatedAccountGroups
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRelatedAccountGroups without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroup()
        ),
      ];
      client.descriptors.page.listRelatedAccountGroups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup[] =
        [];
      const iterable = client.listRelatedAccountGroupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRelatedAccountGroups
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listRelatedAccountGroups
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRelatedAccountGroups with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRelatedAccountGroups.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRelatedAccountGroupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroup[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRelatedAccountGroups
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listRelatedAccountGroups
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listRelatedAccountGroupMemberships', () => {
    it('invokes listRelatedAccountGroupMemberships without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
      ];
      client.innerApiCalls.listRelatedAccountGroupMemberships =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listRelatedAccountGroupMemberships(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRelatedAccountGroupMemberships without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
      ];
      client.innerApiCalls.listRelatedAccountGroupMemberships =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRelatedAccountGroupMemberships(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRelatedAccountGroupMemberships with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listRelatedAccountGroupMemberships = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listRelatedAccountGroupMemberships(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRelatedAccountGroupMembershipsStream without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
      ];
      client.descriptors.page.listRelatedAccountGroupMemberships.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRelatedAccountGroupMembershipsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listRelatedAccountGroupMemberships
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listRelatedAccountGroupMemberships,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listRelatedAccountGroupMemberships
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listRelatedAccountGroupMembershipsStream with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRelatedAccountGroupMemberships.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listRelatedAccountGroupMembershipsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listRelatedAccountGroupMemberships
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listRelatedAccountGroupMemberships,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listRelatedAccountGroupMemberships
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRelatedAccountGroupMemberships without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
      ];
      client.descriptors.page.listRelatedAccountGroupMemberships.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership[] =
        [];
      const iterable = client.listRelatedAccountGroupMembershipsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRelatedAccountGroupMemberships
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listRelatedAccountGroupMemberships
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRelatedAccountGroupMemberships with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRelatedAccountGroupMemberships.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRelatedAccountGroupMembershipsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRelatedAccountGroupMemberships
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listRelatedAccountGroupMemberships
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('searchRelatedAccountGroupMemberships', () => {
    it('invokes searchRelatedAccountGroupMemberships without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
      ];
      client.innerApiCalls.searchRelatedAccountGroupMemberships =
        stubSimpleCall(expectedResponse);
      const [response] = await client.searchRelatedAccountGroupMemberships(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.searchRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchRelatedAccountGroupMemberships without error using callback', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
      ];
      client.innerApiCalls.searchRelatedAccountGroupMemberships =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.searchRelatedAccountGroupMemberships(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.searchRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchRelatedAccountGroupMemberships with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.searchRelatedAccountGroupMemberships =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.searchRelatedAccountGroupMemberships(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.searchRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchRelatedAccountGroupMemberships as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchRelatedAccountGroupMembershipsStream without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
      ];
      client.descriptors.page.searchRelatedAccountGroupMemberships.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.searchRelatedAccountGroupMembershipsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.searchRelatedAccountGroupMemberships
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.searchRelatedAccountGroupMemberships,
            request
          )
      );
      assert(
        (
          client.descriptors.page.searchRelatedAccountGroupMemberships
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes searchRelatedAccountGroupMembershipsStream with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.searchRelatedAccountGroupMemberships.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.searchRelatedAccountGroupMembershipsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.searchRelatedAccountGroupMemberships
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.searchRelatedAccountGroupMemberships,
            request
          )
      );
      assert(
        (
          client.descriptors.page.searchRelatedAccountGroupMemberships
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with searchRelatedAccountGroupMemberships without error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
        generateSampleMessage(
          new protos.google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership()
        ),
      ];
      client.descriptors.page.searchRelatedAccountGroupMemberships.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership[] =
        [];
      const iterable =
        client.searchRelatedAccountGroupMembershipsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchRelatedAccountGroupMemberships
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.searchRelatedAccountGroupMemberships
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with searchRelatedAccountGroupMemberships with error', async () => {
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.searchRelatedAccountGroupMemberships.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable =
        client.searchRelatedAccountGroupMembershipsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.recaptchaenterprise.v1.IRelatedAccountGroupMembership[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchRelatedAccountGroupMemberships
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.searchRelatedAccountGroupMemberships
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('assessment', () => {
      const fakePath = '/rendered/path/assessment';
      const expectedParameters = {
        project: 'projectValue',
        assessment: 'assessmentValue',
      };
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.assessmentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.assessmentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('assessmentPath', () => {
        const result = client.assessmentPath('projectValue', 'assessmentValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.assessmentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAssessmentName', () => {
        const result = client.matchProjectFromAssessmentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.assessmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssessmentFromAssessmentName', () => {
        const result = client.matchAssessmentFromAssessmentName(fakePath);
        assert.strictEqual(result, 'assessmentValue');
        assert(
          (client.pathTemplates.assessmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('key', () => {
      const fakePath = '/rendered/path/key';
      const expectedParameters = {
        project: 'projectValue',
        key: 'keyValue',
      };
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.keyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.keyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('keyPath', () => {
        const result = client.keyPath('projectValue', 'keyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.keyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromKeyName', () => {
        const result = client.matchProjectFromKeyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.keyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyFromKeyName', () => {
        const result = client.matchKeyFromKeyName(fakePath);
        assert.strictEqual(result, 'keyValue');
        assert(
          (client.pathTemplates.keyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('metrics', () => {
      const fakePath = '/rendered/path/metrics';
      const expectedParameters = {
        project: 'projectValue',
        key: 'keyValue',
      };
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.metricsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.metricsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('metricsPath', () => {
        const result = client.metricsPath('projectValue', 'keyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.metricsPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromMetricsName', () => {
        const result = client.matchProjectFromMetricsName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.metricsPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyFromMetricsName', () => {
        const result = client.matchKeyFromMetricsName(fakePath);
        assert.strictEqual(result, 'keyValue');
        assert(
          (client.pathTemplates.metricsPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('relatedAccountGroup', () => {
      const fakePath = '/rendered/path/relatedAccountGroup';
      const expectedParameters = {
        project: 'projectValue',
        relatedaccountgroup: 'relatedaccountgroupValue',
      };
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.relatedAccountGroupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.relatedAccountGroupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('relatedAccountGroupPath', () => {
        const result = client.relatedAccountGroupPath(
          'projectValue',
          'relatedaccountgroupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.relatedAccountGroupPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRelatedAccountGroupName', () => {
        const result = client.matchProjectFromRelatedAccountGroupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.relatedAccountGroupPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRelatedaccountgroupFromRelatedAccountGroupName', () => {
        const result =
          client.matchRelatedaccountgroupFromRelatedAccountGroupName(fakePath);
        assert.strictEqual(result, 'relatedaccountgroupValue');
        assert(
          (
            client.pathTemplates.relatedAccountGroupPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('relatedAccountGroupMembership', () => {
      const fakePath = '/rendered/path/relatedAccountGroupMembership';
      const expectedParameters = {
        project: 'projectValue',
        relatedaccountgroup: 'relatedaccountgroupValue',
        membership: 'membershipValue',
      };
      const client =
        new recaptchaenterpriseserviceModule.v1.RecaptchaEnterpriseServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.relatedAccountGroupMembershipPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.relatedAccountGroupMembershipPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('relatedAccountGroupMembershipPath', () => {
        const result = client.relatedAccountGroupMembershipPath(
          'projectValue',
          'relatedaccountgroupValue',
          'membershipValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.relatedAccountGroupMembershipPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRelatedAccountGroupMembershipName', () => {
        const result =
          client.matchProjectFromRelatedAccountGroupMembershipName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.relatedAccountGroupMembershipPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRelatedaccountgroupFromRelatedAccountGroupMembershipName', () => {
        const result =
          client.matchRelatedaccountgroupFromRelatedAccountGroupMembershipName(
            fakePath
          );
        assert.strictEqual(result, 'relatedaccountgroupValue');
        assert(
          (
            client.pathTemplates.relatedAccountGroupMembershipPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMembershipFromRelatedAccountGroupMembershipName', () => {
        const result =
          client.matchMembershipFromRelatedAccountGroupMembershipName(fakePath);
        assert.strictEqual(result, 'membershipValue');
        assert(
          (
            client.pathTemplates.relatedAccountGroupMembershipPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
