// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/alloy_d_b_admin_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './alloy_d_b_admin_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources
 * @class
 * @memberof v1
 */
export class AlloyDBAdminClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  alloyDBAdminStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AlloyDBAdminClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AlloyDBAdminClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AlloyDBAdminClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'alloydb.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      backupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backups/{backup}'
      ),
      clusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}'
      ),
      connectionInfoPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/instances/{instance}/connectionInfo'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/instances/{instance}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      supportedDatabaseFlagPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/flags/{flag}'
      ),
      userPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}/users/{user}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listClusters: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'clusters'
      ),
      listInstances: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'instances'
      ),
      listBackups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'backups'
      ),
      listSupportedDatabaseFlags: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'supportedDatabaseFlags'
      ),
      listUsers: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'users'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Cluster'
    ) as gax.protobuf.Type;
    const createClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Cluster'
    ) as gax.protobuf.Type;
    const updateClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const promoteClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Cluster'
    ) as gax.protobuf.Type;
    const promoteClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const restoreClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Cluster'
    ) as gax.protobuf.Type;
    const restoreClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createSecondaryClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Cluster'
    ) as gax.protobuf.Type;
    const createSecondaryClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Instance'
    ) as gax.protobuf.Type;
    const createInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createSecondaryInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Instance'
    ) as gax.protobuf.Type;
    const createSecondaryInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const batchCreateInstancesResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.BatchCreateInstancesResponse'
    ) as gax.protobuf.Type;
    const batchCreateInstancesMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Instance'
    ) as gax.protobuf.Type;
    const updateInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteInstanceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const failoverInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Instance'
    ) as gax.protobuf.Type;
    const failoverInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const injectFaultResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Instance'
    ) as gax.protobuf.Type;
    const injectFaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const restartInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Instance'
    ) as gax.protobuf.Type;
    const restartInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Backup'
    ) as gax.protobuf.Type;
    const createBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.Backup'
    ) as gax.protobuf.Type;
    const updateBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteBackupResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.alloydb.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createClusterResponse.decode.bind(createClusterResponse),
        createClusterMetadata.decode.bind(createClusterMetadata)
      ),
      updateCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateClusterResponse.decode.bind(updateClusterResponse),
        updateClusterMetadata.decode.bind(updateClusterMetadata)
      ),
      deleteCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteClusterResponse.decode.bind(deleteClusterResponse),
        deleteClusterMetadata.decode.bind(deleteClusterMetadata)
      ),
      promoteCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        promoteClusterResponse.decode.bind(promoteClusterResponse),
        promoteClusterMetadata.decode.bind(promoteClusterMetadata)
      ),
      restoreCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restoreClusterResponse.decode.bind(restoreClusterResponse),
        restoreClusterMetadata.decode.bind(restoreClusterMetadata)
      ),
      createSecondaryCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createSecondaryClusterResponse.decode.bind(
          createSecondaryClusterResponse
        ),
        createSecondaryClusterMetadata.decode.bind(
          createSecondaryClusterMetadata
        )
      ),
      createInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createInstanceResponse.decode.bind(createInstanceResponse),
        createInstanceMetadata.decode.bind(createInstanceMetadata)
      ),
      createSecondaryInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createSecondaryInstanceResponse.decode.bind(
          createSecondaryInstanceResponse
        ),
        createSecondaryInstanceMetadata.decode.bind(
          createSecondaryInstanceMetadata
        )
      ),
      batchCreateInstances: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchCreateInstancesResponse.decode.bind(batchCreateInstancesResponse),
        batchCreateInstancesMetadata.decode.bind(batchCreateInstancesMetadata)
      ),
      updateInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateInstanceResponse.decode.bind(updateInstanceResponse),
        updateInstanceMetadata.decode.bind(updateInstanceMetadata)
      ),
      deleteInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteInstanceResponse.decode.bind(deleteInstanceResponse),
        deleteInstanceMetadata.decode.bind(deleteInstanceMetadata)
      ),
      failoverInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        failoverInstanceResponse.decode.bind(failoverInstanceResponse),
        failoverInstanceMetadata.decode.bind(failoverInstanceMetadata)
      ),
      injectFault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        injectFaultResponse.decode.bind(injectFaultResponse),
        injectFaultMetadata.decode.bind(injectFaultMetadata)
      ),
      restartInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restartInstanceResponse.decode.bind(restartInstanceResponse),
        restartInstanceMetadata.decode.bind(restartInstanceMetadata)
      ),
      createBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupResponse.decode.bind(createBackupResponse),
        createBackupMetadata.decode.bind(createBackupMetadata)
      ),
      updateBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBackupResponse.decode.bind(updateBackupResponse),
        updateBackupMetadata.decode.bind(updateBackupMetadata)
      ),
      deleteBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupResponse.decode.bind(deleteBackupResponse),
        deleteBackupMetadata.decode.bind(deleteBackupMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.alloydb.v1.AlloyDBAdmin',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.alloyDBAdminStub) {
      return this.alloyDBAdminStub;
    }

    // Put together the "service stub" for
    // google.cloud.alloydb.v1.AlloyDBAdmin.
    this.alloyDBAdminStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.alloydb.v1.AlloyDBAdmin'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.alloydb.v1.AlloyDBAdmin,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const alloyDBAdminStubMethods = [
      'listClusters',
      'getCluster',
      'createCluster',
      'updateCluster',
      'deleteCluster',
      'promoteCluster',
      'restoreCluster',
      'createSecondaryCluster',
      'listInstances',
      'getInstance',
      'createInstance',
      'createSecondaryInstance',
      'batchCreateInstances',
      'updateInstance',
      'deleteInstance',
      'failoverInstance',
      'injectFault',
      'restartInstance',
      'listBackups',
      'getBackup',
      'createBackup',
      'updateBackup',
      'deleteBackup',
      'listSupportedDatabaseFlags',
      'generateClientCertificate',
      'getConnectionInfo',
      'listUsers',
      'getUser',
      'createUser',
      'updateUser',
      'deleteUser',
    ];
    for (const methodName of alloyDBAdminStubMethods) {
      const callPromise = this.alloyDBAdminStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.alloyDBAdminStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'alloydb.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'alloydb.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single Cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the Cluster.name field.
   * @param {google.cloud.alloydb.v1.ClusterView} [request.view]
   *   Optional. The view of the cluster to return. Returns all default fields if
   *   not set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.alloydb.v1.Cluster|Cluster}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.get_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_GetCluster_async
   */
  getCluster(
    request?: protos.google.cloud.alloydb.v1.IGetClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.ICluster,
      protos.google.cloud.alloydb.v1.IGetClusterRequest | undefined,
      {} | undefined,
    ]
  >;
  getCluster(
    request: protos.google.cloud.alloydb.v1.IGetClusterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.alloydb.v1.ICluster,
      protos.google.cloud.alloydb.v1.IGetClusterRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getCluster(
    request: protos.google.cloud.alloydb.v1.IGetClusterRequest,
    callback: Callback<
      protos.google.cloud.alloydb.v1.ICluster,
      protos.google.cloud.alloydb.v1.IGetClusterRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getCluster(
    request?: protos.google.cloud.alloydb.v1.IGetClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.alloydb.v1.ICluster,
          protos.google.cloud.alloydb.v1.IGetClusterRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.alloydb.v1.ICluster,
      protos.google.cloud.alloydb.v1.IGetClusterRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.ICluster,
      protos.google.cloud.alloydb.v1.IGetClusterRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getCluster(request, options, callback);
  }
  /**
   * Gets details of a single Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the Instance.name field.
   * @param {google.cloud.alloydb.v1.InstanceView} request.view
   *   The view of the instance to return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.alloydb.v1.Instance|Instance}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.get_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_GetInstance_async
   */
  getInstance(
    request?: protos.google.cloud.alloydb.v1.IGetInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IInstance,
      protos.google.cloud.alloydb.v1.IGetInstanceRequest | undefined,
      {} | undefined,
    ]
  >;
  getInstance(
    request: protos.google.cloud.alloydb.v1.IGetInstanceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IInstance,
      protos.google.cloud.alloydb.v1.IGetInstanceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getInstance(
    request: protos.google.cloud.alloydb.v1.IGetInstanceRequest,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IInstance,
      protos.google.cloud.alloydb.v1.IGetInstanceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getInstance(
    request?: protos.google.cloud.alloydb.v1.IGetInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.alloydb.v1.IInstance,
          protos.google.cloud.alloydb.v1.IGetInstanceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.alloydb.v1.IInstance,
      protos.google.cloud.alloydb.v1.IGetInstanceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IInstance,
      protos.google.cloud.alloydb.v1.IGetInstanceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getInstance(request, options, callback);
  }
  /**
   * Gets details of a single Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.alloydb.v1.Backup|Backup}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.get_backup.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_GetBackup_async
   */
  getBackup(
    request?: protos.google.cloud.alloydb.v1.IGetBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IBackup,
      protos.google.cloud.alloydb.v1.IGetBackupRequest | undefined,
      {} | undefined,
    ]
  >;
  getBackup(
    request: protos.google.cloud.alloydb.v1.IGetBackupRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IBackup,
      protos.google.cloud.alloydb.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request: protos.google.cloud.alloydb.v1.IGetBackupRequest,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IBackup,
      protos.google.cloud.alloydb.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request?: protos.google.cloud.alloydb.v1.IGetBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.alloydb.v1.IBackup,
          protos.google.cloud.alloydb.v1.IGetBackupRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.alloydb.v1.IBackup,
      protos.google.cloud.alloydb.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IBackup,
      protos.google.cloud.alloydb.v1.IGetBackupRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getBackup(request, options, callback);
  }
  /**
   * Generate a client certificate signed by a Cluster CA.
   * The sole purpose of this endpoint is to support AlloyDB connectors and the
   * Auth Proxy client. The endpoint's behavior is subject to change without
   * notice, so do not rely on its behavior remaining constant. Future changes
   * will not break AlloyDB connectors or the Auth Proxy client.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. The required format is:
   *    * projects/{project}/locations/{location}/clusters/{cluster}
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {google.protobuf.Duration} [request.certDuration]
   *   Optional. An optional hint to the endpoint to generate the client
   *   certificate with the requested duration. The duration can be from 1 hour to
   *   24 hours. The endpoint may or may not honor the hint. If the hint is left
   *   unspecified or is not honored, then the endpoint will pick an appropriate
   *   default duration.
   * @param {string} [request.publicKey]
   *   Optional. The public key from the client.
   * @param {boolean} [request.useMetadataExchange]
   *   Optional. An optional hint to the endpoint to generate a client
   *   ceritificate that can be used by AlloyDB connectors to exchange additional
   *   metadata with the server after TLS handshake.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.alloydb.v1.GenerateClientCertificateResponse|GenerateClientCertificateResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.generate_client_certificate.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_GenerateClientCertificate_async
   */
  generateClientCertificate(
    request?: protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IGenerateClientCertificateResponse,
      (
        | protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  generateClientCertificate(
    request: protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IGenerateClientCertificateResponse,
      | protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateClientCertificate(
    request: protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IGenerateClientCertificateResponse,
      | protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateClientCertificate(
    request?: protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.alloydb.v1.IGenerateClientCertificateResponse,
          | protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.alloydb.v1.IGenerateClientCertificateResponse,
      | protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IGenerateClientCertificateResponse,
      (
        | protos.google.cloud.alloydb.v1.IGenerateClientCertificateRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.generateClientCertificate(
      request,
      options,
      callback
    );
  }
  /**
   * Get instance metadata used for a connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. The required format is:
   *   projects/{project}/locations/{location}/clusters/{cluster}/instances/{instance}
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.alloydb.v1.ConnectionInfo|ConnectionInfo}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.get_connection_info.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_GetConnectionInfo_async
   */
  getConnectionInfo(
    request?: protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IConnectionInfo,
      protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest | undefined,
      {} | undefined,
    ]
  >;
  getConnectionInfo(
    request: protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IConnectionInfo,
      | protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnectionInfo(
    request: protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IConnectionInfo,
      | protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnectionInfo(
    request?: protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.alloydb.v1.IConnectionInfo,
          | protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.alloydb.v1.IConnectionInfo,
      | protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IConnectionInfo,
      protos.google.cloud.alloydb.v1.IGetConnectionInfoRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConnectionInfo(request, options, callback);
  }
  /**
   * Gets details of a single User.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the User.name field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.alloydb.v1.User|User}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.get_user.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_GetUser_async
   */
  getUser(
    request?: protos.google.cloud.alloydb.v1.IGetUserRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IGetUserRequest | undefined,
      {} | undefined,
    ]
  >;
  getUser(
    request: protos.google.cloud.alloydb.v1.IGetUserRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IGetUserRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getUser(
    request: protos.google.cloud.alloydb.v1.IGetUserRequest,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IGetUserRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getUser(
    request?: protos.google.cloud.alloydb.v1.IGetUserRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.alloydb.v1.IUser,
          protos.google.cloud.alloydb.v1.IGetUserRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IGetUserRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IGetUserRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getUser(request, options, callback);
  }
  /**
   * Creates a new User in a given project, location, and cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.userId
   *   Required. ID of the requesting object.
   * @param {google.cloud.alloydb.v1.User} request.user
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, the backend validates the request, but doesn't actually
   *   execute it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.alloydb.v1.User|User}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_user.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateUser_async
   */
  createUser(
    request?: protos.google.cloud.alloydb.v1.ICreateUserRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.ICreateUserRequest | undefined,
      {} | undefined,
    ]
  >;
  createUser(
    request: protos.google.cloud.alloydb.v1.ICreateUserRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.ICreateUserRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createUser(
    request: protos.google.cloud.alloydb.v1.ICreateUserRequest,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.ICreateUserRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createUser(
    request?: protos.google.cloud.alloydb.v1.ICreateUserRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.alloydb.v1.IUser,
          protos.google.cloud.alloydb.v1.ICreateUserRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.ICreateUserRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.ICreateUserRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createUser(request, options, callback);
  }
  /**
   * Updates the parameters of a single User.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   User resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.alloydb.v1.User} request.user
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, the backend validates the request, but doesn't actually
   *   execute it.
   * @param {boolean} [request.allowMissing]
   *   Optional. Allow missing fields in the update mask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.alloydb.v1.User|User}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.update_user.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_UpdateUser_async
   */
  updateUser(
    request?: protos.google.cloud.alloydb.v1.IUpdateUserRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IUpdateUserRequest | undefined,
      {} | undefined,
    ]
  >;
  updateUser(
    request: protos.google.cloud.alloydb.v1.IUpdateUserRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IUpdateUserRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateUser(
    request: protos.google.cloud.alloydb.v1.IUpdateUserRequest,
    callback: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IUpdateUserRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateUser(
    request?: protos.google.cloud.alloydb.v1.IUpdateUserRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.alloydb.v1.IUser,
          protos.google.cloud.alloydb.v1.IUpdateUserRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IUpdateUserRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IUser,
      protos.google.cloud.alloydb.v1.IUpdateUserRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'user.name': request.user!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateUser(request, options, callback);
  }
  /**
   * Deletes a single User.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the User.name field.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, the backend validates the request, but doesn't actually
   *   execute it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.delete_user.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_DeleteUser_async
   */
  deleteUser(
    request?: protos.google.cloud.alloydb.v1.IDeleteUserRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.alloydb.v1.IDeleteUserRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteUser(
    request: protos.google.cloud.alloydb.v1.IDeleteUserRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.alloydb.v1.IDeleteUserRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteUser(
    request: protos.google.cloud.alloydb.v1.IDeleteUserRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.alloydb.v1.IDeleteUserRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteUser(
    request?: protos.google.cloud.alloydb.v1.IDeleteUserRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.alloydb.v1.IDeleteUserRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.alloydb.v1.IDeleteUserRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.alloydb.v1.IDeleteUserRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteUser(request, options, callback);
  }

  /**
   * Creates a new Cluster in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location of the new cluster. For the required format, see the
   *   comment on the Cluster.name field.
   * @param {string} request.clusterId
   *   Required. ID of the requesting object.
   * @param {google.cloud.alloydb.v1.Cluster} request.cluster
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the create
   *   request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateCluster_async
   */
  createCluster(
    request?: protos.google.cloud.alloydb.v1.ICreateClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createCluster(
    request: protos.google.cloud.alloydb.v1.ICreateClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCluster(
    request: protos.google.cloud.alloydb.v1.ICreateClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCluster(
    request?: protos.google.cloud.alloydb.v1.ICreateClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.ICluster,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateCluster_async
   */
  async checkCreateClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   Cluster resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.alloydb.v1.Cluster} request.cluster
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the update
   *   request.
   * @param {boolean} [request.allowMissing]
   *   Optional. If set to true, update succeeds even if cluster is not found. In
   *   that case, a new cluster is created and `update_mask` is ignored.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.update_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_UpdateCluster_async
   */
  updateCluster(
    request?: protos.google.cloud.alloydb.v1.IUpdateClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateCluster(
    request: protos.google.cloud.alloydb.v1.IUpdateClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCluster(
    request: protos.google.cloud.alloydb.v1.IUpdateClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCluster(
    request?: protos.google.cloud.alloydb.v1.IUpdateClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.ICluster,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'cluster.name': request.cluster!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.update_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_UpdateCluster_async
   */
  async checkUpdateClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the Cluster.name field.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {string} [request.etag]
   *   Optional. The current etag of the Cluster.
   *   If an etag is provided and does not match the current etag of the Cluster,
   *   deletion will be blocked and an ABORTED error will be returned.
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the delete.
   * @param {boolean} [request.force]
   *   Optional. Whether to cascade delete child instances for given cluster.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.delete_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_DeleteCluster_async
   */
  deleteCluster(
    request?: protos.google.cloud.alloydb.v1.IDeleteClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteCluster(
    request: protos.google.cloud.alloydb.v1.IDeleteClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCluster(
    request: protos.google.cloud.alloydb.v1.IDeleteClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCluster(
    request?: protos.google.cloud.alloydb.v1.IDeleteClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.delete_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_DeleteCluster_async
   */
  async checkDeleteClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Promotes a SECONDARY cluster. This turns down replication
   * from the PRIMARY cluster and promotes a secondary cluster
   * into its own standalone cluster.
   * Imperative only.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the Cluster.name field
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {string} [request.etag]
   *   Optional. The current etag of the Cluster.
   *   If an etag is provided and does not match the current etag of the Cluster,
   *   deletion will be blocked and an ABORTED error will be returned.
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.promote_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_PromoteCluster_async
   */
  promoteCluster(
    request?: protos.google.cloud.alloydb.v1.IPromoteClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  promoteCluster(
    request: protos.google.cloud.alloydb.v1.IPromoteClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  promoteCluster(
    request: protos.google.cloud.alloydb.v1.IPromoteClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  promoteCluster(
    request?: protos.google.cloud.alloydb.v1.IPromoteClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.ICluster,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.promoteCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `promoteCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.promote_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_PromoteCluster_async
   */
  async checkPromoteClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.promoteCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Cluster in a given project and location, with a volume
   * restored from the provided source, either a backup ID or a point-in-time
   * and a source cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.alloydb.v1.BackupSource} request.backupSource
   *   Backup source.
   * @param {google.cloud.alloydb.v1.ContinuousBackupSource} request.continuousBackupSource
   *   ContinuousBackup source. Continuous backup needs to be enabled in the
   *   source cluster for this operation to succeed.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Cluster.name field.
   * @param {string} request.clusterId
   *   Required. ID of the requesting object.
   * @param {google.cloud.alloydb.v1.Cluster} request.cluster
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the import
   *   request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.restore_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_RestoreCluster_async
   */
  restoreCluster(
    request?: protos.google.cloud.alloydb.v1.IRestoreClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  restoreCluster(
    request: protos.google.cloud.alloydb.v1.IRestoreClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreCluster(
    request: protos.google.cloud.alloydb.v1.IRestoreClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreCluster(
    request?: protos.google.cloud.alloydb.v1.IRestoreClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.ICluster,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.restoreCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `restoreCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.restore_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_RestoreCluster_async
   */
  async checkRestoreClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.restoreCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Creates a cluster of type SECONDARY in the given location using
   * the primary cluster as the source.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location of the new cluster. For the required
   *   format, see the comment on the Cluster.name field.
   * @param {string} request.clusterId
   *   Required. ID of the requesting object (the secondary cluster).
   * @param {google.cloud.alloydb.v1.Cluster} request.cluster
   *   Required. Configuration of the requesting object (the secondary cluster).
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the create
   *   request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_secondary_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateSecondaryCluster_async
   */
  createSecondaryCluster(
    request?: protos.google.cloud.alloydb.v1.ICreateSecondaryClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createSecondaryCluster(
    request: protos.google.cloud.alloydb.v1.ICreateSecondaryClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSecondaryCluster(
    request: protos.google.cloud.alloydb.v1.ICreateSecondaryClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSecondaryCluster(
    request?: protos.google.cloud.alloydb.v1.ICreateSecondaryClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.ICluster,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.ICluster,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSecondaryCluster(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createSecondaryCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_secondary_cluster.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateSecondaryCluster_async
   */
  async checkCreateSecondaryClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createSecondaryCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Cluster,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Instance in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Instance.name field.
   * @param {string} request.instanceId
   *   Required. ID of the requesting object.
   * @param {google.cloud.alloydb.v1.Instance} request.instance
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the create
   *   request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateInstance_async
   */
  createInstance(
    request?: protos.google.cloud.alloydb.v1.ICreateInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createInstance(
    request: protos.google.cloud.alloydb.v1.ICreateInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createInstance(
    request: protos.google.cloud.alloydb.v1.ICreateInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createInstance(
    request?: protos.google.cloud.alloydb.v1.ICreateInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IInstance,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateInstance_async
   */
  async checkCreateInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new SECONDARY Instance in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Instance.name field.
   * @param {string} request.instanceId
   *   Required. ID of the requesting object.
   * @param {google.cloud.alloydb.v1.Instance} request.instance
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the create
   *   request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_secondary_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateSecondaryInstance_async
   */
  createSecondaryInstance(
    request?: protos.google.cloud.alloydb.v1.ICreateSecondaryInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createSecondaryInstance(
    request: protos.google.cloud.alloydb.v1.ICreateSecondaryInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSecondaryInstance(
    request: protos.google.cloud.alloydb.v1.ICreateSecondaryInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSecondaryInstance(
    request?: protos.google.cloud.alloydb.v1.ICreateSecondaryInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IInstance,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSecondaryInstance(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createSecondaryInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_secondary_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateSecondaryInstance_async
   */
  async checkCreateSecondaryInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createSecondaryInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Creates new instances under the given project, location and cluster.
   * There can be only one primary instance in a cluster. If the primary
   * instance exists in the cluster as well as this request, then API will
   * throw an error.
   * The primary instance should exist before any read pool instance is
   * created. If the primary instance is a part of the request payload, then
   * the API will take care of creating instances in the correct order.
   * This method is here to support Google-internal use cases, and is not meant
   * for external customers to consume. Please do not start relying on it; its
   * behavior is subject to change without notice.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource.
   * @param {google.cloud.alloydb.v1.CreateInstanceRequests} request.requests
   *   Required. Resources being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.batch_create_instances.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_BatchCreateInstances_async
   */
  batchCreateInstances(
    request?: protos.google.cloud.alloydb.v1.IBatchCreateInstancesRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IBatchCreateInstancesResponse,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  batchCreateInstances(
    request: protos.google.cloud.alloydb.v1.IBatchCreateInstancesRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBatchCreateInstancesResponse,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateInstances(
    request: protos.google.cloud.alloydb.v1.IBatchCreateInstancesRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBatchCreateInstancesResponse,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateInstances(
    request?: protos.google.cloud.alloydb.v1.IBatchCreateInstancesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IBatchCreateInstancesResponse,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBatchCreateInstancesResponse,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IBatchCreateInstancesResponse,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateInstances(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `batchCreateInstances()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.batch_create_instances.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_BatchCreateInstances_async
   */
  async checkBatchCreateInstancesProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.BatchCreateInstancesResponse,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.batchCreateInstances,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.BatchCreateInstancesResponse,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   Instance resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.alloydb.v1.Instance} request.instance
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the update
   *   request.
   * @param {boolean} [request.allowMissing]
   *   Optional. If set to true, update succeeds even if instance is not found. In
   *   that case, a new instance is created and `update_mask` is ignored.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.update_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_UpdateInstance_async
   */
  updateInstance(
    request?: protos.google.cloud.alloydb.v1.IUpdateInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateInstance(
    request: protos.google.cloud.alloydb.v1.IUpdateInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateInstance(
    request: protos.google.cloud.alloydb.v1.IUpdateInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateInstance(
    request?: protos.google.cloud.alloydb.v1.IUpdateInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IInstance,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'instance.name': request.instance!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.update_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_UpdateInstance_async
   */
  async checkUpdateInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the Instance.name field.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {string} [request.etag]
   *   Optional. The current etag of the Instance.
   *   If an etag is provided and does not match the current etag of the Instance,
   *   deletion will be blocked and an ABORTED error will be returned.
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.delete_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_DeleteInstance_async
   */
  deleteInstance(
    request?: protos.google.cloud.alloydb.v1.IDeleteInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteInstance(
    request: protos.google.cloud.alloydb.v1.IDeleteInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInstance(
    request: protos.google.cloud.alloydb.v1.IDeleteInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInstance(
    request?: protos.google.cloud.alloydb.v1.IDeleteInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.delete_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_DeleteInstance_async
   */
  async checkDeleteInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Forces a Failover for a highly available instance.
   * Failover promotes the HA standby instance as the new primary.
   * Imperative only.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the Instance.name field.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the failover.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.failover_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_FailoverInstance_async
   */
  failoverInstance(
    request?: protos.google.cloud.alloydb.v1.IFailoverInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  failoverInstance(
    request: protos.google.cloud.alloydb.v1.IFailoverInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  failoverInstance(
    request: protos.google.cloud.alloydb.v1.IFailoverInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  failoverInstance(
    request?: protos.google.cloud.alloydb.v1.IFailoverInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IInstance,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.failoverInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `failoverInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.failover_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_FailoverInstance_async
   */
  async checkFailoverInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.failoverInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Injects fault in an instance.
   * Imperative only.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.alloydb.v1.InjectFaultRequest.FaultType} request.faultType
   *   Required. The type of fault to be injected in an instance.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the Instance.name field.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the fault
   *   injection.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.inject_fault.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_InjectFault_async
   */
  injectFault(
    request?: protos.google.cloud.alloydb.v1.IInjectFaultRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  injectFault(
    request: protos.google.cloud.alloydb.v1.IInjectFaultRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  injectFault(
    request: protos.google.cloud.alloydb.v1.IInjectFaultRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  injectFault(
    request?: protos.google.cloud.alloydb.v1.IInjectFaultRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IInstance,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.injectFault(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `injectFault()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.inject_fault.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_InjectFault_async
   */
  async checkInjectFaultProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.injectFault,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Restart an Instance in a cluster.
   * Imperative only.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource. For the required format, see the
   *   comment on the Instance.name field.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, performs request validation (e.g. permission checks and
   *   any other type of validation), but do not actually execute the restart.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.restart_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_RestartInstance_async
   */
  restartInstance(
    request?: protos.google.cloud.alloydb.v1.IRestartInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  restartInstance(
    request: protos.google.cloud.alloydb.v1.IRestartInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restartInstance(
    request: protos.google.cloud.alloydb.v1.IRestartInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restartInstance(
    request?: protos.google.cloud.alloydb.v1.IRestartInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IInstance,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IInstance,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.restartInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `restartInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.restart_instance.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_RestartInstance_async
   */
  async checkRestartInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.restartInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Instance,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Backup in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.backupId
   *   Required. ID of the requesting object.
   * @param {google.cloud.alloydb.v1.Backup} request.backup
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, the backend validates the request, but doesn't actually
   *   execute it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_backup.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateBackup_async
   */
  createBackup(
    request?: protos.google.cloud.alloydb.v1.ICreateBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createBackup(
    request: protos.google.cloud.alloydb.v1.ICreateBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request: protos.google.cloud.alloydb.v1.ICreateBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request?: protos.google.cloud.alloydb.v1.ICreateBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IBackup,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.create_backup.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_CreateBackup_async
   */
  async checkCreateBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Backup,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Backup,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   Backup resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.alloydb.v1.Backup} request.backup
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, the backend validates the request, but doesn't actually
   *   execute it.
   * @param {boolean} [request.allowMissing]
   *   Optional. If set to true, update succeeds even if instance is not found. In
   *   that case, a new backup is created and `update_mask` is ignored.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.update_backup.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_UpdateBackup_async
   */
  updateBackup(
    request?: protos.google.cloud.alloydb.v1.IUpdateBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateBackup(
    request: protos.google.cloud.alloydb.v1.IUpdateBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackup(
    request: protos.google.cloud.alloydb.v1.IUpdateBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackup(
    request?: protos.google.cloud.alloydb.v1.IUpdateBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.alloydb.v1.IBackup,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.alloydb.v1.IBackup,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'backup.name': request.backup!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.update_backup.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_UpdateBackup_async
   */
  async checkUpdateBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.alloydb.v1.Backup,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.alloydb.v1.Backup,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource. For the required format, see the comment on
   *   the Backup.name field.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, the backend validates the request, but doesn't actually
   *   execute it.
   * @param {string} [request.etag]
   *   Optional. The current etag of the Backup.
   *   If an etag is provided and does not match the current etag of the Backup,
   *   deletion will be blocked and an ABORTED error will be returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.delete_backup.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_DeleteBackup_async
   */
  deleteBackup(
    request?: protos.google.cloud.alloydb.v1.IDeleteBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteBackup(
    request: protos.google.cloud.alloydb.v1.IDeleteBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request: protos.google.cloud.alloydb.v1.IDeleteBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request?: protos.google.cloud.alloydb.v1.IDeleteBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.alloydb.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.alloydb.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.delete_backup.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_DeleteBackup_async
   */
  async checkDeleteBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.alloydb.v1.OperationMetadata
    >;
  }
  /**
   * Lists Clusters in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Cluster.name field. Additionally, you can perform an
   *   aggregated list operation by specifying a value with the following format:
   *    * projects/{project}/locations/-
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.alloydb.v1.Cluster|Cluster}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listClusters(
    request?: protos.google.cloud.alloydb.v1.IListClustersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.ICluster[],
      protos.google.cloud.alloydb.v1.IListClustersRequest | null,
      protos.google.cloud.alloydb.v1.IListClustersResponse,
    ]
  >;
  listClusters(
    request: protos.google.cloud.alloydb.v1.IListClustersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListClustersRequest,
      protos.google.cloud.alloydb.v1.IListClustersResponse | null | undefined,
      protos.google.cloud.alloydb.v1.ICluster
    >
  ): void;
  listClusters(
    request: protos.google.cloud.alloydb.v1.IListClustersRequest,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListClustersRequest,
      protos.google.cloud.alloydb.v1.IListClustersResponse | null | undefined,
      protos.google.cloud.alloydb.v1.ICluster
    >
  ): void;
  listClusters(
    request?: protos.google.cloud.alloydb.v1.IListClustersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.alloydb.v1.IListClustersRequest,
          | protos.google.cloud.alloydb.v1.IListClustersResponse
          | null
          | undefined,
          protos.google.cloud.alloydb.v1.ICluster
        >,
    callback?: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListClustersRequest,
      protos.google.cloud.alloydb.v1.IListClustersResponse | null | undefined,
      protos.google.cloud.alloydb.v1.ICluster
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.ICluster[],
      protos.google.cloud.alloydb.v1.IListClustersRequest | null,
      protos.google.cloud.alloydb.v1.IListClustersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listClusters(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Cluster.name field. Additionally, you can perform an
   *   aggregated list operation by specifying a value with the following format:
   *    * projects/{project}/locations/-
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.alloydb.v1.Cluster|Cluster} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listClustersStream(
    request?: protos.google.cloud.alloydb.v1.IListClustersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listClusters.createStream(
      this.innerApiCalls.listClusters as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listClusters`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Cluster.name field. Additionally, you can perform an
   *   aggregated list operation by specifying a value with the following format:
   *    * projects/{project}/locations/-
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.alloydb.v1.Cluster|Cluster}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.list_clusters.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_ListClusters_async
   */
  listClustersAsync(
    request?: protos.google.cloud.alloydb.v1.IListClustersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.alloydb.v1.ICluster> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listClusters.asyncIterate(
      this.innerApiCalls['listClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.alloydb.v1.ICluster>;
  }
  /**
   * Lists Instances in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Instance.name field. Additionally, you can perform an
   *   aggregated list operation by specifying a value with one of the following
   *   formats:
   *    * projects/{project}/locations/-/clusters/-
   *    * projects/{project}/locations/{region}/clusters/-
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.alloydb.v1.Instance|Instance}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listInstancesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listInstances(
    request?: protos.google.cloud.alloydb.v1.IListInstancesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IInstance[],
      protos.google.cloud.alloydb.v1.IListInstancesRequest | null,
      protos.google.cloud.alloydb.v1.IListInstancesResponse,
    ]
  >;
  listInstances(
    request: protos.google.cloud.alloydb.v1.IListInstancesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListInstancesRequest,
      protos.google.cloud.alloydb.v1.IListInstancesResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IInstance
    >
  ): void;
  listInstances(
    request: protos.google.cloud.alloydb.v1.IListInstancesRequest,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListInstancesRequest,
      protos.google.cloud.alloydb.v1.IListInstancesResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IInstance
    >
  ): void;
  listInstances(
    request?: protos.google.cloud.alloydb.v1.IListInstancesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.alloydb.v1.IListInstancesRequest,
          | protos.google.cloud.alloydb.v1.IListInstancesResponse
          | null
          | undefined,
          protos.google.cloud.alloydb.v1.IInstance
        >,
    callback?: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListInstancesRequest,
      protos.google.cloud.alloydb.v1.IListInstancesResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IInstance
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IInstance[],
      protos.google.cloud.alloydb.v1.IListInstancesRequest | null,
      protos.google.cloud.alloydb.v1.IListInstancesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listInstances(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Instance.name field. Additionally, you can perform an
   *   aggregated list operation by specifying a value with one of the following
   *   formats:
   *    * projects/{project}/locations/-/clusters/-
   *    * projects/{project}/locations/{region}/clusters/-
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.alloydb.v1.Instance|Instance} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listInstancesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listInstancesStream(
    request?: protos.google.cloud.alloydb.v1.IListInstancesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInstances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInstances.createStream(
      this.innerApiCalls.listInstances as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listInstances`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. For the required format, see the
   *   comment on the Instance.name field. Additionally, you can perform an
   *   aggregated list operation by specifying a value with one of the following
   *   formats:
   *    * projects/{project}/locations/-/clusters/-
   *    * projects/{project}/locations/{region}/clusters/-
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.alloydb.v1.Instance|Instance}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.list_instances.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_ListInstances_async
   */
  listInstancesAsync(
    request?: protos.google.cloud.alloydb.v1.IListInstancesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.alloydb.v1.IInstance> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInstances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInstances.asyncIterate(
      this.innerApiCalls['listInstances'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.alloydb.v1.IInstance>;
  }
  /**
   * Lists Backups in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListBackupsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.alloydb.v1.Backup|Backup}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBackups(
    request?: protos.google.cloud.alloydb.v1.IListBackupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IBackup[],
      protos.google.cloud.alloydb.v1.IListBackupsRequest | null,
      protos.google.cloud.alloydb.v1.IListBackupsResponse,
    ]
  >;
  listBackups(
    request: protos.google.cloud.alloydb.v1.IListBackupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListBackupsRequest,
      protos.google.cloud.alloydb.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IBackup
    >
  ): void;
  listBackups(
    request: protos.google.cloud.alloydb.v1.IListBackupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListBackupsRequest,
      protos.google.cloud.alloydb.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IBackup
    >
  ): void;
  listBackups(
    request?: protos.google.cloud.alloydb.v1.IListBackupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.alloydb.v1.IListBackupsRequest,
          | protos.google.cloud.alloydb.v1.IListBackupsResponse
          | null
          | undefined,
          protos.google.cloud.alloydb.v1.IBackup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListBackupsRequest,
      protos.google.cloud.alloydb.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IBackup
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IBackup[],
      protos.google.cloud.alloydb.v1.IListBackupsRequest | null,
      protos.google.cloud.alloydb.v1.IListBackupsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBackups(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListBackupsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.alloydb.v1.Backup|Backup} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBackupsStream(
    request?: protos.google.cloud.alloydb.v1.IListBackupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.createStream(
      this.innerApiCalls.listBackups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBackups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListBackupsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.alloydb.v1.Backup|Backup}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.list_backups.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_ListBackups_async
   */
  listBackupsAsync(
    request?: protos.google.cloud.alloydb.v1.IListBackupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.alloydb.v1.IBackup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.asyncIterate(
      this.innerApiCalls['listBackups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.alloydb.v1.IBackup>;
  }
  /**
   * Lists SupportedDatabaseFlags for a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. The required format is:
   *    * projects/{project}/locations/{location}
   *
   *   Regardless of the parent specified here, as long it is contains a valid
   *   project and location, the service will return a static list of supported
   *   flags resources. Note that we do not yet support region-specific
   *   flags.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.alloydb.v1.SupportedDatabaseFlag|SupportedDatabaseFlag}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSupportedDatabaseFlagsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSupportedDatabaseFlags(
    request?: protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.ISupportedDatabaseFlag[],
      protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest | null,
      protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsResponse,
    ]
  >;
  listSupportedDatabaseFlags(
    request: protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
      | protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsResponse
      | null
      | undefined,
      protos.google.cloud.alloydb.v1.ISupportedDatabaseFlag
    >
  ): void;
  listSupportedDatabaseFlags(
    request: protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
      | protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsResponse
      | null
      | undefined,
      protos.google.cloud.alloydb.v1.ISupportedDatabaseFlag
    >
  ): void;
  listSupportedDatabaseFlags(
    request?: protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
          | protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsResponse
          | null
          | undefined,
          protos.google.cloud.alloydb.v1.ISupportedDatabaseFlag
        >,
    callback?: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
      | protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsResponse
      | null
      | undefined,
      protos.google.cloud.alloydb.v1.ISupportedDatabaseFlag
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.ISupportedDatabaseFlag[],
      protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest | null,
      protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSupportedDatabaseFlags(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. The required format is:
   *    * projects/{project}/locations/{location}
   *
   *   Regardless of the parent specified here, as long it is contains a valid
   *   project and location, the service will return a static list of supported
   *   flags resources. Note that we do not yet support region-specific
   *   flags.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.alloydb.v1.SupportedDatabaseFlag|SupportedDatabaseFlag} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSupportedDatabaseFlagsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSupportedDatabaseFlagsStream(
    request?: protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSupportedDatabaseFlags'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSupportedDatabaseFlags.createStream(
      this.innerApiCalls.listSupportedDatabaseFlags as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSupportedDatabaseFlags`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource. The required format is:
   *    * projects/{project}/locations/{location}
   *
   *   Regardless of the parent specified here, as long it is contains a valid
   *   project and location, the service will return a static list of supported
   *   flags resources. Note that we do not yet support region-specific
   *   flags.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.alloydb.v1.SupportedDatabaseFlag|SupportedDatabaseFlag}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.list_supported_database_flags.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_ListSupportedDatabaseFlags_async
   */
  listSupportedDatabaseFlagsAsync(
    request?: protos.google.cloud.alloydb.v1.IListSupportedDatabaseFlagsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.alloydb.v1.ISupportedDatabaseFlag> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSupportedDatabaseFlags'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSupportedDatabaseFlags.asyncIterate(
      this.innerApiCalls['listSupportedDatabaseFlags'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.alloydb.v1.ISupportedDatabaseFlag>;
  }
  /**
   * Lists Users in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListUsersRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.alloydb.v1.User|User}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listUsersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listUsers(
    request?: protos.google.cloud.alloydb.v1.IListUsersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IUser[],
      protos.google.cloud.alloydb.v1.IListUsersRequest | null,
      protos.google.cloud.alloydb.v1.IListUsersResponse,
    ]
  >;
  listUsers(
    request: protos.google.cloud.alloydb.v1.IListUsersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListUsersRequest,
      protos.google.cloud.alloydb.v1.IListUsersResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IUser
    >
  ): void;
  listUsers(
    request: protos.google.cloud.alloydb.v1.IListUsersRequest,
    callback: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListUsersRequest,
      protos.google.cloud.alloydb.v1.IListUsersResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IUser
    >
  ): void;
  listUsers(
    request?: protos.google.cloud.alloydb.v1.IListUsersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.alloydb.v1.IListUsersRequest,
          protos.google.cloud.alloydb.v1.IListUsersResponse | null | undefined,
          protos.google.cloud.alloydb.v1.IUser
        >,
    callback?: PaginationCallback<
      protos.google.cloud.alloydb.v1.IListUsersRequest,
      protos.google.cloud.alloydb.v1.IListUsersResponse | null | undefined,
      protos.google.cloud.alloydb.v1.IUser
    >
  ): Promise<
    [
      protos.google.cloud.alloydb.v1.IUser[],
      protos.google.cloud.alloydb.v1.IListUsersRequest | null,
      protos.google.cloud.alloydb.v1.IListUsersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listUsers(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListUsersRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.alloydb.v1.User|User} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listUsersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listUsersStream(
    request?: protos.google.cloud.alloydb.v1.IListUsersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listUsers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUsers.createStream(
      this.innerApiCalls.listUsers as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listUsers`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListUsersRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.alloydb.v1.User|User}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/alloy_d_b_admin.list_users.js</caption>
   * region_tag:alloydb_v1_generated_AlloyDBAdmin_ListUsers_async
   */
  listUsersAsync(
    request?: protos.google.cloud.alloydb.v1.IListUsersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.alloydb.v1.IUser> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listUsers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUsers.asyncIterate(
      this.innerApiCalls['listUsers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.alloydb.v1.IUser>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified backup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup
   * @returns {string} Resource name string.
   */
  backupPath(project: string, location: string, backup: string) {
    return this.pathTemplates.backupPathTemplate.render({
      project: project,
      location: location,
      backup: backup,
    });
  }

  /**
   * Parse the project from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).project;
  }

  /**
   * Parse the location from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).location;
  }

  /**
   * Parse the backup from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backup.
   */
  matchBackupFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backup;
  }

  /**
   * Return a fully-qualified cluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @returns {string} Resource name string.
   */
  clusterPath(project: string, location: string, cluster: string) {
    return this.pathTemplates.clusterPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
    });
  }

  /**
   * Parse the project from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
  }

  /**
   * Parse the location from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).location;
  }

  /**
   * Parse the cluster from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
  }

  /**
   * Return a fully-qualified connectionInfo resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  connectionInfoPath(
    project: string,
    location: string,
    cluster: string,
    instance: string
  ) {
    return this.pathTemplates.connectionInfoPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      instance: instance,
    });
  }

  /**
   * Parse the project from ConnectionInfo resource.
   *
   * @param {string} connectionInfoName
   *   A fully-qualified path representing ConnectionInfo resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConnectionInfoName(connectionInfoName: string) {
    return this.pathTemplates.connectionInfoPathTemplate.match(
      connectionInfoName
    ).project;
  }

  /**
   * Parse the location from ConnectionInfo resource.
   *
   * @param {string} connectionInfoName
   *   A fully-qualified path representing ConnectionInfo resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromConnectionInfoName(connectionInfoName: string) {
    return this.pathTemplates.connectionInfoPathTemplate.match(
      connectionInfoName
    ).location;
  }

  /**
   * Parse the cluster from ConnectionInfo resource.
   *
   * @param {string} connectionInfoName
   *   A fully-qualified path representing ConnectionInfo resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromConnectionInfoName(connectionInfoName: string) {
    return this.pathTemplates.connectionInfoPathTemplate.match(
      connectionInfoName
    ).cluster;
  }

  /**
   * Parse the instance from ConnectionInfo resource.
   *
   * @param {string} connectionInfoName
   *   A fully-qualified path representing ConnectionInfo resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromConnectionInfoName(connectionInfoName: string) {
    return this.pathTemplates.connectionInfoPathTemplate.match(
      connectionInfoName
    ).instance;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(
    project: string,
    location: string,
    cluster: string,
    instance: string
  ) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the cluster from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).cluster;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified supportedDatabaseFlag resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} flag
   * @returns {string} Resource name string.
   */
  supportedDatabaseFlagPath(project: string, location: string, flag: string) {
    return this.pathTemplates.supportedDatabaseFlagPathTemplate.render({
      project: project,
      location: location,
      flag: flag,
    });
  }

  /**
   * Parse the project from SupportedDatabaseFlag resource.
   *
   * @param {string} supportedDatabaseFlagName
   *   A fully-qualified path representing SupportedDatabaseFlag resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSupportedDatabaseFlagName(supportedDatabaseFlagName: string) {
    return this.pathTemplates.supportedDatabaseFlagPathTemplate.match(
      supportedDatabaseFlagName
    ).project;
  }

  /**
   * Parse the location from SupportedDatabaseFlag resource.
   *
   * @param {string} supportedDatabaseFlagName
   *   A fully-qualified path representing SupportedDatabaseFlag resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSupportedDatabaseFlagName(
    supportedDatabaseFlagName: string
  ) {
    return this.pathTemplates.supportedDatabaseFlagPathTemplate.match(
      supportedDatabaseFlagName
    ).location;
  }

  /**
   * Parse the flag from SupportedDatabaseFlag resource.
   *
   * @param {string} supportedDatabaseFlagName
   *   A fully-qualified path representing SupportedDatabaseFlag resource.
   * @returns {string} A string representing the flag.
   */
  matchFlagFromSupportedDatabaseFlagName(supportedDatabaseFlagName: string) {
    return this.pathTemplates.supportedDatabaseFlagPathTemplate.match(
      supportedDatabaseFlagName
    ).flag;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @param {string} user
   * @returns {string} Resource name string.
   */
  userPath(project: string, location: string, cluster: string, user: string) {
    return this.pathTemplates.userPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
      user: user,
    });
  }

  /**
   * Parse the project from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).project;
  }

  /**
   * Parse the location from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).location;
  }

  /**
   * Parse the cluster from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).cluster;
  }

  /**
   * Parse the user from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).user;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.alloyDBAdminStub && !this._terminated) {
      return this.alloyDBAdminStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
