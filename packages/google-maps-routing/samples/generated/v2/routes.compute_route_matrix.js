// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(origins, destinations) {
  // [START routes_v2_generated_Routes_ComputeRouteMatrix_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Array of origins, which determines the rows of the response
   *  matrix. Several size restrictions apply to the cardinality of origins and
   *  destinations:
   *  * The number of elements (origins × destinations) must be no greater than
   *  625 in any case.
   *  * The number of elements (origins × destinations) must be no greater than
   *  100 if routing_preference is set to `TRAFFIC_AWARE_OPTIMAL`.
   *  * The number of waypoints (origins + destinations) specified as `place_id`
   *  must be no greater than 50.
   */
  // const origins = 1234
  /**
   *  Required. Array of destinations, which determines the columns of the
   *  response matrix.
   */
  // const destinations = 1234
  /**
   *  Optional. Specifies the mode of transportation.
   */
  // const travelMode = {}
  /**
   *  Optional. Specifies how to compute the route. The server attempts to use
   *  the selected routing preference to compute the route. If the routing
   *  preference results in an error or an extra long latency, an error is
   *  returned. You can specify this option only when the `travel_mode` is
   *  `DRIVE` or `TWO_WHEELER`, otherwise the request fails.
   */
  // const routingPreference = {}
  /**
   *  Optional. The departure time. If you don't set this value, this defaults to
   *  the time that you made the request. If you set this value to a time that
   *  has already occurred, the request fails.
   */
  // const departureTime = {}
  /**
   *  Optional. A list of extra computations which may be used to complete the
   *  request. Note: These extra computations may return extra fields on the
   *  response. These extra fields must also be specified in the field mask to be
   *  returned in the response.
   */
  // const extraComputations = 1234

  // Imports the Routing library
  const {RoutesClient} = require('@googlemaps/routing').v2;

  // Instantiates a client
  const routingClient = new RoutesClient();

  async function callComputeRouteMatrix() {
    // Construct request
    const request = {
      origins,
      destinations,
    };

    // Run request
    const stream = await routingClient.computeRouteMatrix(request);
    stream.on('data', (response) => { console.log(response) });
    stream.on('error', (err) => { throw(err) });
    stream.on('end', () => { /* API call completed */ });
  }

  callComputeRouteMatrix();
  // [END routes_v2_generated_Routes_ComputeRouteMatrix_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
