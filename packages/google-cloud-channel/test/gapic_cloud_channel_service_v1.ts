// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as cloudchannelserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.CloudChannelServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        cloudchannelserviceModule.v1.CloudChannelServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        cloudchannelserviceModule.v1.CloudChannelServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = cloudchannelserviceModule.v1.CloudChannelServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new cloudchannelserviceModule.v1.CloudChannelServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          fallback: true,
        }
      );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.cloudChannelServiceStub, undefined);
      await client.initialize();
      assert(client.cloudChannelServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      assert(client.cloudChannelServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.cloudChannelServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getCustomer', () => {
    it('invokes getCustomer without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetCustomerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Customer()
      );
      client.innerApiCalls.getCustomer = stubSimpleCall(expectedResponse);
      const [response] = await client.getCustomer(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomer without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetCustomerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Customer()
      );
      client.innerApiCalls.getCustomer =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCustomer(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICustomer | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomer with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetCustomerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCustomer = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCustomer(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomer with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetCustomerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCustomer(request), expectedError);
    });
  });

  describe('checkCloudIdentityAccountsExist', () => {
    it('invokes checkCloudIdentityAccountsExist without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistResponse()
      );
      client.innerApiCalls.checkCloudIdentityAccountsExist =
        stubSimpleCall(expectedResponse);
      const [response] = await client.checkCloudIdentityAccountsExist(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCloudIdentityAccountsExist without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistResponse()
      );
      client.innerApiCalls.checkCloudIdentityAccountsExist =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.checkCloudIdentityAccountsExist(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCloudIdentityAccountsExist with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.checkCloudIdentityAccountsExist = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCloudIdentityAccountsExist(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCloudIdentityAccountsExist with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.checkCloudIdentityAccountsExist(request),
        expectedError
      );
    });
  });

  describe('createCustomer', () => {
    it('invokes createCustomer without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateCustomerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Customer()
      );
      client.innerApiCalls.createCustomer = stubSimpleCall(expectedResponse);
      const [response] = await client.createCustomer(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomer without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateCustomerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Customer()
      );
      client.innerApiCalls.createCustomer =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCustomer(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICustomer | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomer with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateCustomerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCustomer = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCustomer(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomer with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateCustomerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createCustomer(request), expectedError);
    });
  });

  describe('updateCustomer', () => {
    it('invokes updateCustomer without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateCustomerRequest()
      );
      request.customer ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateCustomerRequest',
        ['customer', 'name']
      );
      request.customer.name = defaultValue1;
      const expectedHeaderRequestParams = `customer.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Customer()
      );
      client.innerApiCalls.updateCustomer = stubSimpleCall(expectedResponse);
      const [response] = await client.updateCustomer(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomer without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateCustomerRequest()
      );
      request.customer ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateCustomerRequest',
        ['customer', 'name']
      );
      request.customer.name = defaultValue1;
      const expectedHeaderRequestParams = `customer.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Customer()
      );
      client.innerApiCalls.updateCustomer =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCustomer(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICustomer | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomer with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateCustomerRequest()
      );
      request.customer ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateCustomerRequest',
        ['customer', 'name']
      );
      request.customer.name = defaultValue1;
      const expectedHeaderRequestParams = `customer.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCustomer = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateCustomer(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomer with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateCustomerRequest()
      );
      request.customer ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateCustomerRequest',
        ['customer', 'name']
      );
      request.customer.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateCustomer(request), expectedError);
    });
  });

  describe('deleteCustomer', () => {
    it('invokes deleteCustomer without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteCustomerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteCustomer = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteCustomer(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCustomer without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteCustomerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteCustomer =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteCustomer(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCustomer with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteCustomerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCustomer = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteCustomer(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCustomer with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteCustomerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteCustomer(request), expectedError);
    });
  });

  describe('importCustomer', () => {
    it('invokes importCustomer without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ImportCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ImportCustomerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Customer()
      );
      client.innerApiCalls.importCustomer = stubSimpleCall(expectedResponse);
      const [response] = await client.importCustomer(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importCustomer without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ImportCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ImportCustomerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Customer()
      );
      client.innerApiCalls.importCustomer =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.importCustomer(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICustomer | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importCustomer with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ImportCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ImportCustomerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importCustomer = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.importCustomer(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.importCustomer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importCustomer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importCustomer with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ImportCustomerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ImportCustomerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.importCustomer(request), expectedError);
    });
  });

  describe('getEntitlement', () => {
    it('invokes getEntitlement without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Entitlement()
      );
      client.innerApiCalls.getEntitlement = stubSimpleCall(expectedResponse);
      const [response] = await client.getEntitlement(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntitlement without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Entitlement()
      );
      client.innerApiCalls.getEntitlement =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEntitlement(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IEntitlement | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntitlement with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEntitlement = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getEntitlement(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntitlement with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getEntitlement(request), expectedError);
    });
  });

  describe('getChannelPartnerLink', () => {
    it('invokes getChannelPartnerLink without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetChannelPartnerLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerLink()
      );
      client.innerApiCalls.getChannelPartnerLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getChannelPartnerLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelPartnerLink without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetChannelPartnerLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerLink()
      );
      client.innerApiCalls.getChannelPartnerLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getChannelPartnerLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IChannelPartnerLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelPartnerLink with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetChannelPartnerLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getChannelPartnerLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getChannelPartnerLink(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelPartnerLink with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetChannelPartnerLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getChannelPartnerLink(request),
        expectedError
      );
    });
  });

  describe('createChannelPartnerLink', () => {
    it('invokes createChannelPartnerLink without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateChannelPartnerLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerLink()
      );
      client.innerApiCalls.createChannelPartnerLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createChannelPartnerLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelPartnerLink without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateChannelPartnerLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerLink()
      );
      client.innerApiCalls.createChannelPartnerLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createChannelPartnerLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IChannelPartnerLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelPartnerLink with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateChannelPartnerLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createChannelPartnerLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createChannelPartnerLink(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelPartnerLink with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateChannelPartnerLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createChannelPartnerLink(request),
        expectedError
      );
    });
  });

  describe('updateChannelPartnerLink', () => {
    it('invokes updateChannelPartnerLink without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerLink()
      );
      client.innerApiCalls.updateChannelPartnerLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateChannelPartnerLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannelPartnerLink without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerLink()
      );
      client.innerApiCalls.updateChannelPartnerLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateChannelPartnerLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IChannelPartnerLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannelPartnerLink with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateChannelPartnerLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateChannelPartnerLink(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateChannelPartnerLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannelPartnerLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannelPartnerLink with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateChannelPartnerLink(request),
        expectedError
      );
    });
  });

  describe('getCustomerRepricingConfig', () => {
    it('invokes getCustomerRepricingConfig without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetCustomerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.CustomerRepricingConfig()
      );
      client.innerApiCalls.getCustomerRepricingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getCustomerRepricingConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomerRepricingConfig without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetCustomerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.CustomerRepricingConfig()
      );
      client.innerApiCalls.getCustomerRepricingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCustomerRepricingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICustomerRepricingConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomerRepricingConfig with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetCustomerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCustomerRepricingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getCustomerRepricingConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomerRepricingConfig with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetCustomerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getCustomerRepricingConfig(request),
        expectedError
      );
    });
  });

  describe('createCustomerRepricingConfig', () => {
    it('invokes createCustomerRepricingConfig without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateCustomerRepricingConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.CustomerRepricingConfig()
      );
      client.innerApiCalls.createCustomerRepricingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createCustomerRepricingConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomerRepricingConfig without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateCustomerRepricingConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.CustomerRepricingConfig()
      );
      client.innerApiCalls.createCustomerRepricingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCustomerRepricingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICustomerRepricingConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomerRepricingConfig with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateCustomerRepricingConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCustomerRepricingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createCustomerRepricingConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomerRepricingConfig with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateCustomerRepricingConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createCustomerRepricingConfig(request),
        expectedError
      );
    });
  });

  describe('updateCustomerRepricingConfig', () => {
    it('invokes updateCustomerRepricingConfig without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateCustomerRepricingConfigRequest()
      );
      request.customerRepricingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateCustomerRepricingConfigRequest',
        ['customerRepricingConfig', 'name']
      );
      request.customerRepricingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `customer_repricing_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.CustomerRepricingConfig()
      );
      client.innerApiCalls.updateCustomerRepricingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateCustomerRepricingConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomerRepricingConfig without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateCustomerRepricingConfigRequest()
      );
      request.customerRepricingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateCustomerRepricingConfigRequest',
        ['customerRepricingConfig', 'name']
      );
      request.customerRepricingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `customer_repricing_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.CustomerRepricingConfig()
      );
      client.innerApiCalls.updateCustomerRepricingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCustomerRepricingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICustomerRepricingConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomerRepricingConfig with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateCustomerRepricingConfigRequest()
      );
      request.customerRepricingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateCustomerRepricingConfigRequest',
        ['customerRepricingConfig', 'name']
      );
      request.customerRepricingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `customer_repricing_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCustomerRepricingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateCustomerRepricingConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomerRepricingConfig with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateCustomerRepricingConfigRequest()
      );
      request.customerRepricingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateCustomerRepricingConfigRequest',
        ['customerRepricingConfig', 'name']
      );
      request.customerRepricingConfig.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateCustomerRepricingConfig(request),
        expectedError
      );
    });
  });

  describe('deleteCustomerRepricingConfig', () => {
    it('invokes deleteCustomerRepricingConfig without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteCustomerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteCustomerRepricingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteCustomerRepricingConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCustomerRepricingConfig without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteCustomerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteCustomerRepricingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteCustomerRepricingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCustomerRepricingConfig with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteCustomerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCustomerRepricingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteCustomerRepricingConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteCustomerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCustomerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCustomerRepricingConfig with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteCustomerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteCustomerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteCustomerRepricingConfig(request),
        expectedError
      );
    });
  });

  describe('getChannelPartnerRepricingConfig', () => {
    it('invokes getChannelPartnerRepricingConfig without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetChannelPartnerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
      );
      client.innerApiCalls.getChannelPartnerRepricingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getChannelPartnerRepricingConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelPartnerRepricingConfig without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetChannelPartnerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
      );
      client.innerApiCalls.getChannelPartnerRepricingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getChannelPartnerRepricingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IChannelPartnerRepricingConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelPartnerRepricingConfig with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetChannelPartnerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getChannelPartnerRepricingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getChannelPartnerRepricingConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelPartnerRepricingConfig with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.GetChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.GetChannelPartnerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getChannelPartnerRepricingConfig(request),
        expectedError
      );
    });
  });

  describe('createChannelPartnerRepricingConfig', () => {
    it('invokes createChannelPartnerRepricingConfig without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateChannelPartnerRepricingConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
      );
      client.innerApiCalls.createChannelPartnerRepricingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createChannelPartnerRepricingConfig(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelPartnerRepricingConfig without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateChannelPartnerRepricingConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
      );
      client.innerApiCalls.createChannelPartnerRepricingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createChannelPartnerRepricingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IChannelPartnerRepricingConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelPartnerRepricingConfig with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateChannelPartnerRepricingConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createChannelPartnerRepricingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createChannelPartnerRepricingConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelPartnerRepricingConfig with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateChannelPartnerRepricingConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createChannelPartnerRepricingConfig(request),
        expectedError
      );
    });
  });

  describe('updateChannelPartnerRepricingConfig', () => {
    it('invokes updateChannelPartnerRepricingConfig without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateChannelPartnerRepricingConfigRequest()
      );
      request.channelPartnerRepricingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateChannelPartnerRepricingConfigRequest',
        ['channelPartnerRepricingConfig', 'name']
      );
      request.channelPartnerRepricingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `channel_partner_repricing_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
      );
      client.innerApiCalls.updateChannelPartnerRepricingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateChannelPartnerRepricingConfig(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannelPartnerRepricingConfig without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateChannelPartnerRepricingConfigRequest()
      );
      request.channelPartnerRepricingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateChannelPartnerRepricingConfigRequest',
        ['channelPartnerRepricingConfig', 'name']
      );
      request.channelPartnerRepricingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `channel_partner_repricing_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
      );
      client.innerApiCalls.updateChannelPartnerRepricingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateChannelPartnerRepricingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IChannelPartnerRepricingConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannelPartnerRepricingConfig with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateChannelPartnerRepricingConfigRequest()
      );
      request.channelPartnerRepricingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateChannelPartnerRepricingConfigRequest',
        ['channelPartnerRepricingConfig', 'name']
      );
      request.channelPartnerRepricingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `channel_partner_repricing_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateChannelPartnerRepricingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateChannelPartnerRepricingConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannelPartnerRepricingConfig with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UpdateChannelPartnerRepricingConfigRequest()
      );
      request.channelPartnerRepricingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UpdateChannelPartnerRepricingConfigRequest',
        ['channelPartnerRepricingConfig', 'name']
      );
      request.channelPartnerRepricingConfig.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateChannelPartnerRepricingConfig(request),
        expectedError
      );
    });
  });

  describe('deleteChannelPartnerRepricingConfig', () => {
    it('invokes deleteChannelPartnerRepricingConfig without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteChannelPartnerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteChannelPartnerRepricingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteChannelPartnerRepricingConfig(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannelPartnerRepricingConfig without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteChannelPartnerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteChannelPartnerRepricingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteChannelPartnerRepricingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannelPartnerRepricingConfig with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteChannelPartnerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteChannelPartnerRepricingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteChannelPartnerRepricingConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannelPartnerRepricingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannelPartnerRepricingConfig with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.DeleteChannelPartnerRepricingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.DeleteChannelPartnerRepricingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteChannelPartnerRepricingConfig(request),
        expectedError
      );
    });
  });

  describe('lookupOffer', () => {
    it('invokes lookupOffer without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.LookupOfferRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.LookupOfferRequest',
        ['entitlement']
      );
      request.entitlement = defaultValue1;
      const expectedHeaderRequestParams = `entitlement=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Offer()
      );
      client.innerApiCalls.lookupOffer = stubSimpleCall(expectedResponse);
      const [response] = await client.lookupOffer(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupOffer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupOffer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupOffer without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.LookupOfferRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.LookupOfferRequest',
        ['entitlement']
      );
      request.entitlement = defaultValue1;
      const expectedHeaderRequestParams = `entitlement=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.Offer()
      );
      client.innerApiCalls.lookupOffer =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.lookupOffer(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IOffer | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupOffer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupOffer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupOffer with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.LookupOfferRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.LookupOfferRequest',
        ['entitlement']
      );
      request.entitlement = defaultValue1;
      const expectedHeaderRequestParams = `entitlement=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.lookupOffer = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.lookupOffer(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.lookupOffer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupOffer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupOffer with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.LookupOfferRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.LookupOfferRequest',
        ['entitlement']
      );
      request.entitlement = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.lookupOffer(request), expectedError);
    });
  });

  describe('registerSubscriber', () => {
    it('invokes registerSubscriber without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.RegisterSubscriberRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.RegisterSubscriberRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.RegisterSubscriberResponse()
      );
      client.innerApiCalls.registerSubscriber =
        stubSimpleCall(expectedResponse);
      const [response] = await client.registerSubscriber(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.registerSubscriber as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.registerSubscriber as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes registerSubscriber without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.RegisterSubscriberRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.RegisterSubscriberRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.RegisterSubscriberResponse()
      );
      client.innerApiCalls.registerSubscriber =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.registerSubscriber(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IRegisterSubscriberResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.registerSubscriber as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.registerSubscriber as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes registerSubscriber with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.RegisterSubscriberRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.RegisterSubscriberRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.registerSubscriber = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.registerSubscriber(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.registerSubscriber as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.registerSubscriber as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes registerSubscriber with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.RegisterSubscriberRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.RegisterSubscriberRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.registerSubscriber(request), expectedError);
    });
  });

  describe('unregisterSubscriber', () => {
    it('invokes unregisterSubscriber without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UnregisterSubscriberRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UnregisterSubscriberRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.UnregisterSubscriberResponse()
      );
      client.innerApiCalls.unregisterSubscriber =
        stubSimpleCall(expectedResponse);
      const [response] = await client.unregisterSubscriber(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.unregisterSubscriber as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.unregisterSubscriber as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes unregisterSubscriber without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UnregisterSubscriberRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UnregisterSubscriberRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.channel.v1.UnregisterSubscriberResponse()
      );
      client.innerApiCalls.unregisterSubscriber =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.unregisterSubscriber(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IUnregisterSubscriberResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.unregisterSubscriber as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.unregisterSubscriber as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes unregisterSubscriber with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UnregisterSubscriberRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UnregisterSubscriberRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.unregisterSubscriber = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.unregisterSubscriber(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.unregisterSubscriber as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.unregisterSubscriber as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes unregisterSubscriber with closed client', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.UnregisterSubscriberRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.UnregisterSubscriberRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.unregisterSubscriber(request), expectedError);
    });
  });

  describe('provisionCloudIdentity', () => {
    it('invokes provisionCloudIdentity without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ProvisionCloudIdentityRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ProvisionCloudIdentityRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.provisionCloudIdentity =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.provisionCloudIdentity(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.provisionCloudIdentity as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.provisionCloudIdentity as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes provisionCloudIdentity without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ProvisionCloudIdentityRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ProvisionCloudIdentityRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.provisionCloudIdentity =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.provisionCloudIdentity(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.ICustomer,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.ICustomer,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.provisionCloudIdentity as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.provisionCloudIdentity as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes provisionCloudIdentity with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ProvisionCloudIdentityRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ProvisionCloudIdentityRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.provisionCloudIdentity = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.provisionCloudIdentity(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.provisionCloudIdentity as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.provisionCloudIdentity as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes provisionCloudIdentity with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ProvisionCloudIdentityRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ProvisionCloudIdentityRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.provisionCloudIdentity = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.provisionCloudIdentity(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.provisionCloudIdentity as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.provisionCloudIdentity as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkProvisionCloudIdentityProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkProvisionCloudIdentityProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkProvisionCloudIdentityProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkProvisionCloudIdentityProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createEntitlement', () => {
    it('invokes createEntitlement without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateEntitlementRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createEntitlement =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createEntitlement(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntitlement without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateEntitlementRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createEntitlement =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createEntitlement(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.IEntitlement,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntitlement with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateEntitlementRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntitlement = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createEntitlement(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntitlement with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CreateEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CreateEntitlementRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntitlement = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createEntitlement(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateEntitlementProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateEntitlementProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateEntitlementProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateEntitlementProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('changeParameters', () => {
    it('invokes changeParameters without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeParametersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeParametersRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.changeParameters =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.changeParameters(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.changeParameters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeParameters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeParameters without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeParametersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeParametersRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.changeParameters =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.changeParameters(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.IEntitlement,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.changeParameters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeParameters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeParameters with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeParametersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeParametersRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.changeParameters = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.changeParameters(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.changeParameters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeParameters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeParameters with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeParametersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeParametersRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.changeParameters = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.changeParameters(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.changeParameters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeParameters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkChangeParametersProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkChangeParametersProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkChangeParametersProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkChangeParametersProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('changeRenewalSettings', () => {
    it('invokes changeRenewalSettings without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeRenewalSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeRenewalSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.changeRenewalSettings =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.changeRenewalSettings(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.changeRenewalSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeRenewalSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeRenewalSettings without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeRenewalSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeRenewalSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.changeRenewalSettings =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.changeRenewalSettings(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.IEntitlement,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.changeRenewalSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeRenewalSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeRenewalSettings with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeRenewalSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeRenewalSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.changeRenewalSettings = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.changeRenewalSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.changeRenewalSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeRenewalSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeRenewalSettings with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeRenewalSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeRenewalSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.changeRenewalSettings = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.changeRenewalSettings(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.changeRenewalSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeRenewalSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkChangeRenewalSettingsProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkChangeRenewalSettingsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkChangeRenewalSettingsProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkChangeRenewalSettingsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('changeOffer', () => {
    it('invokes changeOffer without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeOfferRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeOfferRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.changeOffer = stubLongRunningCall(expectedResponse);
      const [operation] = await client.changeOffer(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.changeOffer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeOffer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeOffer without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeOfferRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeOfferRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.changeOffer =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.changeOffer(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.IEntitlement,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.changeOffer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeOffer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeOffer with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeOfferRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeOfferRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.changeOffer = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.changeOffer(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.changeOffer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeOffer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes changeOffer with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ChangeOfferRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ChangeOfferRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.changeOffer = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.changeOffer(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.changeOffer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.changeOffer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkChangeOfferProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkChangeOfferProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkChangeOfferProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkChangeOfferProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('startPaidService', () => {
    it('invokes startPaidService without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.StartPaidServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.StartPaidServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startPaidService =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.startPaidService(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startPaidService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startPaidService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startPaidService without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.StartPaidServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.StartPaidServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startPaidService =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.startPaidService(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.IEntitlement,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startPaidService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startPaidService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startPaidService with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.StartPaidServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.StartPaidServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startPaidService = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.startPaidService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.startPaidService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startPaidService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startPaidService with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.StartPaidServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.StartPaidServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startPaidService = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.startPaidService(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.startPaidService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startPaidService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStartPaidServiceProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStartPaidServiceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStartPaidServiceProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkStartPaidServiceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('suspendEntitlement', () => {
    it('invokes suspendEntitlement without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.SuspendEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.SuspendEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.suspendEntitlement =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.suspendEntitlement(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.suspendEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.suspendEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes suspendEntitlement without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.SuspendEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.SuspendEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.suspendEntitlement =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.suspendEntitlement(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.IEntitlement,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.suspendEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.suspendEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes suspendEntitlement with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.SuspendEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.SuspendEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.suspendEntitlement = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.suspendEntitlement(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.suspendEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.suspendEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes suspendEntitlement with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.SuspendEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.SuspendEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.suspendEntitlement = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.suspendEntitlement(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.suspendEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.suspendEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkSuspendEntitlementProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkSuspendEntitlementProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkSuspendEntitlementProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkSuspendEntitlementProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('cancelEntitlement', () => {
    it('invokes cancelEntitlement without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CancelEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CancelEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.cancelEntitlement =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.cancelEntitlement(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.cancelEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelEntitlement without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CancelEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CancelEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.cancelEntitlement =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.cancelEntitlement(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.cancelEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelEntitlement with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CancelEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CancelEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.cancelEntitlement = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.cancelEntitlement(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.cancelEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelEntitlement with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.CancelEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.CancelEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.cancelEntitlement = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.cancelEntitlement(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.cancelEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCancelEntitlementProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCancelEntitlementProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCancelEntitlementProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCancelEntitlementProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('activateEntitlement', () => {
    it('invokes activateEntitlement without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ActivateEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ActivateEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.activateEntitlement =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.activateEntitlement(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.activateEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.activateEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes activateEntitlement without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ActivateEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ActivateEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.activateEntitlement =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.activateEntitlement(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.IEntitlement,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.activateEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.activateEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes activateEntitlement with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ActivateEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ActivateEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.activateEntitlement = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.activateEntitlement(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.activateEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.activateEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes activateEntitlement with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ActivateEntitlementRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ActivateEntitlementRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.activateEntitlement = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.activateEntitlement(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.activateEntitlement as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.activateEntitlement as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkActivateEntitlementProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkActivateEntitlementProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkActivateEntitlementProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkActivateEntitlementProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('transferEntitlements', () => {
    it('invokes transferEntitlements without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.TransferEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.TransferEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.transferEntitlements =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.transferEntitlements(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.transferEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.transferEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes transferEntitlements without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.TransferEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.TransferEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.transferEntitlements =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.transferEntitlements(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.channel.v1.ITransferEntitlementsResponse,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.channel.v1.ITransferEntitlementsResponse,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.transferEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.transferEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes transferEntitlements with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.TransferEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.TransferEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.transferEntitlements = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.transferEntitlements(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.transferEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.transferEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes transferEntitlements with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.TransferEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.TransferEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.transferEntitlements = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.transferEntitlements(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.transferEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.transferEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkTransferEntitlementsProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkTransferEntitlementsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkTransferEntitlementsProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkTransferEntitlementsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('transferEntitlementsToGoogle', () => {
    it('invokes transferEntitlementsToGoogle without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.transferEntitlementsToGoogle =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.transferEntitlementsToGoogle(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.transferEntitlementsToGoogle as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.transferEntitlementsToGoogle as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes transferEntitlementsToGoogle without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.transferEntitlementsToGoogle =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.transferEntitlementsToGoogle(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.channel.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.channel.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.transferEntitlementsToGoogle as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.transferEntitlementsToGoogle as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes transferEntitlementsToGoogle with call error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.transferEntitlementsToGoogle = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.transferEntitlementsToGoogle(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.transferEntitlementsToGoogle as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.transferEntitlementsToGoogle as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes transferEntitlementsToGoogle with LRO error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.transferEntitlementsToGoogle = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.transferEntitlementsToGoogle(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.transferEntitlementsToGoogle as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.transferEntitlementsToGoogle as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkTransferEntitlementsToGoogleProgress without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkTransferEntitlementsToGoogleProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkTransferEntitlementsToGoogleProgress with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkTransferEntitlementsToGoogleProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listCustomers', () => {
    it('invokes listCustomers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
      ];
      client.innerApiCalls.listCustomers = stubSimpleCall(expectedResponse);
      const [response] = await client.listCustomers(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCustomers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomers without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
      ];
      client.innerApiCalls.listCustomers =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCustomers(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ICustomer[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCustomers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCustomers = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCustomers(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCustomers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomersStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
      ];
      client.descriptors.page.listCustomers.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCustomersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Customer[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.Customer) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCustomers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCustomers, request)
      );
      assert(
        (client.descriptors.page.listCustomers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCustomersStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCustomers.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCustomersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Customer[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.Customer) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCustomers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCustomers, request)
      );
      assert(
        (client.descriptors.page.listCustomers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCustomers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
      ];
      client.descriptors.page.listCustomers.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.ICustomer[] = [];
      const iterable = client.listCustomersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCustomers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCustomers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCustomers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCustomers.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCustomersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.ICustomer[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCustomers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCustomers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listEntitlements', () => {
    it('invokes listEntitlements without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
      ];
      client.innerApiCalls.listEntitlements = stubSimpleCall(expectedResponse);
      const [response] = await client.listEntitlements(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntitlements without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
      ];
      client.innerApiCalls.listEntitlements =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEntitlements(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IEntitlement[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntitlements with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEntitlements = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listEntitlements(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntitlementsStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
      ];
      client.descriptors.page.listEntitlements.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listEntitlementsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Entitlement[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.Entitlement) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listEntitlements.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntitlements, request)
      );
      assert(
        (client.descriptors.page.listEntitlements.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listEntitlementsStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntitlements.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listEntitlementsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Entitlement[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.Entitlement) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listEntitlements.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntitlements, request)
      );
      assert(
        (client.descriptors.page.listEntitlements.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEntitlements without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
      ];
      client.descriptors.page.listEntitlements.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.IEntitlement[] = [];
      const iterable = client.listEntitlementsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntitlements.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEntitlements with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntitlements.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listEntitlementsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.IEntitlement[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntitlements.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listTransferableSkus', () => {
    it('invokes listTransferableSkus without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
      ];
      client.innerApiCalls.listTransferableSkus =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listTransferableSkus(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTransferableSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTransferableSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTransferableSkus without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
      ];
      client.innerApiCalls.listTransferableSkus =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTransferableSkus(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ITransferableSku[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTransferableSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTransferableSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTransferableSkus with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTransferableSkus = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listTransferableSkus(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listTransferableSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTransferableSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTransferableSkusStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
      ];
      client.descriptors.page.listTransferableSkus.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTransferableSkusStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.TransferableSku[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.TransferableSku) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTransferableSkus.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTransferableSkus, request)
      );
      assert(
        (client.descriptors.page.listTransferableSkus.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listTransferableSkusStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTransferableSkus.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listTransferableSkusStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.TransferableSku[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.TransferableSku) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listTransferableSkus.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTransferableSkus, request)
      );
      assert(
        (client.descriptors.page.listTransferableSkus.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTransferableSkus without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableSku()
        ),
      ];
      client.descriptors.page.listTransferableSkus.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.ITransferableSku[] = [];
      const iterable = client.listTransferableSkusAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTransferableSkus.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTransferableSkus.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTransferableSkus with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTransferableSkus.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listTransferableSkusAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.ITransferableSku[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTransferableSkus.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTransferableSkus.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listTransferableOffers', () => {
    it('invokes listTransferableOffers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
      ];
      client.innerApiCalls.listTransferableOffers =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listTransferableOffers(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTransferableOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTransferableOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTransferableOffers without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
      ];
      client.innerApiCalls.listTransferableOffers =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTransferableOffers(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ITransferableOffer[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTransferableOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTransferableOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTransferableOffers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTransferableOffers = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listTransferableOffers(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listTransferableOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTransferableOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTransferableOffersStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
      ];
      client.descriptors.page.listTransferableOffers.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTransferableOffersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.TransferableOffer[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.TransferableOffer) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listTransferableOffers
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listTransferableOffers, request)
      );
      assert(
        (
          client.descriptors.page.listTransferableOffers
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listTransferableOffersStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTransferableOffers.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listTransferableOffersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.TransferableOffer[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.TransferableOffer) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listTransferableOffers
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listTransferableOffers, request)
      );
      assert(
        (
          client.descriptors.page.listTransferableOffers
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTransferableOffers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.TransferableOffer()
        ),
      ];
      client.descriptors.page.listTransferableOffers.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.ITransferableOffer[] = [];
      const iterable = client.listTransferableOffersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTransferableOffers
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listTransferableOffers
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTransferableOffers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListTransferableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListTransferableOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTransferableOffers.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listTransferableOffersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.ITransferableOffer[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTransferableOffers
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listTransferableOffers
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listChannelPartnerLinks', () => {
    it('invokes listChannelPartnerLinks without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
      ];
      client.innerApiCalls.listChannelPartnerLinks =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listChannelPartnerLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChannelPartnerLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelPartnerLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelPartnerLinks without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
      ];
      client.innerApiCalls.listChannelPartnerLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listChannelPartnerLinks(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IChannelPartnerLink[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChannelPartnerLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelPartnerLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelPartnerLinks with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listChannelPartnerLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listChannelPartnerLinks(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listChannelPartnerLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelPartnerLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelPartnerLinksStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
      ];
      client.descriptors.page.listChannelPartnerLinks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listChannelPartnerLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.ChannelPartnerLink[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.ChannelPartnerLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listChannelPartnerLinks
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listChannelPartnerLinks, request)
      );
      assert(
        (
          client.descriptors.page.listChannelPartnerLinks
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listChannelPartnerLinksStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChannelPartnerLinks.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listChannelPartnerLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.ChannelPartnerLink[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.ChannelPartnerLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listChannelPartnerLinks
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listChannelPartnerLinks, request)
      );
      assert(
        (
          client.descriptors.page.listChannelPartnerLinks
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChannelPartnerLinks without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerLink()
        ),
      ];
      client.descriptors.page.listChannelPartnerLinks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.IChannelPartnerLink[] =
        [];
      const iterable = client.listChannelPartnerLinksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listChannelPartnerLinks
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listChannelPartnerLinks
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChannelPartnerLinks with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChannelPartnerLinks.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listChannelPartnerLinksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.IChannelPartnerLink[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listChannelPartnerLinks
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listChannelPartnerLinks
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCustomerRepricingConfigs', () => {
    it('invokes listCustomerRepricingConfigs without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
      ];
      client.innerApiCalls.listCustomerRepricingConfigs =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listCustomerRepricingConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCustomerRepricingConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomerRepricingConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomerRepricingConfigs without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
      ];
      client.innerApiCalls.listCustomerRepricingConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCustomerRepricingConfigs(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.channel.v1.ICustomerRepricingConfig[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCustomerRepricingConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomerRepricingConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomerRepricingConfigs with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCustomerRepricingConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listCustomerRepricingConfigs(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listCustomerRepricingConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomerRepricingConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomerRepricingConfigsStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
      ];
      client.descriptors.page.listCustomerRepricingConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCustomerRepricingConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.CustomerRepricingConfig[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.channel.v1.CustomerRepricingConfig
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listCustomerRepricingConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listCustomerRepricingConfigs,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listCustomerRepricingConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCustomerRepricingConfigsStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCustomerRepricingConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCustomerRepricingConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.CustomerRepricingConfig[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.channel.v1.CustomerRepricingConfig
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listCustomerRepricingConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listCustomerRepricingConfigs,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listCustomerRepricingConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCustomerRepricingConfigs without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.CustomerRepricingConfig()
        ),
      ];
      client.descriptors.page.listCustomerRepricingConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.ICustomerRepricingConfig[] =
        [];
      const iterable = client.listCustomerRepricingConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCustomerRepricingConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listCustomerRepricingConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCustomerRepricingConfigs with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListCustomerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCustomerRepricingConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCustomerRepricingConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.ICustomerRepricingConfig[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCustomerRepricingConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listCustomerRepricingConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listChannelPartnerRepricingConfigs', () => {
    it('invokes listChannelPartnerRepricingConfigs without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
      ];
      client.innerApiCalls.listChannelPartnerRepricingConfigs =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listChannelPartnerRepricingConfigs(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChannelPartnerRepricingConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelPartnerRepricingConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelPartnerRepricingConfigs without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
      ];
      client.innerApiCalls.listChannelPartnerRepricingConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listChannelPartnerRepricingConfigs(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.channel.v1.IChannelPartnerRepricingConfig[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChannelPartnerRepricingConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelPartnerRepricingConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelPartnerRepricingConfigs with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listChannelPartnerRepricingConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listChannelPartnerRepricingConfigs(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listChannelPartnerRepricingConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelPartnerRepricingConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelPartnerRepricingConfigsStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
      ];
      client.descriptors.page.listChannelPartnerRepricingConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listChannelPartnerRepricingConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listChannelPartnerRepricingConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listChannelPartnerRepricingConfigs,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listChannelPartnerRepricingConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listChannelPartnerRepricingConfigsStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChannelPartnerRepricingConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listChannelPartnerRepricingConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listChannelPartnerRepricingConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listChannelPartnerRepricingConfigs,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listChannelPartnerRepricingConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChannelPartnerRepricingConfigs without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.ChannelPartnerRepricingConfig()
        ),
      ];
      client.descriptors.page.listChannelPartnerRepricingConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.IChannelPartnerRepricingConfig[] =
        [];
      const iterable = client.listChannelPartnerRepricingConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listChannelPartnerRepricingConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listChannelPartnerRepricingConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChannelPartnerRepricingConfigs with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListChannelPartnerRepricingConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChannelPartnerRepricingConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listChannelPartnerRepricingConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.IChannelPartnerRepricingConfig[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listChannelPartnerRepricingConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listChannelPartnerRepricingConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listProducts', () => {
    it('invokes listProducts without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListProductsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
      ];
      client.innerApiCalls.listProducts = stubSimpleCall(expectedResponse);
      const [response] = await client.listProducts(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listProducts without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListProductsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
      ];
      client.innerApiCalls.listProducts =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listProducts(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IProduct[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listProducts with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListProductsRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listProducts = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listProducts(request), expectedError);
    });

    it('invokes listProductsStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListProductsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
      ];
      client.descriptors.page.listProducts.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listProductsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Product[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.Product) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listProducts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listProducts, request)
      );
    });

    it('invokes listProductsStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListProductsRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listProducts.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listProductsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Product[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.Product) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listProducts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listProducts, request)
      );
    });

    it('uses async iteration with listProducts without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListProductsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
      ];
      client.descriptors.page.listProducts.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.IProduct[] = [];
      const iterable = client.listProductsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listProducts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });

    it('uses async iteration with listProducts with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListProductsRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listProducts.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listProductsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.IProduct[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listProducts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('listSkus', () => {
    it('invokes listSkus without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
      ];
      client.innerApiCalls.listSkus = stubSimpleCall(expectedResponse);
      const [response] = await client.listSkus(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSkus without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
      ];
      client.innerApiCalls.listSkus =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSkus(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.ISku[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSkus with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listSkus = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listSkus(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSkusStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
      ];
      client.descriptors.page.listSkus.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSkusStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Sku[] = [];
        stream.on('data', (response: protos.google.cloud.channel.v1.Sku) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSkus.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSkus, request)
      );
      assert(
        (client.descriptors.page.listSkus.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listSkusStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSkus.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listSkusStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Sku[] = [];
        stream.on('data', (response: protos.google.cloud.channel.v1.Sku) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSkus.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSkus, request)
      );
      assert(
        (client.descriptors.page.listSkus.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSkus without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
      ];
      client.descriptors.page.listSkus.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.ISku[] = [];
      const iterable = client.listSkusAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listSkus.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listSkus.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSkus with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSkusRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSkus.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listSkusAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.ISku[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listSkus.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listSkus.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listOffers', () => {
    it('invokes listOffers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
      ];
      client.innerApiCalls.listOffers = stubSimpleCall(expectedResponse);
      const [response] = await client.listOffers(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOffers without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
      ];
      client.innerApiCalls.listOffers =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listOffers(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IOffer[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOffers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listOffers = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listOffers(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOffersStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
      ];
      client.descriptors.page.listOffers.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listOffersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Offer[] = [];
        stream.on('data', (response: protos.google.cloud.channel.v1.Offer) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listOffers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listOffers, request)
      );
      assert(
        (client.descriptors.page.listOffers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listOffersStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOffers.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listOffersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.Offer[] = [];
        stream.on('data', (response: protos.google.cloud.channel.v1.Offer) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listOffers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listOffers, request)
      );
      assert(
        (client.descriptors.page.listOffers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOffers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
        generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
      ];
      client.descriptors.page.listOffers.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.IOffer[] = [];
      const iterable = client.listOffersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listOffers.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listOffers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOffers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListOffersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOffers.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listOffersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.IOffer[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listOffers.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listOffers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listPurchasableSkus', () => {
    it('invokes listPurchasableSkus without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableSkusRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
      ];
      client.innerApiCalls.listPurchasableSkus =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listPurchasableSkus(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPurchasableSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPurchasableSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPurchasableSkus without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableSkusRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
      ];
      client.innerApiCalls.listPurchasableSkus =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPurchasableSkus(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IPurchasableSku[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPurchasableSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPurchasableSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPurchasableSkus with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableSkusRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPurchasableSkus = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPurchasableSkus(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listPurchasableSkus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPurchasableSkus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPurchasableSkusStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableSkusRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
      ];
      client.descriptors.page.listPurchasableSkus.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPurchasableSkusStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.PurchasableSku[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.PurchasableSku) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPurchasableSkus.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPurchasableSkus, request)
      );
      assert(
        (client.descriptors.page.listPurchasableSkus.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPurchasableSkusStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableSkusRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPurchasableSkus.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPurchasableSkusStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.PurchasableSku[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.PurchasableSku) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPurchasableSkus.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPurchasableSkus, request)
      );
      assert(
        (client.descriptors.page.listPurchasableSkus.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPurchasableSkus without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableSkusRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableSku()
        ),
      ];
      client.descriptors.page.listPurchasableSkus.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.IPurchasableSku[] = [];
      const iterable = client.listPurchasableSkusAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPurchasableSkus.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPurchasableSkus.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPurchasableSkus with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableSkusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableSkusRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPurchasableSkus.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPurchasableSkusAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.IPurchasableSku[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPurchasableSkus.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPurchasableSkus.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listPurchasableOffers', () => {
    it('invokes listPurchasableOffers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableOffersRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
      ];
      client.innerApiCalls.listPurchasableOffers =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listPurchasableOffers(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPurchasableOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPurchasableOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPurchasableOffers without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableOffersRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
      ];
      client.innerApiCalls.listPurchasableOffers =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPurchasableOffers(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.channel.v1.IPurchasableOffer[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPurchasableOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPurchasableOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPurchasableOffers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableOffersRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPurchasableOffers = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listPurchasableOffers(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listPurchasableOffers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPurchasableOffers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPurchasableOffersStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableOffersRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
      ];
      client.descriptors.page.listPurchasableOffers.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPurchasableOffersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.PurchasableOffer[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.PurchasableOffer) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listPurchasableOffers
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listPurchasableOffers, request)
      );
      assert(
        (
          client.descriptors.page.listPurchasableOffers
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPurchasableOffersStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableOffersRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPurchasableOffers.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPurchasableOffersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.channel.v1.PurchasableOffer[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.channel.v1.PurchasableOffer) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listPurchasableOffers
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listPurchasableOffers, request)
      );
      assert(
        (
          client.descriptors.page.listPurchasableOffers
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPurchasableOffers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableOffersRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
        generateSampleMessage(
          new protos.google.cloud.channel.v1.PurchasableOffer()
        ),
      ];
      client.descriptors.page.listPurchasableOffers.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.channel.v1.IPurchasableOffer[] = [];
      const iterable = client.listPurchasableOffersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPurchasableOffers
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listPurchasableOffers
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPurchasableOffers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListPurchasableOffersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListPurchasableOffersRequest',
        ['customer']
      );
      request.customer = defaultValue1;
      const expectedHeaderRequestParams = `customer=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPurchasableOffers.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPurchasableOffersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.channel.v1.IPurchasableOffer[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPurchasableOffers
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listPurchasableOffers
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listSubscribers', () => {
    it('invokes listSubscribers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSubscribersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSubscribersRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.innerApiCalls.listSubscribers = stubSimpleCall(expectedResponse);
      const [response] = await client.listSubscribers(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSubscribers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSubscribers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSubscribers without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSubscribersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSubscribersRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.innerApiCalls.listSubscribers =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSubscribers(
          request,
          (err?: Error | null, result?: string[] | null) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSubscribers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSubscribers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSubscribers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSubscribersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSubscribersRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listSubscribers = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSubscribers(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listSubscribers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSubscribers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSubscribersStream without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSubscribersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSubscribersRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.descriptors.page.listSubscribers.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSubscribersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: string[] = [];
        stream.on('data', (response: string) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSubscribers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSubscribers, request)
      );
      assert(
        (client.descriptors.page.listSubscribers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listSubscribersStream with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSubscribersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSubscribersRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSubscribers.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listSubscribersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: string[] = [];
        stream.on('data', (response: string) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSubscribers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSubscribers, request)
      );
      assert(
        (client.descriptors.page.listSubscribers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSubscribers without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSubscribersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSubscribersRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.descriptors.page.listSubscribers.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: string[] = [];
      const iterable = client.listSubscribersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSubscribers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSubscribers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSubscribers with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.channel.v1.ListSubscribersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.channel.v1.ListSubscribersRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSubscribers.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listSubscribersAsync(request);
      await assert.rejects(async () => {
        const responses: string[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSubscribers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSubscribers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('channelPartnerLink', () => {
      const fakePath = '/rendered/path/channelPartnerLink';
      const expectedParameters = {
        account: 'accountValue',
        channel_partner_link: 'channelPartnerLinkValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.channelPartnerLinkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.channelPartnerLinkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('channelPartnerLinkPath', () => {
        const result = client.channelPartnerLinkPath(
          'accountValue',
          'channelPartnerLinkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.channelPartnerLinkPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromChannelPartnerLinkName', () => {
        const result = client.matchAccountFromChannelPartnerLinkName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (
            client.pathTemplates.channelPartnerLinkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchChannelPartnerLinkFromChannelPartnerLinkName', () => {
        const result =
          client.matchChannelPartnerLinkFromChannelPartnerLinkName(fakePath);
        assert.strictEqual(result, 'channelPartnerLinkValue');
        assert(
          (
            client.pathTemplates.channelPartnerLinkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('channelPartnerRepricingConfig', () => {
      const fakePath = '/rendered/path/channelPartnerRepricingConfig';
      const expectedParameters = {
        account: 'accountValue',
        channel_partner: 'channelPartnerValue',
        channel_partner_repricing_config: 'channelPartnerRepricingConfigValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.channelPartnerRepricingConfigPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.channelPartnerRepricingConfigPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('channelPartnerRepricingConfigPath', () => {
        const result = client.channelPartnerRepricingConfigPath(
          'accountValue',
          'channelPartnerValue',
          'channelPartnerRepricingConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.channelPartnerRepricingConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromChannelPartnerRepricingConfigName', () => {
        const result =
          client.matchAccountFromChannelPartnerRepricingConfigName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (
            client.pathTemplates.channelPartnerRepricingConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchChannelPartnerFromChannelPartnerRepricingConfigName', () => {
        const result =
          client.matchChannelPartnerFromChannelPartnerRepricingConfigName(
            fakePath
          );
        assert.strictEqual(result, 'channelPartnerValue');
        assert(
          (
            client.pathTemplates.channelPartnerRepricingConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchChannelPartnerRepricingConfigFromChannelPartnerRepricingConfigName', () => {
        const result =
          client.matchChannelPartnerRepricingConfigFromChannelPartnerRepricingConfigName(
            fakePath
          );
        assert.strictEqual(result, 'channelPartnerRepricingConfigValue');
        assert(
          (
            client.pathTemplates.channelPartnerRepricingConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customer', () => {
      const fakePath = '/rendered/path/customer';
      const expectedParameters = {
        account: 'accountValue',
        customer: 'customerValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.customerPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customerPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customerPath', () => {
        const result = client.customerPath('accountValue', 'customerValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.customerPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromCustomerName', () => {
        const result = client.matchAccountFromCustomerName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (client.pathTemplates.customerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomerFromCustomerName', () => {
        const result = client.matchCustomerFromCustomerName(fakePath);
        assert.strictEqual(result, 'customerValue');
        assert(
          (client.pathTemplates.customerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customerRepricingConfig', () => {
      const fakePath = '/rendered/path/customerRepricingConfig';
      const expectedParameters = {
        account: 'accountValue',
        customer: 'customerValue',
        customer_repricing_config: 'customerRepricingConfigValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.customerRepricingConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customerRepricingConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customerRepricingConfigPath', () => {
        const result = client.customerRepricingConfigPath(
          'accountValue',
          'customerValue',
          'customerRepricingConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.customerRepricingConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromCustomerRepricingConfigName', () => {
        const result =
          client.matchAccountFromCustomerRepricingConfigName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (
            client.pathTemplates.customerRepricingConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomerFromCustomerRepricingConfigName', () => {
        const result =
          client.matchCustomerFromCustomerRepricingConfigName(fakePath);
        assert.strictEqual(result, 'customerValue');
        assert(
          (
            client.pathTemplates.customerRepricingConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomerRepricingConfigFromCustomerRepricingConfigName', () => {
        const result =
          client.matchCustomerRepricingConfigFromCustomerRepricingConfigName(
            fakePath
          );
        assert.strictEqual(result, 'customerRepricingConfigValue');
        assert(
          (
            client.pathTemplates.customerRepricingConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entitlement', () => {
      const fakePath = '/rendered/path/entitlement';
      const expectedParameters = {
        account: 'accountValue',
        customer: 'customerValue',
        entitlement: 'entitlementValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.entitlementPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entitlementPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entitlementPath', () => {
        const result = client.entitlementPath(
          'accountValue',
          'customerValue',
          'entitlementValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entitlementPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromEntitlementName', () => {
        const result = client.matchAccountFromEntitlementName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (client.pathTemplates.entitlementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomerFromEntitlementName', () => {
        const result = client.matchCustomerFromEntitlementName(fakePath);
        assert.strictEqual(result, 'customerValue');
        assert(
          (client.pathTemplates.entitlementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntitlementFromEntitlementName', () => {
        const result = client.matchEntitlementFromEntitlementName(fakePath);
        assert.strictEqual(result, 'entitlementValue');
        assert(
          (client.pathTemplates.entitlementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('offer', () => {
      const fakePath = '/rendered/path/offer';
      const expectedParameters = {
        account: 'accountValue',
        offer: 'offerValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.offerPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.offerPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('offerPath', () => {
        const result = client.offerPath('accountValue', 'offerValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.offerPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromOfferName', () => {
        const result = client.matchAccountFromOfferName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (client.pathTemplates.offerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchOfferFromOfferName', () => {
        const result = client.matchOfferFromOfferName(fakePath);
        assert.strictEqual(result, 'offerValue');
        assert(
          (client.pathTemplates.offerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('product', () => {
      const fakePath = '/rendered/path/product';
      const expectedParameters = {
        product: 'productValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.productPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.productPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('productPath', () => {
        const result = client.productPath('productValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.productPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProductFromProductName', () => {
        const result = client.matchProductFromProductName(fakePath);
        assert.strictEqual(result, 'productValue');
        assert(
          (client.pathTemplates.productPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('report', () => {
      const fakePath = '/rendered/path/report';
      const expectedParameters = {
        account: 'accountValue',
        report: 'reportValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.reportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.reportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('reportPath', () => {
        const result = client.reportPath('accountValue', 'reportValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.reportPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromReportName', () => {
        const result = client.matchAccountFromReportName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (client.pathTemplates.reportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReportFromReportName', () => {
        const result = client.matchReportFromReportName(fakePath);
        assert.strictEqual(result, 'reportValue');
        assert(
          (client.pathTemplates.reportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('reportJob', () => {
      const fakePath = '/rendered/path/reportJob';
      const expectedParameters = {
        account: 'accountValue',
        report_job: 'reportJobValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.reportJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.reportJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('reportJobPath', () => {
        const result = client.reportJobPath('accountValue', 'reportJobValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.reportJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromReportJobName', () => {
        const result = client.matchAccountFromReportJobName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (client.pathTemplates.reportJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReportJobFromReportJobName', () => {
        const result = client.matchReportJobFromReportJobName(fakePath);
        assert.strictEqual(result, 'reportJobValue');
        assert(
          (client.pathTemplates.reportJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('sku', () => {
      const fakePath = '/rendered/path/sku';
      const expectedParameters = {
        product: 'productValue',
        sku: 'skuValue',
      };
      const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.skuPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.skuPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('skuPath', () => {
        const result = client.skuPath('productValue', 'skuValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.skuPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProductFromSkuName', () => {
        const result = client.matchProductFromSkuName(fakePath);
        assert.strictEqual(result, 'productValue');
        assert(
          (client.pathTemplates.skuPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSkuFromSkuName', () => {
        const result = client.matchSkuFromSkuName(fakePath);
        assert.strictEqual(result, 'skuValue');
        assert(
          (client.pathTemplates.skuPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
