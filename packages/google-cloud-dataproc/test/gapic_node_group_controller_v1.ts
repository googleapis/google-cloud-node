// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as nodegroupcontrollerModule from '../src';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

describe('v1.NodeGroupControllerClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        nodegroupcontrollerModule.v1.NodeGroupControllerClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        nodegroupcontrollerModule.v1.NodeGroupControllerClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = nodegroupcontrollerModule.v1.NodeGroupControllerClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new nodegroupcontrollerModule.v1.NodeGroupControllerClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          fallback: true,
        }
      );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.nodeGroupControllerStub, undefined);
      await client.initialize();
      assert(client.nodeGroupControllerStub);
    });

    it('has close method for the initialized client', done => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      assert(client.nodeGroupControllerStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.nodeGroupControllerStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getNodeGroup', () => {
    it('invokes getNodeGroup without error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.GetNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.GetNodeGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.NodeGroup()
      );
      client.innerApiCalls.getNodeGroup = stubSimpleCall(expectedResponse);
      const [response] = await client.getNodeGroup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNodeGroup without error using callback', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.GetNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.GetNodeGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.NodeGroup()
      );
      client.innerApiCalls.getNodeGroup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getNodeGroup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataproc.v1.INodeGroup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNodeGroup with error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.GetNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.GetNodeGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getNodeGroup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getNodeGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNodeGroup with closed client', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.GetNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.GetNodeGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getNodeGroup(request), expectedError);
    });
  });

  describe('createNodeGroup', () => {
    it('invokes createNodeGroup without error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.CreateNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.CreateNodeGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createNodeGroup =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createNodeGroup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNodeGroup without error using callback', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.CreateNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.CreateNodeGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createNodeGroup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createNodeGroup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.dataproc.v1.INodeGroup,
              protos.google.cloud.dataproc.v1.INodeGroupOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.dataproc.v1.INodeGroup,
        protos.google.cloud.dataproc.v1.INodeGroupOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNodeGroup with call error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.CreateNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.CreateNodeGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createNodeGroup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createNodeGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNodeGroup with LRO error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.CreateNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.CreateNodeGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createNodeGroup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createNodeGroup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateNodeGroupProgress without error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateNodeGroupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateNodeGroupProgress with error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateNodeGroupProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resizeNodeGroup', () => {
    it('invokes resizeNodeGroup without error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.ResizeNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.ResizeNodeGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resizeNodeGroup =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.resizeNodeGroup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resizeNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resizeNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resizeNodeGroup without error using callback', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.ResizeNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.ResizeNodeGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resizeNodeGroup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resizeNodeGroup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.dataproc.v1.INodeGroup,
              protos.google.cloud.dataproc.v1.INodeGroupOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.dataproc.v1.INodeGroup,
        protos.google.cloud.dataproc.v1.INodeGroupOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resizeNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resizeNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resizeNodeGroup with call error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.ResizeNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.ResizeNodeGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resizeNodeGroup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resizeNodeGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resizeNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resizeNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resizeNodeGroup with LRO error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataproc.v1.ResizeNodeGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataproc.v1.ResizeNodeGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resizeNodeGroup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resizeNodeGroup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resizeNodeGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resizeNodeGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResizeNodeGroupProgress without error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkResizeNodeGroupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResizeNodeGroupProgress with error', async () => {
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkResizeNodeGroupProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('Path templates', () => {
    describe('batch', () => {
      const fakePath = '/rendered/path/batch';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        batch: 'batchValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.batchPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.batchPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('batchPath', () => {
        const result = client.batchPath(
          'projectValue',
          'locationValue',
          'batchValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.batchPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBatchName', () => {
        const result = client.matchProjectFromBatchName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.batchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBatchName', () => {
        const result = client.matchLocationFromBatchName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.batchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBatchFromBatchName', () => {
        const result = client.matchBatchFromBatchName(fakePath);
        assert.strictEqual(result, 'batchValue');
        assert(
          (client.pathTemplates.batchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('clusterRegion', () => {
      const fakePath = '/rendered/path/clusterRegion';
      const expectedParameters = {
        project: 'projectValue',
        region: 'regionValue',
        cluster: 'clusterValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.clusterRegionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.clusterRegionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('clusterRegionPath', () => {
        const result = client.clusterRegionPath(
          'projectValue',
          'regionValue',
          'clusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.clusterRegionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromClusterRegionName', () => {
        const result = client.matchProjectFromClusterRegionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.clusterRegionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRegionFromClusterRegionName', () => {
        const result = client.matchRegionFromClusterRegionName(fakePath);
        assert.strictEqual(result, 'regionValue');
        assert(
          (client.pathTemplates.clusterRegionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromClusterRegionName', () => {
        const result = client.matchClusterFromClusterRegionName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.clusterRegionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('nodeGroup', () => {
      const fakePath = '/rendered/path/nodeGroup';
      const expectedParameters = {
        project: 'projectValue',
        region: 'regionValue',
        cluster: 'clusterValue',
        node_group: 'nodeGroupValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.nodeGroupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.nodeGroupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('nodeGroupPath', () => {
        const result = client.nodeGroupPath(
          'projectValue',
          'regionValue',
          'clusterValue',
          'nodeGroupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.nodeGroupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromNodeGroupName', () => {
        const result = client.matchProjectFromNodeGroupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.nodeGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRegionFromNodeGroupName', () => {
        const result = client.matchRegionFromNodeGroupName(fakePath);
        assert.strictEqual(result, 'regionValue');
        assert(
          (client.pathTemplates.nodeGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromNodeGroupName', () => {
        const result = client.matchClusterFromNodeGroupName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.nodeGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNodeGroupFromNodeGroupName', () => {
        const result = client.matchNodeGroupFromNodeGroupName(fakePath);
        assert.strictEqual(result, 'nodeGroupValue');
        assert(
          (client.pathTemplates.nodeGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationAutoscalingPolicy', () => {
      const fakePath = '/rendered/path/projectLocationAutoscalingPolicy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        autoscaling_policy: 'autoscalingPolicyValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationAutoscalingPolicyPath', () => {
        const result = client.projectLocationAutoscalingPolicyPath(
          'projectValue',
          'locationValue',
          'autoscalingPolicyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationAutoscalingPolicyPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationAutoscalingPolicyName', () => {
        const result =
          client.matchProjectFromProjectLocationAutoscalingPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationAutoscalingPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationAutoscalingPolicyName', () => {
        const result =
          client.matchLocationFromProjectLocationAutoscalingPolicyName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationAutoscalingPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAutoscalingPolicyFromProjectLocationAutoscalingPolicyName', () => {
        const result =
          client.matchAutoscalingPolicyFromProjectLocationAutoscalingPolicyName(
            fakePath
          );
        assert.strictEqual(result, 'autoscalingPolicyValue');
        assert(
          (
            client.pathTemplates.projectLocationAutoscalingPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationWorkflowTemplate', () => {
      const fakePath = '/rendered/path/projectLocationWorkflowTemplate';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        workflow_template: 'workflowTemplateValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.projectLocationWorkflowTemplatePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationWorkflowTemplatePath', () => {
        const result = client.projectLocationWorkflowTemplatePath(
          'projectValue',
          'locationValue',
          'workflowTemplateValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationWorkflowTemplatePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationWorkflowTemplateName', () => {
        const result =
          client.matchProjectFromProjectLocationWorkflowTemplateName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationWorkflowTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationWorkflowTemplateName', () => {
        const result =
          client.matchLocationFromProjectLocationWorkflowTemplateName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationWorkflowTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkflowTemplateFromProjectLocationWorkflowTemplateName', () => {
        const result =
          client.matchWorkflowTemplateFromProjectLocationWorkflowTemplateName(
            fakePath
          );
        assert.strictEqual(result, 'workflowTemplateValue');
        assert(
          (
            client.pathTemplates.projectLocationWorkflowTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectRegionAutoscalingPolicy', () => {
      const fakePath = '/rendered/path/projectRegionAutoscalingPolicy';
      const expectedParameters = {
        project: 'projectValue',
        region: 'regionValue',
        autoscaling_policy: 'autoscalingPolicyValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectRegionAutoscalingPolicyPath', () => {
        const result = client.projectRegionAutoscalingPolicyPath(
          'projectValue',
          'regionValue',
          'autoscalingPolicyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectRegionAutoscalingPolicyPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectRegionAutoscalingPolicyName', () => {
        const result =
          client.matchProjectFromProjectRegionAutoscalingPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectRegionAutoscalingPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRegionFromProjectRegionAutoscalingPolicyName', () => {
        const result =
          client.matchRegionFromProjectRegionAutoscalingPolicyName(fakePath);
        assert.strictEqual(result, 'regionValue');
        assert(
          (
            client.pathTemplates.projectRegionAutoscalingPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAutoscalingPolicyFromProjectRegionAutoscalingPolicyName', () => {
        const result =
          client.matchAutoscalingPolicyFromProjectRegionAutoscalingPolicyName(
            fakePath
          );
        assert.strictEqual(result, 'autoscalingPolicyValue');
        assert(
          (
            client.pathTemplates.projectRegionAutoscalingPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectRegionWorkflowTemplate', () => {
      const fakePath = '/rendered/path/projectRegionWorkflowTemplate';
      const expectedParameters = {
        project: 'projectValue',
        region: 'regionValue',
        workflow_template: 'workflowTemplateValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.projectRegionWorkflowTemplatePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectRegionWorkflowTemplatePath', () => {
        const result = client.projectRegionWorkflowTemplatePath(
          'projectValue',
          'regionValue',
          'workflowTemplateValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectRegionWorkflowTemplatePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectRegionWorkflowTemplateName', () => {
        const result =
          client.matchProjectFromProjectRegionWorkflowTemplateName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectRegionWorkflowTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRegionFromProjectRegionWorkflowTemplateName', () => {
        const result =
          client.matchRegionFromProjectRegionWorkflowTemplateName(fakePath);
        assert.strictEqual(result, 'regionValue');
        assert(
          (
            client.pathTemplates.projectRegionWorkflowTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkflowTemplateFromProjectRegionWorkflowTemplateName', () => {
        const result =
          client.matchWorkflowTemplateFromProjectRegionWorkflowTemplateName(
            fakePath
          );
        assert.strictEqual(result, 'workflowTemplateValue');
        assert(
          (
            client.pathTemplates.projectRegionWorkflowTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('region', () => {
      const fakePath = '/rendered/path/region';
      const expectedParameters = {
        project: 'projectValue',
        region: 'regionValue',
      };
      const client = new nodegroupcontrollerModule.v1.NodeGroupControllerClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.regionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.regionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('regionPath', () => {
        const result = client.regionPath('projectValue', 'regionValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.regionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRegionName', () => {
        const result = client.matchProjectFromRegionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.regionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRegionFromRegionName', () => {
        const result = client.matchRegionFromRegionName(fakePath);
        assert.strictEqual(result, 'regionValue');
        assert(
          (client.pathTemplates.regionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
