// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/session_controller_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './session_controller_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The `SessionController` provides methods to manage interactive sessions.
 * @class
 * @memberof v1
 */
export class SessionControllerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  sessionControllerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SessionControllerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SessionControllerClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SessionControllerClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'dataproc.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      batchPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batches/{batch}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      nodeGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/regions/{region}/clusters/{cluster}/nodeGroups/{node_group}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationAutoscalingPolicyPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/autoscalingPolicies/{autoscaling_policy}'
        ),
      projectLocationWorkflowTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/workflowTemplates/{workflow_template}'
        ),
      projectRegionAutoscalingPolicyPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/regions/{region}/autoscalingPolicies/{autoscaling_policy}'
        ),
      projectRegionWorkflowTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/regions/{region}/workflowTemplates/{workflow_template}'
        ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sessions/{session}'
      ),
      sessionTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sessionTemplates/{template}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listSessions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'sessions'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          post: '/v1/{resource=projects/*/regions/*/clusters/*}:getIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/regions/*/jobs/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/operations/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/workflowTemplates/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/workflowTemplates/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/autoscalingPolicies/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/autoscalingPolicies/*}:getIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/regions/*/clusters/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/regions/*/jobs/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/operations/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/workflowTemplates/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/workflowTemplates/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/autoscalingPolicies/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/autoscalingPolicies/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/regions/*/clusters/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/regions/*/jobs/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/operations/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/workflowTemplates/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/workflowTemplates/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/autoscalingPolicies/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/autoscalingPolicies/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/regions/*/operations/*}:cancel',
          additional_bindings: [
            {post: '/v1/{name=projects/*/locations/*/operations/*}:cancel'},
          ],
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/regions/*/operations/*}',
          additional_bindings: [
            {delete: '/v1/{name=projects/*/locations/*/operations/*}'},
          ],
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/regions/*/operations/*}',
          additional_bindings: [
            {get: '/v1/{name=projects/*/locations/*/operations/*}'},
          ],
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/regions/*/operations}',
          additional_bindings: [
            {get: '/v1/{name=projects/*/locations/*/operations}'},
          ],
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createSessionResponse = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.Session'
    ) as gax.protobuf.Type;
    const createSessionMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.SessionOperationMetadata'
    ) as gax.protobuf.Type;
    const terminateSessionResponse = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.Session'
    ) as gax.protobuf.Type;
    const terminateSessionMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.SessionOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteSessionResponse = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.Session'
    ) as gax.protobuf.Type;
    const deleteSessionMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.SessionOperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createSession: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createSessionResponse.decode.bind(createSessionResponse),
        createSessionMetadata.decode.bind(createSessionMetadata)
      ),
      terminateSession: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        terminateSessionResponse.decode.bind(terminateSessionResponse),
        terminateSessionMetadata.decode.bind(terminateSessionMetadata)
      ),
      deleteSession: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteSessionResponse.decode.bind(deleteSessionResponse),
        deleteSessionMetadata.decode.bind(deleteSessionMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.dataproc.v1.SessionController',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.sessionControllerStub) {
      return this.sessionControllerStub;
    }

    // Put together the "service stub" for
    // google.cloud.dataproc.v1.SessionController.
    this.sessionControllerStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.dataproc.v1.SessionController'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.dataproc.v1.SessionController,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const sessionControllerStubMethods = [
      'createSession',
      'getSession',
      'listSessions',
      'terminateSession',
      'deleteSession',
    ];
    for (const methodName of sessionControllerStubMethods) {
      const callPromise = this.sessionControllerStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.sessionControllerStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'dataproc.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'dataproc.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the resource representation for an interactive session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the session to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataproc.v1.Session|Session}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/session_controller.get_session.js</caption>
   * region_tag:dataproc_v1_generated_SessionController_GetSession_async
   */
  getSession(
    request?: protos.google.cloud.dataproc.v1.IGetSessionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.ISession,
      protos.google.cloud.dataproc.v1.IGetSessionRequest | undefined,
      {} | undefined,
    ]
  >;
  getSession(
    request: protos.google.cloud.dataproc.v1.IGetSessionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataproc.v1.ISession,
      protos.google.cloud.dataproc.v1.IGetSessionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSession(
    request: protos.google.cloud.dataproc.v1.IGetSessionRequest,
    callback: Callback<
      protos.google.cloud.dataproc.v1.ISession,
      protos.google.cloud.dataproc.v1.IGetSessionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSession(
    request?: protos.google.cloud.dataproc.v1.IGetSessionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataproc.v1.ISession,
          protos.google.cloud.dataproc.v1.IGetSessionRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataproc.v1.ISession,
      protos.google.cloud.dataproc.v1.IGetSessionRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.ISession,
      protos.google.cloud.dataproc.v1.IGetSessionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSession(request, options, callback);
  }

  /**
   * Create an interactive session asynchronously.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource where this session will be created.
   * @param {google.cloud.dataproc.v1.Session} request.session
   *   Required. The interactive session to create.
   * @param {string} request.sessionId
   *   Required. The ID to use for the session, which becomes the final component
   *   of the session's resource name.
   *
   *   This value must be 4-63 characters. Valid characters
   *   are /{@link protos.0-9|a-z}-/.
   * @param {string} [request.requestId]
   *   Optional. A unique ID used to identify the request. If the service
   *   receives two
   *   [CreateSessionRequests](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s
   *   with the same ID, the second request is ignored, and the
   *   first {@link protos.google.cloud.dataproc.v1.Session|Session} is created and stored in
   *   the backend.
   *
   *   Recommendation: Set this value to a
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   *   The value must contain only letters (a-z, A-Z), numbers (0-9),
   *   underscores (_), and hyphens (-). The maximum length is 40 characters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/session_controller.create_session.js</caption>
   * region_tag:dataproc_v1_generated_SessionController_CreateSession_async
   */
  createSession(
    request?: protos.google.cloud.dataproc.v1.ICreateSessionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createSession(
    request: protos.google.cloud.dataproc.v1.ICreateSessionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSession(
    request: protos.google.cloud.dataproc.v1.ICreateSessionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSession(
    request?: protos.google.cloud.dataproc.v1.ICreateSessionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataproc.v1.ISession,
            protos.google.cloud.dataproc.v1.ISessionOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSession(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createSession()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/session_controller.create_session.js</caption>
   * region_tag:dataproc_v1_generated_SessionController_CreateSession_async
   */
  async checkCreateSessionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataproc.v1.Session,
      protos.google.cloud.dataproc.v1.SessionOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createSession,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataproc.v1.Session,
      protos.google.cloud.dataproc.v1.SessionOperationMetadata
    >;
  }
  /**
   * Terminates the interactive session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the session resource to terminate.
   * @param {string} [request.requestId]
   *   Optional. A unique ID used to identify the request. If the service
   *   receives two
   *   [TerminateSessionRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.TerminateSessionRequest)s
   *   with the same ID, the second request is ignored.
   *
   *   Recommendation: Set this value to a
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   *   The value must contain only letters (a-z, A-Z), numbers (0-9),
   *   underscores (_), and hyphens (-). The maximum length is 40 characters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/session_controller.terminate_session.js</caption>
   * region_tag:dataproc_v1_generated_SessionController_TerminateSession_async
   */
  terminateSession(
    request?: protos.google.cloud.dataproc.v1.ITerminateSessionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  terminateSession(
    request: protos.google.cloud.dataproc.v1.ITerminateSessionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  terminateSession(
    request: protos.google.cloud.dataproc.v1.ITerminateSessionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  terminateSession(
    request?: protos.google.cloud.dataproc.v1.ITerminateSessionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataproc.v1.ISession,
            protos.google.cloud.dataproc.v1.ISessionOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.terminateSession(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `terminateSession()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/session_controller.terminate_session.js</caption>
   * region_tag:dataproc_v1_generated_SessionController_TerminateSession_async
   */
  async checkTerminateSessionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataproc.v1.Session,
      protos.google.cloud.dataproc.v1.SessionOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.terminateSession,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataproc.v1.Session,
      protos.google.cloud.dataproc.v1.SessionOperationMetadata
    >;
  }
  /**
   * Deletes the interactive session resource. If the session is not in terminal
   * state, it is terminated, and then deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the session resource to delete.
   * @param {string} [request.requestId]
   *   Optional. A unique ID used to identify the request. If the service
   *   receives two
   *   [DeleteSessionRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.DeleteSessionRequest)s
   *   with the same ID, the second request is ignored.
   *
   *   Recommendation: Set this value to a
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   *   The value must contain only letters (a-z, A-Z), numbers (0-9),
   *   underscores (_), and hyphens (-). The maximum length is 40 characters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/session_controller.delete_session.js</caption>
   * region_tag:dataproc_v1_generated_SessionController_DeleteSession_async
   */
  deleteSession(
    request?: protos.google.cloud.dataproc.v1.IDeleteSessionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteSession(
    request: protos.google.cloud.dataproc.v1.IDeleteSessionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSession(
    request: protos.google.cloud.dataproc.v1.IDeleteSessionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSession(
    request?: protos.google.cloud.dataproc.v1.IDeleteSessionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataproc.v1.ISession,
            protos.google.cloud.dataproc.v1.ISessionOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataproc.v1.ISession,
        protos.google.cloud.dataproc.v1.ISessionOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSession(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteSession()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/session_controller.delete_session.js</caption>
   * region_tag:dataproc_v1_generated_SessionController_DeleteSession_async
   */
  async checkDeleteSessionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataproc.v1.Session,
      protos.google.cloud.dataproc.v1.SessionOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteSession,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataproc.v1.Session,
      protos.google.cloud.dataproc.v1.SessionOperationMetadata
    >;
  }
  /**
   * Lists interactive sessions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of sessions.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of sessions to return in each response.
   *   The service may return fewer than this value.
   * @param {string} [request.pageToken]
   *   Optional. A page token received from a previous `ListSessions` call.
   *   Provide this token to retrieve the subsequent page.
   * @param {string} [request.filter]
   *   Optional. A filter for the sessions to return in the response.
   *
   *   A filter is a logical expression constraining the values of various fields
   *   in each session resource. Filters are case sensitive, and may contain
   *   multiple clauses combined with logical operators (AND, OR).
   *   Supported fields are `session_id`, `session_uuid`, `state`, and
   *   `create_time`.
   *
   *   Example: `state = ACTIVE and create_time < "2023-01-01T00:00:00Z"`
   *   is a filter for sessions in an ACTIVE state that were created before
   *   2023-01-01.
   *
   *   See https://google.aip.dev/assets/misc/ebnf-filtering.txt for a detailed
   *   description of the filter syntax and a list of supported comparators.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.dataproc.v1.Session|Session}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSessionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSessions(
    request?: protos.google.cloud.dataproc.v1.IListSessionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.ISession[],
      protos.google.cloud.dataproc.v1.IListSessionsRequest | null,
      protos.google.cloud.dataproc.v1.IListSessionsResponse,
    ]
  >;
  listSessions(
    request: protos.google.cloud.dataproc.v1.IListSessionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dataproc.v1.IListSessionsRequest,
      protos.google.cloud.dataproc.v1.IListSessionsResponse | null | undefined,
      protos.google.cloud.dataproc.v1.ISession
    >
  ): void;
  listSessions(
    request: protos.google.cloud.dataproc.v1.IListSessionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.dataproc.v1.IListSessionsRequest,
      protos.google.cloud.dataproc.v1.IListSessionsResponse | null | undefined,
      protos.google.cloud.dataproc.v1.ISession
    >
  ): void;
  listSessions(
    request?: protos.google.cloud.dataproc.v1.IListSessionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dataproc.v1.IListSessionsRequest,
          | protos.google.cloud.dataproc.v1.IListSessionsResponse
          | null
          | undefined,
          protos.google.cloud.dataproc.v1.ISession
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dataproc.v1.IListSessionsRequest,
      protos.google.cloud.dataproc.v1.IListSessionsResponse | null | undefined,
      protos.google.cloud.dataproc.v1.ISession
    >
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.ISession[],
      protos.google.cloud.dataproc.v1.IListSessionsRequest | null,
      protos.google.cloud.dataproc.v1.IListSessionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSessions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of sessions.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of sessions to return in each response.
   *   The service may return fewer than this value.
   * @param {string} [request.pageToken]
   *   Optional. A page token received from a previous `ListSessions` call.
   *   Provide this token to retrieve the subsequent page.
   * @param {string} [request.filter]
   *   Optional. A filter for the sessions to return in the response.
   *
   *   A filter is a logical expression constraining the values of various fields
   *   in each session resource. Filters are case sensitive, and may contain
   *   multiple clauses combined with logical operators (AND, OR).
   *   Supported fields are `session_id`, `session_uuid`, `state`, and
   *   `create_time`.
   *
   *   Example: `state = ACTIVE and create_time < "2023-01-01T00:00:00Z"`
   *   is a filter for sessions in an ACTIVE state that were created before
   *   2023-01-01.
   *
   *   See https://google.aip.dev/assets/misc/ebnf-filtering.txt for a detailed
   *   description of the filter syntax and a list of supported comparators.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.dataproc.v1.Session|Session} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSessionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSessionsStream(
    request?: protos.google.cloud.dataproc.v1.IListSessionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSessions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSessions.createStream(
      this.innerApiCalls.listSessions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSessions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of sessions.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of sessions to return in each response.
   *   The service may return fewer than this value.
   * @param {string} [request.pageToken]
   *   Optional. A page token received from a previous `ListSessions` call.
   *   Provide this token to retrieve the subsequent page.
   * @param {string} [request.filter]
   *   Optional. A filter for the sessions to return in the response.
   *
   *   A filter is a logical expression constraining the values of various fields
   *   in each session resource. Filters are case sensitive, and may contain
   *   multiple clauses combined with logical operators (AND, OR).
   *   Supported fields are `session_id`, `session_uuid`, `state`, and
   *   `create_time`.
   *
   *   Example: `state = ACTIVE and create_time < "2023-01-01T00:00:00Z"`
   *   is a filter for sessions in an ACTIVE state that were created before
   *   2023-01-01.
   *
   *   See https://google.aip.dev/assets/misc/ebnf-filtering.txt for a detailed
   *   description of the filter syntax and a list of supported comparators.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.dataproc.v1.Session|Session}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/session_controller.list_sessions.js</caption>
   * region_tag:dataproc_v1_generated_SessionController_ListSessions_async
   */
  listSessionsAsync(
    request?: protos.google.cloud.dataproc.v1.IListSessionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dataproc.v1.ISession> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSessions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSessions.asyncIterate(
      this.innerApiCalls['listSessions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataproc.v1.ISession>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified batch resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} batch
   * @returns {string} Resource name string.
   */
  batchPath(project: string, location: string, batch: string) {
    return this.pathTemplates.batchPathTemplate.render({
      project: project,
      location: location,
      batch: batch,
    });
  }

  /**
   * Parse the project from Batch resource.
   *
   * @param {string} batchName
   *   A fully-qualified path representing Batch resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBatchName(batchName: string) {
    return this.pathTemplates.batchPathTemplate.match(batchName).project;
  }

  /**
   * Parse the location from Batch resource.
   *
   * @param {string} batchName
   *   A fully-qualified path representing Batch resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBatchName(batchName: string) {
    return this.pathTemplates.batchPathTemplate.match(batchName).location;
  }

  /**
   * Parse the batch from Batch resource.
   *
   * @param {string} batchName
   *   A fully-qualified path representing Batch resource.
   * @returns {string} A string representing the batch.
   */
  matchBatchFromBatchName(batchName: string) {
    return this.pathTemplates.batchPathTemplate.match(batchName).batch;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified nodeGroup resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} cluster
   * @param {string} node_group
   * @returns {string} Resource name string.
   */
  nodeGroupPath(
    project: string,
    region: string,
    cluster: string,
    nodeGroup: string
  ) {
    return this.pathTemplates.nodeGroupPathTemplate.render({
      project: project,
      region: region,
      cluster: cluster,
      node_group: nodeGroup,
    });
  }

  /**
   * Parse the project from NodeGroup resource.
   *
   * @param {string} nodeGroupName
   *   A fully-qualified path representing NodeGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNodeGroupName(nodeGroupName: string) {
    return this.pathTemplates.nodeGroupPathTemplate.match(nodeGroupName)
      .project;
  }

  /**
   * Parse the region from NodeGroup resource.
   *
   * @param {string} nodeGroupName
   *   A fully-qualified path representing NodeGroup resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromNodeGroupName(nodeGroupName: string) {
    return this.pathTemplates.nodeGroupPathTemplate.match(nodeGroupName).region;
  }

  /**
   * Parse the cluster from NodeGroup resource.
   *
   * @param {string} nodeGroupName
   *   A fully-qualified path representing NodeGroup resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromNodeGroupName(nodeGroupName: string) {
    return this.pathTemplates.nodeGroupPathTemplate.match(nodeGroupName)
      .cluster;
  }

  /**
   * Parse the node_group from NodeGroup resource.
   *
   * @param {string} nodeGroupName
   *   A fully-qualified path representing NodeGroup resource.
   * @returns {string} A string representing the node_group.
   */
  matchNodeGroupFromNodeGroupName(nodeGroupName: string) {
    return this.pathTemplates.nodeGroupPathTemplate.match(nodeGroupName)
      .node_group;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationAutoscalingPolicy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autoscaling_policy
   * @returns {string} Resource name string.
   */
  projectLocationAutoscalingPolicyPath(
    project: string,
    location: string,
    autoscalingPolicy: string
  ) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.render(
      {
        project: project,
        location: location,
        autoscaling_policy: autoscalingPolicy,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAutoscalingPolicyName(
    projectLocationAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(
      projectLocationAutoscalingPolicyName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAutoscalingPolicyName(
    projectLocationAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(
      projectLocationAutoscalingPolicyName
    ).location;
  }

  /**
   * Parse the autoscaling_policy from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the autoscaling_policy.
   */
  matchAutoscalingPolicyFromProjectLocationAutoscalingPolicyName(
    projectLocationAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(
      projectLocationAutoscalingPolicyName
    ).autoscaling_policy;
  }

  /**
   * Return a fully-qualified projectLocationWorkflowTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workflow_template
   * @returns {string} Resource name string.
   */
  projectLocationWorkflowTemplatePath(
    project: string,
    location: string,
    workflowTemplate: string
  ) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.render(
      {
        project: project,
        location: location,
        workflow_template: workflowTemplate,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationWorkflowTemplateName(
    projectLocationWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(
      projectLocationWorkflowTemplateName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationWorkflowTemplateName(
    projectLocationWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(
      projectLocationWorkflowTemplateName
    ).location;
  }

  /**
   * Parse the workflow_template from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the workflow_template.
   */
  matchWorkflowTemplateFromProjectLocationWorkflowTemplateName(
    projectLocationWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(
      projectLocationWorkflowTemplateName
    ).workflow_template;
  }

  /**
   * Return a fully-qualified projectRegionAutoscalingPolicy resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} autoscaling_policy
   * @returns {string} Resource name string.
   */
  projectRegionAutoscalingPolicyPath(
    project: string,
    region: string,
    autoscalingPolicy: string
  ) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.render(
      {
        project: project,
        region: region,
        autoscaling_policy: autoscalingPolicy,
      }
    );
  }

  /**
   * Parse the project from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectRegionAutoscalingPolicyName(
    projectRegionAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(
      projectRegionAutoscalingPolicyName
    ).project;
  }

  /**
   * Parse the region from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromProjectRegionAutoscalingPolicyName(
    projectRegionAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(
      projectRegionAutoscalingPolicyName
    ).region;
  }

  /**
   * Parse the autoscaling_policy from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the autoscaling_policy.
   */
  matchAutoscalingPolicyFromProjectRegionAutoscalingPolicyName(
    projectRegionAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(
      projectRegionAutoscalingPolicyName
    ).autoscaling_policy;
  }

  /**
   * Return a fully-qualified projectRegionWorkflowTemplate resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} workflow_template
   * @returns {string} Resource name string.
   */
  projectRegionWorkflowTemplatePath(
    project: string,
    region: string,
    workflowTemplate: string
  ) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.render({
      project: project,
      region: region,
      workflow_template: workflowTemplate,
    });
  }

  /**
   * Parse the project from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectRegionWorkflowTemplateName(
    projectRegionWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(
      projectRegionWorkflowTemplateName
    ).project;
  }

  /**
   * Parse the region from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromProjectRegionWorkflowTemplateName(
    projectRegionWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(
      projectRegionWorkflowTemplateName
    ).region;
  }

  /**
   * Parse the workflow_template from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the workflow_template.
   */
  matchWorkflowTemplateFromProjectRegionWorkflowTemplateName(
    projectRegionWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(
      projectRegionWorkflowTemplateName
    ).workflow_template;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(project: string, location: string, session: string) {
    return this.pathTemplates.sessionPathTemplate.render({
      project: project,
      location: location,
      session: session,
    });
  }

  /**
   * Parse the project from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).project;
  }

  /**
   * Parse the location from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).location;
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified sessionTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} template
   * @returns {string} Resource name string.
   */
  sessionTemplatePath(project: string, location: string, template: string) {
    return this.pathTemplates.sessionTemplatePathTemplate.render({
      project: project,
      location: location,
      template: template,
    });
  }

  /**
   * Parse the project from SessionTemplate resource.
   *
   * @param {string} sessionTemplateName
   *   A fully-qualified path representing SessionTemplate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSessionTemplateName(sessionTemplateName: string) {
    return this.pathTemplates.sessionTemplatePathTemplate.match(
      sessionTemplateName
    ).project;
  }

  /**
   * Parse the location from SessionTemplate resource.
   *
   * @param {string} sessionTemplateName
   *   A fully-qualified path representing SessionTemplate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSessionTemplateName(sessionTemplateName: string) {
    return this.pathTemplates.sessionTemplatePathTemplate.match(
      sessionTemplateName
    ).location;
  }

  /**
   * Parse the template from SessionTemplate resource.
   *
   * @param {string} sessionTemplateName
   *   A fully-qualified path representing SessionTemplate resource.
   * @returns {string} A string representing the template.
   */
  matchTemplateFromSessionTemplateName(sessionTemplateName: string) {
    return this.pathTemplates.sessionTemplatePathTemplate.match(
      sessionTemplateName
    ).template;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.sessionControllerStub && !this._terminated) {
      return this.sessionControllerStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
