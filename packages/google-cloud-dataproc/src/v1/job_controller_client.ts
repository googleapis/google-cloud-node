// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/job_controller_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './job_controller_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The JobController provides methods to manage jobs.
 * @class
 * @memberof v1
 */
export class JobControllerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  jobControllerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of JobControllerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new JobControllerClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof JobControllerClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      batchPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batches/{batch}'
      ),
      nodeGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/regions/{region}/clusters/{cluster}/nodeGroups/{node_group}'
      ),
      projectLocationAutoscalingPolicyPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/autoscalingPolicies/{autoscaling_policy}'
        ),
      projectLocationWorkflowTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/workflowTemplates/{workflow_template}'
        ),
      projectRegionAutoscalingPolicyPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/regions/{region}/autoscalingPolicies/{autoscaling_policy}'
        ),
      projectRegionWorkflowTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/regions/{region}/workflowTemplates/{workflow_template}'
        ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listJobs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'jobs'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          post: '/v1/{resource=projects/*/regions/*/clusters/*}:getIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/regions/*/jobs/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/operations/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/workflowTemplates/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/workflowTemplates/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/autoscalingPolicies/*}:getIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/autoscalingPolicies/*}:getIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/regions/*/clusters/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/regions/*/jobs/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/operations/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/workflowTemplates/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/workflowTemplates/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/autoscalingPolicies/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/autoscalingPolicies/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/regions/*/clusters/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/regions/*/jobs/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/operations/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/workflowTemplates/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/workflowTemplates/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/regions/*/autoscalingPolicies/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/autoscalingPolicies/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/regions/*/operations/*}:cancel',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/regions/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/regions/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/regions/*/operations}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const submitJobAsOperationResponse = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.Job'
    ) as gax.protobuf.Type;
    const submitJobAsOperationMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.JobMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      submitJobAsOperation: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        submitJobAsOperationResponse.decode.bind(submitJobAsOperationResponse),
        submitJobAsOperationMetadata.decode.bind(submitJobAsOperationMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.dataproc.v1.JobController',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.jobControllerStub) {
      return this.jobControllerStub;
    }

    // Put together the "service stub" for
    // google.cloud.dataproc.v1.JobController.
    this.jobControllerStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.dataproc.v1.JobController'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.dataproc.v1.JobController,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const jobControllerStubMethods = [
      'submitJob',
      'submitJobAsOperation',
      'getJob',
      'listJobs',
      'updateJob',
      'cancelJob',
      'deleteJob',
    ];
    for (const methodName of jobControllerStubMethods) {
      const callPromise = this.jobControllerStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.jobControllerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'dataproc.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'dataproc.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Submits a job to a cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {google.cloud.dataproc.v1.Job} request.job
   *   Required. The job resource.
   * @param {string} [request.requestId]
   *   Optional. A unique id used to identify the request. If the server
   *   receives two
   *   [SubmitJobRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.SubmitJobRequest)s
   *   with the same id, then the second request will be ignored and the
   *   first {@link google.cloud.dataproc.v1.Job|Job} created and stored in the backend
   *   is returned.
   *
   *   It is recommended to always set this value to a
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   *   The id must contain only letters (a-z, A-Z), numbers (0-9),
   *   underscores (_), and hyphens (-). The maximum length is 40 characters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Job]{@link google.cloud.dataproc.v1.Job}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/job_controller.submit_job.js</caption>
   * region_tag:dataproc_v1_generated_JobController_SubmitJob_async
   */
  submitJob(
    request?: protos.google.cloud.dataproc.v1.ISubmitJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ISubmitJobRequest | undefined,
      {} | undefined
    ]
  >;
  submitJob(
    request: protos.google.cloud.dataproc.v1.ISubmitJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ISubmitJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitJob(
    request: protos.google.cloud.dataproc.v1.ISubmitJobRequest,
    callback: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ISubmitJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitJob(
    request?: protos.google.cloud.dataproc.v1.ISubmitJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataproc.v1.IJob,
          protos.google.cloud.dataproc.v1.ISubmitJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ISubmitJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ISubmitJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
      });
    this.initialize();
    return this.innerApiCalls.submitJob(request, options, callback);
  }
  /**
   * Gets the resource representation for a job in a project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {string} request.jobId
   *   Required. The job ID.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Job]{@link google.cloud.dataproc.v1.Job}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/job_controller.get_job.js</caption>
   * region_tag:dataproc_v1_generated_JobController_GetJob_async
   */
  getJob(
    request?: protos.google.cloud.dataproc.v1.IGetJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IGetJobRequest | undefined,
      {} | undefined
    ]
  >;
  getJob(
    request: protos.google.cloud.dataproc.v1.IGetJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IGetJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getJob(
    request: protos.google.cloud.dataproc.v1.IGetJobRequest,
    callback: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IGetJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getJob(
    request?: protos.google.cloud.dataproc.v1.IGetJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataproc.v1.IJob,
          protos.google.cloud.dataproc.v1.IGetJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IGetJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IGetJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
        job_id: request.jobId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getJob(request, options, callback);
  }
  /**
   * Updates a job in a project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {string} request.jobId
   *   Required. The job ID.
   * @param {google.cloud.dataproc.v1.Job} request.job
   *   Required. The changes to the job.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Specifies the path, relative to <code>Job</code>, of
   *   the field to update. For example, to update the labels of a Job the
   *   <code>update_mask</code> parameter would be specified as
   *   <code>labels</code>, and the `PATCH` request body would specify the new
   *   value. <strong>Note:</strong> Currently, <code>labels</code> is the only
   *   field that can be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Job]{@link google.cloud.dataproc.v1.Job}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/job_controller.update_job.js</caption>
   * region_tag:dataproc_v1_generated_JobController_UpdateJob_async
   */
  updateJob(
    request?: protos.google.cloud.dataproc.v1.IUpdateJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IUpdateJobRequest | undefined,
      {} | undefined
    ]
  >;
  updateJob(
    request: protos.google.cloud.dataproc.v1.IUpdateJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IUpdateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateJob(
    request: protos.google.cloud.dataproc.v1.IUpdateJobRequest,
    callback: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IUpdateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateJob(
    request?: protos.google.cloud.dataproc.v1.IUpdateJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataproc.v1.IJob,
          protos.google.cloud.dataproc.v1.IUpdateJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IUpdateJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.IUpdateJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
        job_id: request.jobId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateJob(request, options, callback);
  }
  /**
   * Starts a job cancellation request. To access the job resource
   * after cancellation, call
   * [regions/{region}/jobs.list](https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/list)
   * or
   * [regions/{region}/jobs.get](https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/get).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {string} request.jobId
   *   Required. The job ID.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Job]{@link google.cloud.dataproc.v1.Job}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/job_controller.cancel_job.js</caption>
   * region_tag:dataproc_v1_generated_JobController_CancelJob_async
   */
  cancelJob(
    request?: protos.google.cloud.dataproc.v1.ICancelJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ICancelJobRequest | undefined,
      {} | undefined
    ]
  >;
  cancelJob(
    request: protos.google.cloud.dataproc.v1.ICancelJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ICancelJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  cancelJob(
    request: protos.google.cloud.dataproc.v1.ICancelJobRequest,
    callback: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ICancelJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  cancelJob(
    request?: protos.google.cloud.dataproc.v1.ICancelJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataproc.v1.IJob,
          protos.google.cloud.dataproc.v1.ICancelJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ICancelJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob,
      protos.google.cloud.dataproc.v1.ICancelJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
        job_id: request.jobId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.cancelJob(request, options, callback);
  }
  /**
   * Deletes the job from the project. If the job is active, the delete fails,
   * and the response returns `FAILED_PRECONDITION`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {string} request.jobId
   *   Required. The job ID.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/job_controller.delete_job.js</caption>
   * region_tag:dataproc_v1_generated_JobController_DeleteJob_async
   */
  deleteJob(
    request?: protos.google.cloud.dataproc.v1.IDeleteJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataproc.v1.IDeleteJobRequest | undefined,
      {} | undefined
    ]
  >;
  deleteJob(
    request: protos.google.cloud.dataproc.v1.IDeleteJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataproc.v1.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteJob(
    request: protos.google.cloud.dataproc.v1.IDeleteJobRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataproc.v1.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteJob(
    request?: protos.google.cloud.dataproc.v1.IDeleteJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataproc.v1.IDeleteJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataproc.v1.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataproc.v1.IDeleteJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
        job_id: request.jobId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteJob(request, options, callback);
  }

  /**
   * Submits job to a cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {google.cloud.dataproc.v1.Job} request.job
   *   Required. The job resource.
   * @param {string} [request.requestId]
   *   Optional. A unique id used to identify the request. If the server
   *   receives two
   *   [SubmitJobRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.SubmitJobRequest)s
   *   with the same id, then the second request will be ignored and the
   *   first {@link google.cloud.dataproc.v1.Job|Job} created and stored in the backend
   *   is returned.
   *
   *   It is recommended to always set this value to a
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   *   The id must contain only letters (a-z, A-Z), numbers (0-9),
   *   underscores (_), and hyphens (-). The maximum length is 40 characters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/job_controller.submit_job_as_operation.js</caption>
   * region_tag:dataproc_v1_generated_JobController_SubmitJobAsOperation_async
   */
  submitJobAsOperation(
    request?: protos.google.cloud.dataproc.v1.ISubmitJobRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataproc.v1.IJob,
        protos.google.cloud.dataproc.v1.IJobMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  submitJobAsOperation(
    request: protos.google.cloud.dataproc.v1.ISubmitJobRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.IJob,
        protos.google.cloud.dataproc.v1.IJobMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitJobAsOperation(
    request: protos.google.cloud.dataproc.v1.ISubmitJobRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.IJob,
        protos.google.cloud.dataproc.v1.IJobMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitJobAsOperation(
    request?: protos.google.cloud.dataproc.v1.ISubmitJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataproc.v1.IJob,
            protos.google.cloud.dataproc.v1.IJobMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataproc.v1.IJob,
        protos.google.cloud.dataproc.v1.IJobMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataproc.v1.IJob,
        protos.google.cloud.dataproc.v1.IJobMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
      });
    this.initialize();
    return this.innerApiCalls.submitJobAsOperation(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `submitJobAsOperation()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/job_controller.submit_job_as_operation.js</caption>
   * region_tag:dataproc_v1_generated_JobController_SubmitJobAsOperation_async
   */
  async checkSubmitJobAsOperationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataproc.v1.Job,
      protos.google.cloud.dataproc.v1.JobMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.submitJobAsOperation,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataproc.v1.Job,
      protos.google.cloud.dataproc.v1.JobMetadata
    >;
  }
  /**
   * Lists regions/{region}/jobs in a project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {number} [request.pageSize]
   *   Optional. The number of results to return in each response.
   * @param {string} [request.pageToken]
   *   Optional. The page token, returned by a previous call, to request the
   *   next page of results.
   * @param {string} [request.clusterName]
   *   Optional. If set, the returned jobs list includes only jobs that were
   *   submitted to the named cluster.
   * @param {google.cloud.dataproc.v1.ListJobsRequest.JobStateMatcher} [request.jobStateMatcher]
   *   Optional. Specifies enumerated categories of jobs to list.
   *   (default = match ALL jobs).
   *
   *   If `filter` is provided, `jobStateMatcher` will be ignored.
   * @param {string} [request.filter]
   *   Optional. A filter constraining the jobs to list. Filters are
   *   case-sensitive and have the following syntax:
   *
   *   [field = value] AND [field [= value]] ...
   *
   *   where **field** is `status.state` or `labels.[KEY]`, and `[KEY]` is a label
   *   key. **value** can be `*` to match all values.
   *   `status.state` can be either `ACTIVE` or `NON_ACTIVE`.
   *   Only the logical `AND` operator is supported; space-separated items are
   *   treated as having an implicit `AND` operator.
   *
   *   Example filter:
   *
   *   status.state = ACTIVE AND labels.env = staging AND labels.starred = *
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Job]{@link google.cloud.dataproc.v1.Job}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listJobs(
    request?: protos.google.cloud.dataproc.v1.IListJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob[],
      protos.google.cloud.dataproc.v1.IListJobsRequest | null,
      protos.google.cloud.dataproc.v1.IListJobsResponse
    ]
  >;
  listJobs(
    request: protos.google.cloud.dataproc.v1.IListJobsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dataproc.v1.IListJobsRequest,
      protos.google.cloud.dataproc.v1.IListJobsResponse | null | undefined,
      protos.google.cloud.dataproc.v1.IJob
    >
  ): void;
  listJobs(
    request: protos.google.cloud.dataproc.v1.IListJobsRequest,
    callback: PaginationCallback<
      protos.google.cloud.dataproc.v1.IListJobsRequest,
      protos.google.cloud.dataproc.v1.IListJobsResponse | null | undefined,
      protos.google.cloud.dataproc.v1.IJob
    >
  ): void;
  listJobs(
    request?: protos.google.cloud.dataproc.v1.IListJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dataproc.v1.IListJobsRequest,
          protos.google.cloud.dataproc.v1.IListJobsResponse | null | undefined,
          protos.google.cloud.dataproc.v1.IJob
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dataproc.v1.IListJobsRequest,
      protos.google.cloud.dataproc.v1.IListJobsResponse | null | undefined,
      protos.google.cloud.dataproc.v1.IJob
    >
  ): Promise<
    [
      protos.google.cloud.dataproc.v1.IJob[],
      protos.google.cloud.dataproc.v1.IListJobsRequest | null,
      protos.google.cloud.dataproc.v1.IListJobsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listJobs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {number} [request.pageSize]
   *   Optional. The number of results to return in each response.
   * @param {string} [request.pageToken]
   *   Optional. The page token, returned by a previous call, to request the
   *   next page of results.
   * @param {string} [request.clusterName]
   *   Optional. If set, the returned jobs list includes only jobs that were
   *   submitted to the named cluster.
   * @param {google.cloud.dataproc.v1.ListJobsRequest.JobStateMatcher} [request.jobStateMatcher]
   *   Optional. Specifies enumerated categories of jobs to list.
   *   (default = match ALL jobs).
   *
   *   If `filter` is provided, `jobStateMatcher` will be ignored.
   * @param {string} [request.filter]
   *   Optional. A filter constraining the jobs to list. Filters are
   *   case-sensitive and have the following syntax:
   *
   *   [field = value] AND [field [= value]] ...
   *
   *   where **field** is `status.state` or `labels.[KEY]`, and `[KEY]` is a label
   *   key. **value** can be `*` to match all values.
   *   `status.state` can be either `ACTIVE` or `NON_ACTIVE`.
   *   Only the logical `AND` operator is supported; space-separated items are
   *   treated as having an implicit `AND` operator.
   *
   *   Example filter:
   *
   *   status.state = ACTIVE AND labels.env = staging AND labels.starred = *
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Job]{@link google.cloud.dataproc.v1.Job} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listJobsStream(
    request?: protos.google.cloud.dataproc.v1.IListJobsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
      });
    const defaultCallSettings = this._defaults['listJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listJobs.createStream(
      this.innerApiCalls.listJobs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listJobs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud Platform project that the job
   *   belongs to.
   * @param {string} request.region
   *   Required. The Dataproc region in which to handle the request.
   * @param {number} [request.pageSize]
   *   Optional. The number of results to return in each response.
   * @param {string} [request.pageToken]
   *   Optional. The page token, returned by a previous call, to request the
   *   next page of results.
   * @param {string} [request.clusterName]
   *   Optional. If set, the returned jobs list includes only jobs that were
   *   submitted to the named cluster.
   * @param {google.cloud.dataproc.v1.ListJobsRequest.JobStateMatcher} [request.jobStateMatcher]
   *   Optional. Specifies enumerated categories of jobs to list.
   *   (default = match ALL jobs).
   *
   *   If `filter` is provided, `jobStateMatcher` will be ignored.
   * @param {string} [request.filter]
   *   Optional. A filter constraining the jobs to list. Filters are
   *   case-sensitive and have the following syntax:
   *
   *   [field = value] AND [field [= value]] ...
   *
   *   where **field** is `status.state` or `labels.[KEY]`, and `[KEY]` is a label
   *   key. **value** can be `*` to match all values.
   *   `status.state` can be either `ACTIVE` or `NON_ACTIVE`.
   *   Only the logical `AND` operator is supported; space-separated items are
   *   treated as having an implicit `AND` operator.
   *
   *   Example filter:
   *
   *   status.state = ACTIVE AND labels.env = staging AND labels.starred = *
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Job]{@link google.cloud.dataproc.v1.Job}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/job_controller.list_jobs.js</caption>
   * region_tag:dataproc_v1_generated_JobController_ListJobs_async
   */
  listJobsAsync(
    request?: protos.google.cloud.dataproc.v1.IListJobsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dataproc.v1.IJob> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        region: request.region ?? '',
      });
    const defaultCallSettings = this._defaults['listJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listJobs.asyncIterate(
      this.innerApiCalls['listJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataproc.v1.IJob>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified batch resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} batch
   * @returns {string} Resource name string.
   */
  batchPath(project: string, location: string, batch: string) {
    return this.pathTemplates.batchPathTemplate.render({
      project: project,
      location: location,
      batch: batch,
    });
  }

  /**
   * Parse the project from Batch resource.
   *
   * @param {string} batchName
   *   A fully-qualified path representing Batch resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBatchName(batchName: string) {
    return this.pathTemplates.batchPathTemplate.match(batchName).project;
  }

  /**
   * Parse the location from Batch resource.
   *
   * @param {string} batchName
   *   A fully-qualified path representing Batch resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBatchName(batchName: string) {
    return this.pathTemplates.batchPathTemplate.match(batchName).location;
  }

  /**
   * Parse the batch from Batch resource.
   *
   * @param {string} batchName
   *   A fully-qualified path representing Batch resource.
   * @returns {string} A string representing the batch.
   */
  matchBatchFromBatchName(batchName: string) {
    return this.pathTemplates.batchPathTemplate.match(batchName).batch;
  }

  /**
   * Return a fully-qualified nodeGroup resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} cluster
   * @param {string} node_group
   * @returns {string} Resource name string.
   */
  nodeGroupPath(
    project: string,
    region: string,
    cluster: string,
    nodeGroup: string
  ) {
    return this.pathTemplates.nodeGroupPathTemplate.render({
      project: project,
      region: region,
      cluster: cluster,
      node_group: nodeGroup,
    });
  }

  /**
   * Parse the project from NodeGroup resource.
   *
   * @param {string} nodeGroupName
   *   A fully-qualified path representing NodeGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNodeGroupName(nodeGroupName: string) {
    return this.pathTemplates.nodeGroupPathTemplate.match(nodeGroupName)
      .project;
  }

  /**
   * Parse the region from NodeGroup resource.
   *
   * @param {string} nodeGroupName
   *   A fully-qualified path representing NodeGroup resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromNodeGroupName(nodeGroupName: string) {
    return this.pathTemplates.nodeGroupPathTemplate.match(nodeGroupName).region;
  }

  /**
   * Parse the cluster from NodeGroup resource.
   *
   * @param {string} nodeGroupName
   *   A fully-qualified path representing NodeGroup resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromNodeGroupName(nodeGroupName: string) {
    return this.pathTemplates.nodeGroupPathTemplate.match(nodeGroupName)
      .cluster;
  }

  /**
   * Parse the node_group from NodeGroup resource.
   *
   * @param {string} nodeGroupName
   *   A fully-qualified path representing NodeGroup resource.
   * @returns {string} A string representing the node_group.
   */
  matchNodeGroupFromNodeGroupName(nodeGroupName: string) {
    return this.pathTemplates.nodeGroupPathTemplate.match(nodeGroupName)
      .node_group;
  }

  /**
   * Return a fully-qualified projectLocationAutoscalingPolicy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autoscaling_policy
   * @returns {string} Resource name string.
   */
  projectLocationAutoscalingPolicyPath(
    project: string,
    location: string,
    autoscalingPolicy: string
  ) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.render(
      {
        project: project,
        location: location,
        autoscaling_policy: autoscalingPolicy,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAutoscalingPolicyName(
    projectLocationAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(
      projectLocationAutoscalingPolicyName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAutoscalingPolicyName(
    projectLocationAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(
      projectLocationAutoscalingPolicyName
    ).location;
  }

  /**
   * Parse the autoscaling_policy from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the autoscaling_policy.
   */
  matchAutoscalingPolicyFromProjectLocationAutoscalingPolicyName(
    projectLocationAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(
      projectLocationAutoscalingPolicyName
    ).autoscaling_policy;
  }

  /**
   * Return a fully-qualified projectLocationWorkflowTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workflow_template
   * @returns {string} Resource name string.
   */
  projectLocationWorkflowTemplatePath(
    project: string,
    location: string,
    workflowTemplate: string
  ) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.render(
      {
        project: project,
        location: location,
        workflow_template: workflowTemplate,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationWorkflowTemplateName(
    projectLocationWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(
      projectLocationWorkflowTemplateName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationWorkflowTemplateName(
    projectLocationWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(
      projectLocationWorkflowTemplateName
    ).location;
  }

  /**
   * Parse the workflow_template from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the workflow_template.
   */
  matchWorkflowTemplateFromProjectLocationWorkflowTemplateName(
    projectLocationWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(
      projectLocationWorkflowTemplateName
    ).workflow_template;
  }

  /**
   * Return a fully-qualified projectRegionAutoscalingPolicy resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} autoscaling_policy
   * @returns {string} Resource name string.
   */
  projectRegionAutoscalingPolicyPath(
    project: string,
    region: string,
    autoscalingPolicy: string
  ) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.render(
      {
        project: project,
        region: region,
        autoscaling_policy: autoscalingPolicy,
      }
    );
  }

  /**
   * Parse the project from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectRegionAutoscalingPolicyName(
    projectRegionAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(
      projectRegionAutoscalingPolicyName
    ).project;
  }

  /**
   * Parse the region from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromProjectRegionAutoscalingPolicyName(
    projectRegionAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(
      projectRegionAutoscalingPolicyName
    ).region;
  }

  /**
   * Parse the autoscaling_policy from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the autoscaling_policy.
   */
  matchAutoscalingPolicyFromProjectRegionAutoscalingPolicyName(
    projectRegionAutoscalingPolicyName: string
  ) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(
      projectRegionAutoscalingPolicyName
    ).autoscaling_policy;
  }

  /**
   * Return a fully-qualified projectRegionWorkflowTemplate resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} workflow_template
   * @returns {string} Resource name string.
   */
  projectRegionWorkflowTemplatePath(
    project: string,
    region: string,
    workflowTemplate: string
  ) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.render({
      project: project,
      region: region,
      workflow_template: workflowTemplate,
    });
  }

  /**
   * Parse the project from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectRegionWorkflowTemplateName(
    projectRegionWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(
      projectRegionWorkflowTemplateName
    ).project;
  }

  /**
   * Parse the region from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromProjectRegionWorkflowTemplateName(
    projectRegionWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(
      projectRegionWorkflowTemplateName
    ).region;
  }

  /**
   * Parse the workflow_template from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the workflow_template.
   */
  matchWorkflowTemplateFromProjectRegionWorkflowTemplateName(
    projectRegionWorkflowTemplateName: string
  ) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(
      projectRegionWorkflowTemplateName
    ).workflow_template;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.jobControllerStub && !this._terminated) {
      return this.jobControllerStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
