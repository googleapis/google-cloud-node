// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name, size) {
  // [START dataproc_v1_generated_NodeGroupController_ResizeNodeGroup_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the node group to resize.
   *  Format:
   *  `projects/{project}/regions/{region}/clusters/{cluster}/nodeGroups/{nodeGroup}`
   */
  // const name = 'abc123'
  /**
   *  Required. The number of running instances for the node group to maintain.
   *  The group adds or removes instances to maintain the number of instances
   *  specified by this parameter.
   */
  // const size = 1234
  /**
   *  Optional. A unique ID used to identify the request. If the server receives
   *  two
   *  ResizeNodeGroupRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.ResizeNodeGroupRequests)
   *  with the same ID, the second request is ignored and the
   *  first google.longrunning.Operation google.longrunning.Operation  created
   *  and stored in the backend is returned.
   *  Recommendation: Set this value to a
   *  UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *  The ID must contain only letters (a-z, A-Z), numbers (0-9),
   *  underscores (_), and hyphens (-). The maximum length is 40 characters.
   */
  // const requestId = 'abc123'
  /**
   *  Optional. Timeout for graceful YARN decommissioning. Graceful
   *  decommissioning 
   *  (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/scaling-clusters#graceful_decommissioning)
   *  allows the removal of nodes from the Compute Engine node group
   *  without interrupting jobs in progress. This timeout specifies how long to
   *  wait for jobs in progress to finish before forcefully removing nodes (and
   *  potentially interrupting jobs). Default timeout is 0 (for forceful
   *  decommission), and the maximum allowed timeout is 1 day. (see JSON
   *  representation of
   *  Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
   *  Only supported on Dataproc image versions 1.2 and higher.
   */
  // const gracefulDecommissionTimeout = {}

  // Imports the Dataproc library
  const {NodeGroupControllerClient} = require('@google-cloud/dataproc').v1;

  // Instantiates a client
  const dataprocClient = new NodeGroupControllerClient();

  async function callResizeNodeGroup() {
    // Construct request
    const request = {
      name,
      size,
    };

    // Run request
    const [operation] = await dataprocClient.resizeNodeGroup(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callResizeNodeGroup();
  // [END dataproc_v1_generated_NodeGroupController_ResizeNodeGroup_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
