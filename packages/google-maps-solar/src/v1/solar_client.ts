// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/solar_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './solar_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service definition for the Solar API.
 * @class
 * @memberof v1
 */
export class SolarClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  solarStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SolarClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SolarClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SolarClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'solar.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.maps.solar.v1.Solar',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.solarStub) {
      return this.solarStub;
    }

    // Put together the "service stub" for
    // google.maps.solar.v1.Solar.
    this.solarStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.maps.solar.v1.Solar'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.maps.solar.v1.Solar,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const solarStubMethods = [
      'findClosestBuildingInsights',
      'getDataLayers',
      'getGeoTiff',
    ];
    for (const methodName of solarStubMethods) {
      const callPromise = this.solarStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.solarStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'solar.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'solar.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Locates the closest building to a query point. Returns an error with
   * code `NOT_FOUND` if there are no buildings within approximately 50m of the
   * query point.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.type.LatLng} request.location
   *   Required. The longitude and latitude from which the API looks for the
   *   nearest known building.
   * @param {google.maps.solar.v1.ImageryQuality} [request.requiredQuality]
   *   Optional. The minimum quality level allowed in the results. No result with
   *   lower quality than this will be returned. Not specifying this is
   *   equivalent to restricting to HIGH quality only.
   * @param {boolean} [request.exactQualityRequired]
   *   Optional. Whether to require exact quality of the imagery.
   *   If set to false, the `required_quality` field is interpreted as the minimum
   *   required quality, such that HIGH quality imagery may be returned when
   *   `required_quality` is set to MEDIUM.  If set to true, `required_quality`
   *   is interpreted as the exact required quality and only `MEDIUM` quality
   *   imagery is returned if `required_quality` is set to `MEDIUM`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.maps.solar.v1.BuildingInsights|BuildingInsights}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/solar.find_closest_building_insights.js</caption>
   * region_tag:solar_v1_generated_Solar_FindClosestBuildingInsights_async
   */
  findClosestBuildingInsights(
    request?: protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.maps.solar.v1.IBuildingInsights,
      (
        | protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  findClosestBuildingInsights(
    request: protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.maps.solar.v1.IBuildingInsights,
      | protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  findClosestBuildingInsights(
    request: protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest,
    callback: Callback<
      protos.google.maps.solar.v1.IBuildingInsights,
      | protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  findClosestBuildingInsights(
    request?: protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.maps.solar.v1.IBuildingInsights,
          | protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.maps.solar.v1.IBuildingInsights,
      | protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.maps.solar.v1.IBuildingInsights,
      (
        | protos.google.maps.solar.v1.IFindClosestBuildingInsightsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.findClosestBuildingInsights(
      request,
      options,
      callback
    );
  }
  /**
   * Gets solar information for a region surrounding a location.
   * Returns an error with code `NOT_FOUND` if the location is outside
   * the coverage area.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.type.LatLng} request.location
   *   Required. The longitude and latitude for the center of the region to get
   *   data for.
   * @param {number} request.radiusMeters
   *   Required. The radius, in meters, defining the region surrounding that
   *   centre point for which data should be returned. The limitations
   *   on this value are:
   *
   *   * Any value up to 100m can always be specified.
   *   * Values over 100m can be specified, as long as
   *     `radius_meters` <= `pixel_size_meters * 1000`.
   *   * However, for values over 175m, the `DataLayerView` in the
   *     request must not include monthly flux or hourly shade.
   * @param {google.maps.solar.v1.DataLayerView} [request.view]
   *   Optional. The desired subset of the data to return.
   * @param {google.maps.solar.v1.ImageryQuality} [request.requiredQuality]
   *   Optional. The minimum quality level allowed in the results. No result with
   *   lower quality than this will be returned. Not specifying this is
   *   equivalent to restricting to HIGH quality only.
   * @param {number} [request.pixelSizeMeters]
   *   Optional. The minimum scale, in meters per pixel, of the data to return.
   *   Values of 0.1 (the default, if this field is not set explicitly),
   *   0.25, 0.5, and 1.0 are supported. Imagery components whose normal
   *   resolution is less than `pixel_size_meters` will be returned at
   *   the resolution specified by `pixel_size_meters`; imagery
   *   components whose normal resolution is equal to or greater than
   *   `pixel_size_meters` will be returned at that normal resolution.
   * @param {boolean} [request.exactQualityRequired]
   *   Optional. Whether to require exact quality of the imagery.
   *   If set to false, the `required_quality` field is interpreted as the minimum
   *   required quality, such that HIGH quality imagery may be returned when
   *   `required_quality` is set to MEDIUM.  If set to true, `required_quality`
   *   is interpreted as the exact required quality and only `MEDIUM` quality
   *   imagery is returned if `required_quality` is set to `MEDIUM`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.maps.solar.v1.DataLayers|DataLayers}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/solar.get_data_layers.js</caption>
   * region_tag:solar_v1_generated_Solar_GetDataLayers_async
   */
  getDataLayers(
    request?: protos.google.maps.solar.v1.IGetDataLayersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.maps.solar.v1.IDataLayers,
      protos.google.maps.solar.v1.IGetDataLayersRequest | undefined,
      {} | undefined,
    ]
  >;
  getDataLayers(
    request: protos.google.maps.solar.v1.IGetDataLayersRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.maps.solar.v1.IDataLayers,
      protos.google.maps.solar.v1.IGetDataLayersRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDataLayers(
    request: protos.google.maps.solar.v1.IGetDataLayersRequest,
    callback: Callback<
      protos.google.maps.solar.v1.IDataLayers,
      protos.google.maps.solar.v1.IGetDataLayersRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDataLayers(
    request?: protos.google.maps.solar.v1.IGetDataLayersRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.maps.solar.v1.IDataLayers,
          protos.google.maps.solar.v1.IGetDataLayersRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.maps.solar.v1.IDataLayers,
      protos.google.maps.solar.v1.IGetDataLayersRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.maps.solar.v1.IDataLayers,
      protos.google.maps.solar.v1.IGetDataLayersRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.getDataLayers(request, options, callback);
  }
  /**
   * Returns an image by its ID.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.id
   *   Required. The ID of the asset being requested.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.api.HttpBody|HttpBody}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/solar.get_geo_tiff.js</caption>
   * region_tag:solar_v1_generated_Solar_GetGeoTiff_async
   */
  getGeoTiff(
    request?: protos.google.maps.solar.v1.IGetGeoTiffRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.IHttpBody,
      protos.google.maps.solar.v1.IGetGeoTiffRequest | undefined,
      {} | undefined,
    ]
  >;
  getGeoTiff(
    request: protos.google.maps.solar.v1.IGetGeoTiffRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.IHttpBody,
      protos.google.maps.solar.v1.IGetGeoTiffRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getGeoTiff(
    request: protos.google.maps.solar.v1.IGetGeoTiffRequest,
    callback: Callback<
      protos.google.api.IHttpBody,
      protos.google.maps.solar.v1.IGetGeoTiffRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getGeoTiff(
    request?: protos.google.maps.solar.v1.IGetGeoTiffRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.IHttpBody,
          protos.google.maps.solar.v1.IGetGeoTiffRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.IHttpBody,
      protos.google.maps.solar.v1.IGetGeoTiffRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.IHttpBody,
      protos.google.maps.solar.v1.IGetGeoTiffRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.getGeoTiff(request, options, callback);
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.solarStub && !this._terminated) {
      return this.solarStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
