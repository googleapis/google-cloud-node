// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

'use strict';

function main(
  location = {},
  requiredQuality = {},
  exactQualityRequired = false
) {
  // [START solar_quickstart]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The longitude and latitude from which the API looks for the
   *  nearest known building.
   */
  // const location = {
  //   latitude: 37.7900161,
  //   longitude: -122.3900146,
  // };
  /**
   *  Optional. The minimum quality level allowed in the results. No result with
   *  lower quality than this will be returned. Not specifying this is
   *  equivalent to restricting to HIGH quality only.
   */
  // const requiredQuality = {}
  /**
   *  Optional. Whether to require exact quality of the imagery.
   *  If set to false, the `required_quality` field is interpreted as the minimum
   *  required quality, such that HIGH quality imagery may be returned when
   *  `required_quality` is set to MEDIUM.  If set to true, `required_quality`
   *  is interpreted as the exact required quality and only `MEDIUM` quality
   *  imagery is returned if `required_quality` is set to `MEDIUM`.
   */
  // const exactQualityRequired = true

  // Imports the Solar library
  const {SolarClient} = require('@googlemaps/solar').v1;

  // Instantiates a client
  const solarClient = new SolarClient();

  async function callFindClosestBuildingInsights() {
    // Construct request
    const request = {
      location,
      requiredQuality,
      exactQualityRequired,
    };

    // Run request
    const response = await solarClient.findClosestBuildingInsights(request);
    console.log(response);
  }

  callFindClosestBuildingInsights();
  // [END solar_quickstart]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});

// All args are JSON
main(...process.argv.slice(2).map(item => JSON.parse(item)));
