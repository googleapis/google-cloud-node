// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cloud_functions_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './cloud_functions_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  A service that application uses to manipulate triggers and functions.
 * @class
 * @memberof v1
 */
export class CloudFunctionsServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  cloudFunctionsServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CloudFunctionsServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new CloudFunctionsServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof CloudFunctionsServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      cloudFunctionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/functions/{function}'
      ),
      cryptoKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      repositoryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listFunctions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'functions'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createFunctionResponse = protoFilesRoot.lookup(
      '.google.cloud.functions.v1.CloudFunction'
    ) as gax.protobuf.Type;
    const createFunctionMetadata = protoFilesRoot.lookup(
      '.google.cloud.functions.v1.OperationMetadataV1'
    ) as gax.protobuf.Type;
    const updateFunctionResponse = protoFilesRoot.lookup(
      '.google.cloud.functions.v1.CloudFunction'
    ) as gax.protobuf.Type;
    const updateFunctionMetadata = protoFilesRoot.lookup(
      '.google.cloud.functions.v1.OperationMetadataV1'
    ) as gax.protobuf.Type;
    const deleteFunctionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteFunctionMetadata = protoFilesRoot.lookup(
      '.google.cloud.functions.v1.OperationMetadataV1'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createFunction: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createFunctionResponse.decode.bind(createFunctionResponse),
        createFunctionMetadata.decode.bind(createFunctionMetadata)
      ),
      updateFunction: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateFunctionResponse.decode.bind(updateFunctionResponse),
        updateFunctionMetadata.decode.bind(updateFunctionMetadata)
      ),
      deleteFunction: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteFunctionResponse.decode.bind(deleteFunctionResponse),
        deleteFunctionMetadata.decode.bind(deleteFunctionMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.functions.v1.CloudFunctionsService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.cloudFunctionsServiceStub) {
      return this.cloudFunctionsServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.functions.v1.CloudFunctionsService.
    this.cloudFunctionsServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.functions.v1.CloudFunctionsService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.functions.v1.CloudFunctionsService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const cloudFunctionsServiceStubMethods = [
      'listFunctions',
      'getFunction',
      'createFunction',
      'updateFunction',
      'deleteFunction',
      'callFunction',
      'generateUploadUrl',
      'generateDownloadUrl',
      'setIamPolicy',
      'getIamPolicy',
      'testIamPermissions',
    ];
    for (const methodName of cloudFunctionsServiceStubMethods) {
      const callPromise = this.cloudFunctionsServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.cloudFunctionsServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'cloudfunctions.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'cloudfunctions.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Returns a function with the given name from the requested project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the function which details should be obtained.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CloudFunction]{@link google.cloud.functions.v1.CloudFunction}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.get_function.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_GetFunction_async
   */
  getFunction(
    request?: protos.google.cloud.functions.v1.IGetFunctionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.functions.v1.ICloudFunction,
      protos.google.cloud.functions.v1.IGetFunctionRequest | undefined,
      {} | undefined
    ]
  >;
  getFunction(
    request: protos.google.cloud.functions.v1.IGetFunctionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.functions.v1.ICloudFunction,
      protos.google.cloud.functions.v1.IGetFunctionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getFunction(
    request: protos.google.cloud.functions.v1.IGetFunctionRequest,
    callback: Callback<
      protos.google.cloud.functions.v1.ICloudFunction,
      protos.google.cloud.functions.v1.IGetFunctionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getFunction(
    request?: protos.google.cloud.functions.v1.IGetFunctionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.functions.v1.ICloudFunction,
          | protos.google.cloud.functions.v1.IGetFunctionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.functions.v1.ICloudFunction,
      protos.google.cloud.functions.v1.IGetFunctionRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.functions.v1.ICloudFunction,
      protos.google.cloud.functions.v1.IGetFunctionRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getFunction(request, options, callback);
  }
  /**
   * Synchronously invokes a deployed Cloud Function. To be used for testing
   * purposes as very limited traffic is allowed. For more information on
   * the actual limits, refer to
   * [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the function to be called.
   * @param {string} request.data
   *   Required. Input to be passed to the function.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CallFunctionResponse]{@link google.cloud.functions.v1.CallFunctionResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.call_function.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_CallFunction_async
   */
  callFunction(
    request?: protos.google.cloud.functions.v1.ICallFunctionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.functions.v1.ICallFunctionResponse,
      protos.google.cloud.functions.v1.ICallFunctionRequest | undefined,
      {} | undefined
    ]
  >;
  callFunction(
    request: protos.google.cloud.functions.v1.ICallFunctionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.functions.v1.ICallFunctionResponse,
      protos.google.cloud.functions.v1.ICallFunctionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  callFunction(
    request: protos.google.cloud.functions.v1.ICallFunctionRequest,
    callback: Callback<
      protos.google.cloud.functions.v1.ICallFunctionResponse,
      protos.google.cloud.functions.v1.ICallFunctionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  callFunction(
    request?: protos.google.cloud.functions.v1.ICallFunctionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.functions.v1.ICallFunctionResponse,
          | protos.google.cloud.functions.v1.ICallFunctionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.functions.v1.ICallFunctionResponse,
      protos.google.cloud.functions.v1.ICallFunctionRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.functions.v1.ICallFunctionResponse,
      protos.google.cloud.functions.v1.ICallFunctionRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.callFunction(request, options, callback);
  }
  /**
   * Returns a signed URL for uploading a function source code.
   * For more information about the signed URL usage see:
   * https://cloud.google.com/storage/docs/access-control/signed-urls.
   * Once the function source code upload is complete, the used signed
   * URL should be provided in CreateFunction or UpdateFunction request
   * as a reference to the function source code.
   *
   * When uploading source code to the generated signed URL, please follow
   * these restrictions:
   *
   * * Source file type should be a zip file.
   * * Source file size should not exceed 100MB limit.
   * * No credentials should be attached - the signed URLs provide access to the
   *   target bucket using internal service identity; if credentials were
   *   attached, the identity from the credentials would be used, but that
   *   identity does not have permissions to upload files to the URL.
   *
   * When making a HTTP PUT request, these two headers need to be specified:
   *
   * * `content-type: application/zip`
   * * `x-goog-content-length-range: 0,104857600`
   *
   * And this header SHOULD NOT be specified:
   *
   * * `Authorization: Bearer YOUR_TOKEN`
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The project and location in which the Google Cloud Storage signed URL
   *   should be generated, specified in the format `projects/* /locations/*`.
   * @param {string} request.kmsKeyName
   *   Resource name of a KMS crypto key (managed by the user) used to
   *   encrypt/decrypt function source code objects in staging Cloud Storage
   *   buckets. When you generate an upload url and upload your source code, it
   *   gets copied to a staging Cloud Storage bucket in an internal regional
   *   project. The source code is then copied to a versioned directory in the
   *   sources bucket in the consumer project during the function deployment.
   *
   *   It must match the pattern
   *   `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   *
   *   The Google Cloud Functions service account
   *   (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be
   *   granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter
   *   (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the
   *   Key/KeyRing/Project/Organization (least access preferred). GCF will
   *   delegate access to the Google Storage service account in the internal
   *   project.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GenerateUploadUrlResponse]{@link google.cloud.functions.v1.GenerateUploadUrlResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.generate_upload_url.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_GenerateUploadUrl_async
   */
  generateUploadUrl(
    request?: protos.google.cloud.functions.v1.IGenerateUploadUrlRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.functions.v1.IGenerateUploadUrlResponse,
      protos.google.cloud.functions.v1.IGenerateUploadUrlRequest | undefined,
      {} | undefined
    ]
  >;
  generateUploadUrl(
    request: protos.google.cloud.functions.v1.IGenerateUploadUrlRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.functions.v1.IGenerateUploadUrlResponse,
      | protos.google.cloud.functions.v1.IGenerateUploadUrlRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateUploadUrl(
    request: protos.google.cloud.functions.v1.IGenerateUploadUrlRequest,
    callback: Callback<
      protos.google.cloud.functions.v1.IGenerateUploadUrlResponse,
      | protos.google.cloud.functions.v1.IGenerateUploadUrlRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateUploadUrl(
    request?: protos.google.cloud.functions.v1.IGenerateUploadUrlRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.functions.v1.IGenerateUploadUrlResponse,
          | protos.google.cloud.functions.v1.IGenerateUploadUrlRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.functions.v1.IGenerateUploadUrlResponse,
      | protos.google.cloud.functions.v1.IGenerateUploadUrlRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.functions.v1.IGenerateUploadUrlResponse,
      protos.google.cloud.functions.v1.IGenerateUploadUrlRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.generateUploadUrl(request, options, callback);
  }
  /**
   * Returns a signed URL for downloading deployed function source code.
   * The URL is only valid for a limited period and should be used within
   * minutes after generation.
   * For more information about the signed URL usage see:
   * https://cloud.google.com/storage/docs/access-control/signed-urls
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of function for which source code Google Cloud Storage signed
   *   URL should be generated.
   * @param {number} request.versionId
   *   The optional version of function. If not set, default, current version
   *   is used.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GenerateDownloadUrlResponse]{@link google.cloud.functions.v1.GenerateDownloadUrlResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.generate_download_url.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_GenerateDownloadUrl_async
   */
  generateDownloadUrl(
    request?: protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse,
      protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest | undefined,
      {} | undefined
    ]
  >;
  generateDownloadUrl(
    request: protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse,
      | protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateDownloadUrl(
    request: protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest,
    callback: Callback<
      protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse,
      | protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateDownloadUrl(
    request?: protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse,
          | protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse,
      | protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse,
      protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.generateDownloadUrl(request, options, callback);
  }
  /**
   * Sets the IAM access control policy on the specified function.
   * Replaces any existing policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
   *   the fields in the mask will be modified. If no mask is provided, the
   *   following default mask is used:
   *
   *   `paths: "bindings, etag"`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.set_iam_policy.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_SetIamPolicy_async
   */
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  /**
   * Gets the IAM access control policy for a function.
   * Returns an empty policy if the function exists and does not have a policy
   * set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.get_iam_policy.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_GetIamPolicy_async
   */
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  /**
   * Tests the specified permissions against the IAM access control policy
   * for a function.
   * If the function does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.test_iam_permissions.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_TestIamPermissions_async
   */
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }

  /**
   * Creates a new function. If a function with the given name already exists in
   * the specified project, the long running operation will return
   * `ALREADY_EXISTS` error.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.location
   *   Required. The project and location in which the function should be created, specified
   *   in the format `projects/* /locations/*`
   * @param {google.cloud.functions.v1.CloudFunction} request.function
   *   Required. Function to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.create_function.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_CreateFunction_async
   */
  createFunction(
    request?: protos.google.cloud.functions.v1.ICreateFunctionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createFunction(
    request: protos.google.cloud.functions.v1.ICreateFunctionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createFunction(
    request: protos.google.cloud.functions.v1.ICreateFunctionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createFunction(
    request?: protos.google.cloud.functions.v1.ICreateFunctionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.functions.v1.ICloudFunction,
            protos.google.cloud.functions.v1.IOperationMetadataV1
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        location: request.location ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createFunction(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createFunction()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.create_function.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_CreateFunction_async
   */
  async checkCreateFunctionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.functions.v1.CloudFunction,
      protos.google.cloud.functions.v1.OperationMetadataV1
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createFunction,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.functions.v1.CloudFunction,
      protos.google.cloud.functions.v1.OperationMetadataV1
    >;
  }
  /**
   * Updates existing function.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.functions.v1.CloudFunction} request.function
   *   Required. New version of the function.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The list of fields in `CloudFunction` that have to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.update_function.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_UpdateFunction_async
   */
  updateFunction(
    request?: protos.google.cloud.functions.v1.IUpdateFunctionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateFunction(
    request: protos.google.cloud.functions.v1.IUpdateFunctionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateFunction(
    request: protos.google.cloud.functions.v1.IUpdateFunctionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateFunction(
    request?: protos.google.cloud.functions.v1.IUpdateFunctionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.functions.v1.ICloudFunction,
            protos.google.cloud.functions.v1.IOperationMetadataV1
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.functions.v1.ICloudFunction,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'function.name': request.function!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateFunction(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateFunction()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.update_function.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_UpdateFunction_async
   */
  async checkUpdateFunctionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.functions.v1.CloudFunction,
      protos.google.cloud.functions.v1.OperationMetadataV1
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateFunction,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.functions.v1.CloudFunction,
      protos.google.cloud.functions.v1.OperationMetadataV1
    >;
  }
  /**
   * Deletes a function with the given name from the specified project. If the
   * given function is used by some trigger, the trigger will be updated to
   * remove this function.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the function which should be deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.delete_function.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_DeleteFunction_async
   */
  deleteFunction(
    request?: protos.google.cloud.functions.v1.IDeleteFunctionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteFunction(
    request: protos.google.cloud.functions.v1.IDeleteFunctionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFunction(
    request: protos.google.cloud.functions.v1.IDeleteFunctionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFunction(
    request?: protos.google.cloud.functions.v1.IDeleteFunctionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.functions.v1.IOperationMetadataV1
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.functions.v1.IOperationMetadataV1
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteFunction(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteFunction()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.delete_function.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_DeleteFunction_async
   */
  async checkDeleteFunctionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.functions.v1.OperationMetadataV1
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteFunction,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.functions.v1.OperationMetadataV1
    >;
  }
  /**
   * Returns a list of functions that belong to the requested project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The project and location from which the function should be listed,
   *   specified in the format `projects/* /locations/*`
   *   If you want to list functions in all locations, use "-" in place of a
   *   location. When listing functions in all locations, if one or more
   *   location(s) are unreachable, the response will contain functions from all
   *   reachable locations along with the names of any unreachable locations.
   * @param {number} request.pageSize
   *   Maximum number of functions to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last
   *   `ListFunctionsResponse`; indicates that
   *   this is a continuation of a prior `ListFunctions` call, and that the
   *   system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [CloudFunction]{@link google.cloud.functions.v1.CloudFunction}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listFunctionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listFunctions(
    request?: protos.google.cloud.functions.v1.IListFunctionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.functions.v1.ICloudFunction[],
      protos.google.cloud.functions.v1.IListFunctionsRequest | null,
      protos.google.cloud.functions.v1.IListFunctionsResponse
    ]
  >;
  listFunctions(
    request: protos.google.cloud.functions.v1.IListFunctionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.functions.v1.IListFunctionsRequest,
      | protos.google.cloud.functions.v1.IListFunctionsResponse
      | null
      | undefined,
      protos.google.cloud.functions.v1.ICloudFunction
    >
  ): void;
  listFunctions(
    request: protos.google.cloud.functions.v1.IListFunctionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.functions.v1.IListFunctionsRequest,
      | protos.google.cloud.functions.v1.IListFunctionsResponse
      | null
      | undefined,
      protos.google.cloud.functions.v1.ICloudFunction
    >
  ): void;
  listFunctions(
    request?: protos.google.cloud.functions.v1.IListFunctionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.functions.v1.IListFunctionsRequest,
          | protos.google.cloud.functions.v1.IListFunctionsResponse
          | null
          | undefined,
          protos.google.cloud.functions.v1.ICloudFunction
        >,
    callback?: PaginationCallback<
      protos.google.cloud.functions.v1.IListFunctionsRequest,
      | protos.google.cloud.functions.v1.IListFunctionsResponse
      | null
      | undefined,
      protos.google.cloud.functions.v1.ICloudFunction
    >
  ): Promise<
    [
      protos.google.cloud.functions.v1.ICloudFunction[],
      protos.google.cloud.functions.v1.IListFunctionsRequest | null,
      protos.google.cloud.functions.v1.IListFunctionsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listFunctions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The project and location from which the function should be listed,
   *   specified in the format `projects/* /locations/*`
   *   If you want to list functions in all locations, use "-" in place of a
   *   location. When listing functions in all locations, if one or more
   *   location(s) are unreachable, the response will contain functions from all
   *   reachable locations along with the names of any unreachable locations.
   * @param {number} request.pageSize
   *   Maximum number of functions to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last
   *   `ListFunctionsResponse`; indicates that
   *   this is a continuation of a prior `ListFunctions` call, and that the
   *   system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [CloudFunction]{@link google.cloud.functions.v1.CloudFunction} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listFunctionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listFunctionsStream(
    request?: protos.google.cloud.functions.v1.IListFunctionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listFunctions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFunctions.createStream(
      this.innerApiCalls.listFunctions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listFunctions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The project and location from which the function should be listed,
   *   specified in the format `projects/* /locations/*`
   *   If you want to list functions in all locations, use "-" in place of a
   *   location. When listing functions in all locations, if one or more
   *   location(s) are unreachable, the response will contain functions from all
   *   reachable locations along with the names of any unreachable locations.
   * @param {number} request.pageSize
   *   Maximum number of functions to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last
   *   `ListFunctionsResponse`; indicates that
   *   this is a continuation of a prior `ListFunctions` call, and that the
   *   system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [CloudFunction]{@link google.cloud.functions.v1.CloudFunction}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_functions_service.list_functions.js</caption>
   * region_tag:cloudfunctions_v1_generated_CloudFunctionsService_ListFunctions_async
   */
  listFunctionsAsync(
    request?: protos.google.cloud.functions.v1.IListFunctionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.functions.v1.ICloudFunction> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listFunctions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFunctions.asyncIterate(
      this.innerApiCalls['listFunctions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.functions.v1.ICloudFunction>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified cloudFunction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} functionParam
   * @returns {string} Resource name string.
   */
  cloudFunctionPath(project: string, location: string, functionParam: string) {
    return this.pathTemplates.cloudFunctionPathTemplate.render({
      project: project,
      location: location,
      function: functionParam,
    });
  }

  /**
   * Parse the project from CloudFunction resource.
   *
   * @param {string} cloudFunctionName
   *   A fully-qualified path representing CloudFunction resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCloudFunctionName(cloudFunctionName: string) {
    return this.pathTemplates.cloudFunctionPathTemplate.match(cloudFunctionName)
      .project;
  }

  /**
   * Parse the location from CloudFunction resource.
   *
   * @param {string} cloudFunctionName
   *   A fully-qualified path representing CloudFunction resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCloudFunctionName(cloudFunctionName: string) {
    return this.pathTemplates.cloudFunctionPathTemplate.match(cloudFunctionName)
      .location;
  }

  /**
   * Parse the function from CloudFunction resource.
   *
   * @param {string} cloudFunctionName
   *   A fully-qualified path representing CloudFunction resource.
   * @returns {string} A string representing the function.
   */
  matchFunctionFromCloudFunctionName(cloudFunctionName: string) {
    return this.pathTemplates.cloudFunctionPathTemplate.match(cloudFunctionName)
      .function;
  }

  /**
   * Return a fully-qualified cryptoKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} crypto_key
   * @returns {string} Resource name string.
   */
  cryptoKeyPath(
    project: string,
    location: string,
    keyRing: string,
    cryptoKey: string
  ) {
    return this.pathTemplates.cryptoKeyPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      crypto_key: cryptoKey,
    });
  }

  /**
   * Parse the project from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
      .project;
  }

  /**
   * Parse the location from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
      .location;
  }

  /**
   * Parse the key_ring from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
      .key_ring;
  }

  /**
   * Parse the crypto_key from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the crypto_key.
   */
  matchCryptoKeyFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
      .crypto_key;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified repository resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @returns {string} Resource name string.
   */
  repositoryPath(project: string, location: string, repository: string) {
    return this.pathTemplates.repositoryPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
    });
  }

  /**
   * Parse the project from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .project;
  }

  /**
   * Parse the location from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .location;
  }

  /**
   * Parse the repository from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .repository;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.cloudFunctionsServiceStub && !this._terminated) {
      return this.cloudFunctionsServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
