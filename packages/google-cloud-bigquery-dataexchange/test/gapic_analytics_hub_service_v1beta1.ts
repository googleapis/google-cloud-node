// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as analyticshubserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.AnalyticsHubServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.analyticsHubServiceStub, undefined);
      await client.initialize();
      assert(client.analyticsHubServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.analyticsHubServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.analyticsHubServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getDataExchange', () => {
    it('invokes getDataExchange without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.GetDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.GetDataExchangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
      );
      client.innerApiCalls.getDataExchange = stubSimpleCall(expectedResponse);
      const [response] = await client.getDataExchange(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataExchange without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.GetDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.GetDataExchangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
      );
      client.innerApiCalls.getDataExchange =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDataExchange(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataExchange with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.GetDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.GetDataExchangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDataExchange = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getDataExchange(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataExchange with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.GetDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.GetDataExchangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getDataExchange(request), expectedError);
    });
  });

  describe('createDataExchange', () => {
    it('invokes createDataExchange without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.CreateDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.CreateDataExchangeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
      );
      client.innerApiCalls.createDataExchange =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createDataExchange(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataExchange without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.CreateDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.CreateDataExchangeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
      );
      client.innerApiCalls.createDataExchange =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDataExchange(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataExchange with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.CreateDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.CreateDataExchangeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDataExchange = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createDataExchange(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataExchange with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.CreateDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.CreateDataExchangeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createDataExchange(request), expectedError);
    });
  });

  describe('updateDataExchange', () => {
    it('invokes updateDataExchange without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.UpdateDataExchangeRequest()
      );
      request.dataExchange ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.UpdateDataExchangeRequest',
        ['dataExchange', 'name']
      );
      request.dataExchange.name = defaultValue1;
      const expectedHeaderRequestParams = `data_exchange.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
      );
      client.innerApiCalls.updateDataExchange =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateDataExchange(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataExchange without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.UpdateDataExchangeRequest()
      );
      request.dataExchange ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.UpdateDataExchangeRequest',
        ['dataExchange', 'name']
      );
      request.dataExchange.name = defaultValue1;
      const expectedHeaderRequestParams = `data_exchange.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
      );
      client.innerApiCalls.updateDataExchange =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDataExchange(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataExchange with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.UpdateDataExchangeRequest()
      );
      request.dataExchange ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.UpdateDataExchangeRequest',
        ['dataExchange', 'name']
      );
      request.dataExchange.name = defaultValue1;
      const expectedHeaderRequestParams = `data_exchange.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDataExchange = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateDataExchange(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataExchange with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.UpdateDataExchangeRequest()
      );
      request.dataExchange ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.UpdateDataExchangeRequest',
        ['dataExchange', 'name']
      );
      request.dataExchange.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateDataExchange(request), expectedError);
    });
  });

  describe('deleteDataExchange', () => {
    it('invokes deleteDataExchange without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DeleteDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.DeleteDataExchangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDataExchange =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteDataExchange(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataExchange without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DeleteDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.DeleteDataExchangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDataExchange =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDataExchange(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataExchange with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DeleteDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.DeleteDataExchangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDataExchange = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteDataExchange(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteDataExchange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataExchange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataExchange with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DeleteDataExchangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.DeleteDataExchangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteDataExchange(request), expectedError);
    });
  });

  describe('getListing', () => {
    it('invokes getListing without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.GetListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.GetListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
      );
      client.innerApiCalls.getListing = stubSimpleCall(expectedResponse);
      const [response] = await client.getListing(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getListing without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.GetListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.GetListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
      );
      client.innerApiCalls.getListing =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getListing(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.dataexchange.v1beta1.IListing | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getListing with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.GetListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.GetListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getListing = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getListing(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getListing with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.GetListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.GetListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getListing(request), expectedError);
    });
  });

  describe('createListing', () => {
    it('invokes createListing without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.CreateListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.CreateListingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
      );
      client.innerApiCalls.createListing = stubSimpleCall(expectedResponse);
      const [response] = await client.createListing(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createListing without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.CreateListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.CreateListingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
      );
      client.innerApiCalls.createListing =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createListing(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.dataexchange.v1beta1.IListing | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createListing with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.CreateListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.CreateListingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createListing = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createListing(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createListing with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.CreateListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.CreateListingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createListing(request), expectedError);
    });
  });

  describe('updateListing', () => {
    it('invokes updateListing without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.UpdateListingRequest()
      );
      request.listing ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.UpdateListingRequest',
        ['listing', 'name']
      );
      request.listing.name = defaultValue1;
      const expectedHeaderRequestParams = `listing.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
      );
      client.innerApiCalls.updateListing = stubSimpleCall(expectedResponse);
      const [response] = await client.updateListing(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateListing without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.UpdateListingRequest()
      );
      request.listing ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.UpdateListingRequest',
        ['listing', 'name']
      );
      request.listing.name = defaultValue1;
      const expectedHeaderRequestParams = `listing.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
      );
      client.innerApiCalls.updateListing =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateListing(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.dataexchange.v1beta1.IListing | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateListing with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.UpdateListingRequest()
      );
      request.listing ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.UpdateListingRequest',
        ['listing', 'name']
      );
      request.listing.name = defaultValue1;
      const expectedHeaderRequestParams = `listing.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateListing = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateListing(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateListing with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.UpdateListingRequest()
      );
      request.listing ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.UpdateListingRequest',
        ['listing', 'name']
      );
      request.listing.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateListing(request), expectedError);
    });
  });

  describe('deleteListing', () => {
    it('invokes deleteListing without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DeleteListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.DeleteListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteListing = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteListing(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteListing without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DeleteListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.DeleteListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteListing =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteListing(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteListing with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DeleteListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.DeleteListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteListing = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteListing(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteListing with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.DeleteListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.DeleteListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteListing(request), expectedError);
    });
  });

  describe('subscribeListing', () => {
    it('invokes subscribeListing without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingResponse()
      );
      client.innerApiCalls.subscribeListing = stubSimpleCall(expectedResponse);
      const [response] = await client.subscribeListing(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.subscribeListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.subscribeListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes subscribeListing without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingResponse()
      );
      client.innerApiCalls.subscribeListing =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.subscribeListing(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.dataexchange.v1beta1.ISubscribeListingResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.subscribeListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.subscribeListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes subscribeListing with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.subscribeListing = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.subscribeListing(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.subscribeListing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.subscribeListing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes subscribeListing with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.SubscribeListingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.subscribeListing(request), expectedError);
    });
  });

  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getIamPolicy(request), expectedError);
    });
  });

  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.setIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.setIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.setIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.setIamPolicy(request), expectedError);
    });
  });

  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.testIamPermissions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.ITestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.testIamPermissions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with closed client', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.testIamPermissions(request), expectedError);
    });
  });

  describe('listDataExchanges', () => {
    it('invokes listDataExchanges without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
      ];
      client.innerApiCalls.listDataExchanges = stubSimpleCall(expectedResponse);
      const [response] = await client.listDataExchanges(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDataExchanges as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDataExchanges as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDataExchanges without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
      ];
      client.innerApiCalls.listDataExchanges =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDataExchanges(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDataExchanges as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDataExchanges as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDataExchanges with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDataExchanges = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDataExchanges(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDataExchanges as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDataExchanges as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDataExchangesStream without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
      ];
      client.descriptors.page.listDataExchanges.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDataExchangesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDataExchanges.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDataExchanges, request)
      );
      assert(
        (client.descriptors.page.listDataExchanges.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDataExchangesStream with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDataExchanges.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDataExchangesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDataExchanges.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDataExchanges, request)
      );
      assert(
        (client.descriptors.page.listDataExchanges.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDataExchanges without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
      ];
      client.descriptors.page.listDataExchanges.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange[] =
        [];
      const iterable = client.listDataExchangesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDataExchanges.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDataExchanges.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDataExchanges with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListDataExchangesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDataExchanges.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDataExchangesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDataExchanges.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDataExchanges.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listOrgDataExchanges', () => {
    it('invokes listOrgDataExchanges without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest',
        ['organization']
      );
      request.organization = defaultValue1;
      const expectedHeaderRequestParams = `organization=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
      ];
      client.innerApiCalls.listOrgDataExchanges =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listOrgDataExchanges(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOrgDataExchanges as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOrgDataExchanges as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOrgDataExchanges without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest',
        ['organization']
      );
      request.organization = defaultValue1;
      const expectedHeaderRequestParams = `organization=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
      ];
      client.innerApiCalls.listOrgDataExchanges =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listOrgDataExchanges(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOrgDataExchanges as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOrgDataExchanges as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOrgDataExchanges with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest',
        ['organization']
      );
      request.organization = defaultValue1;
      const expectedHeaderRequestParams = `organization=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listOrgDataExchanges = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listOrgDataExchanges(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listOrgDataExchanges as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOrgDataExchanges as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOrgDataExchangesStream without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest',
        ['organization']
      );
      request.organization = defaultValue1;
      const expectedHeaderRequestParams = `organization=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
      ];
      client.descriptors.page.listOrgDataExchanges.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listOrgDataExchangesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listOrgDataExchanges.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listOrgDataExchanges, request)
      );
      assert(
        (client.descriptors.page.listOrgDataExchanges.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listOrgDataExchangesStream with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest',
        ['organization']
      );
      request.organization = defaultValue1;
      const expectedHeaderRequestParams = `organization=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOrgDataExchanges.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listOrgDataExchangesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listOrgDataExchanges.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listOrgDataExchanges, request)
      );
      assert(
        (client.descriptors.page.listOrgDataExchanges.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOrgDataExchanges without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest',
        ['organization']
      );
      request.organization = defaultValue1;
      const expectedHeaderRequestParams = `organization=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.DataExchange()
        ),
      ];
      client.descriptors.page.listOrgDataExchanges.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange[] =
        [];
      const iterable = client.listOrgDataExchangesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listOrgDataExchanges.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listOrgDataExchanges.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOrgDataExchanges with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListOrgDataExchangesRequest',
        ['organization']
      );
      request.organization = defaultValue1;
      const expectedHeaderRequestParams = `organization=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOrgDataExchanges.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listOrgDataExchangesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.IDataExchange[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listOrgDataExchanges.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listOrgDataExchanges.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listListings', () => {
    it('invokes listListings without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
      ];
      client.innerApiCalls.listListings = stubSimpleCall(expectedResponse);
      const [response] = await client.listListings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listListings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listListings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listListings without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
      ];
      client.innerApiCalls.listListings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listListings(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.bigquery.dataexchange.v1beta1.IListing[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listListings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listListings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listListings with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listListings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listListings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listListings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listListings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listListingsStream without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
      ];
      client.descriptors.page.listListings.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listListingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.Listing[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.bigquery.dataexchange.v1beta1.Listing
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listListings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listListings, request)
      );
      assert(
        (client.descriptors.page.listListings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listListingsStream with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listListings.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listListingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.Listing[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.bigquery.dataexchange.v1beta1.Listing
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listListings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listListings, request)
      );
      assert(
        (client.descriptors.page.listListings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listListings without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
        generateSampleMessage(
          new protos.google.cloud.bigquery.dataexchange.v1beta1.Listing()
        ),
      ];
      client.descriptors.page.listListings.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.IListing[] =
        [];
      const iterable = client.listListingsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listListings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listListings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listListings with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.dataexchange.v1beta1.ListListingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listListings.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listListingsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.bigquery.dataexchange.v1beta1.IListing[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listListings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listListings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('dataExchange', () => {
      const fakePath = '/rendered/path/dataExchange';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_exchange: 'dataExchangeValue',
      };
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.dataExchangePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataExchangePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataExchangePath', () => {
        const result = client.dataExchangePath(
          'projectValue',
          'locationValue',
          'dataExchangeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataExchangePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataExchangeName', () => {
        const result = client.matchProjectFromDataExchangeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataExchangePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataExchangeName', () => {
        const result = client.matchLocationFromDataExchangeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataExchangePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataExchangeFromDataExchangeName', () => {
        const result = client.matchDataExchangeFromDataExchangeName(fakePath);
        assert.strictEqual(result, 'dataExchangeValue');
        assert(
          (client.pathTemplates.dataExchangePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('listing', () => {
      const fakePath = '/rendered/path/listing';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_exchange: 'dataExchangeValue',
        listing: 'listingValue',
      };
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.listingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.listingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('listingPath', () => {
        const result = client.listingPath(
          'projectValue',
          'locationValue',
          'dataExchangeValue',
          'listingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.listingPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromListingName', () => {
        const result = client.matchProjectFromListingName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.listingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromListingName', () => {
        const result = client.matchLocationFromListingName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.listingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataExchangeFromListingName', () => {
        const result = client.matchDataExchangeFromListingName(fakePath);
        assert.strictEqual(result, 'dataExchangeValue');
        assert(
          (client.pathTemplates.listingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchListingFromListingName', () => {
        const result = client.matchListingFromListingName(fakePath);
        assert.strictEqual(result, 'listingValue');
        assert(
          (client.pathTemplates.listingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new analyticshubserviceModule.v1beta1.AnalyticsHubServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
