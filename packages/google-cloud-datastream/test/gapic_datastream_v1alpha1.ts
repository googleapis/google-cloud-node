// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as datastreamModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.DatastreamClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        datastreamModule.v1alpha1.DatastreamClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        datastreamModule.v1alpha1.DatastreamClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = datastreamModule.v1alpha1.DatastreamClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.datastreamStub, undefined);
      await client.initialize();
      assert(client.datastreamStub);
    });

    it('has close method for the initialized client', done => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.datastreamStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.datastreamStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getConnectionProfile', () => {
    it('invokes getConnectionProfile without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
      );
      client.innerApiCalls.getConnectionProfile =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getConnectionProfile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionProfile without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
      );
      client.innerApiCalls.getConnectionProfile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datastream.v1alpha1.IConnectionProfile | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionProfile with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConnectionProfile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConnectionProfile(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionProfile with closed client', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConnectionProfile(request), expectedError);
    });
  });

  describe('discoverConnectionProfile', () => {
    it('invokes discoverConnectionProfile without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileResponse()
      );
      client.innerApiCalls.discoverConnectionProfile =
        stubSimpleCall(expectedResponse);
      const [response] = await client.discoverConnectionProfile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.discoverConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.discoverConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes discoverConnectionProfile without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileResponse()
      );
      client.innerApiCalls.discoverConnectionProfile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.discoverConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datastream.v1alpha1.IDiscoverConnectionProfileResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.discoverConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.discoverConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes discoverConnectionProfile with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.discoverConnectionProfile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.discoverConnectionProfile(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.discoverConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.discoverConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes discoverConnectionProfile with closed client', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DiscoverConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.discoverConnectionProfile(request),
        expectedError
      );
    });
  });

  describe('getStream', () => {
    it('invokes getStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.Stream()
      );
      client.innerApiCalls.getStream = stubSimpleCall(expectedResponse);
      const [response] = await client.getStream(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getStream without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.Stream()
      );
      client.innerApiCalls.getStream =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getStream(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datastream.v1alpha1.IStream | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getStream with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getStream = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getStream(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getStream with closed client', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getStream(request), expectedError);
    });
  });

  describe('getPrivateConnection', () => {
    it('invokes getPrivateConnection without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetPrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetPrivateConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
      );
      client.innerApiCalls.getPrivateConnection =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getPrivateConnection(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPrivateConnection without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetPrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetPrivateConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
      );
      client.innerApiCalls.getPrivateConnection =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPrivateConnection(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datastream.v1alpha1.IPrivateConnection | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPrivateConnection with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetPrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetPrivateConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPrivateConnection = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPrivateConnection(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPrivateConnection with closed client', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetPrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetPrivateConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPrivateConnection(request), expectedError);
    });
  });

  describe('getRoute', () => {
    it('invokes getRoute without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetRouteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.Route()
      );
      client.innerApiCalls.getRoute = stubSimpleCall(expectedResponse);
      const [response] = await client.getRoute(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRoute without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetRouteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.Route()
      );
      client.innerApiCalls.getRoute =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getRoute(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datastream.v1alpha1.IRoute | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRoute with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetRouteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getRoute = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getRoute(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRoute with closed client', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.GetRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.GetRouteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getRoute(request), expectedError);
    });
  });

  describe('createConnectionProfile', () => {
    it('invokes createConnectionProfile without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createConnectionProfile =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createConnectionProfile(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectionProfile without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createConnectionProfile =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.datastream.v1alpha1.IConnectionProfile,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.datastream.v1alpha1.IConnectionProfile,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectionProfile with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnectionProfile = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createConnectionProfile(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectionProfile with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnectionProfile = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createConnectionProfile(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateConnectionProfileProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateConnectionProfileProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateConnectionProfileProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateConnectionProfileProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateConnectionProfile', () => {
    it('invokes updateConnectionProfile without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.UpdateConnectionProfileRequest()
      );
      request.connectionProfile ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.UpdateConnectionProfileRequest',
        ['connectionProfile', 'name']
      );
      request.connectionProfile.name = defaultValue1;
      const expectedHeaderRequestParams = `connection_profile.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateConnectionProfile =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateConnectionProfile(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectionProfile without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.UpdateConnectionProfileRequest()
      );
      request.connectionProfile ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.UpdateConnectionProfileRequest',
        ['connectionProfile', 'name']
      );
      request.connectionProfile.name = defaultValue1;
      const expectedHeaderRequestParams = `connection_profile.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateConnectionProfile =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.datastream.v1alpha1.IConnectionProfile,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.datastream.v1alpha1.IConnectionProfile,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectionProfile with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.UpdateConnectionProfileRequest()
      );
      request.connectionProfile ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.UpdateConnectionProfileRequest',
        ['connectionProfile', 'name']
      );
      request.connectionProfile.name = defaultValue1;
      const expectedHeaderRequestParams = `connection_profile.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnectionProfile = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateConnectionProfile(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectionProfile with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.UpdateConnectionProfileRequest()
      );
      request.connectionProfile ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.UpdateConnectionProfileRequest',
        ['connectionProfile', 'name']
      );
      request.connectionProfile.name = defaultValue1;
      const expectedHeaderRequestParams = `connection_profile.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnectionProfile = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateConnectionProfile(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateConnectionProfileProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateConnectionProfileProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateConnectionProfileProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateConnectionProfileProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteConnectionProfile', () => {
    it('invokes deleteConnectionProfile without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteConnectionProfile =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteConnectionProfile(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectionProfile without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteConnectionProfile =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectionProfile with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnectionProfile = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteConnectionProfile(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectionProfile with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnectionProfile = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteConnectionProfile(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteConnectionProfileProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteConnectionProfileProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteConnectionProfileProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteConnectionProfileProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createStream', () => {
    it('invokes createStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateStreamRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createStream = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createStream(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createStream without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateStreamRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createStream =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createStream(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.datastream.v1alpha1.IStream,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.datastream.v1alpha1.IStream,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createStream with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateStreamRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createStream = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createStream(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createStream with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateStreamRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createStream = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createStream(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateStreamProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateStreamProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateStreamProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateStreamProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateStream', () => {
    it('invokes updateStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.UpdateStreamRequest()
      );
      request.stream ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.UpdateStreamRequest',
        ['stream', 'name']
      );
      request.stream.name = defaultValue1;
      const expectedHeaderRequestParams = `stream.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateStream = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateStream(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateStream without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.UpdateStreamRequest()
      );
      request.stream ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.UpdateStreamRequest',
        ['stream', 'name']
      );
      request.stream.name = defaultValue1;
      const expectedHeaderRequestParams = `stream.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateStream =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateStream(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.datastream.v1alpha1.IStream,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.datastream.v1alpha1.IStream,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateStream with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.UpdateStreamRequest()
      );
      request.stream ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.UpdateStreamRequest',
        ['stream', 'name']
      );
      request.stream.name = defaultValue1;
      const expectedHeaderRequestParams = `stream.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateStream = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateStream(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateStream with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.UpdateStreamRequest()
      );
      request.stream ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.UpdateStreamRequest',
        ['stream', 'name']
      );
      request.stream.name = defaultValue1;
      const expectedHeaderRequestParams = `stream.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateStream = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateStream(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateStreamProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateStreamProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateStreamProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateStreamProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteStream', () => {
    it('invokes deleteStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteStream = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteStream(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteStream without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteStream =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteStream(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteStream with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteStream = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteStream(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteStream with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteStream = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteStream(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteStreamProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteStreamProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteStreamProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteStreamProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('fetchErrors', () => {
    it('invokes fetchErrors without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchErrorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchErrorsRequest',
        ['stream']
      );
      request.stream = defaultValue1;
      const expectedHeaderRequestParams = `stream=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.fetchErrors = stubLongRunningCall(expectedResponse);
      const [operation] = await client.fetchErrors(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.fetchErrors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchErrors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchErrors without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchErrorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchErrorsRequest',
        ['stream']
      );
      request.stream = defaultValue1;
      const expectedHeaderRequestParams = `stream=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.fetchErrors =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.fetchErrors(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.datastream.v1alpha1.IFetchErrorsResponse,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.datastream.v1alpha1.IFetchErrorsResponse,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.fetchErrors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchErrors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchErrors with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchErrorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchErrorsRequest',
        ['stream']
      );
      request.stream = defaultValue1;
      const expectedHeaderRequestParams = `stream=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.fetchErrors = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.fetchErrors(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.fetchErrors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchErrors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchErrors with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchErrorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchErrorsRequest',
        ['stream']
      );
      request.stream = defaultValue1;
      const expectedHeaderRequestParams = `stream=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.fetchErrors = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.fetchErrors(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.fetchErrors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchErrors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkFetchErrorsProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkFetchErrorsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkFetchErrorsProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkFetchErrorsProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createPrivateConnection', () => {
    it('invokes createPrivateConnection without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreatePrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreatePrivateConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPrivateConnection =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createPrivateConnection(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPrivateConnection without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreatePrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreatePrivateConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPrivateConnection =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createPrivateConnection(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.datastream.v1alpha1.IPrivateConnection,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.datastream.v1alpha1.IPrivateConnection,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPrivateConnection with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreatePrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreatePrivateConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPrivateConnection = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createPrivateConnection(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createPrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPrivateConnection with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreatePrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreatePrivateConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPrivateConnection = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createPrivateConnection(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createPrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreatePrivateConnectionProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreatePrivateConnectionProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreatePrivateConnectionProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreatePrivateConnectionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deletePrivateConnection', () => {
    it('invokes deletePrivateConnection without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeletePrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeletePrivateConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePrivateConnection =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deletePrivateConnection(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePrivateConnection without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeletePrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeletePrivateConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePrivateConnection =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePrivateConnection(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePrivateConnection with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeletePrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeletePrivateConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePrivateConnection = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deletePrivateConnection(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deletePrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePrivateConnection with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeletePrivateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeletePrivateConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePrivateConnection = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deletePrivateConnection(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePrivateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePrivateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeletePrivateConnectionProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeletePrivateConnectionProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeletePrivateConnectionProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeletePrivateConnectionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createRoute', () => {
    it('invokes createRoute without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateRouteRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createRoute = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createRoute(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRoute without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateRouteRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createRoute =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createRoute(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.datastream.v1alpha1.IRoute,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.datastream.v1alpha1.IRoute,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRoute with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateRouteRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createRoute = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createRoute(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRoute with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.CreateRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.CreateRouteRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createRoute = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createRoute(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateRouteProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateRouteProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateRouteProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateRouteProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteRoute', () => {
    it('invokes deleteRoute without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteRouteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteRoute = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteRoute(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRoute without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteRouteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteRoute =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteRoute(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.datastream.v1alpha1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1alpha1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRoute with call error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteRouteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteRoute = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteRoute(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRoute with LRO error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.DeleteRouteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.DeleteRouteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteRoute = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteRoute(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteRoute as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRoute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteRouteProgress without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteRouteProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteRouteProgress with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteRouteProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listConnectionProfiles', () => {
    it('invokes listConnectionProfiles without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
      ];
      client.innerApiCalls.listConnectionProfiles =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listConnectionProfiles(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectionProfiles without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
      ];
      client.innerApiCalls.listConnectionProfiles =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConnectionProfiles(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.datastream.v1alpha1.IConnectionProfile[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectionProfiles with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConnectionProfiles = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listConnectionProfiles(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectionProfilesStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
      ];
      client.descriptors.page.listConnectionProfiles.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConnectionProfilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datastream.v1alpha1.ConnectionProfile[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.datastream.v1alpha1.ConnectionProfile
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectionProfiles, request)
      );
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listConnectionProfilesStream with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectionProfiles.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConnectionProfilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datastream.v1alpha1.ConnectionProfile[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.datastream.v1alpha1.ConnectionProfile
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectionProfiles, request)
      );
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConnectionProfiles without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.ConnectionProfile()
        ),
      ];
      client.descriptors.page.listConnectionProfiles.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.datastream.v1alpha1.IConnectionProfile[] =
        [];
      const iterable = client.listConnectionProfilesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectionProfiles
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConnectionProfiles with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectionProfiles.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConnectionProfilesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.datastream.v1alpha1.IConnectionProfile[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectionProfiles
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listStreams', () => {
    it('invokes listStreams without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
      ];
      client.innerApiCalls.listStreams = stubSimpleCall(expectedResponse);
      const [response] = await client.listStreams(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listStreams as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listStreams as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listStreams without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
      ];
      client.innerApiCalls.listStreams =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listStreams(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datastream.v1alpha1.IStream[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listStreams as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listStreams as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listStreams with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listStreams = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listStreams(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listStreams as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listStreams as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listStreamsStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
      ];
      client.descriptors.page.listStreams.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listStreamsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datastream.v1alpha1.Stream[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.datastream.v1alpha1.Stream) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listStreams.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listStreams, request)
      );
      assert(
        (client.descriptors.page.listStreams.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listStreamsStream with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listStreams.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listStreamsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datastream.v1alpha1.Stream[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.datastream.v1alpha1.Stream) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listStreams.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listStreams, request)
      );
      assert(
        (client.descriptors.page.listStreams.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listStreams without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Stream()
        ),
      ];
      client.descriptors.page.listStreams.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.datastream.v1alpha1.IStream[] = [];
      const iterable = client.listStreamsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listStreams.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listStreams.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listStreams with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listStreams.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listStreamsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.datastream.v1alpha1.IStream[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listStreams.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listStreams.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('fetchStaticIps', () => {
    it('invokes fetchStaticIps without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.innerApiCalls.fetchStaticIps = stubSimpleCall(expectedResponse);
      const [response] = await client.fetchStaticIps(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.fetchStaticIps as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchStaticIps as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchStaticIps without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.innerApiCalls.fetchStaticIps =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.fetchStaticIps(
          request,
          (err?: Error | null, result?: string[] | null) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.fetchStaticIps as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchStaticIps as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchStaticIps with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.fetchStaticIps = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.fetchStaticIps(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.fetchStaticIps as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchStaticIps as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchStaticIpsStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.descriptors.page.fetchStaticIps.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.fetchStaticIpsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: string[] = [];
        stream.on('data', (response: string) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.fetchStaticIps.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.fetchStaticIps, request)
      );
      assert(
        (client.descriptors.page.fetchStaticIps.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes fetchStaticIpsStream with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.fetchStaticIps.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.fetchStaticIpsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: string[] = [];
        stream.on('data', (response: string) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.fetchStaticIps.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.fetchStaticIps, request)
      );
      assert(
        (client.descriptors.page.fetchStaticIps.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with fetchStaticIps without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.descriptors.page.fetchStaticIps.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: string[] = [];
      const iterable = client.fetchStaticIpsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.fetchStaticIps.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.fetchStaticIps.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with fetchStaticIps with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.FetchStaticIpsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.fetchStaticIps.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.fetchStaticIpsAsync(request);
      await assert.rejects(async () => {
        const responses: string[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.fetchStaticIps.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.fetchStaticIps.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listPrivateConnections', () => {
    it('invokes listPrivateConnections without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
      ];
      client.innerApiCalls.listPrivateConnections =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listPrivateConnections(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPrivateConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPrivateConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPrivateConnections without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
      ];
      client.innerApiCalls.listPrivateConnections =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPrivateConnections(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.datastream.v1alpha1.IPrivateConnection[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPrivateConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPrivateConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPrivateConnections with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPrivateConnections = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listPrivateConnections(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listPrivateConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPrivateConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPrivateConnectionsStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
      ];
      client.descriptors.page.listPrivateConnections.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPrivateConnectionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datastream.v1alpha1.PrivateConnection[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.datastream.v1alpha1.PrivateConnection
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listPrivateConnections
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listPrivateConnections, request)
      );
      assert(
        (
          client.descriptors.page.listPrivateConnections
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPrivateConnectionsStream with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPrivateConnections.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPrivateConnectionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datastream.v1alpha1.PrivateConnection[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.datastream.v1alpha1.PrivateConnection
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listPrivateConnections
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listPrivateConnections, request)
      );
      assert(
        (
          client.descriptors.page.listPrivateConnections
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPrivateConnections without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.PrivateConnection()
        ),
      ];
      client.descriptors.page.listPrivateConnections.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.datastream.v1alpha1.IPrivateConnection[] =
        [];
      const iterable = client.listPrivateConnectionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPrivateConnections
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listPrivateConnections
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPrivateConnections with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListPrivateConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPrivateConnections.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPrivateConnectionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.datastream.v1alpha1.IPrivateConnection[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPrivateConnections
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listPrivateConnections
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listRoutes', () => {
    it('invokes listRoutes without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListRoutesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListRoutesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
      ];
      client.innerApiCalls.listRoutes = stubSimpleCall(expectedResponse);
      const [response] = await client.listRoutes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRoutes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRoutes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRoutes without error using callback', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListRoutesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListRoutesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
      ];
      client.innerApiCalls.listRoutes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRoutes(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datastream.v1alpha1.IRoute[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRoutes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRoutes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRoutes with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListRoutesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListRoutesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listRoutes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listRoutes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listRoutes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRoutes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRoutesStream without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListRoutesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListRoutesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
      ];
      client.descriptors.page.listRoutes.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRoutesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datastream.v1alpha1.Route[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.datastream.v1alpha1.Route) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listRoutes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRoutes, request)
      );
      assert(
        (client.descriptors.page.listRoutes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listRoutesStream with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListRoutesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListRoutesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRoutes.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listRoutesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datastream.v1alpha1.Route[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.datastream.v1alpha1.Route) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listRoutes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRoutes, request)
      );
      assert(
        (client.descriptors.page.listRoutes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRoutes without error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListRoutesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListRoutesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
        generateSampleMessage(
          new protos.google.cloud.datastream.v1alpha1.Route()
        ),
      ];
      client.descriptors.page.listRoutes.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.datastream.v1alpha1.IRoute[] = [];
      const iterable = client.listRoutesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listRoutes.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listRoutes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRoutes with error', async () => {
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datastream.v1alpha1.ListRoutesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datastream.v1alpha1.ListRoutesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRoutes.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listRoutesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.datastream.v1alpha1.IRoute[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listRoutes.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listRoutes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('connectionProfile', () => {
      const fakePath = '/rendered/path/connectionProfile';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        connection_profile: 'connectionProfileValue',
      };
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.connectionProfilePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.connectionProfilePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('connectionProfilePath', () => {
        const result = client.connectionProfilePath(
          'projectValue',
          'locationValue',
          'connectionProfileValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.connectionProfilePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConnectionProfileName', () => {
        const result = client.matchProjectFromConnectionProfileName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.connectionProfilePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConnectionProfileName', () => {
        const result = client.matchLocationFromConnectionProfileName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.connectionProfilePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectionProfileFromConnectionProfileName', () => {
        const result =
          client.matchConnectionProfileFromConnectionProfileName(fakePath);
        assert.strictEqual(result, 'connectionProfileValue');
        assert(
          (
            client.pathTemplates.connectionProfilePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('privateConnection', () => {
      const fakePath = '/rendered/path/privateConnection';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        private_connection: 'privateConnectionValue',
      };
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.privateConnectionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.privateConnectionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('privateConnectionPath', () => {
        const result = client.privateConnectionPath(
          'projectValue',
          'locationValue',
          'privateConnectionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.privateConnectionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPrivateConnectionName', () => {
        const result = client.matchProjectFromPrivateConnectionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.privateConnectionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPrivateConnectionName', () => {
        const result = client.matchLocationFromPrivateConnectionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.privateConnectionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPrivateConnectionFromPrivateConnectionName', () => {
        const result =
          client.matchPrivateConnectionFromPrivateConnectionName(fakePath);
        assert.strictEqual(result, 'privateConnectionValue');
        assert(
          (
            client.pathTemplates.privateConnectionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('route', () => {
      const fakePath = '/rendered/path/route';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        private_connection: 'privateConnectionValue',
        route: 'routeValue',
      };
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.routePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.routePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('routePath', () => {
        const result = client.routePath(
          'projectValue',
          'locationValue',
          'privateConnectionValue',
          'routeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.routePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRouteName', () => {
        const result = client.matchProjectFromRouteName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.routePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromRouteName', () => {
        const result = client.matchLocationFromRouteName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.routePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPrivateConnectionFromRouteName', () => {
        const result = client.matchPrivateConnectionFromRouteName(fakePath);
        assert.strictEqual(result, 'privateConnectionValue');
        assert(
          (client.pathTemplates.routePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRouteFromRouteName', () => {
        const result = client.matchRouteFromRouteName(fakePath);
        assert.strictEqual(result, 'routeValue');
        assert(
          (client.pathTemplates.routePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('stream', () => {
      const fakePath = '/rendered/path/stream';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        stream: 'streamValue',
      };
      const client = new datastreamModule.v1alpha1.DatastreamClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.streamPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.streamPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('streamPath', () => {
        const result = client.streamPath(
          'projectValue',
          'locationValue',
          'streamValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.streamPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromStreamName', () => {
        const result = client.matchProjectFromStreamName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.streamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromStreamName', () => {
        const result = client.matchLocationFromStreamName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.streamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchStreamFromStreamName', () => {
        const result = client.matchStreamFromStreamName(fakePath);
        assert.strictEqual(result, 'streamValue');
        assert(
          (client.pathTemplates.streamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
