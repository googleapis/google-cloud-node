// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/datastream_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './datastream_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Datastream service
 * @class
 * @memberof v1
 */
export class DatastreamClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  datastreamStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DatastreamClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DatastreamClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DatastreamClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      connectionProfilePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/connectionProfiles/{connection_profile}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      privateConnectionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/privateConnections/{private_connection}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      routePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/privateConnections/{private_connection}/routes/{route}'
      ),
      streamPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/streams/{stream}'
      ),
      streamObjectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/streams/{stream}/objects/{object}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listConnectionProfiles: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'connectionProfiles'
      ),
      listStreams: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'streams'
      ),
      listStreamObjects: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'streamObjects'
      ),
      fetchStaticIps: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'staticIps'
      ),
      listPrivateConnections: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'privateConnections'
      ),
      listRoutes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'routes'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createConnectionProfileResponse = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.ConnectionProfile'
    ) as gax.protobuf.Type;
    const createConnectionProfileMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateConnectionProfileResponse = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.ConnectionProfile'
    ) as gax.protobuf.Type;
    const updateConnectionProfileMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteConnectionProfileResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteConnectionProfileMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createStreamResponse = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.Stream'
    ) as gax.protobuf.Type;
    const createStreamMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateStreamResponse = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.Stream'
    ) as gax.protobuf.Type;
    const updateStreamMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteStreamResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteStreamMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createPrivateConnectionResponse = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.PrivateConnection'
    ) as gax.protobuf.Type;
    const createPrivateConnectionMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deletePrivateConnectionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deletePrivateConnectionMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.Route'
    ) as gax.protobuf.Type;
    const createRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteRouteResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.datastream.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createConnectionProfile: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createConnectionProfileResponse.decode.bind(
          createConnectionProfileResponse
        ),
        createConnectionProfileMetadata.decode.bind(
          createConnectionProfileMetadata
        )
      ),
      updateConnectionProfile: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateConnectionProfileResponse.decode.bind(
          updateConnectionProfileResponse
        ),
        updateConnectionProfileMetadata.decode.bind(
          updateConnectionProfileMetadata
        )
      ),
      deleteConnectionProfile: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteConnectionProfileResponse.decode.bind(
          deleteConnectionProfileResponse
        ),
        deleteConnectionProfileMetadata.decode.bind(
          deleteConnectionProfileMetadata
        )
      ),
      createStream: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createStreamResponse.decode.bind(createStreamResponse),
        createStreamMetadata.decode.bind(createStreamMetadata)
      ),
      updateStream: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateStreamResponse.decode.bind(updateStreamResponse),
        updateStreamMetadata.decode.bind(updateStreamMetadata)
      ),
      deleteStream: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteStreamResponse.decode.bind(deleteStreamResponse),
        deleteStreamMetadata.decode.bind(deleteStreamMetadata)
      ),
      createPrivateConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createPrivateConnectionResponse.decode.bind(
          createPrivateConnectionResponse
        ),
        createPrivateConnectionMetadata.decode.bind(
          createPrivateConnectionMetadata
        )
      ),
      deletePrivateConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deletePrivateConnectionResponse.decode.bind(
          deletePrivateConnectionResponse
        ),
        deletePrivateConnectionMetadata.decode.bind(
          deletePrivateConnectionMetadata
        )
      ),
      createRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createRouteResponse.decode.bind(createRouteResponse),
        createRouteMetadata.decode.bind(createRouteMetadata)
      ),
      deleteRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRouteResponse.decode.bind(deleteRouteResponse),
        deleteRouteMetadata.decode.bind(deleteRouteMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.datastream.v1.Datastream',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.datastreamStub) {
      return this.datastreamStub;
    }

    // Put together the "service stub" for
    // google.cloud.datastream.v1.Datastream.
    this.datastreamStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.datastream.v1.Datastream'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.datastream.v1.Datastream,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const datastreamStubMethods = [
      'listConnectionProfiles',
      'getConnectionProfile',
      'createConnectionProfile',
      'updateConnectionProfile',
      'deleteConnectionProfile',
      'discoverConnectionProfile',
      'listStreams',
      'getStream',
      'createStream',
      'updateStream',
      'deleteStream',
      'getStreamObject',
      'lookupStreamObject',
      'listStreamObjects',
      'startBackfillJob',
      'stopBackfillJob',
      'fetchStaticIps',
      'createPrivateConnection',
      'getPrivateConnection',
      'listPrivateConnections',
      'deletePrivateConnection',
      'createRoute',
      'getRoute',
      'listRoutes',
      'deleteRoute',
    ];
    for (const methodName of datastreamStubMethods) {
      const callPromise = this.datastreamStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.datastreamStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'datastream.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'datastream.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Use this method to get details about a connection profile.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the connection profile resource to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ConnectionProfile]{@link google.cloud.datastream.v1.ConnectionProfile}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.get_connection_profile.js</caption>
   * region_tag:datastream_v1_generated_Datastream_GetConnectionProfile_async
   */
  getConnectionProfile(
    request?: protos.google.cloud.datastream.v1.IGetConnectionProfileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IConnectionProfile,
      (
        | protos.google.cloud.datastream.v1.IGetConnectionProfileRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getConnectionProfile(
    request: protos.google.cloud.datastream.v1.IGetConnectionProfileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IConnectionProfile,
      | protos.google.cloud.datastream.v1.IGetConnectionProfileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnectionProfile(
    request: protos.google.cloud.datastream.v1.IGetConnectionProfileRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IConnectionProfile,
      | protos.google.cloud.datastream.v1.IGetConnectionProfileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnectionProfile(
    request?: protos.google.cloud.datastream.v1.IGetConnectionProfileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IConnectionProfile,
          | protos.google.cloud.datastream.v1.IGetConnectionProfileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IConnectionProfile,
      | protos.google.cloud.datastream.v1.IGetConnectionProfileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IConnectionProfile,
      (
        | protos.google.cloud.datastream.v1.IGetConnectionProfileRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConnectionProfile(request, options, callback);
  }
  /**
   * Use this method to discover a connection profile.
   * The discover API call exposes the data objects and metadata belonging to
   * the profile. Typically, a request returns children data objects of a
   * parent data object that's optionally supplied in the request.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the connection profile type. Must be in the
   *   format `projects/* /locations/*`.
   * @param {google.cloud.datastream.v1.ConnectionProfile} request.connectionProfile
   *   An ad-hoc connection profile configuration.
   * @param {string} request.connectionProfileName
   *   A reference to an existing connection profile.
   * @param {boolean} request.fullHierarchy
   *   Whether to retrieve the full hierarchy of data objects (TRUE) or only the
   *   current level (FALSE).
   * @param {number} request.hierarchyDepth
   *   The number of hierarchy levels below the current level to be retrieved.
   * @param {google.cloud.datastream.v1.OracleRdbms} request.oracleRdbms
   *   Oracle RDBMS to enrich with child data objects and metadata.
   * @param {google.cloud.datastream.v1.MysqlRdbms} request.mysqlRdbms
   *   MySQL RDBMS to enrich with child data objects and metadata.
   * @param {google.cloud.datastream.v1.PostgresqlRdbms} request.postgresqlRdbms
   *   PostgreSQL RDBMS to enrich with child data objects and metadata.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DiscoverConnectionProfileResponse]{@link google.cloud.datastream.v1.DiscoverConnectionProfileResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.discover_connection_profile.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DiscoverConnectionProfile_async
   */
  discoverConnectionProfile(
    request?: protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IDiscoverConnectionProfileResponse,
      (
        | protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  discoverConnectionProfile(
    request: protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IDiscoverConnectionProfileResponse,
      | protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  discoverConnectionProfile(
    request: protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IDiscoverConnectionProfileResponse,
      | protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  discoverConnectionProfile(
    request?: protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IDiscoverConnectionProfileResponse,
          | protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IDiscoverConnectionProfileResponse,
      | protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IDiscoverConnectionProfileResponse,
      (
        | protos.google.cloud.datastream.v1.IDiscoverConnectionProfileRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.discoverConnectionProfile(
      request,
      options,
      callback
    );
  }
  /**
   * Use this method to get details about a stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the stream resource to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Stream]{@link google.cloud.datastream.v1.Stream}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.get_stream.js</caption>
   * region_tag:datastream_v1_generated_Datastream_GetStream_async
   */
  getStream(
    request?: protos.google.cloud.datastream.v1.IGetStreamRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStream,
      protos.google.cloud.datastream.v1.IGetStreamRequest | undefined,
      {} | undefined
    ]
  >;
  getStream(
    request: protos.google.cloud.datastream.v1.IGetStreamRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStream,
      protos.google.cloud.datastream.v1.IGetStreamRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getStream(
    request: protos.google.cloud.datastream.v1.IGetStreamRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStream,
      protos.google.cloud.datastream.v1.IGetStreamRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getStream(
    request?: protos.google.cloud.datastream.v1.IGetStreamRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IStream,
          | protos.google.cloud.datastream.v1.IGetStreamRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IStream,
      protos.google.cloud.datastream.v1.IGetStreamRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStream,
      protos.google.cloud.datastream.v1.IGetStreamRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getStream(request, options, callback);
  }
  /**
   * Use this method to get details about a stream object.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the stream object resource to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StreamObject]{@link google.cloud.datastream.v1.StreamObject}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.get_stream_object.js</caption>
   * region_tag:datastream_v1_generated_Datastream_GetStreamObject_async
   */
  getStreamObject(
    request?: protos.google.cloud.datastream.v1.IGetStreamObjectRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStreamObject,
      protos.google.cloud.datastream.v1.IGetStreamObjectRequest | undefined,
      {} | undefined
    ]
  >;
  getStreamObject(
    request: protos.google.cloud.datastream.v1.IGetStreamObjectRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStreamObject,
      | protos.google.cloud.datastream.v1.IGetStreamObjectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getStreamObject(
    request: protos.google.cloud.datastream.v1.IGetStreamObjectRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStreamObject,
      | protos.google.cloud.datastream.v1.IGetStreamObjectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getStreamObject(
    request?: protos.google.cloud.datastream.v1.IGetStreamObjectRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IStreamObject,
          | protos.google.cloud.datastream.v1.IGetStreamObjectRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IStreamObject,
      | protos.google.cloud.datastream.v1.IGetStreamObjectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStreamObject,
      protos.google.cloud.datastream.v1.IGetStreamObjectRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getStreamObject(request, options, callback);
  }
  /**
   * Use this method to look up a stream object by its source object identifier.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent stream that owns the collection of objects.
   * @param {google.cloud.datastream.v1.SourceObjectIdentifier} request.sourceObjectIdentifier
   *   Required. The source object identifier which maps to the stream object.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StreamObject]{@link google.cloud.datastream.v1.StreamObject}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.lookup_stream_object.js</caption>
   * region_tag:datastream_v1_generated_Datastream_LookupStreamObject_async
   */
  lookupStreamObject(
    request?: protos.google.cloud.datastream.v1.ILookupStreamObjectRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStreamObject,
      protos.google.cloud.datastream.v1.ILookupStreamObjectRequest | undefined,
      {} | undefined
    ]
  >;
  lookupStreamObject(
    request: protos.google.cloud.datastream.v1.ILookupStreamObjectRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStreamObject,
      | protos.google.cloud.datastream.v1.ILookupStreamObjectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  lookupStreamObject(
    request: protos.google.cloud.datastream.v1.ILookupStreamObjectRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStreamObject,
      | protos.google.cloud.datastream.v1.ILookupStreamObjectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  lookupStreamObject(
    request?: protos.google.cloud.datastream.v1.ILookupStreamObjectRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IStreamObject,
          | protos.google.cloud.datastream.v1.ILookupStreamObjectRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IStreamObject,
      | protos.google.cloud.datastream.v1.ILookupStreamObjectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStreamObject,
      protos.google.cloud.datastream.v1.ILookupStreamObjectRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.lookupStreamObject(request, options, callback);
  }
  /**
   * Use this method to start a backfill job for the specified stream object.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.object
   *   Required. The name of the stream object resource to start a backfill job for.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StartBackfillJobResponse]{@link google.cloud.datastream.v1.StartBackfillJobResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.start_backfill_job.js</caption>
   * region_tag:datastream_v1_generated_Datastream_StartBackfillJob_async
   */
  startBackfillJob(
    request?: protos.google.cloud.datastream.v1.IStartBackfillJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStartBackfillJobResponse,
      protos.google.cloud.datastream.v1.IStartBackfillJobRequest | undefined,
      {} | undefined
    ]
  >;
  startBackfillJob(
    request: protos.google.cloud.datastream.v1.IStartBackfillJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStartBackfillJobResponse,
      | protos.google.cloud.datastream.v1.IStartBackfillJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  startBackfillJob(
    request: protos.google.cloud.datastream.v1.IStartBackfillJobRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStartBackfillJobResponse,
      | protos.google.cloud.datastream.v1.IStartBackfillJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  startBackfillJob(
    request?: protos.google.cloud.datastream.v1.IStartBackfillJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IStartBackfillJobResponse,
          | protos.google.cloud.datastream.v1.IStartBackfillJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IStartBackfillJobResponse,
      | protos.google.cloud.datastream.v1.IStartBackfillJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStartBackfillJobResponse,
      protos.google.cloud.datastream.v1.IStartBackfillJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        object: request.object ?? '',
      });
    this.initialize();
    return this.innerApiCalls.startBackfillJob(request, options, callback);
  }
  /**
   * Use this method to stop a backfill job for the specified stream object.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.object
   *   Required. The name of the stream object resource to stop the backfill job for.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StopBackfillJobResponse]{@link google.cloud.datastream.v1.StopBackfillJobResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.stop_backfill_job.js</caption>
   * region_tag:datastream_v1_generated_Datastream_StopBackfillJob_async
   */
  stopBackfillJob(
    request?: protos.google.cloud.datastream.v1.IStopBackfillJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStopBackfillJobResponse,
      protos.google.cloud.datastream.v1.IStopBackfillJobRequest | undefined,
      {} | undefined
    ]
  >;
  stopBackfillJob(
    request: protos.google.cloud.datastream.v1.IStopBackfillJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStopBackfillJobResponse,
      | protos.google.cloud.datastream.v1.IStopBackfillJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  stopBackfillJob(
    request: protos.google.cloud.datastream.v1.IStopBackfillJobRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IStopBackfillJobResponse,
      | protos.google.cloud.datastream.v1.IStopBackfillJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  stopBackfillJob(
    request?: protos.google.cloud.datastream.v1.IStopBackfillJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IStopBackfillJobResponse,
          | protos.google.cloud.datastream.v1.IStopBackfillJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IStopBackfillJobResponse,
      | protos.google.cloud.datastream.v1.IStopBackfillJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStopBackfillJobResponse,
      protos.google.cloud.datastream.v1.IStopBackfillJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        object: request.object ?? '',
      });
    this.initialize();
    return this.innerApiCalls.stopBackfillJob(request, options, callback);
  }
  /**
   * Use this method to get details about a private connectivity configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the  private connectivity configuration to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PrivateConnection]{@link google.cloud.datastream.v1.PrivateConnection}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.get_private_connection.js</caption>
   * region_tag:datastream_v1_generated_Datastream_GetPrivateConnection_async
   */
  getPrivateConnection(
    request?: protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IPrivateConnection,
      (
        | protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getPrivateConnection(
    request: protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IPrivateConnection,
      | protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPrivateConnection(
    request: protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IPrivateConnection,
      | protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPrivateConnection(
    request?: protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IPrivateConnection,
          | protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IPrivateConnection,
      | protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IPrivateConnection,
      (
        | protos.google.cloud.datastream.v1.IGetPrivateConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPrivateConnection(request, options, callback);
  }
  /**
   * Use this method to get details about a route.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Route resource to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Route]{@link google.cloud.datastream.v1.Route}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.get_route.js</caption>
   * region_tag:datastream_v1_generated_Datastream_GetRoute_async
   */
  getRoute(
    request?: protos.google.cloud.datastream.v1.IGetRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IRoute,
      protos.google.cloud.datastream.v1.IGetRouteRequest | undefined,
      {} | undefined
    ]
  >;
  getRoute(
    request: protos.google.cloud.datastream.v1.IGetRouteRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datastream.v1.IRoute,
      protos.google.cloud.datastream.v1.IGetRouteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRoute(
    request: protos.google.cloud.datastream.v1.IGetRouteRequest,
    callback: Callback<
      protos.google.cloud.datastream.v1.IRoute,
      protos.google.cloud.datastream.v1.IGetRouteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRoute(
    request?: protos.google.cloud.datastream.v1.IGetRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datastream.v1.IRoute,
          protos.google.cloud.datastream.v1.IGetRouteRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datastream.v1.IRoute,
      protos.google.cloud.datastream.v1.IGetRouteRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IRoute,
      protos.google.cloud.datastream.v1.IGetRouteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRoute(request, options, callback);
  }

  /**
   * Use this method to create a connection profile in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of ConnectionProfiles.
   * @param {string} request.connectionProfileId
   *   Required. The connection profile identifier.
   * @param {google.cloud.datastream.v1.ConnectionProfile} request.connectionProfile
   *   Required. The connection profile resource to create.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the connection profile, but don't create any resources.
   *   The default is false.
   * @param {boolean} [request.force]
   *   Optional. Create the connection profile without validating it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.create_connection_profile.js</caption>
   * region_tag:datastream_v1_generated_Datastream_CreateConnectionProfile_async
   */
  createConnectionProfile(
    request?: protos.google.cloud.datastream.v1.ICreateConnectionProfileRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createConnectionProfile(
    request: protos.google.cloud.datastream.v1.ICreateConnectionProfileRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConnectionProfile(
    request: protos.google.cloud.datastream.v1.ICreateConnectionProfileRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConnectionProfile(
    request?: protos.google.cloud.datastream.v1.ICreateConnectionProfileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.datastream.v1.IConnectionProfile,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createConnectionProfile(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createConnectionProfile()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.create_connection_profile.js</caption>
   * region_tag:datastream_v1_generated_Datastream_CreateConnectionProfile_async
   */
  async checkCreateConnectionProfileProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.datastream.v1.ConnectionProfile,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createConnectionProfile,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.datastream.v1.ConnectionProfile,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to update the parameters of a connection profile.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   ConnectionProfile resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.datastream.v1.ConnectionProfile} request.connectionProfile
   *   Required. The connection profile to update.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the connection profile, but don't update any resources.
   *   The default is false.
   * @param {boolean} [request.force]
   *   Optional. Update the connection profile without validating it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.update_connection_profile.js</caption>
   * region_tag:datastream_v1_generated_Datastream_UpdateConnectionProfile_async
   */
  updateConnectionProfile(
    request?: protos.google.cloud.datastream.v1.IUpdateConnectionProfileRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateConnectionProfile(
    request: protos.google.cloud.datastream.v1.IUpdateConnectionProfileRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnectionProfile(
    request: protos.google.cloud.datastream.v1.IUpdateConnectionProfileRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnectionProfile(
    request?: protos.google.cloud.datastream.v1.IUpdateConnectionProfileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.datastream.v1.IConnectionProfile,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IConnectionProfile,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'connection_profile.name': request.connectionProfile!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateConnectionProfile(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateConnectionProfile()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.update_connection_profile.js</caption>
   * region_tag:datastream_v1_generated_Datastream_UpdateConnectionProfile_async
   */
  async checkUpdateConnectionProfileProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.datastream.v1.ConnectionProfile,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateConnectionProfile,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.datastream.v1.ConnectionProfile,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to delete a connection profile.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the connection profile resource to delete.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.delete_connection_profile.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DeleteConnectionProfile_async
   */
  deleteConnectionProfile(
    request?: protos.google.cloud.datastream.v1.IDeleteConnectionProfileRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteConnectionProfile(
    request: protos.google.cloud.datastream.v1.IDeleteConnectionProfileRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnectionProfile(
    request: protos.google.cloud.datastream.v1.IDeleteConnectionProfileRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnectionProfile(
    request?: protos.google.cloud.datastream.v1.IDeleteConnectionProfileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteConnectionProfile(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteConnectionProfile()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.delete_connection_profile.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DeleteConnectionProfile_async
   */
  async checkDeleteConnectionProfileProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteConnectionProfile,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to create a stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of streams.
   * @param {string} request.streamId
   *   Required. The stream identifier.
   * @param {google.cloud.datastream.v1.Stream} request.stream
   *   Required. The stream resource to create.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the stream, but don't create any resources.
   *   The default is false.
   * @param {boolean} [request.force]
   *   Optional. Create the stream without validating it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.create_stream.js</caption>
   * region_tag:datastream_v1_generated_Datastream_CreateStream_async
   */
  createStream(
    request?: protos.google.cloud.datastream.v1.ICreateStreamRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createStream(
    request: protos.google.cloud.datastream.v1.ICreateStreamRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createStream(
    request: protos.google.cloud.datastream.v1.ICreateStreamRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createStream(
    request?: protos.google.cloud.datastream.v1.ICreateStreamRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.datastream.v1.IStream,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createStream(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createStream()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.create_stream.js</caption>
   * region_tag:datastream_v1_generated_Datastream_CreateStream_async
   */
  async checkCreateStreamProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.datastream.v1.Stream,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createStream,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.datastream.v1.Stream,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to update the configuration of a stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   stream resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.datastream.v1.Stream} request.stream
   *   Required. The stream resource to update.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the stream with the changes, without actually updating it.
   *   The default is false.
   * @param {boolean} [request.force]
   *   Optional. Update the stream without validating it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.update_stream.js</caption>
   * region_tag:datastream_v1_generated_Datastream_UpdateStream_async
   */
  updateStream(
    request?: protos.google.cloud.datastream.v1.IUpdateStreamRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateStream(
    request: protos.google.cloud.datastream.v1.IUpdateStreamRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateStream(
    request: protos.google.cloud.datastream.v1.IUpdateStreamRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateStream(
    request?: protos.google.cloud.datastream.v1.IUpdateStreamRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.datastream.v1.IStream,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IStream,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'stream.name': request.stream!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateStream(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateStream()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.update_stream.js</caption>
   * region_tag:datastream_v1_generated_Datastream_UpdateStream_async
   */
  async checkUpdateStreamProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.datastream.v1.Stream,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateStream,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.datastream.v1.Stream,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to delete a stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the stream resource to delete.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.delete_stream.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DeleteStream_async
   */
  deleteStream(
    request?: protos.google.cloud.datastream.v1.IDeleteStreamRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteStream(
    request: protos.google.cloud.datastream.v1.IDeleteStreamRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteStream(
    request: protos.google.cloud.datastream.v1.IDeleteStreamRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteStream(
    request?: protos.google.cloud.datastream.v1.IDeleteStreamRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteStream(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteStream()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.delete_stream.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DeleteStream_async
   */
  async checkDeleteStreamProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteStream,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to create a private connectivity configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of PrivateConnections.
   * @param {string} request.privateConnectionId
   *   Required. The private connectivity identifier.
   * @param {google.cloud.datastream.v1.PrivateConnection} request.privateConnection
   *   Required. The Private Connectivity resource to create.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.create_private_connection.js</caption>
   * region_tag:datastream_v1_generated_Datastream_CreatePrivateConnection_async
   */
  createPrivateConnection(
    request?: protos.google.cloud.datastream.v1.ICreatePrivateConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IPrivateConnection,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createPrivateConnection(
    request: protos.google.cloud.datastream.v1.ICreatePrivateConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IPrivateConnection,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPrivateConnection(
    request: protos.google.cloud.datastream.v1.ICreatePrivateConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IPrivateConnection,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPrivateConnection(
    request?: protos.google.cloud.datastream.v1.ICreatePrivateConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.datastream.v1.IPrivateConnection,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IPrivateConnection,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IPrivateConnection,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createPrivateConnection(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createPrivateConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.create_private_connection.js</caption>
   * region_tag:datastream_v1_generated_Datastream_CreatePrivateConnection_async
   */
  async checkCreatePrivateConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.datastream.v1.PrivateConnection,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createPrivateConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.datastream.v1.PrivateConnection,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to delete a private connectivity configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the private connectivity configuration to delete.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.force]
   *   Optional. If set to true, any child routes that belong to this PrivateConnection will
   *   also be deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.delete_private_connection.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DeletePrivateConnection_async
   */
  deletePrivateConnection(
    request?: protos.google.cloud.datastream.v1.IDeletePrivateConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deletePrivateConnection(
    request: protos.google.cloud.datastream.v1.IDeletePrivateConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePrivateConnection(
    request: protos.google.cloud.datastream.v1.IDeletePrivateConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePrivateConnection(
    request?: protos.google.cloud.datastream.v1.IDeletePrivateConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePrivateConnection(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deletePrivateConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.delete_private_connection.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DeletePrivateConnection_async
   */
  async checkDeletePrivateConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deletePrivateConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to create a route for a private connectivity configuration
   * in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of Routes.
   * @param {string} request.routeId
   *   Required. The Route identifier.
   * @param {google.cloud.datastream.v1.Route} request.route
   *   Required. The Route resource to create.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.create_route.js</caption>
   * region_tag:datastream_v1_generated_Datastream_CreateRoute_async
   */
  createRoute(
    request?: protos.google.cloud.datastream.v1.ICreateRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IRoute,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createRoute(
    request: protos.google.cloud.datastream.v1.ICreateRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IRoute,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRoute(
    request: protos.google.cloud.datastream.v1.ICreateRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IRoute,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRoute(
    request?: protos.google.cloud.datastream.v1.ICreateRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.datastream.v1.IRoute,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.datastream.v1.IRoute,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.datastream.v1.IRoute,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.create_route.js</caption>
   * region_tag:datastream_v1_generated_Datastream_CreateRoute_async
   */
  async checkCreateRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.datastream.v1.Route,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.datastream.v1.Route,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to delete a route.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Route resource to delete.
   * @param {string} [request.requestId]
   *   Optional. A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.delete_route.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DeleteRoute_async
   */
  deleteRoute(
    request?: protos.google.cloud.datastream.v1.IDeleteRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteRoute(
    request: protos.google.cloud.datastream.v1.IDeleteRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRoute(
    request: protos.google.cloud.datastream.v1.IDeleteRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRoute(
    request?: protos.google.cloud.datastream.v1.IDeleteRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.datastream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datastream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.delete_route.js</caption>
   * region_tag:datastream_v1_generated_Datastream_DeleteRoute_async
   */
  async checkDeleteRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datastream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datastream.v1.OperationMetadata
    >;
  }
  /**
   * Use this method to list connection profiles created in a project and
   * location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of connection profiles.
   * @param {number} request.pageSize
   *   Maximum number of connection profiles to return.
   *   If unspecified, at most 50 connection profiles will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListConnectionProfiles` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListConnectionProfiles`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ConnectionProfile]{@link google.cloud.datastream.v1.ConnectionProfile}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listConnectionProfilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConnectionProfiles(
    request?: protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IConnectionProfile[],
      protos.google.cloud.datastream.v1.IListConnectionProfilesRequest | null,
      protos.google.cloud.datastream.v1.IListConnectionProfilesResponse
    ]
  >;
  listConnectionProfiles(
    request: protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
      | protos.google.cloud.datastream.v1.IListConnectionProfilesResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IConnectionProfile
    >
  ): void;
  listConnectionProfiles(
    request: protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
      | protos.google.cloud.datastream.v1.IListConnectionProfilesResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IConnectionProfile
    >
  ): void;
  listConnectionProfiles(
    request?: protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
          | protos.google.cloud.datastream.v1.IListConnectionProfilesResponse
          | null
          | undefined,
          protos.google.cloud.datastream.v1.IConnectionProfile
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
      | protos.google.cloud.datastream.v1.IListConnectionProfilesResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IConnectionProfile
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IConnectionProfile[],
      protos.google.cloud.datastream.v1.IListConnectionProfilesRequest | null,
      protos.google.cloud.datastream.v1.IListConnectionProfilesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listConnectionProfiles(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of connection profiles.
   * @param {number} request.pageSize
   *   Maximum number of connection profiles to return.
   *   If unspecified, at most 50 connection profiles will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListConnectionProfiles` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListConnectionProfiles`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ConnectionProfile]{@link google.cloud.datastream.v1.ConnectionProfile} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listConnectionProfilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConnectionProfilesStream(
    request?: protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConnectionProfiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConnectionProfiles.createStream(
      this.innerApiCalls.listConnectionProfiles as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listConnectionProfiles`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of connection profiles.
   * @param {number} request.pageSize
   *   Maximum number of connection profiles to return.
   *   If unspecified, at most 50 connection profiles will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListConnectionProfiles` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListConnectionProfiles`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [ConnectionProfile]{@link google.cloud.datastream.v1.ConnectionProfile}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.list_connection_profiles.js</caption>
   * region_tag:datastream_v1_generated_Datastream_ListConnectionProfiles_async
   */
  listConnectionProfilesAsync(
    request?: protos.google.cloud.datastream.v1.IListConnectionProfilesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datastream.v1.IConnectionProfile> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConnectionProfiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConnectionProfiles.asyncIterate(
      this.innerApiCalls['listConnectionProfiles'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datastream.v1.IConnectionProfile>;
  }
  /**
   * Use this method to list streams in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of streams.
   * @param {number} request.pageSize
   *   Maximum number of streams to return.
   *   If unspecified, at most 50 streams will  be returned. The maximum
   *   value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListStreams` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListStreams`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Stream]{@link google.cloud.datastream.v1.Stream}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listStreamsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listStreams(
    request?: protos.google.cloud.datastream.v1.IListStreamsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStream[],
      protos.google.cloud.datastream.v1.IListStreamsRequest | null,
      protos.google.cloud.datastream.v1.IListStreamsResponse
    ]
  >;
  listStreams(
    request: protos.google.cloud.datastream.v1.IListStreamsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListStreamsRequest,
      protos.google.cloud.datastream.v1.IListStreamsResponse | null | undefined,
      protos.google.cloud.datastream.v1.IStream
    >
  ): void;
  listStreams(
    request: protos.google.cloud.datastream.v1.IListStreamsRequest,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListStreamsRequest,
      protos.google.cloud.datastream.v1.IListStreamsResponse | null | undefined,
      protos.google.cloud.datastream.v1.IStream
    >
  ): void;
  listStreams(
    request?: protos.google.cloud.datastream.v1.IListStreamsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datastream.v1.IListStreamsRequest,
          | protos.google.cloud.datastream.v1.IListStreamsResponse
          | null
          | undefined,
          protos.google.cloud.datastream.v1.IStream
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datastream.v1.IListStreamsRequest,
      protos.google.cloud.datastream.v1.IListStreamsResponse | null | undefined,
      protos.google.cloud.datastream.v1.IStream
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStream[],
      protos.google.cloud.datastream.v1.IListStreamsRequest | null,
      protos.google.cloud.datastream.v1.IListStreamsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listStreams(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of streams.
   * @param {number} request.pageSize
   *   Maximum number of streams to return.
   *   If unspecified, at most 50 streams will  be returned. The maximum
   *   value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListStreams` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListStreams`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Stream]{@link google.cloud.datastream.v1.Stream} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listStreamsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listStreamsStream(
    request?: protos.google.cloud.datastream.v1.IListStreamsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listStreams'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStreams.createStream(
      this.innerApiCalls.listStreams as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listStreams`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of streams.
   * @param {number} request.pageSize
   *   Maximum number of streams to return.
   *   If unspecified, at most 50 streams will  be returned. The maximum
   *   value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListStreams` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListStreams`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Stream]{@link google.cloud.datastream.v1.Stream}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.list_streams.js</caption>
   * region_tag:datastream_v1_generated_Datastream_ListStreams_async
   */
  listStreamsAsync(
    request?: protos.google.cloud.datastream.v1.IListStreamsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datastream.v1.IStream> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listStreams'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStreams.asyncIterate(
      this.innerApiCalls['listStreams'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datastream.v1.IStream>;
  }
  /**
   * Use this method to list the objects of a specific stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent stream that owns the collection of objects.
   * @param {number} request.pageSize
   *   Maximum number of objects to return. Default is 50.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListStreamObjectsRequest` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListStreamObjectsRequest` must match the call that provided the page
   *   token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [StreamObject]{@link google.cloud.datastream.v1.StreamObject}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listStreamObjectsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listStreamObjects(
    request?: protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStreamObject[],
      protos.google.cloud.datastream.v1.IListStreamObjectsRequest | null,
      protos.google.cloud.datastream.v1.IListStreamObjectsResponse
    ]
  >;
  listStreamObjects(
    request: protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
      | protos.google.cloud.datastream.v1.IListStreamObjectsResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IStreamObject
    >
  ): void;
  listStreamObjects(
    request: protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
      | protos.google.cloud.datastream.v1.IListStreamObjectsResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IStreamObject
    >
  ): void;
  listStreamObjects(
    request?: protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
          | protos.google.cloud.datastream.v1.IListStreamObjectsResponse
          | null
          | undefined,
          protos.google.cloud.datastream.v1.IStreamObject
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
      | protos.google.cloud.datastream.v1.IListStreamObjectsResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IStreamObject
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IStreamObject[],
      protos.google.cloud.datastream.v1.IListStreamObjectsRequest | null,
      protos.google.cloud.datastream.v1.IListStreamObjectsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listStreamObjects(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent stream that owns the collection of objects.
   * @param {number} request.pageSize
   *   Maximum number of objects to return. Default is 50.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListStreamObjectsRequest` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListStreamObjectsRequest` must match the call that provided the page
   *   token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [StreamObject]{@link google.cloud.datastream.v1.StreamObject} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listStreamObjectsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listStreamObjectsStream(
    request?: protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listStreamObjects'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStreamObjects.createStream(
      this.innerApiCalls.listStreamObjects as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listStreamObjects`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent stream that owns the collection of objects.
   * @param {number} request.pageSize
   *   Maximum number of objects to return. Default is 50.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListStreamObjectsRequest` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListStreamObjectsRequest` must match the call that provided the page
   *   token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [StreamObject]{@link google.cloud.datastream.v1.StreamObject}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.list_stream_objects.js</caption>
   * region_tag:datastream_v1_generated_Datastream_ListStreamObjects_async
   */
  listStreamObjectsAsync(
    request?: protos.google.cloud.datastream.v1.IListStreamObjectsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datastream.v1.IStreamObject> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listStreamObjects'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStreamObjects.asyncIterate(
      this.innerApiCalls['listStreamObjects'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datastream.v1.IStreamObject>;
  }
  /**
   * The FetchStaticIps API call exposes the static IP addresses used by
   * Datastream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for the location for which static IPs should be returned.
   *   Must be in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of Ips to return, will likely not be specified.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListStaticIps` call.
   *   will likely not be specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of string.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `fetchStaticIpsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  fetchStaticIps(
    request?: protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
    options?: CallOptions
  ): Promise<
    [
      string[],
      protos.google.cloud.datastream.v1.IFetchStaticIpsRequest | null,
      protos.google.cloud.datastream.v1.IFetchStaticIpsResponse
    ]
  >;
  fetchStaticIps(
    request: protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
      | protos.google.cloud.datastream.v1.IFetchStaticIpsResponse
      | null
      | undefined,
      string
    >
  ): void;
  fetchStaticIps(
    request: protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
      | protos.google.cloud.datastream.v1.IFetchStaticIpsResponse
      | null
      | undefined,
      string
    >
  ): void;
  fetchStaticIps(
    request?: protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
          | protos.google.cloud.datastream.v1.IFetchStaticIpsResponse
          | null
          | undefined,
          string
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
      | protos.google.cloud.datastream.v1.IFetchStaticIpsResponse
      | null
      | undefined,
      string
    >
  ): Promise<
    [
      string[],
      protos.google.cloud.datastream.v1.IFetchStaticIpsRequest | null,
      protos.google.cloud.datastream.v1.IFetchStaticIpsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchStaticIps(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for the location for which static IPs should be returned.
   *   Must be in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of Ips to return, will likely not be specified.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListStaticIps` call.
   *   will likely not be specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing string on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `fetchStaticIpsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  fetchStaticIpsStream(
    request?: protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['fetchStaticIps'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchStaticIps.createStream(
      this.innerApiCalls.fetchStaticIps as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `fetchStaticIps`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for the location for which static IPs should be returned.
   *   Must be in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of Ips to return, will likely not be specified.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListStaticIps` call.
   *   will likely not be specified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   string. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.fetch_static_ips.js</caption>
   * region_tag:datastream_v1_generated_Datastream_FetchStaticIps_async
   */
  fetchStaticIpsAsync(
    request?: protos.google.cloud.datastream.v1.IFetchStaticIpsRequest,
    options?: CallOptions
  ): AsyncIterable<string> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['fetchStaticIps'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchStaticIps.asyncIterate(
      this.innerApiCalls['fetchStaticIps'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<string>;
  }
  /**
   * Use this method to list private connectivity configurations in a project
   * and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of private connectivity configurations.
   * @param {number} request.pageSize
   *   Maximum number of private connectivity configurations to return.
   *   If unspecified, at most 50 private connectivity configurations that will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListPrivateConnections` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListPrivateConnections` must match the call that provided the page
   *   token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PrivateConnection]{@link google.cloud.datastream.v1.PrivateConnection}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPrivateConnectionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPrivateConnections(
    request?: protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IPrivateConnection[],
      protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest | null,
      protos.google.cloud.datastream.v1.IListPrivateConnectionsResponse
    ]
  >;
  listPrivateConnections(
    request: protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
      | protos.google.cloud.datastream.v1.IListPrivateConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IPrivateConnection
    >
  ): void;
  listPrivateConnections(
    request: protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
      | protos.google.cloud.datastream.v1.IListPrivateConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IPrivateConnection
    >
  ): void;
  listPrivateConnections(
    request?: protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
          | protos.google.cloud.datastream.v1.IListPrivateConnectionsResponse
          | null
          | undefined,
          protos.google.cloud.datastream.v1.IPrivateConnection
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
      | protos.google.cloud.datastream.v1.IListPrivateConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.datastream.v1.IPrivateConnection
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IPrivateConnection[],
      protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest | null,
      protos.google.cloud.datastream.v1.IListPrivateConnectionsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPrivateConnections(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of private connectivity configurations.
   * @param {number} request.pageSize
   *   Maximum number of private connectivity configurations to return.
   *   If unspecified, at most 50 private connectivity configurations that will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListPrivateConnections` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListPrivateConnections` must match the call that provided the page
   *   token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PrivateConnection]{@link google.cloud.datastream.v1.PrivateConnection} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPrivateConnectionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPrivateConnectionsStream(
    request?: protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPrivateConnections'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPrivateConnections.createStream(
      this.innerApiCalls.listPrivateConnections as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPrivateConnections`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of private connectivity configurations.
   * @param {number} request.pageSize
   *   Maximum number of private connectivity configurations to return.
   *   If unspecified, at most 50 private connectivity configurations that will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListPrivateConnections` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListPrivateConnections` must match the call that provided the page
   *   token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [PrivateConnection]{@link google.cloud.datastream.v1.PrivateConnection}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.list_private_connections.js</caption>
   * region_tag:datastream_v1_generated_Datastream_ListPrivateConnections_async
   */
  listPrivateConnectionsAsync(
    request?: protos.google.cloud.datastream.v1.IListPrivateConnectionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datastream.v1.IPrivateConnection> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPrivateConnections'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPrivateConnections.asyncIterate(
      this.innerApiCalls['listPrivateConnections'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datastream.v1.IPrivateConnection>;
  }
  /**
   * Use this method to list routes created for a private connectivity
   * configuration in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of Routess.
   * @param {number} request.pageSize
   *   Maximum number of Routes to return. The service may return
   *   fewer than this value. If unspecified, at most 50 Routes
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListRoutes` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListRoutes` must match the call that provided the page
   *   token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Route]{@link google.cloud.datastream.v1.Route}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRoutes(
    request?: protos.google.cloud.datastream.v1.IListRoutesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IRoute[],
      protos.google.cloud.datastream.v1.IListRoutesRequest | null,
      protos.google.cloud.datastream.v1.IListRoutesResponse
    ]
  >;
  listRoutes(
    request: protos.google.cloud.datastream.v1.IListRoutesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListRoutesRequest,
      protos.google.cloud.datastream.v1.IListRoutesResponse | null | undefined,
      protos.google.cloud.datastream.v1.IRoute
    >
  ): void;
  listRoutes(
    request: protos.google.cloud.datastream.v1.IListRoutesRequest,
    callback: PaginationCallback<
      protos.google.cloud.datastream.v1.IListRoutesRequest,
      protos.google.cloud.datastream.v1.IListRoutesResponse | null | undefined,
      protos.google.cloud.datastream.v1.IRoute
    >
  ): void;
  listRoutes(
    request?: protos.google.cloud.datastream.v1.IListRoutesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datastream.v1.IListRoutesRequest,
          | protos.google.cloud.datastream.v1.IListRoutesResponse
          | null
          | undefined,
          protos.google.cloud.datastream.v1.IRoute
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datastream.v1.IListRoutesRequest,
      protos.google.cloud.datastream.v1.IListRoutesResponse | null | undefined,
      protos.google.cloud.datastream.v1.IRoute
    >
  ): Promise<
    [
      protos.google.cloud.datastream.v1.IRoute[],
      protos.google.cloud.datastream.v1.IListRoutesRequest | null,
      protos.google.cloud.datastream.v1.IListRoutesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRoutes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of Routess.
   * @param {number} request.pageSize
   *   Maximum number of Routes to return. The service may return
   *   fewer than this value. If unspecified, at most 50 Routes
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListRoutes` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListRoutes` must match the call that provided the page
   *   token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Route]{@link google.cloud.datastream.v1.Route} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRoutesStream(
    request?: protos.google.cloud.datastream.v1.IListRoutesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRoutes.createStream(
      this.innerApiCalls.listRoutes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRoutes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent that owns the collection of Routess.
   * @param {number} request.pageSize
   *   Maximum number of Routes to return. The service may return
   *   fewer than this value. If unspecified, at most 50 Routes
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   coerced to 1000.
   * @param {string} request.pageToken
   *   Page token received from a previous `ListRoutes` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListRoutes` must match the call that provided the page
   *   token.
   * @param {string} request.filter
   *   Filter request.
   * @param {string} request.orderBy
   *   Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Route]{@link google.cloud.datastream.v1.Route}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/datastream.list_routes.js</caption>
   * region_tag:datastream_v1_generated_Datastream_ListRoutes_async
   */
  listRoutesAsync(
    request?: protos.google.cloud.datastream.v1.IListRoutesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datastream.v1.IRoute> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRoutes.asyncIterate(
      this.innerApiCalls['listRoutes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datastream.v1.IRoute>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified connectionProfile resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} connection_profile
   * @returns {string} Resource name string.
   */
  connectionProfilePath(
    project: string,
    location: string,
    connectionProfile: string
  ) {
    return this.pathTemplates.connectionProfilePathTemplate.render({
      project: project,
      location: location,
      connection_profile: connectionProfile,
    });
  }

  /**
   * Parse the project from ConnectionProfile resource.
   *
   * @param {string} connectionProfileName
   *   A fully-qualified path representing ConnectionProfile resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConnectionProfileName(connectionProfileName: string) {
    return this.pathTemplates.connectionProfilePathTemplate.match(
      connectionProfileName
    ).project;
  }

  /**
   * Parse the location from ConnectionProfile resource.
   *
   * @param {string} connectionProfileName
   *   A fully-qualified path representing ConnectionProfile resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromConnectionProfileName(connectionProfileName: string) {
    return this.pathTemplates.connectionProfilePathTemplate.match(
      connectionProfileName
    ).location;
  }

  /**
   * Parse the connection_profile from ConnectionProfile resource.
   *
   * @param {string} connectionProfileName
   *   A fully-qualified path representing ConnectionProfile resource.
   * @returns {string} A string representing the connection_profile.
   */
  matchConnectionProfileFromConnectionProfileName(
    connectionProfileName: string
  ) {
    return this.pathTemplates.connectionProfilePathTemplate.match(
      connectionProfileName
    ).connection_profile;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified privateConnection resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} private_connection
   * @returns {string} Resource name string.
   */
  privateConnectionPath(
    project: string,
    location: string,
    privateConnection: string
  ) {
    return this.pathTemplates.privateConnectionPathTemplate.render({
      project: project,
      location: location,
      private_connection: privateConnection,
    });
  }

  /**
   * Parse the project from PrivateConnection resource.
   *
   * @param {string} privateConnectionName
   *   A fully-qualified path representing PrivateConnection resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPrivateConnectionName(privateConnectionName: string) {
    return this.pathTemplates.privateConnectionPathTemplate.match(
      privateConnectionName
    ).project;
  }

  /**
   * Parse the location from PrivateConnection resource.
   *
   * @param {string} privateConnectionName
   *   A fully-qualified path representing PrivateConnection resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPrivateConnectionName(privateConnectionName: string) {
    return this.pathTemplates.privateConnectionPathTemplate.match(
      privateConnectionName
    ).location;
  }

  /**
   * Parse the private_connection from PrivateConnection resource.
   *
   * @param {string} privateConnectionName
   *   A fully-qualified path representing PrivateConnection resource.
   * @returns {string} A string representing the private_connection.
   */
  matchPrivateConnectionFromPrivateConnectionName(
    privateConnectionName: string
  ) {
    return this.pathTemplates.privateConnectionPathTemplate.match(
      privateConnectionName
    ).private_connection;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified route resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} private_connection
   * @param {string} route
   * @returns {string} Resource name string.
   */
  routePath(
    project: string,
    location: string,
    privateConnection: string,
    route: string
  ) {
    return this.pathTemplates.routePathTemplate.render({
      project: project,
      location: location,
      private_connection: privateConnection,
      route: route,
    });
  }

  /**
   * Parse the project from Route resource.
   *
   * @param {string} routeName
   *   A fully-qualified path representing Route resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRouteName(routeName: string) {
    return this.pathTemplates.routePathTemplate.match(routeName).project;
  }

  /**
   * Parse the location from Route resource.
   *
   * @param {string} routeName
   *   A fully-qualified path representing Route resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRouteName(routeName: string) {
    return this.pathTemplates.routePathTemplate.match(routeName).location;
  }

  /**
   * Parse the private_connection from Route resource.
   *
   * @param {string} routeName
   *   A fully-qualified path representing Route resource.
   * @returns {string} A string representing the private_connection.
   */
  matchPrivateConnectionFromRouteName(routeName: string) {
    return this.pathTemplates.routePathTemplate.match(routeName)
      .private_connection;
  }

  /**
   * Parse the route from Route resource.
   *
   * @param {string} routeName
   *   A fully-qualified path representing Route resource.
   * @returns {string} A string representing the route.
   */
  matchRouteFromRouteName(routeName: string) {
    return this.pathTemplates.routePathTemplate.match(routeName).route;
  }

  /**
   * Return a fully-qualified stream resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} stream
   * @returns {string} Resource name string.
   */
  streamPath(project: string, location: string, stream: string) {
    return this.pathTemplates.streamPathTemplate.render({
      project: project,
      location: location,
      stream: stream,
    });
  }

  /**
   * Parse the project from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).project;
  }

  /**
   * Parse the location from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).location;
  }

  /**
   * Parse the stream from Stream resource.
   *
   * @param {string} streamName
   *   A fully-qualified path representing Stream resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromStreamName(streamName: string) {
    return this.pathTemplates.streamPathTemplate.match(streamName).stream;
  }

  /**
   * Return a fully-qualified streamObject resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} stream
   * @param {string} object
   * @returns {string} Resource name string.
   */
  streamObjectPath(
    project: string,
    location: string,
    stream: string,
    object: string
  ) {
    return this.pathTemplates.streamObjectPathTemplate.render({
      project: project,
      location: location,
      stream: stream,
      object: object,
    });
  }

  /**
   * Parse the project from StreamObject resource.
   *
   * @param {string} streamObjectName
   *   A fully-qualified path representing StreamObject resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStreamObjectName(streamObjectName: string) {
    return this.pathTemplates.streamObjectPathTemplate.match(streamObjectName)
      .project;
  }

  /**
   * Parse the location from StreamObject resource.
   *
   * @param {string} streamObjectName
   *   A fully-qualified path representing StreamObject resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStreamObjectName(streamObjectName: string) {
    return this.pathTemplates.streamObjectPathTemplate.match(streamObjectName)
      .location;
  }

  /**
   * Parse the stream from StreamObject resource.
   *
   * @param {string} streamObjectName
   *   A fully-qualified path representing StreamObject resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromStreamObjectName(streamObjectName: string) {
    return this.pathTemplates.streamObjectPathTemplate.match(streamObjectName)
      .stream;
  }

  /**
   * Parse the object from StreamObject resource.
   *
   * @param {string} streamObjectName
   *   A fully-qualified path representing StreamObject resource.
   * @returns {string} A string representing the object.
   */
  matchObjectFromStreamObjectName(streamObjectName: string) {
    return this.pathTemplates.streamObjectPathTemplate.match(streamObjectName)
      .object;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.datastreamStub && !this._terminated) {
      return this.datastreamStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
