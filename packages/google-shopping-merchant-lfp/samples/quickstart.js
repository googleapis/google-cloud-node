// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

'use strict';

function main(parent, targetAccount) {
  // [START merchantapi_quickstart]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The LFP partner.
   *  Format: `accounts/{account}`
   */
  // const parent = 'abc123'
  /**
   *  Required. The Merchant Center id of the merchant to list stores for.
   */
  // const targetAccount = 1234
  /**
   *  Optional. The maximum number of `LfpStore` resources for the given account
   *  to return. The service returns fewer than this value if the number of
   *  stores for the given account is less than the `pageSize`. The default value
   *  is 250. The maximum value is 1000; If a value higher than the maximum is
   *  specified, then the `pageSize` will default to the maximum.
   */
  // const pageSize = 1234
  /**
   *  Optional. A page token, received from a previous `ListLfpStoresRequest`
   *  call. Provide the page token to retrieve the subsequent page. When
   *  paginating, all other parameters provided to `ListLfpStoresRequest` must
   *  match the call that provided the page token. The token returned as
   *  nextPageToken google.shopping.merchant.lfp.v1beta.ListLfpStoresResponse.next_page_token
   *  in the response to the previous request.
   */
  // const pageToken = 'abc123'

  // Imports the Lfp library
  const {LfpStoreServiceClient} = require('@google-shopping/lfp').v1beta;

  // Instantiates a client
  const lfpClient = new LfpStoreServiceClient();

  async function callListLfpStores() {
    // Construct request
    const request = {
      parent,
      targetAccount,
    };

    // Run request
    const iterable = lfpClient.listLfpStoresAsync(request);
    for await (const response of iterable) {
      console.log(response);
    }
  }

  callListLfpStores();
  // [END merchantapi_quickstart]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
