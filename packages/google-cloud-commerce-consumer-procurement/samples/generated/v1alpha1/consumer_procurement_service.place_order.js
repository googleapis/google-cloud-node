// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, displayName) {
  // [START cloudcommerceconsumerprocurement_v1alpha1_generated_ConsumerProcurementService_PlaceOrder_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the parent resource.
   *  This field has the form  `billingAccounts/{billing-account-id}`.
   */
  // const parent = 'abc123'
  /**
   *  Required. The user-specified name of the order being placed.
   */
  // const displayName = 'abc123'
  /**
   *  Optional. Places order for offer. Required when an offer-based order is
   *  being placed.
   */
  // const lineItemInfo = [1,2,3,4]
  /**
   *  Optional. A unique identifier for this request.
   *  The server will ignore subsequent requests that provide a duplicate request
   *  ID for at least 120 minutes after the first request.
   *  The request ID must be a valid
   *  UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
   */
  // const requestId = 'abc123'

  // Imports the Procurement library
  const {ConsumerProcurementServiceClient} = require('@google-cloud/procurement').v1alpha1;

  // Instantiates a client
  const procurementClient = new ConsumerProcurementServiceClient();

  async function callPlaceOrder() {
    // Construct request
    const request = {
      parent,
      displayName,
    };

    // Run request
    const [operation] = await procurementClient.placeOrder(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callPlaceOrder();
  // [END cloudcommerceconsumerprocurement_v1alpha1_generated_ConsumerProcurementService_PlaceOrder_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
