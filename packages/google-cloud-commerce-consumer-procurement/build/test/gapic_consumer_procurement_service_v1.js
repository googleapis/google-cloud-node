"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/protos");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const consumerprocurementserviceModule = require("../src");
const stream_1 = require("stream");
const google_gax_1 = require("google-gax");
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = google_gax_1.protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName, fields) {
    var _a, _b;
    let type = root.lookupType(typeName);
    for (const field of fields.slice(0, -1)) {
        type = (_a = type.fields[field]) === null || _a === void 0 ? void 0 : _a.resolvedType;
    }
    return (_b = type.fields[fields[fields.length - 1]]) === null || _b === void 0 ? void 0 : _b.defaultValue;
}
function generateSampleMessage(instance) {
    const filledObject = instance.constructor.toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error
        ? sinon.stub().rejects(error)
        : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
}
function stubLongRunningCall(response, callError, lroError) {
    const innerStub = lroError
        ? sinon.stub().rejects(lroError)
        : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError
        ? sinon.stub().rejects(callError)
        : sinon.stub().resolves([mockOperation]);
}
function stubLongRunningCallWithCallback(response, callError, lroError) {
    const innerStub = lroError
        ? sinon.stub().rejects(lroError)
        : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError
        ? sinon.stub().callsArgWith(2, callError)
        : sinon.stub().callsArgWith(2, null, mockOperation);
}
function stubPageStreamingCall(responses, error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : pagingStub;
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => {
                mockStream.write({});
            });
        }
        setImmediate(() => {
            mockStream.end();
        });
    }
    else {
        setImmediate(() => {
            mockStream.write({});
        });
        setImmediate(() => {
            mockStream.end();
        });
    }
    return sinon.stub().returns(mockStream);
}
function stubAsyncIterationCall(responses, error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses.length) {
                        return Promise.resolve({ done: true, value: undefined });
                    }
                    return Promise.resolve({ done: false, value: responses[counter++] });
                },
            };
        },
    };
    return sinon.stub().returns(asyncIterable);
}
(0, mocha_1.describe)('v1.ConsumerProcurementServiceClient', () => {
    (0, mocha_1.describe)('Common methods', () => {
        (0, mocha_1.it)('has servicePath', () => {
            const servicePath = consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient
                .servicePath;
            assert(servicePath);
        });
        (0, mocha_1.it)('has apiEndpoint', () => {
            const apiEndpoint = consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient
                .apiEndpoint;
            assert(apiEndpoint);
        });
        (0, mocha_1.it)('has port', () => {
            const port = consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient
                .port;
            assert(port);
            assert(typeof port === 'number');
        });
        (0, mocha_1.it)('should create a client with no option', () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient();
            assert(client);
        });
        (0, mocha_1.it)('should create a client with gRPC fallback', () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                fallback: true,
            });
            assert(client);
        });
        (0, mocha_1.it)('has initialize method and supports deferred initialization', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.consumerProcurementServiceStub, undefined);
            await client.initialize();
            assert(client.consumerProcurementServiceStub);
        });
        (0, mocha_1.it)('has close method for the initialized client', done => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            assert(client.consumerProcurementServiceStub);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has close method for the non-initialized client', done => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.consumerProcurementServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert(client.auth.getProjectId.calledWithExactly());
        });
        (0, mocha_1.it)('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon
                .stub()
                .callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err, projectId) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });
    (0, mocha_1.describe)('getOrder', () => {
        (0, mocha_1.it)('invokes getOrder without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.GetOrderRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.GetOrderRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order());
            client.innerApiCalls.getOrder = stubSimpleCall(expectedResponse);
            const [response] = await client.getOrder(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getOrder.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getOrder.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getOrder without error using callback', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.GetOrderRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.GetOrderRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order());
            client.innerApiCalls.getOrder =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getOrder(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getOrder.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getOrder.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getOrder with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.GetOrderRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.GetOrderRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getOrder = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getOrder(request), expectedError);
            const actualRequest = client.innerApiCalls.getOrder.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getOrder.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getOrder with closed client', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.GetOrderRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.GetOrderRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getOrder(request), expectedError);
        });
    });
    (0, mocha_1.describe)('placeOrder', () => {
        (0, mocha_1.it)('invokes placeOrder without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.PlaceOrderRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.PlaceOrderRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.placeOrder = stubLongRunningCall(expectedResponse);
            const [operation] = await client.placeOrder(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.placeOrder.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.placeOrder.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes placeOrder without error using callback', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.PlaceOrderRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.PlaceOrderRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.placeOrder =
                stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.placeOrder(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const operation = (await promise);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.placeOrder.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.placeOrder.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes placeOrder with call error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.PlaceOrderRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.PlaceOrderRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.placeOrder = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.placeOrder(request), expectedError);
            const actualRequest = client.innerApiCalls.placeOrder.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.placeOrder.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes placeOrder with LRO error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.PlaceOrderRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.PlaceOrderRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.placeOrder = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.placeOrder(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = client.innerApiCalls.placeOrder.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.placeOrder.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes checkPlaceOrderProgress without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = { type_url: 'url', value: Buffer.from('') };
            expectedResponse.metadata = { type_url: 'url', value: Buffer.from('') };
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkPlaceOrderProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        (0, mocha_1.it)('invokes checkPlaceOrderProgress with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkPlaceOrderProgress(''), expectedError);
            assert(client.operationsClient.getOperation.getCall(0));
        });
    });
    (0, mocha_1.describe)('listOrders', () => {
        (0, mocha_1.it)('invokes listOrders without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
            ];
            client.innerApiCalls.listOrders = stubSimpleCall(expectedResponse);
            const [response] = await client.listOrders(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listOrders.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listOrders.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listOrders without error using callback', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
            ];
            client.innerApiCalls.listOrders =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listOrders(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listOrders.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listOrders.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listOrders with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listOrders = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listOrders(request), expectedError);
            const actualRequest = client.innerApiCalls.listOrders.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listOrders.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listOrdersStream without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
            ];
            client.descriptors.page.listOrders.createStream =
                stubPageStreamingCall(expectedResponse);
            const stream = client.listOrdersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listOrders.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listOrders, request));
            assert(client.descriptors.page.listOrders.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listOrdersStream with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listOrders.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listOrdersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listOrders.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listOrders, request));
            assert(client.descriptors.page.listOrders.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listOrders without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
                generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.Order()),
            ];
            client.descriptors.page.listOrders.asyncIterate =
                stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listOrdersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listOrders.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.listOrders.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listOrders with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.commerce.consumer.procurement.v1.ListOrdersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listOrders.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listOrdersAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listOrders.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.listOrders.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('getOperation', () => {
        (0, mocha_1.it)('invokes getOperation without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.getOperation
                .getCall(0)
                .calledWith(request));
        });
        (0, mocha_1.it)('invokes getOperation without error using callback', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            client.operationsClient.getOperation = sinon
                .stub()
                .callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.getOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        (0, mocha_1.it)('invokes getOperation with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {
                await client.getOperation(request);
            }, expectedError);
            assert(client.operationsClient.getOperation
                .getCall(0)
                .calledWith(request));
        });
    });
    (0, mocha_1.describe)('cancelOperation', () => {
        (0, mocha_1.it)('invokes cancelOperation without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.cancelOperation =
                stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.cancelOperation
                .getCall(0)
                .calledWith(request));
        });
        (0, mocha_1.it)('invokes cancelOperation without error using callback', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.cancelOperation = sinon
                .stub()
                .callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.cancelOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.cancelOperation.getCall(0));
        });
        (0, mocha_1.it)('invokes cancelOperation with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {
                await client.cancelOperation(request);
            }, expectedError);
            assert(client.operationsClient.cancelOperation
                .getCall(0)
                .calledWith(request));
        });
    });
    (0, mocha_1.describe)('deleteOperation', () => {
        (0, mocha_1.it)('invokes deleteOperation without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.deleteOperation =
                stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.deleteOperation
                .getCall(0)
                .calledWith(request));
        });
        (0, mocha_1.it)('invokes deleteOperation without error using callback', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.deleteOperation = sinon
                .stub()
                .callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.deleteOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.deleteOperation.getCall(0));
        });
        (0, mocha_1.it)('invokes deleteOperation with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {
                await client.deleteOperation(request);
            }, expectedError);
            assert(client.operationsClient.deleteOperation
                .getCall(0)
                .calledWith(request));
        });
    });
    (0, mocha_1.describe)('listOperationsAsync', () => {
        (0, mocha_1.it)('uses async iteration with listOperations without error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsRequest());
            const expectedResponse = [
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate =
                stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.operationsClient.descriptor.listOperations
                .asyncIterate.getCall(0).args[1], request);
        });
        (0, mocha_1.it)('uses async iteration with listOperations with error', async () => {
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsRequest());
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate =
                stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.operationsClient.descriptor.listOperations
                .asyncIterate.getCall(0).args[1], request);
        });
    });
    (0, mocha_1.describe)('Path templates', () => {
        (0, mocha_1.describe)('billingAccount', () => {
            const fakePath = '/rendered/path/billingAccount';
            const expectedParameters = {
                billing_account: 'billingAccountValue',
            };
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.billingAccountPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.billingAccountPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            (0, mocha_1.it)('billingAccountPath', () => {
                const result = client.billingAccountPath('billingAccountValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.billingAccountPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchBillingAccountFromBillingAccountName', () => {
                const result = client.matchBillingAccountFromBillingAccountName(fakePath);
                assert.strictEqual(result, 'billingAccountValue');
                assert(client.pathTemplates.billingAccountPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('order', () => {
            const fakePath = '/rendered/path/order';
            const expectedParameters = {
                billing_account: 'billingAccountValue',
                order: 'orderValue',
            };
            const client = new consumerprocurementserviceModule.v1.ConsumerProcurementServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.orderPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.orderPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            (0, mocha_1.it)('orderPath', () => {
                const result = client.orderPath('billingAccountValue', 'orderValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.orderPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchBillingAccountFromOrderName', () => {
                const result = client.matchBillingAccountFromOrderName(fakePath);
                assert.strictEqual(result, 'billingAccountValue');
                assert(client.pathTemplates.orderPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            (0, mocha_1.it)('matchOrderFromOrderName', () => {
                const result = client.matchOrderFromOrderName(fakePath);
                assert.strictEqual(result, 'orderValue');
                assert(client.pathTemplates.orderPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
    });
});
//# sourceMappingURL=gapic_consumer_procurement_service_v1.js.map