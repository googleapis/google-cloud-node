// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as apphubModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.AppHubClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new apphubModule.v1.AppHubClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'apphub.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new apphubModule.v1.AppHubClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process !== 'undefined' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath = apphubModule.v1.AppHubClient.servicePath;
        assert.strictEqual(servicePath, 'apphub.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint = apphubModule.v1.AppHubClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'apphub.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new apphubModule.v1.AppHubClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'apphub.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new apphubModule.v1.AppHubClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'apphub.example.com');
    });
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new apphubModule.v1.AppHubClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = apphubModule.v1.AppHubClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new apphubModule.v1.AppHubClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new apphubModule.v1.AppHubClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.appHubStub, undefined);
      await client.initialize();
      assert(client.appHubStub);
    });

    it('has close method for the initialized client', done => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.appHubStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.appHubStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('lookupServiceProjectAttachment', () => {
    it('invokes lookupServiceProjectAttachment without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupServiceProjectAttachmentResponse()
      );
      client.innerApiCalls.lookupServiceProjectAttachment =
        stubSimpleCall(expectedResponse);
      const [response] = await client.lookupServiceProjectAttachment(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupServiceProjectAttachment without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupServiceProjectAttachmentResponse()
      );
      client.innerApiCalls.lookupServiceProjectAttachment =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.lookupServiceProjectAttachment(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.ILookupServiceProjectAttachmentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupServiceProjectAttachment with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.lookupServiceProjectAttachment = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.lookupServiceProjectAttachment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.lookupServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupServiceProjectAttachment with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.lookupServiceProjectAttachment(request),
        expectedError
      );
    });
  });

  describe('getServiceProjectAttachment', () => {
    it('invokes getServiceProjectAttachment without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
      );
      client.innerApiCalls.getServiceProjectAttachment =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getServiceProjectAttachment(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceProjectAttachment without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
      );
      client.innerApiCalls.getServiceProjectAttachment =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getServiceProjectAttachment(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IServiceProjectAttachment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceProjectAttachment with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getServiceProjectAttachment = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getServiceProjectAttachment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServiceProjectAttachment with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getServiceProjectAttachment(request),
        expectedError
      );
    });
  });

  describe('detachServiceProjectAttachment', () => {
    it('invokes detachServiceProjectAttachment without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DetachServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DetachServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DetachServiceProjectAttachmentResponse()
      );
      client.innerApiCalls.detachServiceProjectAttachment =
        stubSimpleCall(expectedResponse);
      const [response] = await client.detachServiceProjectAttachment(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.detachServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detachServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detachServiceProjectAttachment without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DetachServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DetachServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DetachServiceProjectAttachmentResponse()
      );
      client.innerApiCalls.detachServiceProjectAttachment =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.detachServiceProjectAttachment(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IDetachServiceProjectAttachmentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.detachServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detachServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detachServiceProjectAttachment with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DetachServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DetachServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.detachServiceProjectAttachment = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.detachServiceProjectAttachment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.detachServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detachServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detachServiceProjectAttachment with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DetachServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DetachServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.detachServiceProjectAttachment(request),
        expectedError
      );
    });
  });

  describe('getDiscoveredService', () => {
    it('invokes getDiscoveredService without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetDiscoveredServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetDiscoveredServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DiscoveredService()
      );
      client.innerApiCalls.getDiscoveredService =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getDiscoveredService(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDiscoveredService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDiscoveredService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDiscoveredService without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetDiscoveredServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetDiscoveredServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DiscoveredService()
      );
      client.innerApiCalls.getDiscoveredService =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDiscoveredService(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IDiscoveredService | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDiscoveredService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDiscoveredService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDiscoveredService with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetDiscoveredServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetDiscoveredServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDiscoveredService = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getDiscoveredService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getDiscoveredService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDiscoveredService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDiscoveredService with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetDiscoveredServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetDiscoveredServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getDiscoveredService(request), expectedError);
    });
  });

  describe('lookupDiscoveredService', () => {
    it('invokes lookupDiscoveredService without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupDiscoveredServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredServiceResponse()
      );
      client.innerApiCalls.lookupDiscoveredService =
        stubSimpleCall(expectedResponse);
      const [response] = await client.lookupDiscoveredService(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupDiscoveredService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupDiscoveredService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupDiscoveredService without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupDiscoveredServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredServiceResponse()
      );
      client.innerApiCalls.lookupDiscoveredService =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.lookupDiscoveredService(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.ILookupDiscoveredServiceResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupDiscoveredService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupDiscoveredService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupDiscoveredService with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupDiscoveredServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.lookupDiscoveredService = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.lookupDiscoveredService(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.lookupDiscoveredService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupDiscoveredService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupDiscoveredService with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupDiscoveredServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.lookupDiscoveredService(request),
        expectedError
      );
    });
  });

  describe('getService', () => {
    it('invokes getService without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.Service()
      );
      client.innerApiCalls.getService = stubSimpleCall(expectedResponse);
      const [response] = await client.getService(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getService without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.Service()
      );
      client.innerApiCalls.getService =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getService(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IService | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getService with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getService = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getService with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getService(request), expectedError);
    });
  });

  describe('getDiscoveredWorkload', () => {
    it('invokes getDiscoveredWorkload without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetDiscoveredWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetDiscoveredWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DiscoveredWorkload()
      );
      client.innerApiCalls.getDiscoveredWorkload =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getDiscoveredWorkload(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDiscoveredWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDiscoveredWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDiscoveredWorkload without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetDiscoveredWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetDiscoveredWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DiscoveredWorkload()
      );
      client.innerApiCalls.getDiscoveredWorkload =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDiscoveredWorkload(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IDiscoveredWorkload | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDiscoveredWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDiscoveredWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDiscoveredWorkload with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetDiscoveredWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetDiscoveredWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDiscoveredWorkload = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getDiscoveredWorkload(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getDiscoveredWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDiscoveredWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDiscoveredWorkload with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetDiscoveredWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetDiscoveredWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getDiscoveredWorkload(request),
        expectedError
      );
    });
  });

  describe('lookupDiscoveredWorkload', () => {
    it('invokes lookupDiscoveredWorkload without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupDiscoveredWorkloadRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredWorkloadResponse()
      );
      client.innerApiCalls.lookupDiscoveredWorkload =
        stubSimpleCall(expectedResponse);
      const [response] = await client.lookupDiscoveredWorkload(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupDiscoveredWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupDiscoveredWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupDiscoveredWorkload without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupDiscoveredWorkloadRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredWorkloadResponse()
      );
      client.innerApiCalls.lookupDiscoveredWorkload =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.lookupDiscoveredWorkload(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.ILookupDiscoveredWorkloadResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupDiscoveredWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupDiscoveredWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupDiscoveredWorkload with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupDiscoveredWorkloadRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.lookupDiscoveredWorkload = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.lookupDiscoveredWorkload(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.lookupDiscoveredWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupDiscoveredWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupDiscoveredWorkload with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.LookupDiscoveredWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.LookupDiscoveredWorkloadRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.lookupDiscoveredWorkload(request),
        expectedError
      );
    });
  });

  describe('getWorkload', () => {
    it('invokes getWorkload without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.Workload()
      );
      client.innerApiCalls.getWorkload = stubSimpleCall(expectedResponse);
      const [response] = await client.getWorkload(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkload without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.Workload()
      );
      client.innerApiCalls.getWorkload =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getWorkload(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IWorkload | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkload with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getWorkload = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getWorkload(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkload with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getWorkload(request), expectedError);
    });
  });

  describe('getApplication', () => {
    it('invokes getApplication without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetApplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.Application()
      );
      client.innerApiCalls.getApplication = stubSimpleCall(expectedResponse);
      const [response] = await client.getApplication(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApplication without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetApplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apphub.v1.Application()
      );
      client.innerApiCalls.getApplication =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getApplication(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IApplication | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApplication with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetApplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getApplication = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getApplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getApplication with closed client', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.GetApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.GetApplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getApplication(request), expectedError);
    });
  });

  describe('createServiceProjectAttachment', () => {
    it('invokes createServiceProjectAttachment without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateServiceProjectAttachmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServiceProjectAttachment =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createServiceProjectAttachment(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceProjectAttachment without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateServiceProjectAttachmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServiceProjectAttachment =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createServiceProjectAttachment(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apphub.v1.IServiceProjectAttachment,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apphub.v1.IServiceProjectAttachment,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceProjectAttachment with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateServiceProjectAttachmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServiceProjectAttachment = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createServiceProjectAttachment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServiceProjectAttachment with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateServiceProjectAttachmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServiceProjectAttachment = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createServiceProjectAttachment(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateServiceProjectAttachmentProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateServiceProjectAttachmentProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateServiceProjectAttachmentProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateServiceProjectAttachmentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteServiceProjectAttachment', () => {
    it('invokes deleteServiceProjectAttachment without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceProjectAttachment =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteServiceProjectAttachment(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceProjectAttachment without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServiceProjectAttachment =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteServiceProjectAttachment(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceProjectAttachment with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceProjectAttachment = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteServiceProjectAttachment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServiceProjectAttachment with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteServiceProjectAttachmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteServiceProjectAttachmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServiceProjectAttachment = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteServiceProjectAttachment(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteServiceProjectAttachment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServiceProjectAttachment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteServiceProjectAttachmentProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteServiceProjectAttachmentProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteServiceProjectAttachmentProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteServiceProjectAttachmentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createService', () => {
    it('invokes createService without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createService =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createService(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createService without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createService =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createService(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apphub.v1.IService,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apphub.v1.IService,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createService with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createService = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createService with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createService = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createService(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateServiceProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateServiceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateServiceProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateServiceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateService', () => {
    it('invokes updateService without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateServiceRequest()
      );
      request.service ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateServiceRequest',
        ['service', 'name']
      );
      request.service.name = defaultValue1;
      const expectedHeaderRequestParams = `service.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateService =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateService(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateService without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateServiceRequest()
      );
      request.service ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateServiceRequest',
        ['service', 'name']
      );
      request.service.name = defaultValue1;
      const expectedHeaderRequestParams = `service.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateService =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateService(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apphub.v1.IService,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apphub.v1.IService,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateService with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateServiceRequest()
      );
      request.service ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateServiceRequest',
        ['service', 'name']
      );
      request.service.name = defaultValue1;
      const expectedHeaderRequestParams = `service.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateService = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateService with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateServiceRequest()
      );
      request.service ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateServiceRequest',
        ['service', 'name']
      );
      request.service.name = defaultValue1;
      const expectedHeaderRequestParams = `service.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateService = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateService(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateServiceProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateServiceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateServiceProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateServiceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteService', () => {
    it('invokes deleteService without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteService =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteService(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteService without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteService =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteService(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteService with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteService = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteService with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteService = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteService(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteServiceProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteServiceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteServiceProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteServiceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createWorkload', () => {
    it('invokes createWorkload without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateWorkloadRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createWorkload =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createWorkload(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkload without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateWorkloadRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createWorkload =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createWorkload(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apphub.v1.IWorkload,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apphub.v1.IWorkload,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkload with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateWorkloadRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createWorkload = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createWorkload(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkload with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateWorkloadRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createWorkload = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createWorkload(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateWorkloadProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateWorkloadProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateWorkloadProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateWorkloadProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateWorkload', () => {
    it('invokes updateWorkload without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateWorkloadRequest()
      );
      request.workload ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateWorkloadRequest',
        ['workload', 'name']
      );
      request.workload.name = defaultValue1;
      const expectedHeaderRequestParams = `workload.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateWorkload =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateWorkload(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkload without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateWorkloadRequest()
      );
      request.workload ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateWorkloadRequest',
        ['workload', 'name']
      );
      request.workload.name = defaultValue1;
      const expectedHeaderRequestParams = `workload.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateWorkload =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateWorkload(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apphub.v1.IWorkload,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apphub.v1.IWorkload,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkload with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateWorkloadRequest()
      );
      request.workload ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateWorkloadRequest',
        ['workload', 'name']
      );
      request.workload.name = defaultValue1;
      const expectedHeaderRequestParams = `workload.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateWorkload = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateWorkload(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkload with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateWorkloadRequest()
      );
      request.workload ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateWorkloadRequest',
        ['workload', 'name']
      );
      request.workload.name = defaultValue1;
      const expectedHeaderRequestParams = `workload.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateWorkload = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateWorkload(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateWorkloadProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateWorkloadProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateWorkloadProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateWorkloadProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteWorkload', () => {
    it('invokes deleteWorkload without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteWorkload =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteWorkload(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkload without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteWorkload =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteWorkload(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkload with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteWorkload = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteWorkload(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkload with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteWorkloadRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteWorkloadRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteWorkload = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteWorkload(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteWorkload as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkload as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteWorkloadProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteWorkloadProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteWorkloadProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteWorkloadProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createApplication', () => {
    it('invokes createApplication without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateApplicationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createApplication =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createApplication(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApplication without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateApplicationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createApplication =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createApplication(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apphub.v1.IApplication,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apphub.v1.IApplication,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApplication with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateApplicationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createApplication = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createApplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createApplication with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.CreateApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.CreateApplicationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createApplication = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createApplication(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateApplicationProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateApplicationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateApplicationProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateApplicationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateApplication', () => {
    it('invokes updateApplication without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateApplicationRequest()
      );
      request.application ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateApplicationRequest',
        ['application', 'name']
      );
      request.application.name = defaultValue1;
      const expectedHeaderRequestParams = `application.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateApplication =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateApplication(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApplication without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateApplicationRequest()
      );
      request.application ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateApplicationRequest',
        ['application', 'name']
      );
      request.application.name = defaultValue1;
      const expectedHeaderRequestParams = `application.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateApplication =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateApplication(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.apphub.v1.IApplication,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.apphub.v1.IApplication,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApplication with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateApplicationRequest()
      );
      request.application ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateApplicationRequest',
        ['application', 'name']
      );
      request.application.name = defaultValue1;
      const expectedHeaderRequestParams = `application.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateApplication = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateApplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateApplication with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.UpdateApplicationRequest()
      );
      request.application ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.UpdateApplicationRequest',
        ['application', 'name']
      );
      request.application.name = defaultValue1;
      const expectedHeaderRequestParams = `application.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateApplication = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateApplication(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateApplicationProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateApplicationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateApplicationProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateApplicationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteApplication', () => {
    it('invokes deleteApplication without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteApplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteApplication =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteApplication(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApplication without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteApplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteApplication =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteApplication(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.apphub.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.apphub.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApplication with call error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteApplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteApplication = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteApplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteApplication with LRO error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.DeleteApplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.DeleteApplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteApplication = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteApplication(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteApplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteApplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteApplicationProgress without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteApplicationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteApplicationProgress with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteApplicationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listServiceProjectAttachments', () => {
    it('invokes listServiceProjectAttachments without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
      ];
      client.innerApiCalls.listServiceProjectAttachments =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listServiceProjectAttachments(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceProjectAttachments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceProjectAttachments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceProjectAttachments without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
      ];
      client.innerApiCalls.listServiceProjectAttachments =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listServiceProjectAttachments(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.apphub.v1.IServiceProjectAttachment[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServiceProjectAttachments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceProjectAttachments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceProjectAttachments with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listServiceProjectAttachments = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listServiceProjectAttachments(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listServiceProjectAttachments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServiceProjectAttachments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServiceProjectAttachmentsStream without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
      ];
      client.descriptors.page.listServiceProjectAttachments.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listServiceProjectAttachmentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.ServiceProjectAttachment[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.apphub.v1.ServiceProjectAttachment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listServiceProjectAttachments
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listServiceProjectAttachments,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listServiceProjectAttachments
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listServiceProjectAttachmentsStream with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceProjectAttachments.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listServiceProjectAttachmentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.ServiceProjectAttachment[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.apphub.v1.ServiceProjectAttachment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listServiceProjectAttachments
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listServiceProjectAttachments,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listServiceProjectAttachments
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServiceProjectAttachments without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.ServiceProjectAttachment()
        ),
      ];
      client.descriptors.page.listServiceProjectAttachments.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apphub.v1.IServiceProjectAttachment[] =
        [];
      const iterable = client.listServiceProjectAttachmentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceProjectAttachments
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServiceProjectAttachments
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServiceProjectAttachments with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServiceProjectAttachmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServiceProjectAttachments.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listServiceProjectAttachmentsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apphub.v1.IServiceProjectAttachment[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServiceProjectAttachments
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServiceProjectAttachments
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listDiscoveredServices', () => {
    it('invokes listDiscoveredServices without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
      ];
      client.innerApiCalls.listDiscoveredServices =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listDiscoveredServices(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDiscoveredServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDiscoveredServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDiscoveredServices without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
      ];
      client.innerApiCalls.listDiscoveredServices =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDiscoveredServices(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IDiscoveredService[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDiscoveredServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDiscoveredServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDiscoveredServices with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDiscoveredServices = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listDiscoveredServices(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listDiscoveredServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDiscoveredServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDiscoveredServicesStream without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
      ];
      client.descriptors.page.listDiscoveredServices.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDiscoveredServicesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.DiscoveredService[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apphub.v1.DiscoveredService) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listDiscoveredServices
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listDiscoveredServices, request)
      );
      assert(
        (
          client.descriptors.page.listDiscoveredServices
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDiscoveredServicesStream with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDiscoveredServices.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDiscoveredServicesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.DiscoveredService[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apphub.v1.DiscoveredService) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listDiscoveredServices
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listDiscoveredServices, request)
      );
      assert(
        (
          client.descriptors.page.listDiscoveredServices
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDiscoveredServices without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredService()
        ),
      ];
      client.descriptors.page.listDiscoveredServices.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apphub.v1.IDiscoveredService[] = [];
      const iterable = client.listDiscoveredServicesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDiscoveredServices
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDiscoveredServices
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDiscoveredServices with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDiscoveredServices.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDiscoveredServicesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apphub.v1.IDiscoveredService[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDiscoveredServices
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDiscoveredServices
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listServices', () => {
    it('invokes listServices without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
      ];
      client.innerApiCalls.listServices = stubSimpleCall(expectedResponse);
      const [response] = await client.listServices(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServices without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
      ];
      client.innerApiCalls.listServices =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listServices(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IService[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServices with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listServices = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listServices(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServicesStream without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
      ];
      client.descriptors.page.listServices.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listServicesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.Service[] = [];
        stream.on('data', (response: protos.google.cloud.apphub.v1.Service) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listServices.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listServices, request)
      );
      assert(
        (client.descriptors.page.listServices.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listServicesStream with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServices.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listServicesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.Service[] = [];
        stream.on('data', (response: protos.google.cloud.apphub.v1.Service) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listServices.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listServices, request)
      );
      assert(
        (client.descriptors.page.listServices.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listServices without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Service()),
      ];
      client.descriptors.page.listServices.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apphub.v1.IService[] = [];
      const iterable = client.listServicesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServices.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listServices.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listServices with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServices.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listServicesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apphub.v1.IService[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServices.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listServices.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listDiscoveredWorkloads', () => {
    it('invokes listDiscoveredWorkloads without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
      ];
      client.innerApiCalls.listDiscoveredWorkloads =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listDiscoveredWorkloads(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDiscoveredWorkloads as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDiscoveredWorkloads as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDiscoveredWorkloads without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
      ];
      client.innerApiCalls.listDiscoveredWorkloads =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDiscoveredWorkloads(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IDiscoveredWorkload[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDiscoveredWorkloads as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDiscoveredWorkloads as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDiscoveredWorkloads with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDiscoveredWorkloads = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listDiscoveredWorkloads(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listDiscoveredWorkloads as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDiscoveredWorkloads as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDiscoveredWorkloadsStream without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
      ];
      client.descriptors.page.listDiscoveredWorkloads.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDiscoveredWorkloadsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.DiscoveredWorkload[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.apphub.v1.DiscoveredWorkload) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listDiscoveredWorkloads
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listDiscoveredWorkloads, request)
      );
      assert(
        (
          client.descriptors.page.listDiscoveredWorkloads
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDiscoveredWorkloadsStream with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDiscoveredWorkloads.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDiscoveredWorkloadsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.DiscoveredWorkload[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.apphub.v1.DiscoveredWorkload) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listDiscoveredWorkloads
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listDiscoveredWorkloads, request)
      );
      assert(
        (
          client.descriptors.page.listDiscoveredWorkloads
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDiscoveredWorkloads without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
        generateSampleMessage(
          new protos.google.cloud.apphub.v1.DiscoveredWorkload()
        ),
      ];
      client.descriptors.page.listDiscoveredWorkloads.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apphub.v1.IDiscoveredWorkload[] = [];
      const iterable = client.listDiscoveredWorkloadsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDiscoveredWorkloads
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDiscoveredWorkloads
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDiscoveredWorkloads with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListDiscoveredWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDiscoveredWorkloads.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDiscoveredWorkloadsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apphub.v1.IDiscoveredWorkload[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDiscoveredWorkloads
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDiscoveredWorkloads
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listWorkloads', () => {
    it('invokes listWorkloads without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
      ];
      client.innerApiCalls.listWorkloads = stubSimpleCall(expectedResponse);
      const [response] = await client.listWorkloads(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listWorkloads as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkloads as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkloads without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
      ];
      client.innerApiCalls.listWorkloads =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listWorkloads(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IWorkload[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listWorkloads as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkloads as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkloads with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listWorkloads = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listWorkloads(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listWorkloads as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkloads as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkloadsStream without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
      ];
      client.descriptors.page.listWorkloads.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listWorkloadsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.Workload[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apphub.v1.Workload) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listWorkloads.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listWorkloads, request)
      );
      assert(
        (client.descriptors.page.listWorkloads.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listWorkloadsStream with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listWorkloads.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listWorkloadsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.Workload[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apphub.v1.Workload) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listWorkloads.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listWorkloads, request)
      );
      assert(
        (client.descriptors.page.listWorkloads.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listWorkloads without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Workload()),
      ];
      client.descriptors.page.listWorkloads.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apphub.v1.IWorkload[] = [];
      const iterable = client.listWorkloadsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listWorkloads.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listWorkloads.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listWorkloads with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListWorkloadsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListWorkloadsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listWorkloads.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listWorkloadsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apphub.v1.IWorkload[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listWorkloads.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listWorkloads.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listApplications', () => {
    it('invokes listApplications without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListApplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListApplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
      ];
      client.innerApiCalls.listApplications = stubSimpleCall(expectedResponse);
      const [response] = await client.listApplications(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listApplications as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApplications as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApplications without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListApplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListApplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
      ];
      client.innerApiCalls.listApplications =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listApplications(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apphub.v1.IApplication[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listApplications as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApplications as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApplications with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListApplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListApplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listApplications = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listApplications(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listApplications as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listApplications as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listApplicationsStream without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListApplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListApplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
      ];
      client.descriptors.page.listApplications.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listApplicationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.Application[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apphub.v1.Application) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listApplications.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listApplications, request)
      );
      assert(
        (client.descriptors.page.listApplications.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listApplicationsStream with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListApplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListApplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listApplications.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listApplicationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apphub.v1.Application[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.apphub.v1.Application) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listApplications.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listApplications, request)
      );
      assert(
        (client.descriptors.page.listApplications.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listApplications without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListApplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListApplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
        generateSampleMessage(new protos.google.cloud.apphub.v1.Application()),
      ];
      client.descriptors.page.listApplications.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apphub.v1.IApplication[] = [];
      const iterable = client.listApplicationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listApplications.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listApplications.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listApplications with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apphub.v1.ListApplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apphub.v1.ListApplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listApplications.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listApplicationsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apphub.v1.IApplication[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listApplications.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listApplications.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('application', () => {
      const fakePath = '/rendered/path/application';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        application: 'applicationValue',
      };
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.applicationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.applicationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('applicationPath', () => {
        const result = client.applicationPath(
          'projectValue',
          'locationValue',
          'applicationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.applicationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromApplicationName', () => {
        const result = client.matchProjectFromApplicationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.applicationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromApplicationName', () => {
        const result = client.matchLocationFromApplicationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.applicationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApplicationFromApplicationName', () => {
        const result = client.matchApplicationFromApplicationName(fakePath);
        assert.strictEqual(result, 'applicationValue');
        assert(
          (client.pathTemplates.applicationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('discoveredService', () => {
      const fakePath = '/rendered/path/discoveredService';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        discovered_service: 'discoveredServiceValue',
      };
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.discoveredServicePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.discoveredServicePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('discoveredServicePath', () => {
        const result = client.discoveredServicePath(
          'projectValue',
          'locationValue',
          'discoveredServiceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.discoveredServicePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDiscoveredServiceName', () => {
        const result = client.matchProjectFromDiscoveredServiceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.discoveredServicePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDiscoveredServiceName', () => {
        const result = client.matchLocationFromDiscoveredServiceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.discoveredServicePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDiscoveredServiceFromDiscoveredServiceName', () => {
        const result =
          client.matchDiscoveredServiceFromDiscoveredServiceName(fakePath);
        assert.strictEqual(result, 'discoveredServiceValue');
        assert(
          (
            client.pathTemplates.discoveredServicePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('discoveredWorkload', () => {
      const fakePath = '/rendered/path/discoveredWorkload';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        discovered_workload: 'discoveredWorkloadValue',
      };
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.discoveredWorkloadPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.discoveredWorkloadPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('discoveredWorkloadPath', () => {
        const result = client.discoveredWorkloadPath(
          'projectValue',
          'locationValue',
          'discoveredWorkloadValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.discoveredWorkloadPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDiscoveredWorkloadName', () => {
        const result = client.matchProjectFromDiscoveredWorkloadName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.discoveredWorkloadPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDiscoveredWorkloadName', () => {
        const result = client.matchLocationFromDiscoveredWorkloadName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.discoveredWorkloadPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDiscoveredWorkloadFromDiscoveredWorkloadName', () => {
        const result =
          client.matchDiscoveredWorkloadFromDiscoveredWorkloadName(fakePath);
        assert.strictEqual(result, 'discoveredWorkloadValue');
        assert(
          (
            client.pathTemplates.discoveredWorkloadPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('service', () => {
      const fakePath = '/rendered/path/service';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        application: 'applicationValue',
        service: 'serviceValue',
      };
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.servicePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.servicePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('servicePath', () => {
        const result = client.servicePath(
          'projectValue',
          'locationValue',
          'applicationValue',
          'serviceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.servicePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServiceName', () => {
        const result = client.matchProjectFromServiceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServiceName', () => {
        const result = client.matchLocationFromServiceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApplicationFromServiceName', () => {
        const result = client.matchApplicationFromServiceName(fakePath);
        assert.strictEqual(result, 'applicationValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceFromServiceName', () => {
        const result = client.matchServiceFromServiceName(fakePath);
        assert.strictEqual(result, 'serviceValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('serviceProjectAttachment', () => {
      const fakePath = '/rendered/path/serviceProjectAttachment';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service_project_attachment: 'serviceProjectAttachmentValue',
      };
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.serviceProjectAttachmentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.serviceProjectAttachmentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('serviceProjectAttachmentPath', () => {
        const result = client.serviceProjectAttachmentPath(
          'projectValue',
          'locationValue',
          'serviceProjectAttachmentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.serviceProjectAttachmentPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServiceProjectAttachmentName', () => {
        const result =
          client.matchProjectFromServiceProjectAttachmentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.serviceProjectAttachmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServiceProjectAttachmentName', () => {
        const result =
          client.matchLocationFromServiceProjectAttachmentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.serviceProjectAttachmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceProjectAttachmentFromServiceProjectAttachmentName', () => {
        const result =
          client.matchServiceProjectAttachmentFromServiceProjectAttachmentName(
            fakePath
          );
        assert.strictEqual(result, 'serviceProjectAttachmentValue');
        assert(
          (
            client.pathTemplates.serviceProjectAttachmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('workload', () => {
      const fakePath = '/rendered/path/workload';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        application: 'applicationValue',
        workload: 'workloadValue',
      };
      const client = new apphubModule.v1.AppHubClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.workloadPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.workloadPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('workloadPath', () => {
        const result = client.workloadPath(
          'projectValue',
          'locationValue',
          'applicationValue',
          'workloadValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.workloadPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromWorkloadName', () => {
        const result = client.matchProjectFromWorkloadName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.workloadPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromWorkloadName', () => {
        const result = client.matchLocationFromWorkloadName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.workloadPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApplicationFromWorkloadName', () => {
        const result = client.matchApplicationFromWorkloadName(fakePath);
        assert.strictEqual(result, 'applicationValue');
        assert(
          (client.pathTemplates.workloadPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkloadFromWorkloadName', () => {
        const result = client.matchWorkloadFromWorkloadName(fakePath);
        assert.strictEqual(result, 'workloadValue');
        assert(
          (client.pathTemplates.workloadPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
