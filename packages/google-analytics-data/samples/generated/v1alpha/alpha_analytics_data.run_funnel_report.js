// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main() {
  // [START analyticsdata_v1alpha_generated_AlphaAnalyticsData_RunFunnelReport_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  A Google Analytics GA4 property identifier whose events are tracked.
   *  Specified in the URL path and not the body. To learn more, see where to
   *  find your Property
   *  ID (https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   *  Within a batch request, this property should either be unspecified or
   *  consistent with the batch-level property.
   *  Example: properties/1234
   */
  // const property = 'abc123'
  /**
   *  Date ranges of data to read. If multiple date ranges are requested, each
   *  response row will contain a zero based date range index. If two date
   *  ranges overlap, the event data for the overlapping days is included in the
   *  response rows for both date ranges.
   */
  // const dateRanges = 1234
  /**
   *  The configuration of this request's funnel. This funnel configuration is
   *  required.
   */
  // const funnel = {}
  /**
   *  If specified, this breakdown adds a dimension to the funnel table sub
   *  report response. This breakdown dimension expands each funnel step to the
   *  unique values of the breakdown dimension. For example, a breakdown by the
   *  `deviceCategory` dimension will create rows for `mobile`, `tablet`,
   *  `desktop`, and the total.
   */
  // const funnelBreakdown = {}
  /**
   *  If specified, next action adds a dimension to the funnel visualization sub
   *  report response. This next action dimension expands each funnel step to the
   *  unique values of the next action. For example a next action of the
   *  `eventName` dimension will create rows for several events (i.e.
   *  `session_start` & `click`) and the total.
   *  Next action only supports `eventName` and most Page / Screen dimensions
   *  like `pageTitle` and `pagePath`.
   */
  // const funnelNextAction = {}
  /**
   *  The funnel visualization type controls the dimensions present in the funnel
   *  visualization sub report response. If not specified, `STANDARD_FUNNEL` is
   *  used.
   */
  // const funnelVisualizationType = {}
  /**
   *  The configurations of segments. Segments are subsets of a property's data.
   *  In a funnel report with segments, the funnel is evaluated in each segment.
   *  Each segment specified in this request
   *  produces a separate row in the response; in the response, each segment
   *  identified by its name.
   *  The segments parameter is optional. Requests are limited to 4 segments.
   */
  // const segments = 1234
  /**
   *  The number of rows to return. If unspecified, 10,000 rows are returned. The
   *  API returns a maximum of 100,000 rows per request, no matter how many you
   *  ask for. `limit` must be positive.
   *  The API can also return fewer rows than the requested `limit`, if there
   *  aren't as many dimension values as the `limit`.
   */
  // const limit = 1234
  /**
   *  Dimension filters allow you to ask for only specific dimension values in
   *  the report. To learn more, see Creating a Report: Dimension
   *  Filters (https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
   *  for examples. Metrics cannot be used in this filter.
   */
  // const dimensionFilter = {}
  /**
   *  Toggles whether to return the current state of this Analytics Property's
   *  quota. Quota is returned in PropertyQuota (#PropertyQuota).
   */
  // const returnPropertyQuota = true

  // Imports the Data library
  const {AlphaAnalyticsDataClient} = require('@google-cloud/data').v1alpha;

  // Instantiates a client
  const dataClient = new AlphaAnalyticsDataClient();

  async function callRunFunnelReport() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await dataClient.runFunnelReport(request);
    console.log(response);
  }

  callRunFunnelReport();
  // [END analyticsdata_v1alpha_generated_AlphaAnalyticsData_RunFunnelReport_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
