// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as backupforgkeModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.BackupForGKEClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = backupforgkeModule.v1.BackupForGKEClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = backupforgkeModule.v1.BackupForGKEClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = backupforgkeModule.v1.BackupForGKEClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.backupForGKEStub, undefined);
      await client.initialize();
      assert(client.backupForGKEStub);
    });

    it('has close method for the initialized client', done => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.backupForGKEStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.backupForGKEStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getBackupPlan', () => {
    it('invokes getBackupPlan without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetBackupPlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.BackupPlan()
      );
      client.innerApiCalls.getBackupPlan = stubSimpleCall(expectedResponse);
      const [response] = await client.getBackupPlan(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupPlan without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetBackupPlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.BackupPlan()
      );
      client.innerApiCalls.getBackupPlan =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getBackupPlan(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IBackupPlan | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupPlan with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetBackupPlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getBackupPlan = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getBackupPlan(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupPlan with closed client', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetBackupPlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getBackupPlan(request), expectedError);
    });
  });

  describe('getBackup', () => {
    it('invokes getBackup without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.Backup()
      );
      client.innerApiCalls.getBackup = stubSimpleCall(expectedResponse);
      const [response] = await client.getBackup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.Backup()
      );
      client.innerApiCalls.getBackup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getBackup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IBackup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getBackup = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup with closed client', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getBackup(request), expectedError);
    });
  });

  describe('getVolumeBackup', () => {
    it('invokes getVolumeBackup without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetVolumeBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetVolumeBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.VolumeBackup()
      );
      client.innerApiCalls.getVolumeBackup = stubSimpleCall(expectedResponse);
      const [response] = await client.getVolumeBackup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVolumeBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolumeBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolumeBackup without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetVolumeBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetVolumeBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.VolumeBackup()
      );
      client.innerApiCalls.getVolumeBackup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getVolumeBackup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IVolumeBackup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVolumeBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolumeBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolumeBackup with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetVolumeBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetVolumeBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getVolumeBackup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getVolumeBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getVolumeBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolumeBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolumeBackup with closed client', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetVolumeBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetVolumeBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getVolumeBackup(request), expectedError);
    });
  });

  describe('getRestorePlan', () => {
    it('invokes getRestorePlan without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetRestorePlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.RestorePlan()
      );
      client.innerApiCalls.getRestorePlan = stubSimpleCall(expectedResponse);
      const [response] = await client.getRestorePlan(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRestorePlan without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetRestorePlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.RestorePlan()
      );
      client.innerApiCalls.getRestorePlan =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getRestorePlan(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IRestorePlan | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRestorePlan with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetRestorePlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getRestorePlan = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getRestorePlan(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRestorePlan with closed client', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetRestorePlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getRestorePlan(request), expectedError);
    });
  });

  describe('getRestore', () => {
    it('invokes getRestore without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.Restore()
      );
      client.innerApiCalls.getRestore = stubSimpleCall(expectedResponse);
      const [response] = await client.getRestore(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRestore without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.Restore()
      );
      client.innerApiCalls.getRestore =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getRestore(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IRestore | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRestore with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getRestore = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getRestore(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRestore with closed client', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getRestore(request), expectedError);
    });
  });

  describe('getVolumeRestore', () => {
    it('invokes getVolumeRestore without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetVolumeRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetVolumeRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.VolumeRestore()
      );
      client.innerApiCalls.getVolumeRestore = stubSimpleCall(expectedResponse);
      const [response] = await client.getVolumeRestore(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVolumeRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolumeRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolumeRestore without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetVolumeRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetVolumeRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.VolumeRestore()
      );
      client.innerApiCalls.getVolumeRestore =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getVolumeRestore(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IVolumeRestore | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVolumeRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolumeRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolumeRestore with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetVolumeRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetVolumeRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getVolumeRestore = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getVolumeRestore(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getVolumeRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolumeRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolumeRestore with closed client', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.GetVolumeRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.GetVolumeRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getVolumeRestore(request), expectedError);
    });
  });

  describe('createBackupPlan', () => {
    it('invokes createBackupPlan without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateBackupPlanRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackupPlan =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createBackupPlan(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupPlan without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateBackupPlanRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackupPlan =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createBackupPlan(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkebackup.v1.IBackupPlan,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupPlan with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateBackupPlanRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackupPlan = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createBackupPlan(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupPlan with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateBackupPlanRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackupPlan = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createBackupPlan(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateBackupPlanProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateBackupPlanProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateBackupPlanProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateBackupPlanProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateBackupPlan', () => {
    it('invokes updateBackupPlan without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateBackupPlanRequest()
      );
      request.backupPlan ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateBackupPlanRequest',
        ['backupPlan', 'name']
      );
      request.backupPlan.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_plan.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackupPlan =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateBackupPlan(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupPlan without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateBackupPlanRequest()
      );
      request.backupPlan ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateBackupPlanRequest',
        ['backupPlan', 'name']
      );
      request.backupPlan.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_plan.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackupPlan =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateBackupPlan(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkebackup.v1.IBackupPlan,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupPlan with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateBackupPlanRequest()
      );
      request.backupPlan ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateBackupPlanRequest',
        ['backupPlan', 'name']
      );
      request.backupPlan.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_plan.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackupPlan = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateBackupPlan(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupPlan with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateBackupPlanRequest()
      );
      request.backupPlan ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateBackupPlanRequest',
        ['backupPlan', 'name']
      );
      request.backupPlan.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_plan.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackupPlan = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateBackupPlan(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateBackupPlanProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateBackupPlanProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateBackupPlanProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateBackupPlanProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteBackupPlan', () => {
    it('invokes deleteBackupPlan without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteBackupPlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackupPlan =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteBackupPlan(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupPlan without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteBackupPlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackupPlan =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteBackupPlan(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupPlan with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteBackupPlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackupPlan = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteBackupPlan(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupPlan with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteBackupPlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteBackupPlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackupPlan = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteBackupPlan(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackupPlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupPlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteBackupPlanProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteBackupPlanProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteBackupPlanProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteBackupPlanProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createBackup', () => {
    it('invokes createBackup without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkebackup.v1.IBackup,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateBackupProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateBackupProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateBackup', () => {
    it('invokes updateBackup without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkebackup.v1.IBackup,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateBackupProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateBackupProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteBackup', () => {
    it('invokes deleteBackup without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteBackupProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteBackupProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createRestorePlan', () => {
    it('invokes createRestorePlan without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateRestorePlanRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createRestorePlan =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createRestorePlan(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRestorePlan without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateRestorePlanRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createRestorePlan =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createRestorePlan(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkebackup.v1.IRestorePlan,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRestorePlan with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateRestorePlanRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createRestorePlan = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createRestorePlan(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRestorePlan with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateRestorePlanRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createRestorePlan = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createRestorePlan(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateRestorePlanProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateRestorePlanProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateRestorePlanProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateRestorePlanProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateRestorePlan', () => {
    it('invokes updateRestorePlan without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateRestorePlanRequest()
      );
      request.restorePlan ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateRestorePlanRequest',
        ['restorePlan', 'name']
      );
      request.restorePlan.name = defaultValue1;
      const expectedHeaderRequestParams = `restore_plan.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateRestorePlan =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateRestorePlan(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateRestorePlan without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateRestorePlanRequest()
      );
      request.restorePlan ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateRestorePlanRequest',
        ['restorePlan', 'name']
      );
      request.restorePlan.name = defaultValue1;
      const expectedHeaderRequestParams = `restore_plan.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateRestorePlan =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateRestorePlan(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkebackup.v1.IRestorePlan,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateRestorePlan with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateRestorePlanRequest()
      );
      request.restorePlan ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateRestorePlanRequest',
        ['restorePlan', 'name']
      );
      request.restorePlan.name = defaultValue1;
      const expectedHeaderRequestParams = `restore_plan.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateRestorePlan = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateRestorePlan(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateRestorePlan with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateRestorePlanRequest()
      );
      request.restorePlan ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateRestorePlanRequest',
        ['restorePlan', 'name']
      );
      request.restorePlan.name = defaultValue1;
      const expectedHeaderRequestParams = `restore_plan.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateRestorePlan = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateRestorePlan(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateRestorePlanProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateRestorePlanProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateRestorePlanProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateRestorePlanProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteRestorePlan', () => {
    it('invokes deleteRestorePlan without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteRestorePlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteRestorePlan =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteRestorePlan(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRestorePlan without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteRestorePlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteRestorePlan =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteRestorePlan(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRestorePlan with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteRestorePlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteRestorePlan = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteRestorePlan(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRestorePlan with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteRestorePlanRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteRestorePlanRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteRestorePlan = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteRestorePlan(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteRestorePlan as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRestorePlan as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteRestorePlanProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteRestorePlanProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteRestorePlanProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteRestorePlanProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createRestore', () => {
    it('invokes createRestore without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateRestoreRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createRestore =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createRestore(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRestore without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateRestoreRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createRestore =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createRestore(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkebackup.v1.IRestore,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRestore with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateRestoreRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createRestore = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createRestore(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createRestore with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.CreateRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.CreateRestoreRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createRestore = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createRestore(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateRestoreProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateRestoreProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateRestoreProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateRestoreProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateRestore', () => {
    it('invokes updateRestore without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateRestoreRequest()
      );
      request.restore ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateRestoreRequest',
        ['restore', 'name']
      );
      request.restore.name = defaultValue1;
      const expectedHeaderRequestParams = `restore.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateRestore =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateRestore(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateRestore without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateRestoreRequest()
      );
      request.restore ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateRestoreRequest',
        ['restore', 'name']
      );
      request.restore.name = defaultValue1;
      const expectedHeaderRequestParams = `restore.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateRestore =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateRestore(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkebackup.v1.IRestore,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateRestore with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateRestoreRequest()
      );
      request.restore ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateRestoreRequest',
        ['restore', 'name']
      );
      request.restore.name = defaultValue1;
      const expectedHeaderRequestParams = `restore.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateRestore = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateRestore(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateRestore with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.UpdateRestoreRequest()
      );
      request.restore ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.UpdateRestoreRequest',
        ['restore', 'name']
      );
      request.restore.name = defaultValue1;
      const expectedHeaderRequestParams = `restore.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateRestore = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateRestore(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateRestoreProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateRestoreProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateRestoreProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateRestoreProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteRestore', () => {
    it('invokes deleteRestore without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteRestore =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteRestore(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRestore without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteRestore =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteRestore(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkebackup.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRestore with call error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteRestore = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteRestore(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteRestore with LRO error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.DeleteRestoreRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.DeleteRestoreRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteRestore = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteRestore(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteRestore as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteRestore as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteRestoreProgress without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteRestoreProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteRestoreProgress with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteRestoreProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listBackupPlans', () => {
    it('invokes listBackupPlans without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupPlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupPlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
      ];
      client.innerApiCalls.listBackupPlans = stubSimpleCall(expectedResponse);
      const [response] = await client.listBackupPlans(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackupPlans as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupPlans as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupPlans without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupPlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupPlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
      ];
      client.innerApiCalls.listBackupPlans =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listBackupPlans(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IBackupPlan[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackupPlans as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupPlans as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupPlans with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupPlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupPlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listBackupPlans = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listBackupPlans(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listBackupPlans as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupPlans as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupPlansStream without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupPlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupPlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
      ];
      client.descriptors.page.listBackupPlans.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listBackupPlansStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.BackupPlan[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.BackupPlan) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listBackupPlans.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackupPlans, request)
      );
      assert(
        (client.descriptors.page.listBackupPlans.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listBackupPlansStream with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupPlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupPlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackupPlans.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listBackupPlansStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.BackupPlan[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.BackupPlan) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listBackupPlans.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackupPlans, request)
      );
      assert(
        (client.descriptors.page.listBackupPlans.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackupPlans without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupPlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupPlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.BackupPlan()
        ),
      ];
      client.descriptors.page.listBackupPlans.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkebackup.v1.IBackupPlan[] = [];
      const iterable = client.listBackupPlansAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listBackupPlans.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackupPlans.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackupPlans with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupPlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupPlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackupPlans.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listBackupPlansAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkebackup.v1.IBackupPlan[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listBackupPlans.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackupPlans.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listBackups', () => {
    it('invokes listBackups without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
      ];
      client.innerApiCalls.listBackups = stubSimpleCall(expectedResponse);
      const [response] = await client.listBackups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackups without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
      ];
      client.innerApiCalls.listBackups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listBackups(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IBackup[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackups with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listBackups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listBackups(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupsStream without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
      ];
      client.descriptors.page.listBackups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.Backup[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.Backup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackups, request)
      );
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listBackupsStream with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackups.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.Backup[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.Backup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackups, request)
      );
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackups without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Backup()),
      ];
      client.descriptors.page.listBackups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkebackup.v1.IBackup[] = [];
      const iterable = client.listBackupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackups with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackups.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listBackupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkebackup.v1.IBackup[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listVolumeBackups', () => {
    it('invokes listVolumeBackups without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
      ];
      client.innerApiCalls.listVolumeBackups = stubSimpleCall(expectedResponse);
      const [response] = await client.listVolumeBackups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVolumeBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumeBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumeBackups without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
      ];
      client.innerApiCalls.listVolumeBackups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listVolumeBackups(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IVolumeBackup[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVolumeBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumeBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumeBackups with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listVolumeBackups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listVolumeBackups(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listVolumeBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumeBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumeBackupsStream without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
      ];
      client.descriptors.page.listVolumeBackups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listVolumeBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.VolumeBackup[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.VolumeBackup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listVolumeBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVolumeBackups, request)
      );
      assert(
        (client.descriptors.page.listVolumeBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listVolumeBackupsStream with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVolumeBackups.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listVolumeBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.VolumeBackup[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.VolumeBackup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listVolumeBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVolumeBackups, request)
      );
      assert(
        (client.descriptors.page.listVolumeBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVolumeBackups without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeBackup()
        ),
      ];
      client.descriptors.page.listVolumeBackups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkebackup.v1.IVolumeBackup[] = [];
      const iterable = client.listVolumeBackupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVolumeBackups.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listVolumeBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVolumeBackups with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVolumeBackups.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listVolumeBackupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkebackup.v1.IVolumeBackup[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVolumeBackups.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listVolumeBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listRestorePlans', () => {
    it('invokes listRestorePlans without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestorePlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestorePlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
      ];
      client.innerApiCalls.listRestorePlans = stubSimpleCall(expectedResponse);
      const [response] = await client.listRestorePlans(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRestorePlans as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRestorePlans as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRestorePlans without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestorePlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestorePlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
      ];
      client.innerApiCalls.listRestorePlans =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRestorePlans(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IRestorePlan[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRestorePlans as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRestorePlans as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRestorePlans with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestorePlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestorePlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listRestorePlans = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listRestorePlans(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listRestorePlans as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRestorePlans as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRestorePlansStream without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestorePlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestorePlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
      ];
      client.descriptors.page.listRestorePlans.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRestorePlansStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.RestorePlan[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.RestorePlan) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listRestorePlans.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRestorePlans, request)
      );
      assert(
        (client.descriptors.page.listRestorePlans.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listRestorePlansStream with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestorePlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestorePlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRestorePlans.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listRestorePlansStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.RestorePlan[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.RestorePlan) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listRestorePlans.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRestorePlans, request)
      );
      assert(
        (client.descriptors.page.listRestorePlans.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRestorePlans without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestorePlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestorePlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.RestorePlan()
        ),
      ];
      client.descriptors.page.listRestorePlans.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkebackup.v1.IRestorePlan[] = [];
      const iterable = client.listRestorePlansAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRestorePlans.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listRestorePlans.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRestorePlans with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestorePlansRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestorePlansRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRestorePlans.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRestorePlansAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkebackup.v1.IRestorePlan[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRestorePlans.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listRestorePlans.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listRestores', () => {
    it('invokes listRestores without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
      ];
      client.innerApiCalls.listRestores = stubSimpleCall(expectedResponse);
      const [response] = await client.listRestores(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRestores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRestores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRestores without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
      ];
      client.innerApiCalls.listRestores =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRestores(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IRestore[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRestores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRestores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRestores with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listRestores = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listRestores(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listRestores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRestores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRestoresStream without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
      ];
      client.descriptors.page.listRestores.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRestoresStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.Restore[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.Restore) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listRestores.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRestores, request)
      );
      assert(
        (client.descriptors.page.listRestores.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listRestoresStream with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRestores.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listRestoresStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.Restore[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.Restore) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listRestores.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRestores, request)
      );
      assert(
        (client.descriptors.page.listRestores.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRestores without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
        generateSampleMessage(new protos.google.cloud.gkebackup.v1.Restore()),
      ];
      client.descriptors.page.listRestores.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkebackup.v1.IRestore[] = [];
      const iterable = client.listRestoresAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRestores.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listRestores.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRestores with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRestores.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRestoresAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkebackup.v1.IRestore[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRestores.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listRestores.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listVolumeRestores', () => {
    it('invokes listVolumeRestores without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
      ];
      client.innerApiCalls.listVolumeRestores =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listVolumeRestores(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVolumeRestores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumeRestores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumeRestores without error using callback', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
      ];
      client.innerApiCalls.listVolumeRestores =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listVolumeRestores(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkebackup.v1.IVolumeRestore[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVolumeRestores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumeRestores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumeRestores with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listVolumeRestores = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listVolumeRestores(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listVolumeRestores as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumeRestores as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumeRestoresStream without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
      ];
      client.descriptors.page.listVolumeRestores.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listVolumeRestoresStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.VolumeRestore[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.VolumeRestore) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listVolumeRestores.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVolumeRestores, request)
      );
      assert(
        (client.descriptors.page.listVolumeRestores.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listVolumeRestoresStream with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVolumeRestores.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listVolumeRestoresStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkebackup.v1.VolumeRestore[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkebackup.v1.VolumeRestore) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listVolumeRestores.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVolumeRestores, request)
      );
      assert(
        (client.descriptors.page.listVolumeRestores.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVolumeRestores without error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkebackup.v1.VolumeRestore()
        ),
      ];
      client.descriptors.page.listVolumeRestores.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkebackup.v1.IVolumeRestore[] = [];
      const iterable = client.listVolumeRestoresAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVolumeRestores.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listVolumeRestores.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVolumeRestores with error', async () => {
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkebackup.v1.ListVolumeRestoresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkebackup.v1.ListVolumeRestoresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVolumeRestores.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listVolumeRestoresAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkebackup.v1.IVolumeRestore[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVolumeRestores.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listVolumeRestores.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('backup', () => {
      const fakePath = '/rendered/path/backup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        backup_plan: 'backupPlanValue',
        backup: 'backupValue',
      };
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.backupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.backupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('backupPath', () => {
        const result = client.backupPath(
          'projectValue',
          'locationValue',
          'backupPlanValue',
          'backupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.backupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBackupName', () => {
        const result = client.matchProjectFromBackupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBackupName', () => {
        const result = client.matchLocationFromBackupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupPlanFromBackupName', () => {
        const result = client.matchBackupPlanFromBackupName(fakePath);
        assert.strictEqual(result, 'backupPlanValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupFromBackupName', () => {
        const result = client.matchBackupFromBackupName(fakePath);
        assert.strictEqual(result, 'backupValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('backupPlan', () => {
      const fakePath = '/rendered/path/backupPlan';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        backup_plan: 'backupPlanValue',
      };
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.backupPlanPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.backupPlanPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('backupPlanPath', () => {
        const result = client.backupPlanPath(
          'projectValue',
          'locationValue',
          'backupPlanValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.backupPlanPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBackupPlanName', () => {
        const result = client.matchProjectFromBackupPlanName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.backupPlanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBackupPlanName', () => {
        const result = client.matchLocationFromBackupPlanName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.backupPlanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupPlanFromBackupPlanName', () => {
        const result = client.matchBackupPlanFromBackupPlanName(fakePath);
        assert.strictEqual(result, 'backupPlanValue');
        assert(
          (client.pathTemplates.backupPlanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('restore', () => {
      const fakePath = '/rendered/path/restore';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        restore_plan: 'restorePlanValue',
        restore: 'restoreValue',
      };
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.restorePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.restorePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('restorePath', () => {
        const result = client.restorePath(
          'projectValue',
          'locationValue',
          'restorePlanValue',
          'restoreValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.restorePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRestoreName', () => {
        const result = client.matchProjectFromRestoreName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.restorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromRestoreName', () => {
        const result = client.matchLocationFromRestoreName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.restorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRestorePlanFromRestoreName', () => {
        const result = client.matchRestorePlanFromRestoreName(fakePath);
        assert.strictEqual(result, 'restorePlanValue');
        assert(
          (client.pathTemplates.restorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRestoreFromRestoreName', () => {
        const result = client.matchRestoreFromRestoreName(fakePath);
        assert.strictEqual(result, 'restoreValue');
        assert(
          (client.pathTemplates.restorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('restorePlan', () => {
      const fakePath = '/rendered/path/restorePlan';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        restore_plan: 'restorePlanValue',
      };
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.restorePlanPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.restorePlanPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('restorePlanPath', () => {
        const result = client.restorePlanPath(
          'projectValue',
          'locationValue',
          'restorePlanValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.restorePlanPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRestorePlanName', () => {
        const result = client.matchProjectFromRestorePlanName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.restorePlanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromRestorePlanName', () => {
        const result = client.matchLocationFromRestorePlanName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.restorePlanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRestorePlanFromRestorePlanName', () => {
        const result = client.matchRestorePlanFromRestorePlanName(fakePath);
        assert.strictEqual(result, 'restorePlanValue');
        assert(
          (client.pathTemplates.restorePlanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('volumeBackup', () => {
      const fakePath = '/rendered/path/volumeBackup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        backup_plan: 'backupPlanValue',
        backup: 'backupValue',
        volume_backup: 'volumeBackupValue',
      };
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.volumeBackupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.volumeBackupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('volumeBackupPath', () => {
        const result = client.volumeBackupPath(
          'projectValue',
          'locationValue',
          'backupPlanValue',
          'backupValue',
          'volumeBackupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.volumeBackupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromVolumeBackupName', () => {
        const result = client.matchProjectFromVolumeBackupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.volumeBackupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromVolumeBackupName', () => {
        const result = client.matchLocationFromVolumeBackupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.volumeBackupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupPlanFromVolumeBackupName', () => {
        const result = client.matchBackupPlanFromVolumeBackupName(fakePath);
        assert.strictEqual(result, 'backupPlanValue');
        assert(
          (client.pathTemplates.volumeBackupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupFromVolumeBackupName', () => {
        const result = client.matchBackupFromVolumeBackupName(fakePath);
        assert.strictEqual(result, 'backupValue');
        assert(
          (client.pathTemplates.volumeBackupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVolumeBackupFromVolumeBackupName', () => {
        const result = client.matchVolumeBackupFromVolumeBackupName(fakePath);
        assert.strictEqual(result, 'volumeBackupValue');
        assert(
          (client.pathTemplates.volumeBackupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('volumeRestore', () => {
      const fakePath = '/rendered/path/volumeRestore';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        restore_plan: 'restorePlanValue',
        restore: 'restoreValue',
        volume_restore: 'volumeRestoreValue',
      };
      const client = new backupforgkeModule.v1.BackupForGKEClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.volumeRestorePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.volumeRestorePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('volumeRestorePath', () => {
        const result = client.volumeRestorePath(
          'projectValue',
          'locationValue',
          'restorePlanValue',
          'restoreValue',
          'volumeRestoreValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.volumeRestorePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromVolumeRestoreName', () => {
        const result = client.matchProjectFromVolumeRestoreName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.volumeRestorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromVolumeRestoreName', () => {
        const result = client.matchLocationFromVolumeRestoreName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.volumeRestorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRestorePlanFromVolumeRestoreName', () => {
        const result = client.matchRestorePlanFromVolumeRestoreName(fakePath);
        assert.strictEqual(result, 'restorePlanValue');
        assert(
          (client.pathTemplates.volumeRestorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRestoreFromVolumeRestoreName', () => {
        const result = client.matchRestoreFromVolumeRestoreName(fakePath);
        assert.strictEqual(result, 'restoreValue');
        assert(
          (client.pathTemplates.volumeRestorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVolumeRestoreFromVolumeRestoreName', () => {
        const result = client.matchVolumeRestoreFromVolumeRestoreName(fakePath);
        assert.strictEqual(result, 'volumeRestoreValue');
        assert(
          (client.pathTemplates.volumeRestorePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
