// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/backup_for_g_k_e_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './backup_for_g_k_e_client_config.json';
const version = require('../../../package.json').version;

/**
 *  BackupForGKE allows Kubernetes administrators to configure, execute, and
 *  manage backup and restore operations for their GKE clusters.
 * @class
 * @memberof v1
 */
export class BackupForGKEClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  backupForGKEStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BackupForGKEClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new BackupForGKEClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof BackupForGKEClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      backupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupPlans/{backup_plan}/backups/{backup}'
      ),
      backupPlanPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupPlans/{backup_plan}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      restorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/restorePlans/{restore_plan}/restores/{restore}'
      ),
      restorePlanPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/restorePlans/{restore_plan}'
      ),
      volumeBackupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupPlans/{backup_plan}/backups/{backup}/volumeBackups/{volume_backup}'
      ),
      volumeRestorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/restorePlans/{restore_plan}/restores/{restore}/volumeRestores/{volume_restore}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listBackupPlans: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'backupPlans'
      ),
      listBackups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'backups'
      ),
      listVolumeBackups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'volumeBackups'
      ),
      listRestorePlans: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'restorePlans'
      ),
      listRestores: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'restores'
      ),
      listVolumeRestores: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'volumeRestores'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/backupPlans/*}:getIamPolicy',
          additional_bindings: [
            {
              get: '/v1/{resource=projects/*/locations/*/backupPlans/*/backups/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/restorePlans/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/restorePlans/*/restores/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/restorePlans/*/restores/*/volumeRestores/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/backupPlans/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/backupPlans/*/backups/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/restorePlans/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/restorePlans/*/restores/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/restorePlans/*/restores/*/volumeRestores/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/backupPlans/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/backupPlans/*/backups/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/restorePlans/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/restorePlans/*/restores/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/restorePlans/*/restores/*/volumeRestores/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*}/operations',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createBackupPlanResponse = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.BackupPlan'
    ) as gax.protobuf.Type;
    const createBackupPlanMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateBackupPlanResponse = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.BackupPlan'
    ) as gax.protobuf.Type;
    const updateBackupPlanMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteBackupPlanResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteBackupPlanMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.Backup'
    ) as gax.protobuf.Type;
    const createBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.Backup'
    ) as gax.protobuf.Type;
    const updateBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteBackupResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createRestorePlanResponse = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.RestorePlan'
    ) as gax.protobuf.Type;
    const createRestorePlanMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateRestorePlanResponse = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.RestorePlan'
    ) as gax.protobuf.Type;
    const updateRestorePlanMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteRestorePlanResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteRestorePlanMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createRestoreResponse = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.Restore'
    ) as gax.protobuf.Type;
    const createRestoreMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateRestoreResponse = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.Restore'
    ) as gax.protobuf.Type;
    const updateRestoreMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteRestoreResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteRestoreMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkebackup.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createBackupPlan: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupPlanResponse.decode.bind(createBackupPlanResponse),
        createBackupPlanMetadata.decode.bind(createBackupPlanMetadata)
      ),
      updateBackupPlan: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBackupPlanResponse.decode.bind(updateBackupPlanResponse),
        updateBackupPlanMetadata.decode.bind(updateBackupPlanMetadata)
      ),
      deleteBackupPlan: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupPlanResponse.decode.bind(deleteBackupPlanResponse),
        deleteBackupPlanMetadata.decode.bind(deleteBackupPlanMetadata)
      ),
      createBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupResponse.decode.bind(createBackupResponse),
        createBackupMetadata.decode.bind(createBackupMetadata)
      ),
      updateBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBackupResponse.decode.bind(updateBackupResponse),
        updateBackupMetadata.decode.bind(updateBackupMetadata)
      ),
      deleteBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupResponse.decode.bind(deleteBackupResponse),
        deleteBackupMetadata.decode.bind(deleteBackupMetadata)
      ),
      createRestorePlan: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createRestorePlanResponse.decode.bind(createRestorePlanResponse),
        createRestorePlanMetadata.decode.bind(createRestorePlanMetadata)
      ),
      updateRestorePlan: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateRestorePlanResponse.decode.bind(updateRestorePlanResponse),
        updateRestorePlanMetadata.decode.bind(updateRestorePlanMetadata)
      ),
      deleteRestorePlan: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRestorePlanResponse.decode.bind(deleteRestorePlanResponse),
        deleteRestorePlanMetadata.decode.bind(deleteRestorePlanMetadata)
      ),
      createRestore: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createRestoreResponse.decode.bind(createRestoreResponse),
        createRestoreMetadata.decode.bind(createRestoreMetadata)
      ),
      updateRestore: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateRestoreResponse.decode.bind(updateRestoreResponse),
        updateRestoreMetadata.decode.bind(updateRestoreMetadata)
      ),
      deleteRestore: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRestoreResponse.decode.bind(deleteRestoreResponse),
        deleteRestoreMetadata.decode.bind(deleteRestoreMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.gkebackup.v1.BackupForGKE',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.backupForGKEStub) {
      return this.backupForGKEStub;
    }

    // Put together the "service stub" for
    // google.cloud.gkebackup.v1.BackupForGKE.
    this.backupForGKEStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.gkebackup.v1.BackupForGKE'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.gkebackup.v1.BackupForGKE,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const backupForGKEStubMethods = [
      'createBackupPlan',
      'listBackupPlans',
      'getBackupPlan',
      'updateBackupPlan',
      'deleteBackupPlan',
      'createBackup',
      'listBackups',
      'getBackup',
      'updateBackup',
      'deleteBackup',
      'listVolumeBackups',
      'getVolumeBackup',
      'createRestorePlan',
      'listRestorePlans',
      'getRestorePlan',
      'updateRestorePlan',
      'deleteRestorePlan',
      'createRestore',
      'listRestores',
      'getRestore',
      'updateRestore',
      'deleteRestore',
      'listVolumeRestores',
      'getVolumeRestore',
    ];
    for (const methodName of backupForGKEStubMethods) {
      const callPromise = this.backupForGKEStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.backupForGKEStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'gkebackup.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'gkebackup.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Retrieve the details of a single BackupPlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Fully qualified BackupPlan name.
   *   Format: projects/* /locations/* /backupPlans/*
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BackupPlan]{@link google.cloud.gkebackup.v1.BackupPlan}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.get_backup_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_GetBackupPlan_async
   */
  getBackupPlan(
    request?: protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IBackupPlan,
      protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest | undefined,
      {} | undefined
    ]
  >;
  getBackupPlan(
    request: protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IBackupPlan,
      protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackupPlan(
    request: protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IBackupPlan,
      protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackupPlan(
    request?: protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkebackup.v1.IBackupPlan,
          | protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkebackup.v1.IBackupPlan,
      protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IBackupPlan,
      protos.google.cloud.gkebackup.v1.IGetBackupPlanRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getBackupPlan(request, options, callback);
  }
  /**
   * Retrieve the details of a single Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Full name of the Backup resource.
   *   Format: projects/* /locations/* /backupPlans/* /backups/*
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Backup]{@link google.cloud.gkebackup.v1.Backup}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.get_backup.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_GetBackup_async
   */
  getBackup(
    request?: protos.google.cloud.gkebackup.v1.IGetBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IBackup,
      protos.google.cloud.gkebackup.v1.IGetBackupRequest | undefined,
      {} | undefined
    ]
  >;
  getBackup(
    request: protos.google.cloud.gkebackup.v1.IGetBackupRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IBackup,
      protos.google.cloud.gkebackup.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request: protos.google.cloud.gkebackup.v1.IGetBackupRequest,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IBackup,
      protos.google.cloud.gkebackup.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request?: protos.google.cloud.gkebackup.v1.IGetBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkebackup.v1.IBackup,
          protos.google.cloud.gkebackup.v1.IGetBackupRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkebackup.v1.IBackup,
      protos.google.cloud.gkebackup.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IBackup,
      protos.google.cloud.gkebackup.v1.IGetBackupRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getBackup(request, options, callback);
  }
  /**
   * Retrieve the details of a single VolumeBackup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Full name of the VolumeBackup resource.
   *   Format: projects/* /locations/* /backupPlans/* /backups/* /volumeBackups/*
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [VolumeBackup]{@link google.cloud.gkebackup.v1.VolumeBackup}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.get_volume_backup.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_GetVolumeBackup_async
   */
  getVolumeBackup(
    request?: protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IVolumeBackup,
      protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest | undefined,
      {} | undefined
    ]
  >;
  getVolumeBackup(
    request: protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IVolumeBackup,
      | protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVolumeBackup(
    request: protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IVolumeBackup,
      | protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVolumeBackup(
    request?: protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkebackup.v1.IVolumeBackup,
          | protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkebackup.v1.IVolumeBackup,
      | protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IVolumeBackup,
      protos.google.cloud.gkebackup.v1.IGetVolumeBackupRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVolumeBackup(request, options, callback);
  }
  /**
   * Retrieve the details of a single RestorePlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Fully qualified RestorePlan name.
   *   Format: projects/* /locations/* /restorePlans/*
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [RestorePlan]{@link google.cloud.gkebackup.v1.RestorePlan}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.get_restore_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_GetRestorePlan_async
   */
  getRestorePlan(
    request?: protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IRestorePlan,
      protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest | undefined,
      {} | undefined
    ]
  >;
  getRestorePlan(
    request: protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IRestorePlan,
      | protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRestorePlan(
    request: protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IRestorePlan,
      | protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRestorePlan(
    request?: protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkebackup.v1.IRestorePlan,
          | protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkebackup.v1.IRestorePlan,
      | protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IRestorePlan,
      protos.google.cloud.gkebackup.v1.IGetRestorePlanRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRestorePlan(request, options, callback);
  }
  /**
   * Retrieves the details of a single Restore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the restore resource.
   *   Format: projects/* /locations/* /restorePlans/* /restores/*
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Restore]{@link google.cloud.gkebackup.v1.Restore}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.get_restore.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_GetRestore_async
   */
  getRestore(
    request?: protos.google.cloud.gkebackup.v1.IGetRestoreRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IRestore,
      protos.google.cloud.gkebackup.v1.IGetRestoreRequest | undefined,
      {} | undefined
    ]
  >;
  getRestore(
    request: protos.google.cloud.gkebackup.v1.IGetRestoreRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IRestore,
      protos.google.cloud.gkebackup.v1.IGetRestoreRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRestore(
    request: protos.google.cloud.gkebackup.v1.IGetRestoreRequest,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IRestore,
      protos.google.cloud.gkebackup.v1.IGetRestoreRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRestore(
    request?: protos.google.cloud.gkebackup.v1.IGetRestoreRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkebackup.v1.IRestore,
          | protos.google.cloud.gkebackup.v1.IGetRestoreRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkebackup.v1.IRestore,
      protos.google.cloud.gkebackup.v1.IGetRestoreRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IRestore,
      protos.google.cloud.gkebackup.v1.IGetRestoreRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRestore(request, options, callback);
  }
  /**
   * Retrieve the details of a single VolumeRestore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Full name of the VolumeRestore resource.
   *   Format: projects/* /locations/* /restorePlans/* /restores/* /volumeRestores/*
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [VolumeRestore]{@link google.cloud.gkebackup.v1.VolumeRestore}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.get_volume_restore.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_GetVolumeRestore_async
   */
  getVolumeRestore(
    request?: protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IVolumeRestore,
      protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest | undefined,
      {} | undefined
    ]
  >;
  getVolumeRestore(
    request: protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IVolumeRestore,
      | protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVolumeRestore(
    request: protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest,
    callback: Callback<
      protos.google.cloud.gkebackup.v1.IVolumeRestore,
      | protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVolumeRestore(
    request?: protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkebackup.v1.IVolumeRestore,
          | protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkebackup.v1.IVolumeRestore,
      | protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IVolumeRestore,
      protos.google.cloud.gkebackup.v1.IGetVolumeRestoreRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVolumeRestore(request, options, callback);
  }

  /**
   * Creates a new BackupPlan in a given location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location within which to create the BackupPlan.
   *   Format: projects/* /locations/*
   * @param {google.cloud.gkebackup.v1.BackupPlan} request.backupPlan
   *   Required. The BackupPlan resource object to create.
   * @param {string} request.backupPlanId
   *   Required. The client-provided short name for the BackupPlan resource.
   *   This name must:
   *
   *   - be between 1 and 63 characters long (inclusive)
   *   - consist of only lower-case ASCII letters, numbers, and dashes
   *   - start with a lower-case letter
   *   - end with a lower-case letter or number
   *   - be unique within the set of BackupPlans in this location
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.create_backup_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_CreateBackupPlan_async
   */
  createBackupPlan(
    request?: protos.google.cloud.gkebackup.v1.ICreateBackupPlanRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createBackupPlan(
    request: protos.google.cloud.gkebackup.v1.ICreateBackupPlanRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackupPlan(
    request: protos.google.cloud.gkebackup.v1.ICreateBackupPlanRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackupPlan(
    request?: protos.google.cloud.gkebackup.v1.ICreateBackupPlanRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkebackup.v1.IBackupPlan,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createBackupPlan(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createBackupPlan()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.create_backup_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_CreateBackupPlan_async
   */
  async checkCreateBackupPlanProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkebackup.v1.BackupPlan,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createBackupPlan,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkebackup.v1.BackupPlan,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Update a BackupPlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gkebackup.v1.BackupPlan} request.backupPlan
   *   Required. A new version of the BackupPlan resource that contains updated fields.
   *   This may be sparsely populated if an `update_mask` is provided.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   This is used to specify the fields to be overwritten in the
   *   BackupPlan targeted for update. The values for each of these
   *   updated fields will be taken from the `backup_plan` provided
   *   with this request. Field names are relative to the root of the resource
   *   (e.g., `description`, `backup_config.include_volume_data`, etc.)
   *   If no `update_mask` is provided, all fields in `backup_plan` will be
   *   written to the target BackupPlan resource.
   *   Note that OUTPUT_ONLY and IMMUTABLE fields in `backup_plan` are ignored
   *   and are not used to update the target BackupPlan.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.update_backup_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_UpdateBackupPlan_async
   */
  updateBackupPlan(
    request?: protos.google.cloud.gkebackup.v1.IUpdateBackupPlanRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateBackupPlan(
    request: protos.google.cloud.gkebackup.v1.IUpdateBackupPlanRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackupPlan(
    request: protos.google.cloud.gkebackup.v1.IUpdateBackupPlanRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackupPlan(
    request?: protos.google.cloud.gkebackup.v1.IUpdateBackupPlanRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkebackup.v1.IBackupPlan,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackupPlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'backup_plan.name': request.backupPlan!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateBackupPlan(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateBackupPlan()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.update_backup_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_UpdateBackupPlan_async
   */
  async checkUpdateBackupPlanProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkebackup.v1.BackupPlan,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateBackupPlan,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkebackup.v1.BackupPlan,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Deletes an existing BackupPlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Fully qualified BackupPlan name.
   *   Format: projects/* /locations/* /backupPlans/*
   * @param {string} request.etag
   *   If provided, this value must match the current value of the
   *   target BackupPlan's {@link google.cloud.gkebackup.v1.BackupPlan.etag|etag} field or the request is
   *   rejected.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.delete_backup_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_DeleteBackupPlan_async
   */
  deleteBackupPlan(
    request?: protos.google.cloud.gkebackup.v1.IDeleteBackupPlanRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteBackupPlan(
    request: protos.google.cloud.gkebackup.v1.IDeleteBackupPlanRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackupPlan(
    request: protos.google.cloud.gkebackup.v1.IDeleteBackupPlanRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackupPlan(
    request?: protos.google.cloud.gkebackup.v1.IDeleteBackupPlanRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteBackupPlan(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteBackupPlan()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.delete_backup_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_DeleteBackupPlan_async
   */
  async checkDeleteBackupPlanProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteBackupPlan,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Creates a Backup for the given BackupPlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BackupPlan within which to create the Backup.
   *   Format: projects/* /locations/* /backupPlans/*
   * @param {google.cloud.gkebackup.v1.Backup} request.backup
   *   The Backup resource to create.
   * @param {string} request.backupId
   *   The client-provided short name for the Backup resource.
   *   This name must:
   *
   *    - be between 1 and 63 characters long (inclusive)
   *    - consist of only lower-case ASCII letters, numbers, and dashes
   *    - start with a lower-case letter
   *    - end with a lower-case letter or number
   *    - be unique within the set of Backups in this BackupPlan
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.create_backup.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_CreateBackup_async
   */
  createBackup(
    request?: protos.google.cloud.gkebackup.v1.ICreateBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createBackup(
    request: protos.google.cloud.gkebackup.v1.ICreateBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request: protos.google.cloud.gkebackup.v1.ICreateBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request?: protos.google.cloud.gkebackup.v1.ICreateBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkebackup.v1.IBackup,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.create_backup.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_CreateBackup_async
   */
  async checkCreateBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkebackup.v1.Backup,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkebackup.v1.Backup,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Update a Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gkebackup.v1.Backup} request.backup
   *   Required. A new version of the Backup resource that contains updated fields.
   *   This may be sparsely populated if an `update_mask` is provided.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   This is used to specify the fields to be overwritten in the
   *   Backup targeted for update. The values for each of these
   *   updated fields will be taken from the `backup_plan` provided
   *   with this request. Field names are relative to the root of the resource.
   *   If no `update_mask` is provided, all fields in `backup` will be
   *   written to the target Backup resource.
   *   Note that OUTPUT_ONLY and IMMUTABLE fields in `backup` are ignored
   *   and are not used to update the target Backup.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.update_backup.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_UpdateBackup_async
   */
  updateBackup(
    request?: protos.google.cloud.gkebackup.v1.IUpdateBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateBackup(
    request: protos.google.cloud.gkebackup.v1.IUpdateBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackup(
    request: protos.google.cloud.gkebackup.v1.IUpdateBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackup(
    request?: protos.google.cloud.gkebackup.v1.IUpdateBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkebackup.v1.IBackup,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IBackup,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'backup.name': request.backup!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.update_backup.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_UpdateBackup_async
   */
  async checkUpdateBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkebackup.v1.Backup,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkebackup.v1.Backup,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Deletes an existing Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the Backup resource.
   *   Format: projects/* /locations/* /backupPlans/* /backups/*
   * @param {string} request.etag
   *   If provided, this value must match the current value of the
   *   target Backup's {@link google.cloud.gkebackup.v1.Backup.etag|etag} field or the request is
   *   rejected.
   * @param {boolean} request.force
   *   If set to true, any VolumeBackups below this Backup will also be deleted.
   *   Otherwise, the request will only succeed if the Backup has no
   *   VolumeBackups.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.delete_backup.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_DeleteBackup_async
   */
  deleteBackup(
    request?: protos.google.cloud.gkebackup.v1.IDeleteBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteBackup(
    request: protos.google.cloud.gkebackup.v1.IDeleteBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request: protos.google.cloud.gkebackup.v1.IDeleteBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request?: protos.google.cloud.gkebackup.v1.IDeleteBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.delete_backup.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_DeleteBackup_async
   */
  async checkDeleteBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new RestorePlan in a given location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location within which to create the RestorePlan.
   *   Format: projects/* /locations/*
   * @param {google.cloud.gkebackup.v1.RestorePlan} request.restorePlan
   *   Required. The RestorePlan resource object to create.
   * @param {string} request.restorePlanId
   *   Required. The client-provided short name for the RestorePlan resource.
   *   This name must:
   *
   *    - be between 1 and 63 characters long (inclusive)
   *    - consist of only lower-case ASCII letters, numbers, and dashes
   *    - start with a lower-case letter
   *    - end with a lower-case letter or number
   *    - be unique within the set of RestorePlans in this location
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.create_restore_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_CreateRestorePlan_async
   */
  createRestorePlan(
    request?: protos.google.cloud.gkebackup.v1.ICreateRestorePlanRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createRestorePlan(
    request: protos.google.cloud.gkebackup.v1.ICreateRestorePlanRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRestorePlan(
    request: protos.google.cloud.gkebackup.v1.ICreateRestorePlanRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRestorePlan(
    request?: protos.google.cloud.gkebackup.v1.ICreateRestorePlanRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkebackup.v1.IRestorePlan,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRestorePlan(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createRestorePlan()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.create_restore_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_CreateRestorePlan_async
   */
  async checkCreateRestorePlanProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkebackup.v1.RestorePlan,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createRestorePlan,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkebackup.v1.RestorePlan,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Update a RestorePlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gkebackup.v1.RestorePlan} request.restorePlan
   *   Required. A new version of the RestorePlan resource that contains updated fields.
   *   This may be sparsely populated if an `update_mask` is provided.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   This is used to specify the fields to be overwritten in the
   *   RestorePlan targeted for update. The values for each of these
   *   updated fields will be taken from the `restore_plan` provided
   *   with this request. Field names are relative to the root of the resource.
   *   If no `update_mask` is provided, all fields in `restore_plan` will be
   *   written to the target RestorePlan resource.
   *   Note that OUTPUT_ONLY and IMMUTABLE fields in `restore_plan` are ignored
   *   and are not used to update the target RestorePlan.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.update_restore_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_UpdateRestorePlan_async
   */
  updateRestorePlan(
    request?: protos.google.cloud.gkebackup.v1.IUpdateRestorePlanRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateRestorePlan(
    request: protos.google.cloud.gkebackup.v1.IUpdateRestorePlanRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateRestorePlan(
    request: protos.google.cloud.gkebackup.v1.IUpdateRestorePlanRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateRestorePlan(
    request?: protos.google.cloud.gkebackup.v1.IUpdateRestorePlanRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkebackup.v1.IRestorePlan,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestorePlan,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'restore_plan.name': request.restorePlan!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateRestorePlan(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateRestorePlan()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.update_restore_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_UpdateRestorePlan_async
   */
  async checkUpdateRestorePlanProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkebackup.v1.RestorePlan,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateRestorePlan,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkebackup.v1.RestorePlan,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Deletes an existing RestorePlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Fully qualified RestorePlan name.
   *   Format: projects/* /locations/* /restorePlans/*
   * @param {string} request.etag
   *   If provided, this value must match the current value of the
   *   target RestorePlan's {@link google.cloud.gkebackup.v1.RestorePlan.etag|etag} field or the request is
   *   rejected.
   * @param {boolean} request.force
   *   If set to true, any Restores below this RestorePlan will also be deleted.
   *   Otherwise, the request will only succeed if the RestorePlan has no
   *   Restores.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.delete_restore_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_DeleteRestorePlan_async
   */
  deleteRestorePlan(
    request?: protos.google.cloud.gkebackup.v1.IDeleteRestorePlanRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteRestorePlan(
    request: protos.google.cloud.gkebackup.v1.IDeleteRestorePlanRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRestorePlan(
    request: protos.google.cloud.gkebackup.v1.IDeleteRestorePlanRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRestorePlan(
    request?: protos.google.cloud.gkebackup.v1.IDeleteRestorePlanRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRestorePlan(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteRestorePlan()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.delete_restore_plan.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_DeleteRestorePlan_async
   */
  async checkDeleteRestorePlanProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteRestorePlan,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Restore for the given RestorePlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The RestorePlan within which to create the Restore.
   *   Format: projects/* /locations/* /restorePlans/*
   * @param {google.cloud.gkebackup.v1.Restore} request.restore
   *   Required. The restore resource to create.
   * @param {string} request.restoreId
   *   Required. The client-provided short name for the Restore resource.
   *   This name must:
   *
   *    - be between 1 and 63 characters long (inclusive)
   *    - consist of only lower-case ASCII letters, numbers, and dashes
   *    - start with a lower-case letter
   *    - end with a lower-case letter or number
   *    - be unique within the set of Restores in this RestorePlan.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.create_restore.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_CreateRestore_async
   */
  createRestore(
    request?: protos.google.cloud.gkebackup.v1.ICreateRestoreRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createRestore(
    request: protos.google.cloud.gkebackup.v1.ICreateRestoreRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRestore(
    request: protos.google.cloud.gkebackup.v1.ICreateRestoreRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRestore(
    request?: protos.google.cloud.gkebackup.v1.ICreateRestoreRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkebackup.v1.IRestore,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRestore(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createRestore()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.create_restore.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_CreateRestore_async
   */
  async checkCreateRestoreProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkebackup.v1.Restore,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createRestore,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkebackup.v1.Restore,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Update a Restore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gkebackup.v1.Restore} request.restore
   *   Required. A new version of the Restore resource that contains updated fields.
   *   This may be sparsely populated if an `update_mask` is provided.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   This is used to specify the fields to be overwritten in the
   *   Restore targeted for update. The values for each of these
   *   updated fields will be taken from the `restore` provided
   *   with this request. Field names are relative to the root of the resource.
   *   If no `update_mask` is provided, all fields in `restore` will be
   *   written to the target Restore resource.
   *   Note that OUTPUT_ONLY and IMMUTABLE fields in `restore` are ignored
   *   and are not used to update the target Restore.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.update_restore.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_UpdateRestore_async
   */
  updateRestore(
    request?: protos.google.cloud.gkebackup.v1.IUpdateRestoreRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateRestore(
    request: protos.google.cloud.gkebackup.v1.IUpdateRestoreRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateRestore(
    request: protos.google.cloud.gkebackup.v1.IUpdateRestoreRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateRestore(
    request?: protos.google.cloud.gkebackup.v1.IUpdateRestoreRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkebackup.v1.IRestore,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkebackup.v1.IRestore,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'restore.name': request.restore!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateRestore(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateRestore()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.update_restore.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_UpdateRestore_async
   */
  async checkUpdateRestoreProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkebackup.v1.Restore,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateRestore,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkebackup.v1.Restore,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Deletes an existing Restore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Full name of the Restore
   *   Format: projects/* /locations/* /restorePlans/* /restores/*
   * @param {string} request.etag
   *   If provided, this value must match the current value of the
   *   target Restore's {@link google.cloud.gkebackup.v1.Restore.etag|etag} field or the request is
   *   rejected.
   * @param {boolean} request.force
   *   If set to true, any VolumeRestores below this restore will also be deleted.
   *   Otherwise, the request will only succeed if the restore has no
   *   VolumeRestores.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.delete_restore.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_DeleteRestore_async
   */
  deleteRestore(
    request?: protos.google.cloud.gkebackup.v1.IDeleteRestoreRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteRestore(
    request: protos.google.cloud.gkebackup.v1.IDeleteRestoreRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRestore(
    request: protos.google.cloud.gkebackup.v1.IDeleteRestoreRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRestore(
    request?: protos.google.cloud.gkebackup.v1.IDeleteRestoreRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gkebackup.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkebackup.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRestore(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteRestore()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.delete_restore.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_DeleteRestore_async
   */
  async checkDeleteRestoreProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteRestore,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkebackup.v1.OperationMetadata
    >;
  }
  /**
   * Lists BackupPlans in a given location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location that contains the BackupPlans to list.
   *   Format: projects/* /locations/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListBackupPlansResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListBackupPlansResponse.next_page_token|next_page_token}
   *   received from a previous `ListBackupPlans` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListBackupPlans` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [BackupPlan]{@link google.cloud.gkebackup.v1.BackupPlan}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBackupPlansAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listBackupPlans(
    request?: protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IBackupPlan[],
      protos.google.cloud.gkebackup.v1.IListBackupPlansRequest | null,
      protos.google.cloud.gkebackup.v1.IListBackupPlansResponse
    ]
  >;
  listBackupPlans(
    request: protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
      | protos.google.cloud.gkebackup.v1.IListBackupPlansResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IBackupPlan
    >
  ): void;
  listBackupPlans(
    request: protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
      | protos.google.cloud.gkebackup.v1.IListBackupPlansResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IBackupPlan
    >
  ): void;
  listBackupPlans(
    request?: protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
          | protos.google.cloud.gkebackup.v1.IListBackupPlansResponse
          | null
          | undefined,
          protos.google.cloud.gkebackup.v1.IBackupPlan
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
      | protos.google.cloud.gkebackup.v1.IListBackupPlansResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IBackupPlan
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IBackupPlan[],
      protos.google.cloud.gkebackup.v1.IListBackupPlansRequest | null,
      protos.google.cloud.gkebackup.v1.IListBackupPlansResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBackupPlans(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location that contains the BackupPlans to list.
   *   Format: projects/* /locations/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListBackupPlansResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListBackupPlansResponse.next_page_token|next_page_token}
   *   received from a previous `ListBackupPlans` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListBackupPlans` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [BackupPlan]{@link google.cloud.gkebackup.v1.BackupPlan} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBackupPlansAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listBackupPlansStream(
    request?: protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackupPlans'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupPlans.createStream(
      this.innerApiCalls.listBackupPlans as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBackupPlans`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location that contains the BackupPlans to list.
   *   Format: projects/* /locations/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListBackupPlansResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListBackupPlansResponse.next_page_token|next_page_token}
   *   received from a previous `ListBackupPlans` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListBackupPlans` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [BackupPlan]{@link google.cloud.gkebackup.v1.BackupPlan}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.list_backup_plans.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_ListBackupPlans_async
   */
  listBackupPlansAsync(
    request?: protos.google.cloud.gkebackup.v1.IListBackupPlansRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkebackup.v1.IBackupPlan> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackupPlans'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupPlans.asyncIterate(
      this.innerApiCalls['listBackupPlans'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkebackup.v1.IBackupPlan>;
  }
  /**
   * Lists the Backups for a given BackupPlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BackupPlan that contains the Backups to list.
   *   Format: projects/* /locations/* /backupPlans/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListBackupsResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListBackupsResponse.next_page_token|next_page_token}
   *   received from a previous `ListBackups` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListBackups` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Backup]{@link google.cloud.gkebackup.v1.Backup}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listBackups(
    request?: protos.google.cloud.gkebackup.v1.IListBackupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IBackup[],
      protos.google.cloud.gkebackup.v1.IListBackupsRequest | null,
      protos.google.cloud.gkebackup.v1.IListBackupsResponse
    ]
  >;
  listBackups(
    request: protos.google.cloud.gkebackup.v1.IListBackupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListBackupsRequest,
      protos.google.cloud.gkebackup.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.gkebackup.v1.IBackup
    >
  ): void;
  listBackups(
    request: protos.google.cloud.gkebackup.v1.IListBackupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListBackupsRequest,
      protos.google.cloud.gkebackup.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.gkebackup.v1.IBackup
    >
  ): void;
  listBackups(
    request?: protos.google.cloud.gkebackup.v1.IListBackupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkebackup.v1.IListBackupsRequest,
          | protos.google.cloud.gkebackup.v1.IListBackupsResponse
          | null
          | undefined,
          protos.google.cloud.gkebackup.v1.IBackup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListBackupsRequest,
      protos.google.cloud.gkebackup.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.gkebackup.v1.IBackup
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IBackup[],
      protos.google.cloud.gkebackup.v1.IListBackupsRequest | null,
      protos.google.cloud.gkebackup.v1.IListBackupsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBackups(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BackupPlan that contains the Backups to list.
   *   Format: projects/* /locations/* /backupPlans/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListBackupsResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListBackupsResponse.next_page_token|next_page_token}
   *   received from a previous `ListBackups` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListBackups` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Backup]{@link google.cloud.gkebackup.v1.Backup} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listBackupsStream(
    request?: protos.google.cloud.gkebackup.v1.IListBackupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.createStream(
      this.innerApiCalls.listBackups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBackups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BackupPlan that contains the Backups to list.
   *   Format: projects/* /locations/* /backupPlans/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListBackupsResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListBackupsResponse.next_page_token|next_page_token}
   *   received from a previous `ListBackups` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListBackups` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Backup]{@link google.cloud.gkebackup.v1.Backup}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.list_backups.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_ListBackups_async
   */
  listBackupsAsync(
    request?: protos.google.cloud.gkebackup.v1.IListBackupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkebackup.v1.IBackup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.asyncIterate(
      this.innerApiCalls['listBackups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkebackup.v1.IBackup>;
  }
  /**
   * Lists the VolumeBackups for a given Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Backup that contains the VolumeBackups to list.
   *   Format: projects/* /locations/* /backupPlans/* /backups/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListVolumeBackupsResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListVolumeBackupsResponse.next_page_token|next_page_token}
   *   received from a previous `ListVolumeBackups` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListVolumeBackups` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [VolumeBackup]{@link google.cloud.gkebackup.v1.VolumeBackup}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVolumeBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVolumeBackups(
    request?: protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IVolumeBackup[],
      protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest | null,
      protos.google.cloud.gkebackup.v1.IListVolumeBackupsResponse
    ]
  >;
  listVolumeBackups(
    request: protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
      | protos.google.cloud.gkebackup.v1.IListVolumeBackupsResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IVolumeBackup
    >
  ): void;
  listVolumeBackups(
    request: protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
      | protos.google.cloud.gkebackup.v1.IListVolumeBackupsResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IVolumeBackup
    >
  ): void;
  listVolumeBackups(
    request?: protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
          | protos.google.cloud.gkebackup.v1.IListVolumeBackupsResponse
          | null
          | undefined,
          protos.google.cloud.gkebackup.v1.IVolumeBackup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
      | protos.google.cloud.gkebackup.v1.IListVolumeBackupsResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IVolumeBackup
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IVolumeBackup[],
      protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest | null,
      protos.google.cloud.gkebackup.v1.IListVolumeBackupsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVolumeBackups(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Backup that contains the VolumeBackups to list.
   *   Format: projects/* /locations/* /backupPlans/* /backups/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListVolumeBackupsResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListVolumeBackupsResponse.next_page_token|next_page_token}
   *   received from a previous `ListVolumeBackups` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListVolumeBackups` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [VolumeBackup]{@link google.cloud.gkebackup.v1.VolumeBackup} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVolumeBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVolumeBackupsStream(
    request?: protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumeBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumeBackups.createStream(
      this.innerApiCalls.listVolumeBackups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVolumeBackups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Backup that contains the VolumeBackups to list.
   *   Format: projects/* /locations/* /backupPlans/* /backups/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListVolumeBackupsResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListVolumeBackupsResponse.next_page_token|next_page_token}
   *   received from a previous `ListVolumeBackups` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListVolumeBackups` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [VolumeBackup]{@link google.cloud.gkebackup.v1.VolumeBackup}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.list_volume_backups.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_ListVolumeBackups_async
   */
  listVolumeBackupsAsync(
    request?: protos.google.cloud.gkebackup.v1.IListVolumeBackupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkebackup.v1.IVolumeBackup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumeBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumeBackups.asyncIterate(
      this.innerApiCalls['listVolumeBackups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkebackup.v1.IVolumeBackup>;
  }
  /**
   * Lists RestorePlans in a given location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location that contains the RestorePlans to list.
   *   Format: projects/* /locations/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListRestorePlansResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListRestorePlansResponse.next_page_token|next_page_token}
   *   received from a previous `ListRestorePlans` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListRestorePlans` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [RestorePlan]{@link google.cloud.gkebackup.v1.RestorePlan}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRestorePlansAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRestorePlans(
    request?: protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IRestorePlan[],
      protos.google.cloud.gkebackup.v1.IListRestorePlansRequest | null,
      protos.google.cloud.gkebackup.v1.IListRestorePlansResponse
    ]
  >;
  listRestorePlans(
    request: protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
      | protos.google.cloud.gkebackup.v1.IListRestorePlansResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IRestorePlan
    >
  ): void;
  listRestorePlans(
    request: protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
      | protos.google.cloud.gkebackup.v1.IListRestorePlansResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IRestorePlan
    >
  ): void;
  listRestorePlans(
    request?: protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
          | protos.google.cloud.gkebackup.v1.IListRestorePlansResponse
          | null
          | undefined,
          protos.google.cloud.gkebackup.v1.IRestorePlan
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
      | protos.google.cloud.gkebackup.v1.IListRestorePlansResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IRestorePlan
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IRestorePlan[],
      protos.google.cloud.gkebackup.v1.IListRestorePlansRequest | null,
      protos.google.cloud.gkebackup.v1.IListRestorePlansResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRestorePlans(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location that contains the RestorePlans to list.
   *   Format: projects/* /locations/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListRestorePlansResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListRestorePlansResponse.next_page_token|next_page_token}
   *   received from a previous `ListRestorePlans` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListRestorePlans` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [RestorePlan]{@link google.cloud.gkebackup.v1.RestorePlan} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRestorePlansAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRestorePlansStream(
    request?: protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRestorePlans'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRestorePlans.createStream(
      this.innerApiCalls.listRestorePlans as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRestorePlans`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location that contains the RestorePlans to list.
   *   Format: projects/* /locations/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListRestorePlansResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListRestorePlansResponse.next_page_token|next_page_token}
   *   received from a previous `ListRestorePlans` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListRestorePlans` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [RestorePlan]{@link google.cloud.gkebackup.v1.RestorePlan}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.list_restore_plans.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_ListRestorePlans_async
   */
  listRestorePlansAsync(
    request?: protos.google.cloud.gkebackup.v1.IListRestorePlansRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkebackup.v1.IRestorePlan> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRestorePlans'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRestorePlans.asyncIterate(
      this.innerApiCalls['listRestorePlans'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkebackup.v1.IRestorePlan>;
  }
  /**
   * Lists the Restores for a given RestorePlan.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The RestorePlan that contains the Restores to list.
   *   Format: projects/* /locations/* /restorePlans/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListRestoresResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListRestoresResponse.next_page_token|next_page_token}
   *   received from a previous `ListRestores` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to `ListRestores`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Restore]{@link google.cloud.gkebackup.v1.Restore}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRestoresAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRestores(
    request?: protos.google.cloud.gkebackup.v1.IListRestoresRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IRestore[],
      protos.google.cloud.gkebackup.v1.IListRestoresRequest | null,
      protos.google.cloud.gkebackup.v1.IListRestoresResponse
    ]
  >;
  listRestores(
    request: protos.google.cloud.gkebackup.v1.IListRestoresRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListRestoresRequest,
      protos.google.cloud.gkebackup.v1.IListRestoresResponse | null | undefined,
      protos.google.cloud.gkebackup.v1.IRestore
    >
  ): void;
  listRestores(
    request: protos.google.cloud.gkebackup.v1.IListRestoresRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListRestoresRequest,
      protos.google.cloud.gkebackup.v1.IListRestoresResponse | null | undefined,
      protos.google.cloud.gkebackup.v1.IRestore
    >
  ): void;
  listRestores(
    request?: protos.google.cloud.gkebackup.v1.IListRestoresRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkebackup.v1.IListRestoresRequest,
          | protos.google.cloud.gkebackup.v1.IListRestoresResponse
          | null
          | undefined,
          protos.google.cloud.gkebackup.v1.IRestore
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListRestoresRequest,
      protos.google.cloud.gkebackup.v1.IListRestoresResponse | null | undefined,
      protos.google.cloud.gkebackup.v1.IRestore
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IRestore[],
      protos.google.cloud.gkebackup.v1.IListRestoresRequest | null,
      protos.google.cloud.gkebackup.v1.IListRestoresResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRestores(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The RestorePlan that contains the Restores to list.
   *   Format: projects/* /locations/* /restorePlans/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListRestoresResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListRestoresResponse.next_page_token|next_page_token}
   *   received from a previous `ListRestores` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to `ListRestores`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Restore]{@link google.cloud.gkebackup.v1.Restore} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRestoresAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRestoresStream(
    request?: protos.google.cloud.gkebackup.v1.IListRestoresRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRestores'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRestores.createStream(
      this.innerApiCalls.listRestores as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRestores`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The RestorePlan that contains the Restores to list.
   *   Format: projects/* /locations/* /restorePlans/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListRestoresResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListRestoresResponse.next_page_token|next_page_token}
   *   received from a previous `ListRestores` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to `ListRestores`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Restore]{@link google.cloud.gkebackup.v1.Restore}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.list_restores.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_ListRestores_async
   */
  listRestoresAsync(
    request?: protos.google.cloud.gkebackup.v1.IListRestoresRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkebackup.v1.IRestore> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRestores'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRestores.asyncIterate(
      this.innerApiCalls['listRestores'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkebackup.v1.IRestore>;
  }
  /**
   * Lists the VolumeRestores for a given Restore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Restore that contains the VolumeRestores to list.
   *   Format: projects/* /locations/* /restorePlans/* /restores/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListVolumeRestoresResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListVolumeRestoresResponse.next_page_token|next_page_token}
   *   received from a previous `ListVolumeRestores` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListVolumeRestores` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [VolumeRestore]{@link google.cloud.gkebackup.v1.VolumeRestore}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVolumeRestoresAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVolumeRestores(
    request?: protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IVolumeRestore[],
      protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest | null,
      protos.google.cloud.gkebackup.v1.IListVolumeRestoresResponse
    ]
  >;
  listVolumeRestores(
    request: protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
      | protos.google.cloud.gkebackup.v1.IListVolumeRestoresResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IVolumeRestore
    >
  ): void;
  listVolumeRestores(
    request: protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
      | protos.google.cloud.gkebackup.v1.IListVolumeRestoresResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IVolumeRestore
    >
  ): void;
  listVolumeRestores(
    request?: protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
          | protos.google.cloud.gkebackup.v1.IListVolumeRestoresResponse
          | null
          | undefined,
          protos.google.cloud.gkebackup.v1.IVolumeRestore
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
      | protos.google.cloud.gkebackup.v1.IListVolumeRestoresResponse
      | null
      | undefined,
      protos.google.cloud.gkebackup.v1.IVolumeRestore
    >
  ): Promise<
    [
      protos.google.cloud.gkebackup.v1.IVolumeRestore[],
      protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest | null,
      protos.google.cloud.gkebackup.v1.IListVolumeRestoresResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVolumeRestores(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Restore that contains the VolumeRestores to list.
   *   Format: projects/* /locations/* /restorePlans/* /restores/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListVolumeRestoresResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListVolumeRestoresResponse.next_page_token|next_page_token}
   *   received from a previous `ListVolumeRestores` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListVolumeRestores` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [VolumeRestore]{@link google.cloud.gkebackup.v1.VolumeRestore} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVolumeRestoresAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVolumeRestoresStream(
    request?: protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumeRestores'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumeRestores.createStream(
      this.innerApiCalls.listVolumeRestores as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVolumeRestores`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Restore that contains the VolumeRestores to list.
   *   Format: projects/* /locations/* /restorePlans/* /restores/*
   * @param {number} request.pageSize
   *   The target number of results to return in a single response.
   *   If not specified, a default value will be chosen by the service.
   *   Note that the response may inclue a partial list and a caller should
   *   only rely on the response's
   *   {@link google.cloud.gkebackup.v1.ListVolumeRestoresResponse.next_page_token|next_page_token}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The value of
   *   {@link google.cloud.gkebackup.v1.ListVolumeRestoresResponse.next_page_token|next_page_token}
   *   received from a previous `ListVolumeRestores` call.
   *   Provide this to retrieve the subsequent page in a multi-page list of
   *   results. When paginating, all other parameters provided to
   *   `ListVolumeRestores` must match the call that provided the page token.
   * @param {string} request.filter
   *   Field match expression used to filter the results.
   * @param {string} request.orderBy
   *   Field by which to sort the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [VolumeRestore]{@link google.cloud.gkebackup.v1.VolumeRestore}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/backup_for_g_k_e.list_volume_restores.js</caption>
   * region_tag:gkebackup_v1_generated_BackupForGKE_ListVolumeRestores_async
   */
  listVolumeRestoresAsync(
    request?: protos.google.cloud.gkebackup.v1.IListVolumeRestoresRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkebackup.v1.IVolumeRestore> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumeRestores'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumeRestores.asyncIterate(
      this.innerApiCalls['listVolumeRestores'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkebackup.v1.IVolumeRestore>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified backup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup_plan
   * @param {string} backup
   * @returns {string} Resource name string.
   */
  backupPath(
    project: string,
    location: string,
    backupPlan: string,
    backup: string
  ) {
    return this.pathTemplates.backupPathTemplate.render({
      project: project,
      location: location,
      backup_plan: backupPlan,
      backup: backup,
    });
  }

  /**
   * Parse the project from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).project;
  }

  /**
   * Parse the location from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).location;
  }

  /**
   * Parse the backup_plan from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backup_plan.
   */
  matchBackupPlanFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backup_plan;
  }

  /**
   * Parse the backup from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backup.
   */
  matchBackupFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backup;
  }

  /**
   * Return a fully-qualified backupPlan resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup_plan
   * @returns {string} Resource name string.
   */
  backupPlanPath(project: string, location: string, backupPlan: string) {
    return this.pathTemplates.backupPlanPathTemplate.render({
      project: project,
      location: location,
      backup_plan: backupPlan,
    });
  }

  /**
   * Parse the project from BackupPlan resource.
   *
   * @param {string} backupPlanName
   *   A fully-qualified path representing BackupPlan resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupPlanName(backupPlanName: string) {
    return this.pathTemplates.backupPlanPathTemplate.match(backupPlanName)
      .project;
  }

  /**
   * Parse the location from BackupPlan resource.
   *
   * @param {string} backupPlanName
   *   A fully-qualified path representing BackupPlan resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupPlanName(backupPlanName: string) {
    return this.pathTemplates.backupPlanPathTemplate.match(backupPlanName)
      .location;
  }

  /**
   * Parse the backup_plan from BackupPlan resource.
   *
   * @param {string} backupPlanName
   *   A fully-qualified path representing BackupPlan resource.
   * @returns {string} A string representing the backup_plan.
   */
  matchBackupPlanFromBackupPlanName(backupPlanName: string) {
    return this.pathTemplates.backupPlanPathTemplate.match(backupPlanName)
      .backup_plan;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified restore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} restore_plan
   * @param {string} restore
   * @returns {string} Resource name string.
   */
  restorePath(
    project: string,
    location: string,
    restorePlan: string,
    restore: string
  ) {
    return this.pathTemplates.restorePathTemplate.render({
      project: project,
      location: location,
      restore_plan: restorePlan,
      restore: restore,
    });
  }

  /**
   * Parse the project from Restore resource.
   *
   * @param {string} restoreName
   *   A fully-qualified path representing Restore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRestoreName(restoreName: string) {
    return this.pathTemplates.restorePathTemplate.match(restoreName).project;
  }

  /**
   * Parse the location from Restore resource.
   *
   * @param {string} restoreName
   *   A fully-qualified path representing Restore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRestoreName(restoreName: string) {
    return this.pathTemplates.restorePathTemplate.match(restoreName).location;
  }

  /**
   * Parse the restore_plan from Restore resource.
   *
   * @param {string} restoreName
   *   A fully-qualified path representing Restore resource.
   * @returns {string} A string representing the restore_plan.
   */
  matchRestorePlanFromRestoreName(restoreName: string) {
    return this.pathTemplates.restorePathTemplate.match(restoreName)
      .restore_plan;
  }

  /**
   * Parse the restore from Restore resource.
   *
   * @param {string} restoreName
   *   A fully-qualified path representing Restore resource.
   * @returns {string} A string representing the restore.
   */
  matchRestoreFromRestoreName(restoreName: string) {
    return this.pathTemplates.restorePathTemplate.match(restoreName).restore;
  }

  /**
   * Return a fully-qualified restorePlan resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} restore_plan
   * @returns {string} Resource name string.
   */
  restorePlanPath(project: string, location: string, restorePlan: string) {
    return this.pathTemplates.restorePlanPathTemplate.render({
      project: project,
      location: location,
      restore_plan: restorePlan,
    });
  }

  /**
   * Parse the project from RestorePlan resource.
   *
   * @param {string} restorePlanName
   *   A fully-qualified path representing RestorePlan resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRestorePlanName(restorePlanName: string) {
    return this.pathTemplates.restorePlanPathTemplate.match(restorePlanName)
      .project;
  }

  /**
   * Parse the location from RestorePlan resource.
   *
   * @param {string} restorePlanName
   *   A fully-qualified path representing RestorePlan resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRestorePlanName(restorePlanName: string) {
    return this.pathTemplates.restorePlanPathTemplate.match(restorePlanName)
      .location;
  }

  /**
   * Parse the restore_plan from RestorePlan resource.
   *
   * @param {string} restorePlanName
   *   A fully-qualified path representing RestorePlan resource.
   * @returns {string} A string representing the restore_plan.
   */
  matchRestorePlanFromRestorePlanName(restorePlanName: string) {
    return this.pathTemplates.restorePlanPathTemplate.match(restorePlanName)
      .restore_plan;
  }

  /**
   * Return a fully-qualified volumeBackup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup_plan
   * @param {string} backup
   * @param {string} volume_backup
   * @returns {string} Resource name string.
   */
  volumeBackupPath(
    project: string,
    location: string,
    backupPlan: string,
    backup: string,
    volumeBackup: string
  ) {
    return this.pathTemplates.volumeBackupPathTemplate.render({
      project: project,
      location: location,
      backup_plan: backupPlan,
      backup: backup,
      volume_backup: volumeBackup,
    });
  }

  /**
   * Parse the project from VolumeBackup resource.
   *
   * @param {string} volumeBackupName
   *   A fully-qualified path representing VolumeBackup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVolumeBackupName(volumeBackupName: string) {
    return this.pathTemplates.volumeBackupPathTemplate.match(volumeBackupName)
      .project;
  }

  /**
   * Parse the location from VolumeBackup resource.
   *
   * @param {string} volumeBackupName
   *   A fully-qualified path representing VolumeBackup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVolumeBackupName(volumeBackupName: string) {
    return this.pathTemplates.volumeBackupPathTemplate.match(volumeBackupName)
      .location;
  }

  /**
   * Parse the backup_plan from VolumeBackup resource.
   *
   * @param {string} volumeBackupName
   *   A fully-qualified path representing VolumeBackup resource.
   * @returns {string} A string representing the backup_plan.
   */
  matchBackupPlanFromVolumeBackupName(volumeBackupName: string) {
    return this.pathTemplates.volumeBackupPathTemplate.match(volumeBackupName)
      .backup_plan;
  }

  /**
   * Parse the backup from VolumeBackup resource.
   *
   * @param {string} volumeBackupName
   *   A fully-qualified path representing VolumeBackup resource.
   * @returns {string} A string representing the backup.
   */
  matchBackupFromVolumeBackupName(volumeBackupName: string) {
    return this.pathTemplates.volumeBackupPathTemplate.match(volumeBackupName)
      .backup;
  }

  /**
   * Parse the volume_backup from VolumeBackup resource.
   *
   * @param {string} volumeBackupName
   *   A fully-qualified path representing VolumeBackup resource.
   * @returns {string} A string representing the volume_backup.
   */
  matchVolumeBackupFromVolumeBackupName(volumeBackupName: string) {
    return this.pathTemplates.volumeBackupPathTemplate.match(volumeBackupName)
      .volume_backup;
  }

  /**
   * Return a fully-qualified volumeRestore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} restore_plan
   * @param {string} restore
   * @param {string} volume_restore
   * @returns {string} Resource name string.
   */
  volumeRestorePath(
    project: string,
    location: string,
    restorePlan: string,
    restore: string,
    volumeRestore: string
  ) {
    return this.pathTemplates.volumeRestorePathTemplate.render({
      project: project,
      location: location,
      restore_plan: restorePlan,
      restore: restore,
      volume_restore: volumeRestore,
    });
  }

  /**
   * Parse the project from VolumeRestore resource.
   *
   * @param {string} volumeRestoreName
   *   A fully-qualified path representing VolumeRestore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVolumeRestoreName(volumeRestoreName: string) {
    return this.pathTemplates.volumeRestorePathTemplate.match(volumeRestoreName)
      .project;
  }

  /**
   * Parse the location from VolumeRestore resource.
   *
   * @param {string} volumeRestoreName
   *   A fully-qualified path representing VolumeRestore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVolumeRestoreName(volumeRestoreName: string) {
    return this.pathTemplates.volumeRestorePathTemplate.match(volumeRestoreName)
      .location;
  }

  /**
   * Parse the restore_plan from VolumeRestore resource.
   *
   * @param {string} volumeRestoreName
   *   A fully-qualified path representing VolumeRestore resource.
   * @returns {string} A string representing the restore_plan.
   */
  matchRestorePlanFromVolumeRestoreName(volumeRestoreName: string) {
    return this.pathTemplates.volumeRestorePathTemplate.match(volumeRestoreName)
      .restore_plan;
  }

  /**
   * Parse the restore from VolumeRestore resource.
   *
   * @param {string} volumeRestoreName
   *   A fully-qualified path representing VolumeRestore resource.
   * @returns {string} A string representing the restore.
   */
  matchRestoreFromVolumeRestoreName(volumeRestoreName: string) {
    return this.pathTemplates.volumeRestorePathTemplate.match(volumeRestoreName)
      .restore;
  }

  /**
   * Parse the volume_restore from VolumeRestore resource.
   *
   * @param {string} volumeRestoreName
   *   A fully-qualified path representing VolumeRestore resource.
   * @returns {string} A string representing the volume_restore.
   */
  matchVolumeRestoreFromVolumeRestoreName(volumeRestoreName: string) {
    return this.pathTemplates.volumeRestorePathTemplate.match(volumeRestoreName)
      .volume_restore;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.backupForGKEStub && !this._terminated) {
      return this.backupForGKEStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
