// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/storage_transfer_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './storage_transfer_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Storage Transfer Service and its protos.
 *  Transfers data between between Google Cloud Storage buckets or from a data
 *  source external to Google to a Cloud Storage bucket.
 * @class
 * @memberof v1
 */
export class StorageTransferServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  storageTransferServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of StorageTransferServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new StorageTransferServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof StorageTransferServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      agentPoolsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project_id}/agentPools/{agent_pool_id}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTransferJobs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'transferJobs'
      ),
      listAgentPools: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'agentPools'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=transferOperations/**}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=transferOperations/**}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=transferOperations}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const runTransferJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const runTransferJobMetadata = protoFilesRoot.lookup(
      '.google.storagetransfer.v1.TransferOperation'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      runTransferJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        runTransferJobResponse.decode.bind(runTransferJobResponse),
        runTransferJobMetadata.decode.bind(runTransferJobMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.storagetransfer.v1.StorageTransferService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.storageTransferServiceStub) {
      return this.storageTransferServiceStub;
    }

    // Put together the "service stub" for
    // google.storagetransfer.v1.StorageTransferService.
    this.storageTransferServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.storagetransfer.v1.StorageTransferService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.storagetransfer.v1
            .StorageTransferService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const storageTransferServiceStubMethods = [
      'getGoogleServiceAccount',
      'createTransferJob',
      'updateTransferJob',
      'getTransferJob',
      'listTransferJobs',
      'pauseTransferOperation',
      'resumeTransferOperation',
      'runTransferJob',
      'deleteTransferJob',
      'createAgentPool',
      'updateAgentPool',
      'getAgentPool',
      'listAgentPools',
      'deleteAgentPool',
    ];
    for (const methodName of storageTransferServiceStubMethods) {
      const callPromise = this.storageTransferServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.storageTransferServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'storagetransfer.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'storagetransfer.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Returns the Google service account that is used by Storage Transfer
   * Service to access buckets in the project where transfers
   * run or in other projects. Each Google service account is associated
   * with one Google Cloud project. Users
   * should add this service account to the Google Cloud Storage bucket
   * ACLs to grant access to Storage Transfer Service. This service
   * account is created and owned by Storage Transfer Service and can
   * only be used by Storage Transfer Service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that the Google service
   *   account is associated with.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GoogleServiceAccount]{@link google.storagetransfer.v1.GoogleServiceAccount}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.get_google_service_account.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_GetGoogleServiceAccount_async
   */
  getGoogleServiceAccount(
    request?: protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.IGoogleServiceAccount,
      (
        | protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getGoogleServiceAccount(
    request: protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storagetransfer.v1.IGoogleServiceAccount,
      | protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGoogleServiceAccount(
    request: protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest,
    callback: Callback<
      protos.google.storagetransfer.v1.IGoogleServiceAccount,
      | protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGoogleServiceAccount(
    request?: protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storagetransfer.v1.IGoogleServiceAccount,
          | protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storagetransfer.v1.IGoogleServiceAccount,
      | protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.IGoogleServiceAccount,
      (
        | protos.google.storagetransfer.v1.IGetGoogleServiceAccountRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGoogleServiceAccount(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a transfer job that runs periodically.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.storagetransfer.v1.TransferJob} request.transferJob
   *   Required. The job to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferJob]{@link google.storagetransfer.v1.TransferJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.create_transfer_job.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_CreateTransferJob_async
   */
  createTransferJob(
    request?: protos.google.storagetransfer.v1.ICreateTransferJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.ITransferJob,
      protos.google.storagetransfer.v1.ICreateTransferJobRequest | undefined,
      {} | undefined
    ]
  >;
  createTransferJob(
    request: protos.google.storagetransfer.v1.ICreateTransferJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.ICreateTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTransferJob(
    request: protos.google.storagetransfer.v1.ICreateTransferJobRequest,
    callback: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.ICreateTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTransferJob(
    request?: protos.google.storagetransfer.v1.ICreateTransferJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storagetransfer.v1.ITransferJob,
          | protos.google.storagetransfer.v1.ICreateTransferJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.ICreateTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.ITransferJob,
      protos.google.storagetransfer.v1.ICreateTransferJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createTransferJob(request, options, callback);
  }
  /**
   * Updates a transfer job. Updating a job's transfer spec does not affect
   * transfer operations that are running already.
   *
   * **Note:** The job's {@link google.storagetransfer.v1.TransferJob.status|status} field can be modified
   * using this RPC (for example, to set a job's status to
   * {@link google.storagetransfer.v1.TransferJob.Status.DELETED|DELETED},
   * {@link google.storagetransfer.v1.TransferJob.Status.DISABLED|DISABLED}, or
   * {@link google.storagetransfer.v1.TransferJob.Status.ENABLED|ENABLED}).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.jobName
   *   Required. The name of job to update.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that owns the
   *   job.
   * @param {google.storagetransfer.v1.TransferJob} request.transferJob
   *   Required. The job to update. `transferJob` is expected to specify one or more of
   *   five fields: {@link google.storagetransfer.v1.TransferJob.description|description},
   *   {@link google.storagetransfer.v1.TransferJob.transfer_spec|transfer_spec},
   *   {@link google.storagetransfer.v1.TransferJob.notification_config|notification_config},
   *   {@link google.storagetransfer.v1.TransferJob.logging_config|logging_config}, and
   *   {@link google.storagetransfer.v1.TransferJob.status|status}.  An `UpdateTransferJobRequest` that specifies
   *   other fields are rejected with the error
   *   {@link google.rpc.Code.INVALID_ARGUMENT|INVALID_ARGUMENT}. Updating a job status
   *   to {@link google.storagetransfer.v1.TransferJob.Status.DELETED|DELETED} requires
   *   `storagetransfer.jobs.delete` permission.
   * @param {google.protobuf.FieldMask} request.updateTransferJobFieldMask
   *   The field mask of the fields in `transferJob` that are to be updated in
   *   this request.  Fields in `transferJob` that can be updated are:
   *   {@link google.storagetransfer.v1.TransferJob.description|description},
   *   {@link google.storagetransfer.v1.TransferJob.transfer_spec|transfer_spec},
   *   {@link google.storagetransfer.v1.TransferJob.notification_config|notification_config},
   *   {@link google.storagetransfer.v1.TransferJob.logging_config|logging_config}, and
   *   {@link google.storagetransfer.v1.TransferJob.status|status}.  To update the `transfer_spec` of the job, a
   *   complete transfer specification must be provided. An incomplete
   *   specification missing any required fields is rejected with the error
   *   {@link google.rpc.Code.INVALID_ARGUMENT|INVALID_ARGUMENT}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferJob]{@link google.storagetransfer.v1.TransferJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.update_transfer_job.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_UpdateTransferJob_async
   */
  updateTransferJob(
    request?: protos.google.storagetransfer.v1.IUpdateTransferJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.ITransferJob,
      protos.google.storagetransfer.v1.IUpdateTransferJobRequest | undefined,
      {} | undefined
    ]
  >;
  updateTransferJob(
    request: protos.google.storagetransfer.v1.IUpdateTransferJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.IUpdateTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTransferJob(
    request: protos.google.storagetransfer.v1.IUpdateTransferJobRequest,
    callback: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.IUpdateTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTransferJob(
    request?: protos.google.storagetransfer.v1.IUpdateTransferJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storagetransfer.v1.ITransferJob,
          | protos.google.storagetransfer.v1.IUpdateTransferJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.IUpdateTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.ITransferJob,
      protos.google.storagetransfer.v1.IUpdateTransferJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        job_name: request.jobName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTransferJob(request, options, callback);
  }
  /**
   * Gets a transfer job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.jobName
   *   Required. The job to get.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that owns the
   *   job.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferJob]{@link google.storagetransfer.v1.TransferJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.get_transfer_job.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_GetTransferJob_async
   */
  getTransferJob(
    request?: protos.google.storagetransfer.v1.IGetTransferJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.ITransferJob,
      protos.google.storagetransfer.v1.IGetTransferJobRequest | undefined,
      {} | undefined
    ]
  >;
  getTransferJob(
    request: protos.google.storagetransfer.v1.IGetTransferJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.IGetTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTransferJob(
    request: protos.google.storagetransfer.v1.IGetTransferJobRequest,
    callback: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.IGetTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTransferJob(
    request?: protos.google.storagetransfer.v1.IGetTransferJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storagetransfer.v1.ITransferJob,
          | protos.google.storagetransfer.v1.IGetTransferJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storagetransfer.v1.ITransferJob,
      | protos.google.storagetransfer.v1.IGetTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.ITransferJob,
      protos.google.storagetransfer.v1.IGetTransferJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        job_name: request.jobName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTransferJob(request, options, callback);
  }
  /**
   * Pauses a transfer operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the transfer operation.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.pause_transfer_operation.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_PauseTransferOperation_async
   */
  pauseTransferOperation(
    request?: protos.google.storagetransfer.v1.IPauseTransferOperationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.storagetransfer.v1.IPauseTransferOperationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  pauseTransferOperation(
    request: protos.google.storagetransfer.v1.IPauseTransferOperationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IPauseTransferOperationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  pauseTransferOperation(
    request: protos.google.storagetransfer.v1.IPauseTransferOperationRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IPauseTransferOperationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  pauseTransferOperation(
    request?: protos.google.storagetransfer.v1.IPauseTransferOperationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.storagetransfer.v1.IPauseTransferOperationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IPauseTransferOperationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.storagetransfer.v1.IPauseTransferOperationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.pauseTransferOperation(
      request,
      options,
      callback
    );
  }
  /**
   * Resumes a transfer operation that is paused.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the transfer operation.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.resume_transfer_operation.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_ResumeTransferOperation_async
   */
  resumeTransferOperation(
    request?: protos.google.storagetransfer.v1.IResumeTransferOperationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.storagetransfer.v1.IResumeTransferOperationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  resumeTransferOperation(
    request: protos.google.storagetransfer.v1.IResumeTransferOperationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IResumeTransferOperationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  resumeTransferOperation(
    request: protos.google.storagetransfer.v1.IResumeTransferOperationRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IResumeTransferOperationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  resumeTransferOperation(
    request?: protos.google.storagetransfer.v1.IResumeTransferOperationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.storagetransfer.v1.IResumeTransferOperationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IResumeTransferOperationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.storagetransfer.v1.IResumeTransferOperationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.resumeTransferOperation(
      request,
      options,
      callback
    );
  }
  /**
   * Deletes a transfer job. Deleting a transfer job sets its status to
   * {@link google.storagetransfer.v1.TransferJob.Status.DELETED|DELETED}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.jobName
   *   Required. The job to delete.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that owns the
   *   job.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.delete_transfer_job.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_DeleteTransferJob_async
   */
  deleteTransferJob(
    request?: protos.google.storagetransfer.v1.IDeleteTransferJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.storagetransfer.v1.IDeleteTransferJobRequest | undefined,
      {} | undefined
    ]
  >;
  deleteTransferJob(
    request: protos.google.storagetransfer.v1.IDeleteTransferJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IDeleteTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTransferJob(
    request: protos.google.storagetransfer.v1.IDeleteTransferJobRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IDeleteTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTransferJob(
    request?: protos.google.storagetransfer.v1.IDeleteTransferJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.storagetransfer.v1.IDeleteTransferJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IDeleteTransferJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.storagetransfer.v1.IDeleteTransferJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        job_name: request.jobName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTransferJob(request, options, callback);
  }
  /**
   * Creates an agent pool resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that owns the
   *   agent pool.
   * @param {google.storagetransfer.v1.AgentPool} request.agentPool
   *   Required. The agent pool to create.
   * @param {string} request.agentPoolId
   *   Required. The ID of the agent pool to create.
   *
   *   The `agent_pool_id` must meet the following requirements:
   *
   *   *   Length of 128 characters or less.
   *   *   Not start with the string `goog`.
   *   *   Start with a lowercase ASCII character, followed by:
   *       *   Zero or more: lowercase Latin alphabet characters, numerals,
   *           hyphens (`-`), periods (`.`), underscores (`_`), or tildes (`~`).
   *       *   One or more numerals or lowercase ASCII characters.
   *
   *   As expressed by the regular expression:
   *   `^(?!goog)[a-z]([a-z0-9-._~]*[a-z0-9])?$`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AgentPool]{@link google.storagetransfer.v1.AgentPool}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.create_agent_pool.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_CreateAgentPool_async
   */
  createAgentPool(
    request?: protos.google.storagetransfer.v1.ICreateAgentPoolRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.ICreateAgentPoolRequest | undefined,
      {} | undefined
    ]
  >;
  createAgentPool(
    request: protos.google.storagetransfer.v1.ICreateAgentPoolRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      | protos.google.storagetransfer.v1.ICreateAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createAgentPool(
    request: protos.google.storagetransfer.v1.ICreateAgentPoolRequest,
    callback: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      | protos.google.storagetransfer.v1.ICreateAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createAgentPool(
    request?: protos.google.storagetransfer.v1.ICreateAgentPoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storagetransfer.v1.IAgentPool,
          | protos.google.storagetransfer.v1.ICreateAgentPoolRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      | protos.google.storagetransfer.v1.ICreateAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.ICreateAgentPoolRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAgentPool(request, options, callback);
  }
  /**
   * Updates an existing agent pool resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.storagetransfer.v1.AgentPool} request.agentPool
   *   Required. The agent pool to update. `agent_pool` is expected to specify following
   *   fields:
   *
   *   *  {@link google.storagetransfer.v1.AgentPool.name|name}
   *
   *   *  {@link google.storagetransfer.v1.AgentPool.display_name|display_name}
   *
   *   *  {@link google.storagetransfer.v1.AgentPool.bandwidth_limit|bandwidth_limit}
   *   An `UpdateAgentPoolRequest` with any other fields is rejected
   *   with the error {@link google.rpc.Code.INVALID_ARGUMENT|INVALID_ARGUMENT}.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The [field mask]
   *   (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf)
   *   of the fields in `agentPool` to update in this request.
   *   The following `agentPool` fields can be updated:
   *
   *   *  {@link google.storagetransfer.v1.AgentPool.display_name|display_name}
   *
   *   *  {@link google.storagetransfer.v1.AgentPool.bandwidth_limit|bandwidth_limit}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AgentPool]{@link google.storagetransfer.v1.AgentPool}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.update_agent_pool.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_UpdateAgentPool_async
   */
  updateAgentPool(
    request?: protos.google.storagetransfer.v1.IUpdateAgentPoolRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.IUpdateAgentPoolRequest | undefined,
      {} | undefined
    ]
  >;
  updateAgentPool(
    request: protos.google.storagetransfer.v1.IUpdateAgentPoolRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      | protos.google.storagetransfer.v1.IUpdateAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateAgentPool(
    request: protos.google.storagetransfer.v1.IUpdateAgentPoolRequest,
    callback: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      | protos.google.storagetransfer.v1.IUpdateAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateAgentPool(
    request?: protos.google.storagetransfer.v1.IUpdateAgentPoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storagetransfer.v1.IAgentPool,
          | protos.google.storagetransfer.v1.IUpdateAgentPoolRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      | protos.google.storagetransfer.v1.IUpdateAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.IUpdateAgentPoolRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'agent_pool.name': request.agentPool!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAgentPool(request, options, callback);
  }
  /**
   * Gets an agent pool.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the agent pool to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AgentPool]{@link google.storagetransfer.v1.AgentPool}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.get_agent_pool.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_GetAgentPool_async
   */
  getAgentPool(
    request?: protos.google.storagetransfer.v1.IGetAgentPoolRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.IGetAgentPoolRequest | undefined,
      {} | undefined
    ]
  >;
  getAgentPool(
    request: protos.google.storagetransfer.v1.IGetAgentPoolRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.IGetAgentPoolRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getAgentPool(
    request: protos.google.storagetransfer.v1.IGetAgentPoolRequest,
    callback: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.IGetAgentPoolRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getAgentPool(
    request?: protos.google.storagetransfer.v1.IGetAgentPoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storagetransfer.v1.IAgentPool,
          | protos.google.storagetransfer.v1.IGetAgentPoolRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.IGetAgentPoolRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.IAgentPool,
      protos.google.storagetransfer.v1.IGetAgentPoolRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAgentPool(request, options, callback);
  }
  /**
   * Deletes an agent pool.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the agent pool to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.delete_agent_pool.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_DeleteAgentPool_async
   */
  deleteAgentPool(
    request?: protos.google.storagetransfer.v1.IDeleteAgentPoolRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.storagetransfer.v1.IDeleteAgentPoolRequest | undefined,
      {} | undefined
    ]
  >;
  deleteAgentPool(
    request: protos.google.storagetransfer.v1.IDeleteAgentPoolRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IDeleteAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAgentPool(
    request: protos.google.storagetransfer.v1.IDeleteAgentPoolRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IDeleteAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAgentPool(
    request?: protos.google.storagetransfer.v1.IDeleteAgentPoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.storagetransfer.v1.IDeleteAgentPoolRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storagetransfer.v1.IDeleteAgentPoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.storagetransfer.v1.IDeleteAgentPoolRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAgentPool(request, options, callback);
  }

  /**
   * Attempts to start a new TransferOperation for the current TransferJob. A
   * TransferJob has a maximum of one active TransferOperation. If this method
   * is called while a TransferOperation is active, an error will be returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.jobName
   *   Required. The name of the transfer job.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that owns the transfer
   *   job.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.run_transfer_job.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_RunTransferJob_async
   */
  runTransferJob(
    request?: protos.google.storagetransfer.v1.IRunTransferJobRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.storagetransfer.v1.ITransferOperation
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  runTransferJob(
    request: protos.google.storagetransfer.v1.IRunTransferJobRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.storagetransfer.v1.ITransferOperation
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  runTransferJob(
    request: protos.google.storagetransfer.v1.IRunTransferJobRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.storagetransfer.v1.ITransferOperation
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  runTransferJob(
    request?: protos.google.storagetransfer.v1.IRunTransferJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.storagetransfer.v1.ITransferOperation
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.storagetransfer.v1.ITransferOperation
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.storagetransfer.v1.ITransferOperation
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        job_name: request.jobName ?? '',
      });
    this.initialize();
    return this.innerApiCalls.runTransferJob(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `runTransferJob()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.run_transfer_job.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_RunTransferJob_async
   */
  async checkRunTransferJobProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.storagetransfer.v1.TransferOperation
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.runTransferJob,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.storagetransfer.v1.TransferOperation
    >;
  }
  /**
   * Lists transfer jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.filter
   *   Required. A list of query parameters specified as JSON text in the form of:
   *   `{"projectId":"my_project_id",
   *    "jobNames":["jobid1","jobid2",...],
   *    "jobStatuses":["status1","status2",...]}`
   *
   *   Since `jobNames` and `jobStatuses` support multiple values, their values
   *   must be specified with array notation. `projectId` is required.
   *   `jobNames` and `jobStatuses` are optional.  The valid values for
   *   `jobStatuses` are case-insensitive:
   *   {@link google.storagetransfer.v1.TransferJob.Status.ENABLED|ENABLED},
   *   {@link google.storagetransfer.v1.TransferJob.Status.DISABLED|DISABLED}, and
   *   {@link google.storagetransfer.v1.TransferJob.Status.DELETED|DELETED}.
   * @param {number} request.pageSize
   *   The list page size. The max allowed value is 256.
   * @param {string} request.pageToken
   *   The list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TransferJob]{@link google.storagetransfer.v1.TransferJob}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTransferJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTransferJobs(
    request?: protos.google.storagetransfer.v1.IListTransferJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.ITransferJob[],
      protos.google.storagetransfer.v1.IListTransferJobsRequest | null,
      protos.google.storagetransfer.v1.IListTransferJobsResponse
    ]
  >;
  listTransferJobs(
    request: protos.google.storagetransfer.v1.IListTransferJobsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.storagetransfer.v1.IListTransferJobsRequest,
      | protos.google.storagetransfer.v1.IListTransferJobsResponse
      | null
      | undefined,
      protos.google.storagetransfer.v1.ITransferJob
    >
  ): void;
  listTransferJobs(
    request: protos.google.storagetransfer.v1.IListTransferJobsRequest,
    callback: PaginationCallback<
      protos.google.storagetransfer.v1.IListTransferJobsRequest,
      | protos.google.storagetransfer.v1.IListTransferJobsResponse
      | null
      | undefined,
      protos.google.storagetransfer.v1.ITransferJob
    >
  ): void;
  listTransferJobs(
    request?: protos.google.storagetransfer.v1.IListTransferJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.storagetransfer.v1.IListTransferJobsRequest,
          | protos.google.storagetransfer.v1.IListTransferJobsResponse
          | null
          | undefined,
          protos.google.storagetransfer.v1.ITransferJob
        >,
    callback?: PaginationCallback<
      protos.google.storagetransfer.v1.IListTransferJobsRequest,
      | protos.google.storagetransfer.v1.IListTransferJobsResponse
      | null
      | undefined,
      protos.google.storagetransfer.v1.ITransferJob
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.ITransferJob[],
      protos.google.storagetransfer.v1.IListTransferJobsRequest | null,
      protos.google.storagetransfer.v1.IListTransferJobsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listTransferJobs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.filter
   *   Required. A list of query parameters specified as JSON text in the form of:
   *   `{"projectId":"my_project_id",
   *    "jobNames":["jobid1","jobid2",...],
   *    "jobStatuses":["status1","status2",...]}`
   *
   *   Since `jobNames` and `jobStatuses` support multiple values, their values
   *   must be specified with array notation. `projectId` is required.
   *   `jobNames` and `jobStatuses` are optional.  The valid values for
   *   `jobStatuses` are case-insensitive:
   *   {@link google.storagetransfer.v1.TransferJob.Status.ENABLED|ENABLED},
   *   {@link google.storagetransfer.v1.TransferJob.Status.DISABLED|DISABLED}, and
   *   {@link google.storagetransfer.v1.TransferJob.Status.DELETED|DELETED}.
   * @param {number} request.pageSize
   *   The list page size. The max allowed value is 256.
   * @param {string} request.pageToken
   *   The list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TransferJob]{@link google.storagetransfer.v1.TransferJob} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTransferJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTransferJobsStream(
    request?: protos.google.storagetransfer.v1.IListTransferJobsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listTransferJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTransferJobs.createStream(
      this.innerApiCalls.listTransferJobs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTransferJobs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.filter
   *   Required. A list of query parameters specified as JSON text in the form of:
   *   `{"projectId":"my_project_id",
   *    "jobNames":["jobid1","jobid2",...],
   *    "jobStatuses":["status1","status2",...]}`
   *
   *   Since `jobNames` and `jobStatuses` support multiple values, their values
   *   must be specified with array notation. `projectId` is required.
   *   `jobNames` and `jobStatuses` are optional.  The valid values for
   *   `jobStatuses` are case-insensitive:
   *   {@link google.storagetransfer.v1.TransferJob.Status.ENABLED|ENABLED},
   *   {@link google.storagetransfer.v1.TransferJob.Status.DISABLED|DISABLED}, and
   *   {@link google.storagetransfer.v1.TransferJob.Status.DELETED|DELETED}.
   * @param {number} request.pageSize
   *   The list page size. The max allowed value is 256.
   * @param {string} request.pageToken
   *   The list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TransferJob]{@link google.storagetransfer.v1.TransferJob}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.list_transfer_jobs.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_ListTransferJobs_async
   */
  listTransferJobsAsync(
    request?: protos.google.storagetransfer.v1.IListTransferJobsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.storagetransfer.v1.ITransferJob> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listTransferJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTransferJobs.asyncIterate(
      this.innerApiCalls['listTransferJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.storagetransfer.v1.ITransferJob>;
  }
  /**
   * Lists agent pools.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that owns the job.
   * @param {string} request.filter
   *   An optional list of query parameters specified as JSON text in the
   *   form of:
   *
   *   `{"agentPoolNames":["agentpool1","agentpool2",...]}`
   *
   *   Since `agentPoolNames` support multiple values, its values must be
   *   specified with array notation. When the filter is either empty or not
   *   provided, the list returns all agent pools for the project.
   * @param {number} request.pageSize
   *   The list page size. The max allowed value is `256`.
   * @param {string} request.pageToken
   *   The list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [AgentPool]{@link google.storagetransfer.v1.AgentPool}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAgentPoolsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAgentPools(
    request?: protos.google.storagetransfer.v1.IListAgentPoolsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storagetransfer.v1.IAgentPool[],
      protos.google.storagetransfer.v1.IListAgentPoolsRequest | null,
      protos.google.storagetransfer.v1.IListAgentPoolsResponse
    ]
  >;
  listAgentPools(
    request: protos.google.storagetransfer.v1.IListAgentPoolsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.storagetransfer.v1.IListAgentPoolsRequest,
      | protos.google.storagetransfer.v1.IListAgentPoolsResponse
      | null
      | undefined,
      protos.google.storagetransfer.v1.IAgentPool
    >
  ): void;
  listAgentPools(
    request: protos.google.storagetransfer.v1.IListAgentPoolsRequest,
    callback: PaginationCallback<
      protos.google.storagetransfer.v1.IListAgentPoolsRequest,
      | protos.google.storagetransfer.v1.IListAgentPoolsResponse
      | null
      | undefined,
      protos.google.storagetransfer.v1.IAgentPool
    >
  ): void;
  listAgentPools(
    request?: protos.google.storagetransfer.v1.IListAgentPoolsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.storagetransfer.v1.IListAgentPoolsRequest,
          | protos.google.storagetransfer.v1.IListAgentPoolsResponse
          | null
          | undefined,
          protos.google.storagetransfer.v1.IAgentPool
        >,
    callback?: PaginationCallback<
      protos.google.storagetransfer.v1.IListAgentPoolsRequest,
      | protos.google.storagetransfer.v1.IListAgentPoolsResponse
      | null
      | undefined,
      protos.google.storagetransfer.v1.IAgentPool
    >
  ): Promise<
    [
      protos.google.storagetransfer.v1.IAgentPool[],
      protos.google.storagetransfer.v1.IListAgentPoolsRequest | null,
      protos.google.storagetransfer.v1.IListAgentPoolsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAgentPools(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that owns the job.
   * @param {string} request.filter
   *   An optional list of query parameters specified as JSON text in the
   *   form of:
   *
   *   `{"agentPoolNames":["agentpool1","agentpool2",...]}`
   *
   *   Since `agentPoolNames` support multiple values, its values must be
   *   specified with array notation. When the filter is either empty or not
   *   provided, the list returns all agent pools for the project.
   * @param {number} request.pageSize
   *   The list page size. The max allowed value is `256`.
   * @param {string} request.pageToken
   *   The list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [AgentPool]{@link google.storagetransfer.v1.AgentPool} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAgentPoolsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAgentPoolsStream(
    request?: protos.google.storagetransfer.v1.IListAgentPoolsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    const defaultCallSettings = this._defaults['listAgentPools'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAgentPools.createStream(
      this.innerApiCalls.listAgentPools as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAgentPools`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. The ID of the Google Cloud project that owns the job.
   * @param {string} request.filter
   *   An optional list of query parameters specified as JSON text in the
   *   form of:
   *
   *   `{"agentPoolNames":["agentpool1","agentpool2",...]}`
   *
   *   Since `agentPoolNames` support multiple values, its values must be
   *   specified with array notation. When the filter is either empty or not
   *   provided, the list returns all agent pools for the project.
   * @param {number} request.pageSize
   *   The list page size. The max allowed value is `256`.
   * @param {string} request.pageToken
   *   The list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [AgentPool]{@link google.storagetransfer.v1.AgentPool}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/storage_transfer_service.list_agent_pools.js</caption>
   * region_tag:storagetransfer_v1_generated_StorageTransferService_ListAgentPools_async
   */
  listAgentPoolsAsync(
    request?: protos.google.storagetransfer.v1.IListAgentPoolsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.storagetransfer.v1.IAgentPool> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    const defaultCallSettings = this._defaults['listAgentPools'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAgentPools.asyncIterate(
      this.innerApiCalls['listAgentPools'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.storagetransfer.v1.IAgentPool>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified agentPools resource name string.
   *
   * @param {string} project_id
   * @param {string} agent_pool_id
   * @returns {string} Resource name string.
   */
  agentPoolsPath(projectId: string, agentPoolId: string) {
    return this.pathTemplates.agentPoolsPathTemplate.render({
      project_id: projectId,
      agent_pool_id: agentPoolId,
    });
  }

  /**
   * Parse the project_id from AgentPools resource.
   *
   * @param {string} agentPoolsName
   *   A fully-qualified path representing agentPools resource.
   * @returns {string} A string representing the project_id.
   */
  matchProjectIdFromAgentPoolsName(agentPoolsName: string) {
    return this.pathTemplates.agentPoolsPathTemplate.match(agentPoolsName)
      .project_id;
  }

  /**
   * Parse the agent_pool_id from AgentPools resource.
   *
   * @param {string} agentPoolsName
   *   A fully-qualified path representing agentPools resource.
   * @returns {string} A string representing the agent_pool_id.
   */
  matchAgentPoolIdFromAgentPoolsName(agentPoolsName: string) {
    return this.pathTemplates.agentPoolsPathTemplate.match(agentPoolsName)
      .agent_pool_id;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.storageTransferServiceStub && !this._terminated) {
      return this.storageTransferServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
