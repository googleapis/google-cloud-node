// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/edge_network_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './edge_network_client_config.json';
const version = require('../../../package.json').version;

/**
 *  EdgeNetwork API provides managed, highly available cloud dynamic network
 *  configuration service to the GEC customer to enable edge application and
 *  network function solutions. This allows the customers to easily define and
 *  configure the network setup and property to meet the workload requirement.
 * @class
 * @memberof v1
 */
export class EdgeNetworkClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  edgeNetworkStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of EdgeNetworkClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new EdgeNetworkClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof EdgeNetworkClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    this._universeDomain =
      opts?.universeDomain ?? opts?.universe_domain ?? 'googleapis.com';
    this._servicePath = 'edgenetwork.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      interconnectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/zones/{zone}/interconnects/{interconnect}'
      ),
      interconnectAttachmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/zones/{zone}/interconnectAttachments/{interconnect_attachment}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      networkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/zones/{zone}/networks/{network}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      routerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/zones/{zone}/routers/{router}'
      ),
      subnetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/zones/{zone}/subnets/{subnet}'
      ),
      zonePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/zones/{zone}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listZones: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'zones'
      ),
      listNetworks: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'networks'
      ),
      listSubnets: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'subnets'
      ),
      listInterconnects: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'interconnects'
      ),
      listInterconnectAttachments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'interconnectAttachments'
      ),
      listRouters: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'routers'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createNetworkResponse = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.Network'
    ) as gax.protobuf.Type;
    const createNetworkMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteNetworkResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteNetworkMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createSubnetResponse = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.Subnet'
    ) as gax.protobuf.Type;
    const createSubnetMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateSubnetResponse = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.Subnet'
    ) as gax.protobuf.Type;
    const updateSubnetMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteSubnetResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteSubnetMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createInterconnectAttachmentResponse = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.InterconnectAttachment'
    ) as gax.protobuf.Type;
    const createInterconnectAttachmentMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteInterconnectAttachmentResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteInterconnectAttachmentMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createRouterResponse = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.Router'
    ) as gax.protobuf.Type;
    const createRouterMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateRouterResponse = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.Router'
    ) as gax.protobuf.Type;
    const updateRouterMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteRouterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteRouterMetadata = protoFilesRoot.lookup(
      '.google.cloud.edgenetwork.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createNetwork: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createNetworkResponse.decode.bind(createNetworkResponse),
        createNetworkMetadata.decode.bind(createNetworkMetadata)
      ),
      deleteNetwork: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteNetworkResponse.decode.bind(deleteNetworkResponse),
        deleteNetworkMetadata.decode.bind(deleteNetworkMetadata)
      ),
      createSubnet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createSubnetResponse.decode.bind(createSubnetResponse),
        createSubnetMetadata.decode.bind(createSubnetMetadata)
      ),
      updateSubnet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateSubnetResponse.decode.bind(updateSubnetResponse),
        updateSubnetMetadata.decode.bind(updateSubnetMetadata)
      ),
      deleteSubnet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteSubnetResponse.decode.bind(deleteSubnetResponse),
        deleteSubnetMetadata.decode.bind(deleteSubnetMetadata)
      ),
      createInterconnectAttachment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createInterconnectAttachmentResponse.decode.bind(
          createInterconnectAttachmentResponse
        ),
        createInterconnectAttachmentMetadata.decode.bind(
          createInterconnectAttachmentMetadata
        )
      ),
      deleteInterconnectAttachment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteInterconnectAttachmentResponse.decode.bind(
          deleteInterconnectAttachmentResponse
        ),
        deleteInterconnectAttachmentMetadata.decode.bind(
          deleteInterconnectAttachmentMetadata
        )
      ),
      createRouter: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createRouterResponse.decode.bind(createRouterResponse),
        createRouterMetadata.decode.bind(createRouterMetadata)
      ),
      updateRouter: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateRouterResponse.decode.bind(updateRouterResponse),
        updateRouterMetadata.decode.bind(updateRouterMetadata)
      ),
      deleteRouter: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRouterResponse.decode.bind(deleteRouterResponse),
        deleteRouterMetadata.decode.bind(deleteRouterMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.edgenetwork.v1.EdgeNetwork',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.edgeNetworkStub) {
      return this.edgeNetworkStub;
    }

    // Put together the "service stub" for
    // google.cloud.edgenetwork.v1.EdgeNetwork.
    this.edgeNetworkStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.edgenetwork.v1.EdgeNetwork'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.edgenetwork.v1.EdgeNetwork,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const edgeNetworkStubMethods = [
      'initializeZone',
      'listZones',
      'getZone',
      'listNetworks',
      'getNetwork',
      'diagnoseNetwork',
      'createNetwork',
      'deleteNetwork',
      'listSubnets',
      'getSubnet',
      'createSubnet',
      'updateSubnet',
      'deleteSubnet',
      'listInterconnects',
      'getInterconnect',
      'diagnoseInterconnect',
      'listInterconnectAttachments',
      'getInterconnectAttachment',
      'createInterconnectAttachment',
      'deleteInterconnectAttachment',
      'listRouters',
      'getRouter',
      'diagnoseRouter',
      'createRouter',
      'updateRouter',
      'deleteRouter',
    ];
    for (const methodName of edgeNetworkStubMethods) {
      const callPromise = this.edgeNetworkStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.edgeNetworkStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process !== undefined &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'edgenetwork.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process !== undefined &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'edgenetwork.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * InitializeZone will initialize resources for a zone in a project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the zone resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.InitializeZoneResponse|InitializeZoneResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.initialize_zone.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_InitializeZone_async
   */
  initializeZone(
    request?: protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInitializeZoneResponse,
      protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest | undefined,
      {} | undefined,
    ]
  >;
  initializeZone(
    request: protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IInitializeZoneResponse,
      | protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  initializeZone(
    request: protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IInitializeZoneResponse,
      | protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  initializeZone(
    request?: protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.IInitializeZoneResponse,
          | protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.IInitializeZoneResponse,
      | protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInitializeZoneResponse,
      protos.google.cloud.edgenetwork.v1.IInitializeZoneRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.initializeZone(request, options, callback);
  }
  /**
   * Gets details of a single Zone.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.Zone|Zone}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.get_zone.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_GetZone_async
   */
  getZone(
    request?: protos.google.cloud.edgenetwork.v1.IGetZoneRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IZone,
      protos.google.cloud.edgenetwork.v1.IGetZoneRequest | undefined,
      {} | undefined,
    ]
  >;
  getZone(
    request: protos.google.cloud.edgenetwork.v1.IGetZoneRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IZone,
      protos.google.cloud.edgenetwork.v1.IGetZoneRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getZone(
    request: protos.google.cloud.edgenetwork.v1.IGetZoneRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IZone,
      protos.google.cloud.edgenetwork.v1.IGetZoneRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getZone(
    request?: protos.google.cloud.edgenetwork.v1.IGetZoneRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.IZone,
          protos.google.cloud.edgenetwork.v1.IGetZoneRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.IZone,
      protos.google.cloud.edgenetwork.v1.IGetZoneRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IZone,
      protos.google.cloud.edgenetwork.v1.IGetZoneRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getZone(request, options, callback);
  }
  /**
   * Gets details of a single Network.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.Network|Network}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.get_network.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_GetNetwork_async
   */
  getNetwork(
    request?: protos.google.cloud.edgenetwork.v1.IGetNetworkRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.INetwork,
      protos.google.cloud.edgenetwork.v1.IGetNetworkRequest | undefined,
      {} | undefined,
    ]
  >;
  getNetwork(
    request: protos.google.cloud.edgenetwork.v1.IGetNetworkRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.INetwork,
      protos.google.cloud.edgenetwork.v1.IGetNetworkRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getNetwork(
    request: protos.google.cloud.edgenetwork.v1.IGetNetworkRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.INetwork,
      protos.google.cloud.edgenetwork.v1.IGetNetworkRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getNetwork(
    request?: protos.google.cloud.edgenetwork.v1.IGetNetworkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.INetwork,
          | protos.google.cloud.edgenetwork.v1.IGetNetworkRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.INetwork,
      protos.google.cloud.edgenetwork.v1.IGetNetworkRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.INetwork,
      protos.google.cloud.edgenetwork.v1.IGetNetworkRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getNetwork(request, options, callback);
  }
  /**
   * Get the diagnostics of a single network resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the network resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.DiagnoseNetworkResponse|DiagnoseNetworkResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.diagnose_network.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DiagnoseNetwork_async
   */
  diagnoseNetwork(
    request?: protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkResponse,
      protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest | undefined,
      {} | undefined,
    ]
  >;
  diagnoseNetwork(
    request: protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  diagnoseNetwork(
    request: protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  diagnoseNetwork(
    request?: protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkResponse,
          | protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkResponse,
      protos.google.cloud.edgenetwork.v1.IDiagnoseNetworkRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.diagnoseNetwork(request, options, callback);
  }
  /**
   * Gets details of a single Subnet.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.Subnet|Subnet}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.get_subnet.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_GetSubnet_async
   */
  getSubnet(
    request?: protos.google.cloud.edgenetwork.v1.IGetSubnetRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.ISubnet,
      protos.google.cloud.edgenetwork.v1.IGetSubnetRequest | undefined,
      {} | undefined,
    ]
  >;
  getSubnet(
    request: protos.google.cloud.edgenetwork.v1.IGetSubnetRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.ISubnet,
      protos.google.cloud.edgenetwork.v1.IGetSubnetRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSubnet(
    request: protos.google.cloud.edgenetwork.v1.IGetSubnetRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.ISubnet,
      protos.google.cloud.edgenetwork.v1.IGetSubnetRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSubnet(
    request?: protos.google.cloud.edgenetwork.v1.IGetSubnetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.ISubnet,
          | protos.google.cloud.edgenetwork.v1.IGetSubnetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.ISubnet,
      protos.google.cloud.edgenetwork.v1.IGetSubnetRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.ISubnet,
      protos.google.cloud.edgenetwork.v1.IGetSubnetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSubnet(request, options, callback);
  }
  /**
   * Gets details of a single Interconnect.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.Interconnect|Interconnect}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.get_interconnect.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_GetInterconnect_async
   */
  getInterconnect(
    request?: protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInterconnect,
      protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest | undefined,
      {} | undefined,
    ]
  >;
  getInterconnect(
    request: protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IInterconnect,
      | protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInterconnect(
    request: protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IInterconnect,
      | protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInterconnect(
    request?: protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.IInterconnect,
          | protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.IInterconnect,
      | protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInterconnect,
      protos.google.cloud.edgenetwork.v1.IGetInterconnectRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getInterconnect(request, options, callback);
  }
  /**
   * Get the diagnostics of a single interconnect resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the interconnect resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.DiagnoseInterconnectResponse|DiagnoseInterconnectResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.diagnose_interconnect.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DiagnoseInterconnect_async
   */
  diagnoseInterconnect(
    request?: protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectResponse,
      (
        | protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  diagnoseInterconnect(
    request: protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  diagnoseInterconnect(
    request: protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  diagnoseInterconnect(
    request?: protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectResponse,
          | protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectResponse,
      (
        | protos.google.cloud.edgenetwork.v1.IDiagnoseInterconnectRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.diagnoseInterconnect(request, options, callback);
  }
  /**
   * Gets details of a single InterconnectAttachment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.InterconnectAttachment|InterconnectAttachment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.get_interconnect_attachment.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_GetInterconnectAttachment_async
   */
  getInterconnectAttachment(
    request?: protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
      (
        | protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getInterconnectAttachment(
    request: protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
      | protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInterconnectAttachment(
    request: protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
      | protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInterconnectAttachment(
    request?: protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
          | protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
      | protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
      (
        | protos.google.cloud.edgenetwork.v1.IGetInterconnectAttachmentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getInterconnectAttachment(
      request,
      options,
      callback
    );
  }
  /**
   * Gets details of a single Router.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.Router|Router}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.get_router.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_GetRouter_async
   */
  getRouter(
    request?: protos.google.cloud.edgenetwork.v1.IGetRouterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IRouter,
      protos.google.cloud.edgenetwork.v1.IGetRouterRequest | undefined,
      {} | undefined,
    ]
  >;
  getRouter(
    request: protos.google.cloud.edgenetwork.v1.IGetRouterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IRouter,
      protos.google.cloud.edgenetwork.v1.IGetRouterRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRouter(
    request: protos.google.cloud.edgenetwork.v1.IGetRouterRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IRouter,
      protos.google.cloud.edgenetwork.v1.IGetRouterRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRouter(
    request?: protos.google.cloud.edgenetwork.v1.IGetRouterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.IRouter,
          | protos.google.cloud.edgenetwork.v1.IGetRouterRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.IRouter,
      protos.google.cloud.edgenetwork.v1.IGetRouterRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IRouter,
      protos.google.cloud.edgenetwork.v1.IGetRouterRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRouter(request, options, callback);
  }
  /**
   * Get the diagnostics of a single router resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the router resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.edgenetwork.v1.DiagnoseRouterResponse|DiagnoseRouterResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.diagnose_router.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DiagnoseRouter_async
   */
  diagnoseRouter(
    request?: protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IDiagnoseRouterResponse,
      protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest | undefined,
      {} | undefined,
    ]
  >;
  diagnoseRouter(
    request: protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseRouterResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  diagnoseRouter(
    request: protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest,
    callback: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseRouterResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  diagnoseRouter(
    request?: protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.edgenetwork.v1.IDiagnoseRouterResponse,
          | protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.edgenetwork.v1.IDiagnoseRouterResponse,
      | protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IDiagnoseRouterResponse,
      protos.google.cloud.edgenetwork.v1.IDiagnoseRouterRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.diagnoseRouter(request, options, callback);
  }

  /**
   * Creates a new Network in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.networkId
   *   Required. Id of the requesting object
   *   If auto-generating Id server-side, remove this field and
   *   network_id from the method_signature of Create RPC
   * @param {google.cloud.edgenetwork.v1.Network} request.network
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.create_network.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_CreateNetwork_async
   */
  createNetwork(
    request?: protos.google.cloud.edgenetwork.v1.ICreateNetworkRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.INetwork,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createNetwork(
    request: protos.google.cloud.edgenetwork.v1.ICreateNetworkRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.INetwork,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createNetwork(
    request: protos.google.cloud.edgenetwork.v1.ICreateNetworkRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.INetwork,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createNetwork(
    request?: protos.google.cloud.edgenetwork.v1.ICreateNetworkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.edgenetwork.v1.INetwork,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.INetwork,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.INetwork,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createNetwork(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createNetwork()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.create_network.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_CreateNetwork_async
   */
  async checkCreateNetworkProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.edgenetwork.v1.Network,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createNetwork,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.edgenetwork.v1.Network,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Network.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.delete_network.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DeleteNetwork_async
   */
  deleteNetwork(
    request?: protos.google.cloud.edgenetwork.v1.IDeleteNetworkRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteNetwork(
    request: protos.google.cloud.edgenetwork.v1.IDeleteNetworkRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteNetwork(
    request: protos.google.cloud.edgenetwork.v1.IDeleteNetworkRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteNetwork(
    request?: protos.google.cloud.edgenetwork.v1.IDeleteNetworkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteNetwork(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteNetwork()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.delete_network.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DeleteNetwork_async
   */
  async checkDeleteNetworkProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteNetwork,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Subnet in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.subnetId
   *   Required. Id of the requesting object
   *   If auto-generating Id server-side, remove this field and
   *   subnet_id from the method_signature of Create RPC
   * @param {google.cloud.edgenetwork.v1.Subnet} request.subnet
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.create_subnet.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_CreateSubnet_async
   */
  createSubnet(
    request?: protos.google.cloud.edgenetwork.v1.ICreateSubnetRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createSubnet(
    request: protos.google.cloud.edgenetwork.v1.ICreateSubnetRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSubnet(
    request: protos.google.cloud.edgenetwork.v1.ICreateSubnetRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSubnet(
    request?: protos.google.cloud.edgenetwork.v1.ICreateSubnetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.edgenetwork.v1.ISubnet,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSubnet(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createSubnet()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.create_subnet.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_CreateSubnet_async
   */
  async checkCreateSubnetProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.edgenetwork.v1.Subnet,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createSubnet,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.edgenetwork.v1.Subnet,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Subnet.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Subnet resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.edgenetwork.v1.Subnet} request.subnet
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.update_subnet.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_UpdateSubnet_async
   */
  updateSubnet(
    request?: protos.google.cloud.edgenetwork.v1.IUpdateSubnetRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateSubnet(
    request: protos.google.cloud.edgenetwork.v1.IUpdateSubnetRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSubnet(
    request: protos.google.cloud.edgenetwork.v1.IUpdateSubnetRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSubnet(
    request?: protos.google.cloud.edgenetwork.v1.IUpdateSubnetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.edgenetwork.v1.ISubnet,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.ISubnet,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'subnet.name': request.subnet!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSubnet(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateSubnet()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.update_subnet.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_UpdateSubnet_async
   */
  async checkUpdateSubnetProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.edgenetwork.v1.Subnet,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateSubnet,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.edgenetwork.v1.Subnet,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Subnet.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.delete_subnet.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DeleteSubnet_async
   */
  deleteSubnet(
    request?: protos.google.cloud.edgenetwork.v1.IDeleteSubnetRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteSubnet(
    request: protos.google.cloud.edgenetwork.v1.IDeleteSubnetRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSubnet(
    request: protos.google.cloud.edgenetwork.v1.IDeleteSubnetRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSubnet(
    request?: protos.google.cloud.edgenetwork.v1.IDeleteSubnetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSubnet(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteSubnet()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.delete_subnet.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DeleteSubnet_async
   */
  async checkDeleteSubnetProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteSubnet,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new InterconnectAttachment in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.interconnectAttachmentId
   *   Required. Id of the requesting object
   *   If auto-generating Id server-side, remove this field and
   *   interconnect_attachment_id from the method_signature of Create RPC
   * @param {google.cloud.edgenetwork.v1.InterconnectAttachment} request.interconnectAttachment
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.create_interconnect_attachment.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_CreateInterconnectAttachment_async
   */
  createInterconnectAttachment(
    request?: protos.google.cloud.edgenetwork.v1.ICreateInterconnectAttachmentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createInterconnectAttachment(
    request: protos.google.cloud.edgenetwork.v1.ICreateInterconnectAttachmentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createInterconnectAttachment(
    request: protos.google.cloud.edgenetwork.v1.ICreateInterconnectAttachmentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createInterconnectAttachment(
    request?: protos.google.cloud.edgenetwork.v1.ICreateInterconnectAttachmentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.IInterconnectAttachment,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createInterconnectAttachment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createInterconnectAttachment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.create_interconnect_attachment.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_CreateInterconnectAttachment_async
   */
  async checkCreateInterconnectAttachmentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.edgenetwork.v1.InterconnectAttachment,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createInterconnectAttachment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.edgenetwork.v1.InterconnectAttachment,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single InterconnectAttachment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.delete_interconnect_attachment.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DeleteInterconnectAttachment_async
   */
  deleteInterconnectAttachment(
    request?: protos.google.cloud.edgenetwork.v1.IDeleteInterconnectAttachmentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteInterconnectAttachment(
    request: protos.google.cloud.edgenetwork.v1.IDeleteInterconnectAttachmentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInterconnectAttachment(
    request: protos.google.cloud.edgenetwork.v1.IDeleteInterconnectAttachmentRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInterconnectAttachment(
    request?: protos.google.cloud.edgenetwork.v1.IDeleteInterconnectAttachmentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteInterconnectAttachment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteInterconnectAttachment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.delete_interconnect_attachment.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DeleteInterconnectAttachment_async
   */
  async checkDeleteInterconnectAttachmentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteInterconnectAttachment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Router in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.routerId
   *   Required. Id of the requesting object
   *   If auto-generating Id server-side, remove this field and
   *   router_id from the method_signature of Create RPC
   * @param {google.cloud.edgenetwork.v1.Router} request.router
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.create_router.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_CreateRouter_async
   */
  createRouter(
    request?: protos.google.cloud.edgenetwork.v1.ICreateRouterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createRouter(
    request: protos.google.cloud.edgenetwork.v1.ICreateRouterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRouter(
    request: protos.google.cloud.edgenetwork.v1.ICreateRouterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRouter(
    request?: protos.google.cloud.edgenetwork.v1.ICreateRouterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.edgenetwork.v1.IRouter,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRouter(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createRouter()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.create_router.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_CreateRouter_async
   */
  async checkCreateRouterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.edgenetwork.v1.Router,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createRouter,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.edgenetwork.v1.Router,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Router.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Router resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.edgenetwork.v1.Router} request.router
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.update_router.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_UpdateRouter_async
   */
  updateRouter(
    request?: protos.google.cloud.edgenetwork.v1.IUpdateRouterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateRouter(
    request: protos.google.cloud.edgenetwork.v1.IUpdateRouterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateRouter(
    request: protos.google.cloud.edgenetwork.v1.IUpdateRouterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateRouter(
    request?: protos.google.cloud.edgenetwork.v1.IUpdateRouterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.edgenetwork.v1.IRouter,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.edgenetwork.v1.IRouter,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'router.name': request.router!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateRouter(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateRouter()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.update_router.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_UpdateRouter_async
   */
  async checkUpdateRouterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.edgenetwork.v1.Router,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateRouter,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.edgenetwork.v1.Router,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Router.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.delete_router.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DeleteRouter_async
   */
  deleteRouter(
    request?: protos.google.cloud.edgenetwork.v1.IDeleteRouterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteRouter(
    request: protos.google.cloud.edgenetwork.v1.IDeleteRouterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRouter(
    request: protos.google.cloud.edgenetwork.v1.IDeleteRouterRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRouter(
    request?: protos.google.cloud.edgenetwork.v1.IDeleteRouterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.edgenetwork.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.edgenetwork.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRouter(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteRouter()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.delete_router.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_DeleteRouter_async
   */
  async checkDeleteRouterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteRouter,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.edgenetwork.v1.OperationMetadata
    >;
  }
  /**
   * Lists Zones in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListZonesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.edgenetwork.v1.Zone|Zone}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listZonesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listZones(
    request?: protos.google.cloud.edgenetwork.v1.IListZonesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IZone[],
      protos.google.cloud.edgenetwork.v1.IListZonesRequest | null,
      protos.google.cloud.edgenetwork.v1.IListZonesResponse,
    ]
  >;
  listZones(
    request: protos.google.cloud.edgenetwork.v1.IListZonesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListZonesRequest,
      protos.google.cloud.edgenetwork.v1.IListZonesResponse | null | undefined,
      protos.google.cloud.edgenetwork.v1.IZone
    >
  ): void;
  listZones(
    request: protos.google.cloud.edgenetwork.v1.IListZonesRequest,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListZonesRequest,
      protos.google.cloud.edgenetwork.v1.IListZonesResponse | null | undefined,
      protos.google.cloud.edgenetwork.v1.IZone
    >
  ): void;
  listZones(
    request?: protos.google.cloud.edgenetwork.v1.IListZonesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.edgenetwork.v1.IListZonesRequest,
          | protos.google.cloud.edgenetwork.v1.IListZonesResponse
          | null
          | undefined,
          protos.google.cloud.edgenetwork.v1.IZone
        >,
    callback?: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListZonesRequest,
      protos.google.cloud.edgenetwork.v1.IListZonesResponse | null | undefined,
      protos.google.cloud.edgenetwork.v1.IZone
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IZone[],
      protos.google.cloud.edgenetwork.v1.IListZonesRequest | null,
      protos.google.cloud.edgenetwork.v1.IListZonesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listZones(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListZonesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.edgenetwork.v1.Zone|Zone} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listZonesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listZonesStream(
    request?: protos.google.cloud.edgenetwork.v1.IListZonesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listZones'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listZones.createStream(
      this.innerApiCalls.listZones as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listZones`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListZonesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.edgenetwork.v1.Zone|Zone}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.list_zones.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_ListZones_async
   */
  listZonesAsync(
    request?: protos.google.cloud.edgenetwork.v1.IListZonesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.edgenetwork.v1.IZone> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listZones'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listZones.asyncIterate(
      this.innerApiCalls['listZones'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.edgenetwork.v1.IZone>;
  }
  /**
   * Lists Networks in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNetworksRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.edgenetwork.v1.Network|Network}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listNetworksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listNetworks(
    request?: protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.INetwork[],
      protos.google.cloud.edgenetwork.v1.IListNetworksRequest | null,
      protos.google.cloud.edgenetwork.v1.IListNetworksResponse,
    ]
  >;
  listNetworks(
    request: protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
      | protos.google.cloud.edgenetwork.v1.IListNetworksResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.INetwork
    >
  ): void;
  listNetworks(
    request: protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
      | protos.google.cloud.edgenetwork.v1.IListNetworksResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.INetwork
    >
  ): void;
  listNetworks(
    request?: protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
          | protos.google.cloud.edgenetwork.v1.IListNetworksResponse
          | null
          | undefined,
          protos.google.cloud.edgenetwork.v1.INetwork
        >,
    callback?: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
      | protos.google.cloud.edgenetwork.v1.IListNetworksResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.INetwork
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.INetwork[],
      protos.google.cloud.edgenetwork.v1.IListNetworksRequest | null,
      protos.google.cloud.edgenetwork.v1.IListNetworksResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listNetworks(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNetworksRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.edgenetwork.v1.Network|Network} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listNetworksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listNetworksStream(
    request?: protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNetworks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNetworks.createStream(
      this.innerApiCalls.listNetworks as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listNetworks`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNetworksRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.edgenetwork.v1.Network|Network}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.list_networks.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_ListNetworks_async
   */
  listNetworksAsync(
    request?: protos.google.cloud.edgenetwork.v1.IListNetworksRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.edgenetwork.v1.INetwork> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNetworks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNetworks.asyncIterate(
      this.innerApiCalls['listNetworks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.edgenetwork.v1.INetwork>;
  }
  /**
   * Lists Subnets in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListSubnetsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.edgenetwork.v1.Subnet|Subnet}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSubnetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSubnets(
    request?: protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.ISubnet[],
      protos.google.cloud.edgenetwork.v1.IListSubnetsRequest | null,
      protos.google.cloud.edgenetwork.v1.IListSubnetsResponse,
    ]
  >;
  listSubnets(
    request: protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
      | protos.google.cloud.edgenetwork.v1.IListSubnetsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.ISubnet
    >
  ): void;
  listSubnets(
    request: protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
      | protos.google.cloud.edgenetwork.v1.IListSubnetsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.ISubnet
    >
  ): void;
  listSubnets(
    request?: protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
          | protos.google.cloud.edgenetwork.v1.IListSubnetsResponse
          | null
          | undefined,
          protos.google.cloud.edgenetwork.v1.ISubnet
        >,
    callback?: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
      | protos.google.cloud.edgenetwork.v1.IListSubnetsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.ISubnet
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.ISubnet[],
      protos.google.cloud.edgenetwork.v1.IListSubnetsRequest | null,
      protos.google.cloud.edgenetwork.v1.IListSubnetsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSubnets(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListSubnetsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.edgenetwork.v1.Subnet|Subnet} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSubnetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSubnetsStream(
    request?: protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSubnets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSubnets.createStream(
      this.innerApiCalls.listSubnets as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSubnets`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListSubnetsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.edgenetwork.v1.Subnet|Subnet}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.list_subnets.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_ListSubnets_async
   */
  listSubnetsAsync(
    request?: protos.google.cloud.edgenetwork.v1.IListSubnetsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.edgenetwork.v1.ISubnet> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSubnets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSubnets.asyncIterate(
      this.innerApiCalls['listSubnets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.edgenetwork.v1.ISubnet>;
  }
  /**
   * Lists Interconnects in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInterconnectsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.edgenetwork.v1.Interconnect|Interconnect}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listInterconnectsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listInterconnects(
    request?: protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInterconnect[],
      protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest | null,
      protos.google.cloud.edgenetwork.v1.IListInterconnectsResponse,
    ]
  >;
  listInterconnects(
    request: protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
      | protos.google.cloud.edgenetwork.v1.IListInterconnectsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IInterconnect
    >
  ): void;
  listInterconnects(
    request: protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
      | protos.google.cloud.edgenetwork.v1.IListInterconnectsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IInterconnect
    >
  ): void;
  listInterconnects(
    request?: protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
          | protos.google.cloud.edgenetwork.v1.IListInterconnectsResponse
          | null
          | undefined,
          protos.google.cloud.edgenetwork.v1.IInterconnect
        >,
    callback?: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
      | protos.google.cloud.edgenetwork.v1.IListInterconnectsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IInterconnect
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInterconnect[],
      protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest | null,
      protos.google.cloud.edgenetwork.v1.IListInterconnectsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listInterconnects(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInterconnectsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.edgenetwork.v1.Interconnect|Interconnect} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listInterconnectsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listInterconnectsStream(
    request?: protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInterconnects'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInterconnects.createStream(
      this.innerApiCalls.listInterconnects as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listInterconnects`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInterconnectsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.edgenetwork.v1.Interconnect|Interconnect}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.list_interconnects.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_ListInterconnects_async
   */
  listInterconnectsAsync(
    request?: protos.google.cloud.edgenetwork.v1.IListInterconnectsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.edgenetwork.v1.IInterconnect> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInterconnects'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInterconnects.asyncIterate(
      this.innerApiCalls['listInterconnects'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.edgenetwork.v1.IInterconnect>;
  }
  /**
   * Lists InterconnectAttachments in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInterconnectAttachmentsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.edgenetwork.v1.InterconnectAttachment|InterconnectAttachment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listInterconnectAttachmentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listInterconnectAttachments(
    request?: protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment[],
      protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest | null,
      protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsResponse,
    ]
  >;
  listInterconnectAttachments(
    request: protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
      | protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment
    >
  ): void;
  listInterconnectAttachments(
    request: protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
      | protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment
    >
  ): void;
  listInterconnectAttachments(
    request?: protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
          | protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsResponse
          | null
          | undefined,
          protos.google.cloud.edgenetwork.v1.IInterconnectAttachment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
      | protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IInterconnectAttachment[],
      protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest | null,
      protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listInterconnectAttachments(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInterconnectAttachmentsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.edgenetwork.v1.InterconnectAttachment|InterconnectAttachment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listInterconnectAttachmentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listInterconnectAttachmentsStream(
    request?: protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInterconnectAttachments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInterconnectAttachments.createStream(
      this.innerApiCalls.listInterconnectAttachments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listInterconnectAttachments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInterconnectAttachmentsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.edgenetwork.v1.InterconnectAttachment|InterconnectAttachment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.list_interconnect_attachments.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_ListInterconnectAttachments_async
   */
  listInterconnectAttachmentsAsync(
    request?: protos.google.cloud.edgenetwork.v1.IListInterconnectAttachmentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.edgenetwork.v1.IInterconnectAttachment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInterconnectAttachments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInterconnectAttachments.asyncIterate(
      this.innerApiCalls['listInterconnectAttachments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.edgenetwork.v1.IInterconnectAttachment>;
  }
  /**
   * Lists Routers in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListRoutersRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.edgenetwork.v1.Router|Router}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRoutersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRouters(
    request?: protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IRouter[],
      protos.google.cloud.edgenetwork.v1.IListRoutersRequest | null,
      protos.google.cloud.edgenetwork.v1.IListRoutersResponse,
    ]
  >;
  listRouters(
    request: protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
      | protos.google.cloud.edgenetwork.v1.IListRoutersResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IRouter
    >
  ): void;
  listRouters(
    request: protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
    callback: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
      | protos.google.cloud.edgenetwork.v1.IListRoutersResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IRouter
    >
  ): void;
  listRouters(
    request?: protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
          | protos.google.cloud.edgenetwork.v1.IListRoutersResponse
          | null
          | undefined,
          protos.google.cloud.edgenetwork.v1.IRouter
        >,
    callback?: PaginationCallback<
      protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
      | protos.google.cloud.edgenetwork.v1.IListRoutersResponse
      | null
      | undefined,
      protos.google.cloud.edgenetwork.v1.IRouter
    >
  ): Promise<
    [
      protos.google.cloud.edgenetwork.v1.IRouter[],
      protos.google.cloud.edgenetwork.v1.IListRoutersRequest | null,
      protos.google.cloud.edgenetwork.v1.IListRoutersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRouters(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListRoutersRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.edgenetwork.v1.Router|Router} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRoutersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRoutersStream(
    request?: protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRouters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRouters.createStream(
      this.innerApiCalls.listRouters as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRouters`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListRoutersRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.edgenetwork.v1.Router|Router}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/edge_network.list_routers.js</caption>
   * region_tag:edgenetwork_v1_generated_EdgeNetwork_ListRouters_async
   */
  listRoutersAsync(
    request?: protos.google.cloud.edgenetwork.v1.IListRoutersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.edgenetwork.v1.IRouter> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRouters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRouters.asyncIterate(
      this.innerApiCalls['listRouters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.edgenetwork.v1.IRouter>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified interconnect resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} zone
   * @param {string} interconnect
   * @returns {string} Resource name string.
   */
  interconnectPath(
    project: string,
    location: string,
    zone: string,
    interconnect: string
  ) {
    return this.pathTemplates.interconnectPathTemplate.render({
      project: project,
      location: location,
      zone: zone,
      interconnect: interconnect,
    });
  }

  /**
   * Parse the project from Interconnect resource.
   *
   * @param {string} interconnectName
   *   A fully-qualified path representing Interconnect resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInterconnectName(interconnectName: string) {
    return this.pathTemplates.interconnectPathTemplate.match(interconnectName)
      .project;
  }

  /**
   * Parse the location from Interconnect resource.
   *
   * @param {string} interconnectName
   *   A fully-qualified path representing Interconnect resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInterconnectName(interconnectName: string) {
    return this.pathTemplates.interconnectPathTemplate.match(interconnectName)
      .location;
  }

  /**
   * Parse the zone from Interconnect resource.
   *
   * @param {string} interconnectName
   *   A fully-qualified path representing Interconnect resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromInterconnectName(interconnectName: string) {
    return this.pathTemplates.interconnectPathTemplate.match(interconnectName)
      .zone;
  }

  /**
   * Parse the interconnect from Interconnect resource.
   *
   * @param {string} interconnectName
   *   A fully-qualified path representing Interconnect resource.
   * @returns {string} A string representing the interconnect.
   */
  matchInterconnectFromInterconnectName(interconnectName: string) {
    return this.pathTemplates.interconnectPathTemplate.match(interconnectName)
      .interconnect;
  }

  /**
   * Return a fully-qualified interconnectAttachment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} zone
   * @param {string} interconnect_attachment
   * @returns {string} Resource name string.
   */
  interconnectAttachmentPath(
    project: string,
    location: string,
    zone: string,
    interconnectAttachment: string
  ) {
    return this.pathTemplates.interconnectAttachmentPathTemplate.render({
      project: project,
      location: location,
      zone: zone,
      interconnect_attachment: interconnectAttachment,
    });
  }

  /**
   * Parse the project from InterconnectAttachment resource.
   *
   * @param {string} interconnectAttachmentName
   *   A fully-qualified path representing InterconnectAttachment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInterconnectAttachmentName(
    interconnectAttachmentName: string
  ) {
    return this.pathTemplates.interconnectAttachmentPathTemplate.match(
      interconnectAttachmentName
    ).project;
  }

  /**
   * Parse the location from InterconnectAttachment resource.
   *
   * @param {string} interconnectAttachmentName
   *   A fully-qualified path representing InterconnectAttachment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInterconnectAttachmentName(
    interconnectAttachmentName: string
  ) {
    return this.pathTemplates.interconnectAttachmentPathTemplate.match(
      interconnectAttachmentName
    ).location;
  }

  /**
   * Parse the zone from InterconnectAttachment resource.
   *
   * @param {string} interconnectAttachmentName
   *   A fully-qualified path representing InterconnectAttachment resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromInterconnectAttachmentName(interconnectAttachmentName: string) {
    return this.pathTemplates.interconnectAttachmentPathTemplate.match(
      interconnectAttachmentName
    ).zone;
  }

  /**
   * Parse the interconnect_attachment from InterconnectAttachment resource.
   *
   * @param {string} interconnectAttachmentName
   *   A fully-qualified path representing InterconnectAttachment resource.
   * @returns {string} A string representing the interconnect_attachment.
   */
  matchInterconnectAttachmentFromInterconnectAttachmentName(
    interconnectAttachmentName: string
  ) {
    return this.pathTemplates.interconnectAttachmentPathTemplate.match(
      interconnectAttachmentName
    ).interconnect_attachment;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified network resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} zone
   * @param {string} network
   * @returns {string} Resource name string.
   */
  networkPath(
    project: string,
    location: string,
    zone: string,
    network: string
  ) {
    return this.pathTemplates.networkPathTemplate.render({
      project: project,
      location: location,
      zone: zone,
      network: network,
    });
  }

  /**
   * Parse the project from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).project;
  }

  /**
   * Parse the location from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).location;
  }

  /**
   * Parse the zone from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).zone;
  }

  /**
   * Parse the network from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the network.
   */
  matchNetworkFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).network;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified router resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} zone
   * @param {string} router
   * @returns {string} Resource name string.
   */
  routerPath(project: string, location: string, zone: string, router: string) {
    return this.pathTemplates.routerPathTemplate.render({
      project: project,
      location: location,
      zone: zone,
      router: router,
    });
  }

  /**
   * Parse the project from Router resource.
   *
   * @param {string} routerName
   *   A fully-qualified path representing Router resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRouterName(routerName: string) {
    return this.pathTemplates.routerPathTemplate.match(routerName).project;
  }

  /**
   * Parse the location from Router resource.
   *
   * @param {string} routerName
   *   A fully-qualified path representing Router resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRouterName(routerName: string) {
    return this.pathTemplates.routerPathTemplate.match(routerName).location;
  }

  /**
   * Parse the zone from Router resource.
   *
   * @param {string} routerName
   *   A fully-qualified path representing Router resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromRouterName(routerName: string) {
    return this.pathTemplates.routerPathTemplate.match(routerName).zone;
  }

  /**
   * Parse the router from Router resource.
   *
   * @param {string} routerName
   *   A fully-qualified path representing Router resource.
   * @returns {string} A string representing the router.
   */
  matchRouterFromRouterName(routerName: string) {
    return this.pathTemplates.routerPathTemplate.match(routerName).router;
  }

  /**
   * Return a fully-qualified subnet resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} zone
   * @param {string} subnet
   * @returns {string} Resource name string.
   */
  subnetPath(project: string, location: string, zone: string, subnet: string) {
    return this.pathTemplates.subnetPathTemplate.render({
      project: project,
      location: location,
      zone: zone,
      subnet: subnet,
    });
  }

  /**
   * Parse the project from Subnet resource.
   *
   * @param {string} subnetName
   *   A fully-qualified path representing Subnet resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSubnetName(subnetName: string) {
    return this.pathTemplates.subnetPathTemplate.match(subnetName).project;
  }

  /**
   * Parse the location from Subnet resource.
   *
   * @param {string} subnetName
   *   A fully-qualified path representing Subnet resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSubnetName(subnetName: string) {
    return this.pathTemplates.subnetPathTemplate.match(subnetName).location;
  }

  /**
   * Parse the zone from Subnet resource.
   *
   * @param {string} subnetName
   *   A fully-qualified path representing Subnet resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromSubnetName(subnetName: string) {
    return this.pathTemplates.subnetPathTemplate.match(subnetName).zone;
  }

  /**
   * Parse the subnet from Subnet resource.
   *
   * @param {string} subnetName
   *   A fully-qualified path representing Subnet resource.
   * @returns {string} A string representing the subnet.
   */
  matchSubnetFromSubnetName(subnetName: string) {
    return this.pathTemplates.subnetPathTemplate.match(subnetName).subnet;
  }

  /**
   * Return a fully-qualified zone resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} zone
   * @returns {string} Resource name string.
   */
  zonePath(project: string, location: string, zone: string) {
    return this.pathTemplates.zonePathTemplate.render({
      project: project,
      location: location,
      zone: zone,
    });
  }

  /**
   * Parse the project from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).project;
  }

  /**
   * Parse the location from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).location;
  }

  /**
   * Parse the zone from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).zone;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.edgeNetworkStub && !this._terminated) {
      return this.edgeNetworkStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
