// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/os_config_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './os_config_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  OS Config API
 *
 *  The OS Config service is a server-side component that you can use to
 *  manage package installations and patch jobs for virtual machine instances.
 * @class
 * @memberof v1beta
 */
export class OsConfigServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  osConfigServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of OsConfigServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new OsConfigServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof OsConfigServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      guestPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/guestPolicies/{guest_policy}'
      ),
      patchDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/patchDeployments/{patch_deployment}'
      ),
      patchJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/patchJobs/{patch_job}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listPatchJobs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'patchJobs'
      ),
      listPatchJobInstanceDetails: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'patchJobInstanceDetails'
      ),
      listPatchDeployments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'patchDeployments'
      ),
      listGuestPolicies: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'guestPolicies'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.osconfig.v1beta.OsConfigService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.osConfigServiceStub) {
      return this.osConfigServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.osconfig.v1beta.OsConfigService.
    this.osConfigServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.osconfig.v1beta.OsConfigService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.osconfig.v1beta.OsConfigService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const osConfigServiceStubMethods = [
      'executePatchJob',
      'getPatchJob',
      'cancelPatchJob',
      'listPatchJobs',
      'listPatchJobInstanceDetails',
      'createPatchDeployment',
      'getPatchDeployment',
      'listPatchDeployments',
      'deletePatchDeployment',
      'updatePatchDeployment',
      'pausePatchDeployment',
      'resumePatchDeployment',
      'createGuestPolicy',
      'getGuestPolicy',
      'listGuestPolicies',
      'updateGuestPolicy',
      'deleteGuestPolicy',
      'lookupEffectiveGuestPolicy',
    ];
    for (const methodName of osConfigServiceStubMethods) {
      const callPromise = this.osConfigServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.osConfigServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'osconfig.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'osconfig.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Patch VM instances by creating and running a patch job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project in which to run this patch in the form `projects/*`
   * @param {string} request.description
   *   Description of the patch job. Length of the description is limited
   *   to 1024 characters.
   * @param {google.cloud.osconfig.v1beta.PatchInstanceFilter} request.instanceFilter
   *   Required. Instances to patch, either explicitly or filtered by some criteria such
   *   as zone or labels.
   * @param {google.cloud.osconfig.v1beta.PatchConfig} request.patchConfig
   *   Patch configuration being applied. If omitted, instances are
   *   patched using the default configurations.
   * @param {google.protobuf.Duration} request.duration
   *   Duration of the patch job. After the duration ends, the patch job
   *   times out.
   * @param {boolean} request.dryRun
   *   If this patch is a dry-run only, instances are contacted but
   *   will do nothing.
   * @param {string} request.displayName
   *   Display name for this patch job. This does not have to be unique.
   * @param {google.cloud.osconfig.v1beta.PatchRollout} request.rollout
   *   Rollout strategy of the patch job.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchJob]{@link google.cloud.osconfig.v1beta.PatchJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.execute_patch_job.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_ExecutePatchJob_async
   */
  executePatchJob(
    request?: protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest | undefined,
      {} | undefined
    ]
  >;
  executePatchJob(
    request: protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  executePatchJob(
    request: protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  executePatchJob(
    request?: protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IPatchJob,
          | protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      protos.google.cloud.osconfig.v1beta.IExecutePatchJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.executePatchJob(request, options, callback);
  }
  /**
   * Get the patch job. This can be used to track the progress of an
   * ongoing patch job or review the details of completed jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the patch in the form `projects/* /patchJobs/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchJob]{@link google.cloud.osconfig.v1beta.PatchJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.get_patch_job.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_GetPatchJob_async
   */
  getPatchJob(
    request?: protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest | undefined,
      {} | undefined
    ]
  >;
  getPatchJob(
    request: protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPatchJob(
    request: protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPatchJob(
    request?: protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IPatchJob,
          | protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      protos.google.cloud.osconfig.v1beta.IGetPatchJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPatchJob(request, options, callback);
  }
  /**
   * Cancel a patch job. The patch job must be active. Canceled patch jobs
   * cannot be restarted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the patch in the form `projects/* /patchJobs/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchJob]{@link google.cloud.osconfig.v1beta.PatchJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.cancel_patch_job.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_CancelPatchJob_async
   */
  cancelPatchJob(
    request?: protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest | undefined,
      {} | undefined
    ]
  >;
  cancelPatchJob(
    request: protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  cancelPatchJob(
    request: protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  cancelPatchJob(
    request?: protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IPatchJob,
          | protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      | protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJob,
      protos.google.cloud.osconfig.v1beta.ICancelPatchJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.cancelPatchJob(request, options, callback);
  }
  /**
   * Create an OS Config patch deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project to apply this patch deployment to in the form `projects/*`.
   * @param {string} request.patchDeploymentId
   *   Required. A name for the patch deployment in the project. When creating a name
   *   the following rules apply:
   *   * Must contain only lowercase letters, numbers, and hyphens.
   *   * Must start with a letter.
   *   * Must be between 1-63 characters.
   *   * Must end with a number or a letter.
   *   * Must be unique within the project.
   * @param {google.cloud.osconfig.v1beta.PatchDeployment} request.patchDeployment
   *   Required. The patch deployment to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchDeployment]{@link google.cloud.osconfig.v1beta.PatchDeployment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.create_patch_deployment.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_CreatePatchDeployment_async
   */
  createPatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createPatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createPatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createPatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IPatchDeployment,
          | protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.ICreatePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createPatchDeployment(request, options, callback);
  }
  /**
   * Get an OS Config patch deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the patch deployment in the form
   *   `projects/* /patchDeployments/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchDeployment]{@link google.cloud.osconfig.v1beta.PatchDeployment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.get_patch_deployment.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_GetPatchDeployment_async
   */
  getPatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getPatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IPatchDeployment,
          | protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.IGetPatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPatchDeployment(request, options, callback);
  }
  /**
   * Delete an OS Config patch deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the patch deployment in the form
   *   `projects/* /patchDeployments/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.delete_patch_deployment.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_DeletePatchDeployment_async
   */
  deletePatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deletePatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deletePatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deletePatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.osconfig.v1beta.IDeletePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePatchDeployment(request, options, callback);
  }
  /**
   * Update an OS Config patch deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.osconfig.v1beta.PatchDeployment} request.patchDeployment
   *   Required. The patch deployment to Update.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask that controls which fields of the patch deployment should be
   *   updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchDeployment]{@link google.cloud.osconfig.v1beta.PatchDeployment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.update_patch_deployment.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_UpdatePatchDeployment_async
   */
  updatePatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updatePatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updatePatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updatePatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IPatchDeployment,
          | protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.IUpdatePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'patch_deployment.name': request.patchDeployment!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updatePatchDeployment(request, options, callback);
  }
  /**
   * Change state of patch deployment to "PAUSED".
   * Patch deployment in paused state doesn't generate patch jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the patch deployment in the form
   *   `projects/* /patchDeployments/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchDeployment]{@link google.cloud.osconfig.v1beta.PatchDeployment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.pause_patch_deployment.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_PausePatchDeployment_async
   */
  pausePatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  pausePatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  pausePatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  pausePatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IPatchDeployment,
          | protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.IPausePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.pausePatchDeployment(request, options, callback);
  }
  /**
   * Change state of patch deployment back to "ACTIVE".
   * Patch deployment in active state continues to generate patch jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the patch deployment in the form
   *   `projects/* /patchDeployments/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchDeployment]{@link google.cloud.osconfig.v1beta.PatchDeployment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.resume_patch_deployment.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_ResumePatchDeployment_async
   */
  resumePatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  resumePatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  resumePatchDeployment(
    request: protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  resumePatchDeployment(
    request?: protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IPatchDeployment,
          | protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      | protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment,
      (
        | protos.google.cloud.osconfig.v1beta.IResumePatchDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.resumePatchDeployment(request, options, callback);
  }
  /**
   * Create an OS Config guest policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent using one of the following forms:
   *   `projects/{project_number}`.
   * @param {string} request.guestPolicyId
   *   Required. The logical name of the guest policy in the project
   *   with the following restrictions:
   *
   *   * Must contain only lowercase letters, numbers, and hyphens.
   *   * Must start with a letter.
   *   * Must be between 1-63 characters.
   *   * Must end with a number or a letter.
   *   * Must be unique within the project.
   * @param {google.cloud.osconfig.v1beta.GuestPolicy} request.guestPolicy
   *   Required. The GuestPolicy to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GuestPolicy]{@link google.cloud.osconfig.v1beta.GuestPolicy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.create_guest_policy.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_CreateGuestPolicy_async
   */
  createGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  createGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IGuestPolicy,
          | protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      protos.google.cloud.osconfig.v1beta.ICreateGuestPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createGuestPolicy(request, options, callback);
  }
  /**
   * Get an OS Config guest policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the guest policy using one of the following forms:
   *   `projects/{project_number}/guestPolicies/{guest_policy_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GuestPolicy]{@link google.cloud.osconfig.v1beta.GuestPolicy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.get_guest_policy.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_GetGuestPolicy_async
   */
  getGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IGuestPolicy,
          | protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      protos.google.cloud.osconfig.v1beta.IGetGuestPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGuestPolicy(request, options, callback);
  }
  /**
   * Update an OS Config guest policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.osconfig.v1beta.GuestPolicy} request.guestPolicy
   *   Required. The updated GuestPolicy.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask that controls which fields of the guest policy should be
   *   updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GuestPolicy]{@link google.cloud.osconfig.v1beta.GuestPolicy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.update_guest_policy.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_UpdateGuestPolicy_async
   */
  updateGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  updateGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IGuestPolicy,
          | protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IGuestPolicy,
      protos.google.cloud.osconfig.v1beta.IUpdateGuestPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'guest_policy.name': request.guestPolicy!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateGuestPolicy(request, options, callback);
  }
  /**
   * Delete an OS Config guest policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the guest policy  using one of the following forms:
   *   `projects/{project_number}/guestPolicies/{guest_policy_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.delete_guest_policy.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_DeleteGuestPolicy_async
   */
  deleteGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  deleteGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.osconfig.v1beta.IDeleteGuestPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteGuestPolicy(request, options, callback);
  }
  /**
   * Lookup the effective guest policy that applies to a VM instance. This
   * lookup merges all policies that are assigned to the instance ancestry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.instance
   *   Required. The VM instance whose policies are being looked up.
   * @param {string} request.osShortName
   *   Short name of the OS running on the instance. The OS Config agent only
   *   provides this field for targeting if OS Inventory is enabled for that
   *   instance.
   * @param {string} request.osVersion
   *   Version of the OS running on the instance. The OS Config agent only
   *   provides this field for targeting if OS Inventory is enabled for that
   *   VM instance.
   * @param {string} request.osArchitecture
   *   Architecture of OS running on the instance. The OS Config agent only
   *   provides this field for targeting if OS Inventory is enabled for that
   *   instance.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [EffectiveGuestPolicy]{@link google.cloud.osconfig.v1beta.EffectiveGuestPolicy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.lookup_effective_guest_policy.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_LookupEffectiveGuestPolicy_async
   */
  lookupEffectiveGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IEffectiveGuestPolicy,
      (
        | protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  lookupEffectiveGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IEffectiveGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  lookupEffectiveGuestPolicy(
    request: protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1beta.IEffectiveGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  lookupEffectiveGuestPolicy(
    request?: protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1beta.IEffectiveGuestPolicy,
          | protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1beta.IEffectiveGuestPolicy,
      | protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IEffectiveGuestPolicy,
      (
        | protos.google.cloud.osconfig.v1beta.ILookupEffectiveGuestPolicyRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        instance: request.instance ?? '',
      });
    this.initialize();
    return this.innerApiCalls.lookupEffectiveGuestPolicy(
      request,
      options,
      callback
    );
  }

  /**
   * Get a list of patch jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. In the form of `projects/*`
   * @param {number} request.pageSize
   *   The maximum number of instance status to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by patch
   *   jobs to be included in the response.
   *   Currently, filtering is only available on the patch_deployment field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PatchJob]{@link google.cloud.osconfig.v1beta.PatchJob}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPatchJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPatchJobs(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJob[],
      protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest | null,
      protos.google.cloud.osconfig.v1beta.IListPatchJobsResponse
    ]
  >;
  listPatchJobs(
    request: protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchJobsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchJob
    >
  ): void;
  listPatchJobs(
    request: protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchJobsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchJob
    >
  ): void;
  listPatchJobs(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
          | protos.google.cloud.osconfig.v1beta.IListPatchJobsResponse
          | null
          | undefined,
          protos.google.cloud.osconfig.v1beta.IPatchJob
        >,
    callback?: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchJobsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchJob
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJob[],
      protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest | null,
      protos.google.cloud.osconfig.v1beta.IListPatchJobsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPatchJobs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. In the form of `projects/*`
   * @param {number} request.pageSize
   *   The maximum number of instance status to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by patch
   *   jobs to be included in the response.
   *   Currently, filtering is only available on the patch_deployment field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PatchJob]{@link google.cloud.osconfig.v1beta.PatchJob} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPatchJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPatchJobsStream(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPatchJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPatchJobs.createStream(
      this.innerApiCalls.listPatchJobs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPatchJobs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. In the form of `projects/*`
   * @param {number} request.pageSize
   *   The maximum number of instance status to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by patch
   *   jobs to be included in the response.
   *   Currently, filtering is only available on the patch_deployment field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [PatchJob]{@link google.cloud.osconfig.v1beta.PatchJob}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.list_patch_jobs.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_ListPatchJobs_async
   */
  listPatchJobsAsync(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchJobsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.osconfig.v1beta.IPatchJob> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPatchJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPatchJobs.asyncIterate(
      this.innerApiCalls['listPatchJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.osconfig.v1beta.IPatchJob>;
  }
  /**
   * Get a list of instance details for a given patch job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent for the instances are in the form of `projects/* /patchJobs/*`.
   * @param {number} request.pageSize
   *   The maximum number of instance details records to return.  Default is 100.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   A filter expression that filters results listed in the response. This
   *   field supports filtering results by instance zone, name, state, or
   *   `failure_reason`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PatchJobInstanceDetails]{@link google.cloud.osconfig.v1beta.PatchJobInstanceDetails}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPatchJobInstanceDetailsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPatchJobInstanceDetails(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJobInstanceDetails[],
      protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest | null,
      protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsResponse
    ]
  >;
  listPatchJobInstanceDetails(
    request: protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchJobInstanceDetails
    >
  ): void;
  listPatchJobInstanceDetails(
    request: protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchJobInstanceDetails
    >
  ): void;
  listPatchJobInstanceDetails(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
          | protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsResponse
          | null
          | undefined,
          protos.google.cloud.osconfig.v1beta.IPatchJobInstanceDetails
        >,
    callback?: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchJobInstanceDetails
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchJobInstanceDetails[],
      protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest | null,
      protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPatchJobInstanceDetails(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent for the instances are in the form of `projects/* /patchJobs/*`.
   * @param {number} request.pageSize
   *   The maximum number of instance details records to return.  Default is 100.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   A filter expression that filters results listed in the response. This
   *   field supports filtering results by instance zone, name, state, or
   *   `failure_reason`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PatchJobInstanceDetails]{@link google.cloud.osconfig.v1beta.PatchJobInstanceDetails} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPatchJobInstanceDetailsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPatchJobInstanceDetailsStream(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPatchJobInstanceDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPatchJobInstanceDetails.createStream(
      this.innerApiCalls.listPatchJobInstanceDetails as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPatchJobInstanceDetails`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent for the instances are in the form of `projects/* /patchJobs/*`.
   * @param {number} request.pageSize
   *   The maximum number of instance details records to return.  Default is 100.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   A filter expression that filters results listed in the response. This
   *   field supports filtering results by instance zone, name, state, or
   *   `failure_reason`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [PatchJobInstanceDetails]{@link google.cloud.osconfig.v1beta.PatchJobInstanceDetails}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.list_patch_job_instance_details.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_ListPatchJobInstanceDetails_async
   */
  listPatchJobInstanceDetailsAsync(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchJobInstanceDetailsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.osconfig.v1beta.IPatchJobInstanceDetails> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPatchJobInstanceDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPatchJobInstanceDetails.asyncIterate(
      this.innerApiCalls['listPatchJobInstanceDetails'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.osconfig.v1beta.IPatchJobInstanceDetails>;
  }
  /**
   * Get a page of OS Config patch deployments.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent in the form `projects/*`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of patch deployments to return. Default is 100.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to ListPatchDeployments
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PatchDeployment]{@link google.cloud.osconfig.v1beta.PatchDeployment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPatchDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPatchDeployments(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment[],
      protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest | null,
      protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsResponse
    ]
  >;
  listPatchDeployments(
    request: protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchDeployment
    >
  ): void;
  listPatchDeployments(
    request: protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchDeployment
    >
  ): void;
  listPatchDeployments(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
          | protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsResponse
          | null
          | undefined,
          protos.google.cloud.osconfig.v1beta.IPatchDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
      | protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IPatchDeployment
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IPatchDeployment[],
      protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest | null,
      protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPatchDeployments(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent in the form `projects/*`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of patch deployments to return. Default is 100.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to ListPatchDeployments
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PatchDeployment]{@link google.cloud.osconfig.v1beta.PatchDeployment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPatchDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPatchDeploymentsStream(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPatchDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPatchDeployments.createStream(
      this.innerApiCalls.listPatchDeployments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPatchDeployments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent in the form `projects/*`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of patch deployments to return. Default is 100.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to ListPatchDeployments
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [PatchDeployment]{@link google.cloud.osconfig.v1beta.PatchDeployment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.list_patch_deployments.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_ListPatchDeployments_async
   */
  listPatchDeploymentsAsync(
    request?: protos.google.cloud.osconfig.v1beta.IListPatchDeploymentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.osconfig.v1beta.IPatchDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPatchDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPatchDeployments.asyncIterate(
      this.innerApiCalls['listPatchDeployments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.osconfig.v1beta.IPatchDeployment>;
  }
  /**
   * Get a page of OS Config guest policies.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent using one of the following forms:
   *   `projects/{project_number}`.
   * @param {number} request.pageSize
   *   The maximum number of guest policies to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call to `ListGuestPolicies`
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [GuestPolicy]{@link google.cloud.osconfig.v1beta.GuestPolicy}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGuestPoliciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listGuestPolicies(
    request?: protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IGuestPolicy[],
      protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest | null,
      protos.google.cloud.osconfig.v1beta.IListGuestPoliciesResponse
    ]
  >;
  listGuestPolicies(
    request: protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
      | protos.google.cloud.osconfig.v1beta.IListGuestPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IGuestPolicy
    >
  ): void;
  listGuestPolicies(
    request: protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
      | protos.google.cloud.osconfig.v1beta.IListGuestPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IGuestPolicy
    >
  ): void;
  listGuestPolicies(
    request?: protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
          | protos.google.cloud.osconfig.v1beta.IListGuestPoliciesResponse
          | null
          | undefined,
          protos.google.cloud.osconfig.v1beta.IGuestPolicy
        >,
    callback?: PaginationCallback<
      protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
      | protos.google.cloud.osconfig.v1beta.IListGuestPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1beta.IGuestPolicy
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1beta.IGuestPolicy[],
      protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest | null,
      protos.google.cloud.osconfig.v1beta.IListGuestPoliciesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGuestPolicies(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent using one of the following forms:
   *   `projects/{project_number}`.
   * @param {number} request.pageSize
   *   The maximum number of guest policies to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call to `ListGuestPolicies`
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [GuestPolicy]{@link google.cloud.osconfig.v1beta.GuestPolicy} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGuestPoliciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listGuestPoliciesStream(
    request?: protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGuestPolicies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGuestPolicies.createStream(
      this.innerApiCalls.listGuestPolicies as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGuestPolicies`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent using one of the following forms:
   *   `projects/{project_number}`.
   * @param {number} request.pageSize
   *   The maximum number of guest policies to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call to `ListGuestPolicies`
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [GuestPolicy]{@link google.cloud.osconfig.v1beta.GuestPolicy}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/os_config_service.list_guest_policies.js</caption>
   * region_tag:osconfig_v1beta_generated_OsConfigService_ListGuestPolicies_async
   */
  listGuestPoliciesAsync(
    request?: protos.google.cloud.osconfig.v1beta.IListGuestPoliciesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.osconfig.v1beta.IGuestPolicy> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGuestPolicies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGuestPolicies.asyncIterate(
      this.innerApiCalls['listGuestPolicies'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.osconfig.v1beta.IGuestPolicy>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified guestPolicy resource name string.
   *
   * @param {string} project
   * @param {string} guest_policy
   * @returns {string} Resource name string.
   */
  guestPolicyPath(project: string, guestPolicy: string) {
    return this.pathTemplates.guestPolicyPathTemplate.render({
      project: project,
      guest_policy: guestPolicy,
    });
  }

  /**
   * Parse the project from GuestPolicy resource.
   *
   * @param {string} guestPolicyName
   *   A fully-qualified path representing GuestPolicy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGuestPolicyName(guestPolicyName: string) {
    return this.pathTemplates.guestPolicyPathTemplate.match(guestPolicyName)
      .project;
  }

  /**
   * Parse the guest_policy from GuestPolicy resource.
   *
   * @param {string} guestPolicyName
   *   A fully-qualified path representing GuestPolicy resource.
   * @returns {string} A string representing the guest_policy.
   */
  matchGuestPolicyFromGuestPolicyName(guestPolicyName: string) {
    return this.pathTemplates.guestPolicyPathTemplate.match(guestPolicyName)
      .guest_policy;
  }

  /**
   * Return a fully-qualified patchDeployment resource name string.
   *
   * @param {string} project
   * @param {string} patch_deployment
   * @returns {string} Resource name string.
   */
  patchDeploymentPath(project: string, patchDeployment: string) {
    return this.pathTemplates.patchDeploymentPathTemplate.render({
      project: project,
      patch_deployment: patchDeployment,
    });
  }

  /**
   * Parse the project from PatchDeployment resource.
   *
   * @param {string} patchDeploymentName
   *   A fully-qualified path representing PatchDeployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPatchDeploymentName(patchDeploymentName: string) {
    return this.pathTemplates.patchDeploymentPathTemplate.match(
      patchDeploymentName
    ).project;
  }

  /**
   * Parse the patch_deployment from PatchDeployment resource.
   *
   * @param {string} patchDeploymentName
   *   A fully-qualified path representing PatchDeployment resource.
   * @returns {string} A string representing the patch_deployment.
   */
  matchPatchDeploymentFromPatchDeploymentName(patchDeploymentName: string) {
    return this.pathTemplates.patchDeploymentPathTemplate.match(
      patchDeploymentName
    ).patch_deployment;
  }

  /**
   * Return a fully-qualified patchJob resource name string.
   *
   * @param {string} project
   * @param {string} patch_job
   * @returns {string} Resource name string.
   */
  patchJobPath(project: string, patchJob: string) {
    return this.pathTemplates.patchJobPathTemplate.render({
      project: project,
      patch_job: patchJob,
    });
  }

  /**
   * Parse the project from PatchJob resource.
   *
   * @param {string} patchJobName
   *   A fully-qualified path representing PatchJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPatchJobName(patchJobName: string) {
    return this.pathTemplates.patchJobPathTemplate.match(patchJobName).project;
  }

  /**
   * Parse the patch_job from PatchJob resource.
   *
   * @param {string} patchJobName
   *   A fully-qualified path representing PatchJob resource.
   * @returns {string} A string representing the patch_job.
   */
  matchPatchJobFromPatchJobName(patchJobName: string) {
    return this.pathTemplates.patchJobPathTemplate.match(patchJobName)
      .patch_job;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.osConfigServiceStub && !this._terminated) {
      return this.osConfigServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
