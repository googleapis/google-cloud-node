// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as osconfigzonalserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1alpha.OsConfigZonalServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient
          .servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient
          .apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.osConfigZonalServiceStub, undefined);
      await client.initialize();
      assert(client.osConfigZonalServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.osConfigZonalServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.osConfigZonalServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getOSPolicyAssignment', () => {
    it('invokes getOSPolicyAssignment without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
      );
      client.innerApiCalls.getOsPolicyAssignment =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getOSPolicyAssignment(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOSPolicyAssignment without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
      );
      client.innerApiCalls.getOsPolicyAssignment =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getOSPolicyAssignment(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOSPolicyAssignment with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getOsPolicyAssignment = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getOSPolicyAssignment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOSPolicyAssignment with closed client', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getOSPolicyAssignment(request),
        expectedError
      );
    });
  });

  describe('getInstanceOSPoliciesCompliance', () => {
    it('invokes getInstanceOSPoliciesCompliance without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
      );
      client.innerApiCalls.getInstanceOsPoliciesCompliance =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getInstanceOSPoliciesCompliance(request);
      assert(stub.calledOnce);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getInstanceOsPoliciesCompliance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInstanceOsPoliciesCompliance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInstanceOSPoliciesCompliance without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
      );
      client.innerApiCalls.getInstanceOsPoliciesCompliance =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getInstanceOSPoliciesCompliance(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.osconfig.v1alpha.IInstanceOSPoliciesCompliance | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert(stub.calledOnce);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getInstanceOsPoliciesCompliance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInstanceOsPoliciesCompliance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInstanceOSPoliciesCompliance with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getInstanceOsPoliciesCompliance = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getInstanceOSPoliciesCompliance(request),
        expectedError
      );
      assert(stub.calledOnce);
      const actualRequest = (
        client.innerApiCalls.getInstanceOsPoliciesCompliance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInstanceOsPoliciesCompliance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInstanceOSPoliciesCompliance with closed client', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getInstanceOSPoliciesCompliance(request),
        expectedError
      );
      assert(stub.calledOnce);
    });
  });

  describe('getOSPolicyAssignmentReport', () => {
    it('invokes getOSPolicyAssignmentReport without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
      );
      client.innerApiCalls.getOsPolicyAssignmentReport =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getOSPolicyAssignmentReport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getOsPolicyAssignmentReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOsPolicyAssignmentReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOSPolicyAssignmentReport without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
      );
      client.innerApiCalls.getOsPolicyAssignmentReport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getOSPolicyAssignmentReport(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentReport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getOsPolicyAssignmentReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOsPolicyAssignmentReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOSPolicyAssignmentReport with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getOsPolicyAssignmentReport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getOSPolicyAssignmentReport(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getOsPolicyAssignmentReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOsPolicyAssignmentReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOSPolicyAssignmentReport with closed client', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getOSPolicyAssignmentReport(request),
        expectedError
      );
    });
  });

  describe('getInventory', () => {
    it('invokes getInventory without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetInventoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetInventoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.Inventory()
      );
      client.innerApiCalls.getInventory = stubSimpleCall(expectedResponse);
      const [response] = await client.getInventory(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getInventory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInventory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInventory without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetInventoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetInventoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.Inventory()
      );
      client.innerApiCalls.getInventory =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getInventory(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.osconfig.v1alpha.IInventory | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getInventory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInventory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInventory with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetInventoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetInventoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getInventory = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getInventory(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getInventory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInventory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInventory with closed client', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetInventoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetInventoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getInventory(request), expectedError);
    });
  });

  describe('getVulnerabilityReport', () => {
    it('invokes getVulnerabilityReport without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
      );
      client.innerApiCalls.getVulnerabilityReport =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getVulnerabilityReport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVulnerabilityReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVulnerabilityReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVulnerabilityReport without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
      );
      client.innerApiCalls.getVulnerabilityReport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getVulnerabilityReport(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.osconfig.v1alpha.IVulnerabilityReport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVulnerabilityReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVulnerabilityReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVulnerabilityReport with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getVulnerabilityReport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getVulnerabilityReport(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getVulnerabilityReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVulnerabilityReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVulnerabilityReport with closed client', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getVulnerabilityReport(request),
        expectedError
      );
    });
  });

  describe('createOSPolicyAssignment', () => {
    it('invokes createOSPolicyAssignment without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createOsPolicyAssignment =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createOSPolicyAssignment(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createOSPolicyAssignment without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createOsPolicyAssignment =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createOSPolicyAssignment(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment,
              protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment,
        protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createOSPolicyAssignment with call error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createOsPolicyAssignment = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createOSPolicyAssignment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createOSPolicyAssignment with LRO error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createOsPolicyAssignment = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createOSPolicyAssignment(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateOSPolicyAssignmentProgress without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateOSPolicyAssignmentProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateOSPolicyAssignmentProgress with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateOSPolicyAssignmentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateOSPolicyAssignment', () => {
    it('invokes updateOSPolicyAssignment without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest()
      );
      request.osPolicyAssignment ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest',
        ['osPolicyAssignment', 'name']
      );
      request.osPolicyAssignment.name = defaultValue1;
      const expectedHeaderRequestParams = `os_policy_assignment.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateOsPolicyAssignment =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateOSPolicyAssignment(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateOSPolicyAssignment without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest()
      );
      request.osPolicyAssignment ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest',
        ['osPolicyAssignment', 'name']
      );
      request.osPolicyAssignment.name = defaultValue1;
      const expectedHeaderRequestParams = `os_policy_assignment.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateOsPolicyAssignment =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateOSPolicyAssignment(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment,
              protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment,
        protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateOSPolicyAssignment with call error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest()
      );
      request.osPolicyAssignment ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest',
        ['osPolicyAssignment', 'name']
      );
      request.osPolicyAssignment.name = defaultValue1;
      const expectedHeaderRequestParams = `os_policy_assignment.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateOsPolicyAssignment = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateOSPolicyAssignment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateOSPolicyAssignment with LRO error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest()
      );
      request.osPolicyAssignment ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest',
        ['osPolicyAssignment', 'name']
      );
      request.osPolicyAssignment.name = defaultValue1;
      const expectedHeaderRequestParams = `os_policy_assignment.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateOsPolicyAssignment = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateOSPolicyAssignment(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateOSPolicyAssignmentProgress without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateOSPolicyAssignmentProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateOSPolicyAssignmentProgress with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateOSPolicyAssignmentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteOSPolicyAssignment', () => {
    it('invokes deleteOSPolicyAssignment without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteOsPolicyAssignment =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteOSPolicyAssignment(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteOSPolicyAssignment without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteOsPolicyAssignment =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteOSPolicyAssignment(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteOSPolicyAssignment with call error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteOsPolicyAssignment = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteOSPolicyAssignment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteOSPolicyAssignment with LRO error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteOsPolicyAssignment = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteOSPolicyAssignment(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteOsPolicyAssignment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteOsPolicyAssignment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteOSPolicyAssignmentProgress without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteOSPolicyAssignmentProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteOSPolicyAssignmentProgress with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteOSPolicyAssignmentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listOSPolicyAssignments', () => {
    it('invokes listOSPolicyAssignments without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
      ];
      client.innerApiCalls.listOsPolicyAssignments =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listOSPolicyAssignments(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignments without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
      ];
      client.innerApiCalls.listOsPolicyAssignments =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listOSPolicyAssignments(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignments with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listOsPolicyAssignments = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listOSPolicyAssignments(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignmentsStream without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
      ];
      client.descriptors.page.listOSPolicyAssignments.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listOSPolicyAssignmentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listOSPolicyAssignments
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listOsPolicyAssignments, request)
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignments
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listOSPolicyAssignmentsStream with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOSPolicyAssignments.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listOSPolicyAssignmentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listOSPolicyAssignments
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listOsPolicyAssignments, request)
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignments
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOSPolicyAssignments without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
      ];
      client.descriptors.page.listOSPolicyAssignments.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[] =
        [];
      const iterable = client.listOSPolicyAssignmentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listOSPolicyAssignments
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignments
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOSPolicyAssignments with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOSPolicyAssignments.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listOSPolicyAssignmentsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listOSPolicyAssignments
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignments
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listOSPolicyAssignmentRevisions', () => {
    it('invokes listOSPolicyAssignmentRevisions without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
      ];
      client.innerApiCalls.listOsPolicyAssignmentRevisions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listOSPolicyAssignmentRevisions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignmentRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignmentRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignmentRevisions without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
      ];
      client.innerApiCalls.listOsPolicyAssignmentRevisions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listOSPolicyAssignmentRevisions(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignmentRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignmentRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignmentRevisions with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listOsPolicyAssignmentRevisions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listOSPolicyAssignmentRevisions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignmentRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignmentRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignmentRevisionsStream without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
      ];
      client.descriptors.page.listOSPolicyAssignmentRevisions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listOSPolicyAssignmentRevisionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentRevisions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listOsPolicyAssignmentRevisions,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentRevisions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listOSPolicyAssignmentRevisionsStream with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOSPolicyAssignmentRevisions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listOSPolicyAssignmentRevisionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentRevisions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listOsPolicyAssignmentRevisions,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentRevisions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOSPolicyAssignmentRevisions without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()
        ),
      ];
      client.descriptors.page.listOSPolicyAssignmentRevisions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[] =
        [];
      const iterable = client.listOSPolicyAssignmentRevisionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listOSPolicyAssignmentRevisions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentRevisions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOSPolicyAssignmentRevisions with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOSPolicyAssignmentRevisions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listOSPolicyAssignmentRevisionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listOSPolicyAssignmentRevisions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentRevisions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listInstanceOSPoliciesCompliances', () => {
    it('invokes listInstanceOSPoliciesCompliances without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
      ];
      client.innerApiCalls.listInstanceOsPoliciesCompliances =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listInstanceOSPoliciesCompliances(
        request
      );
      assert(stub.calledOnce);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listInstanceOsPoliciesCompliances as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInstanceOsPoliciesCompliances as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInstanceOSPoliciesCompliances without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
      ];
      client.innerApiCalls.listInstanceOsPoliciesCompliances =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listInstanceOSPoliciesCompliances(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.osconfig.v1alpha.IInstanceOSPoliciesCompliance[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert(stub.calledOnce);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listInstanceOsPoliciesCompliances as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInstanceOsPoliciesCompliances as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInstanceOSPoliciesCompliances with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listInstanceOsPoliciesCompliances = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listInstanceOSPoliciesCompliances(request),
        expectedError
      );
      assert(stub.calledOnce);
      const actualRequest = (
        client.innerApiCalls.listInstanceOsPoliciesCompliances as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInstanceOsPoliciesCompliances as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInstanceOSPoliciesCompliancesStream without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
      ];
      client.descriptors.page.listInstanceOSPoliciesCompliances.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listInstanceOSPoliciesCompliancesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert(stub.calledOnce);
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listInstanceOSPoliciesCompliances
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listInstanceOsPoliciesCompliances,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listInstanceOSPoliciesCompliances
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listInstanceOSPoliciesCompliancesStream with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listInstanceOSPoliciesCompliances.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listInstanceOSPoliciesCompliancesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(stub.calledOnce);
      assert(
        (
          client.descriptors.page.listInstanceOSPoliciesCompliances
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listInstanceOsPoliciesCompliances,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listInstanceOSPoliciesCompliances
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listInstanceOSPoliciesCompliances without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()
        ),
      ];
      client.descriptors.page.listInstanceOSPoliciesCompliances.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.osconfig.v1alpha.IInstanceOSPoliciesCompliance[] =
        [];
      const iterable = client.listInstanceOSPoliciesCompliancesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert(stub.calledOnce);
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listInstanceOSPoliciesCompliances
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listInstanceOSPoliciesCompliances
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listInstanceOSPoliciesCompliances with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const stub = sinon.stub(client, 'warn');
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listInstanceOSPoliciesCompliances.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listInstanceOSPoliciesCompliancesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.osconfig.v1alpha.IInstanceOSPoliciesCompliance[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert(stub.calledOnce);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listInstanceOSPoliciesCompliances
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listInstanceOSPoliciesCompliances
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listOSPolicyAssignmentReports', () => {
    it('invokes listOSPolicyAssignmentReports without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
      ];
      client.innerApiCalls.listOsPolicyAssignmentReports =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listOSPolicyAssignmentReports(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignmentReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignmentReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignmentReports without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
      ];
      client.innerApiCalls.listOsPolicyAssignmentReports =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listOSPolicyAssignmentReports(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentReport[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignmentReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignmentReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignmentReports with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listOsPolicyAssignmentReports = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listOSPolicyAssignmentReports(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listOsPolicyAssignmentReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listOsPolicyAssignmentReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listOSPolicyAssignmentReportsStream without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
      ];
      client.descriptors.page.listOSPolicyAssignmentReports.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listOSPolicyAssignmentReportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentReports
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listOsPolicyAssignmentReports,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentReports
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listOSPolicyAssignmentReportsStream with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOSPolicyAssignmentReports.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listOSPolicyAssignmentReportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentReports
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listOsPolicyAssignmentReports,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentReports
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOSPolicyAssignmentReports without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignmentReport()
        ),
      ];
      client.descriptors.page.listOSPolicyAssignmentReports.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentReport[] =
        [];
      const iterable = client.listOSPolicyAssignmentReportsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listOSPolicyAssignmentReports
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentReports
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listOSPolicyAssignmentReports with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listOSPolicyAssignmentReports.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listOSPolicyAssignmentReportsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentReport[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listOSPolicyAssignmentReports
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listOSPolicyAssignmentReports
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listInventories', () => {
    it('invokes listInventories without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInventoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
      ];
      client.innerApiCalls.listInventories = stubSimpleCall(expectedResponse);
      const [response] = await client.listInventories(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listInventories as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInventories as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInventories without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInventoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
      ];
      client.innerApiCalls.listInventories =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listInventories(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.osconfig.v1alpha.IInventory[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listInventories as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInventories as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInventories with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInventoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listInventories = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listInventories(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listInventories as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInventories as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInventoriesStream without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInventoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
      ];
      client.descriptors.page.listInventories.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listInventoriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.Inventory[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.osconfig.v1alpha.Inventory) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listInventories.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listInventories, request)
      );
      assert(
        (client.descriptors.page.listInventories.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listInventoriesStream with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInventoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listInventories.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listInventoriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.Inventory[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.osconfig.v1alpha.Inventory) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listInventories.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listInventories, request)
      );
      assert(
        (client.descriptors.page.listInventories.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listInventories without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInventoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.Inventory()
        ),
      ];
      client.descriptors.page.listInventories.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.osconfig.v1alpha.IInventory[] = [];
      const iterable = client.listInventoriesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listInventories.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listInventories.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listInventories with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListInventoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listInventories.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listInventoriesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.osconfig.v1alpha.IInventory[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listInventories.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listInventories.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listVulnerabilityReports', () => {
    it('invokes listVulnerabilityReports without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
      ];
      client.innerApiCalls.listVulnerabilityReports =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listVulnerabilityReports(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVulnerabilityReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVulnerabilityReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVulnerabilityReports without error using callback', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
      ];
      client.innerApiCalls.listVulnerabilityReports =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listVulnerabilityReports(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.osconfig.v1alpha.IVulnerabilityReport[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVulnerabilityReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVulnerabilityReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVulnerabilityReports with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listVulnerabilityReports = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listVulnerabilityReports(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listVulnerabilityReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVulnerabilityReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVulnerabilityReportsStream without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
      ];
      client.descriptors.page.listVulnerabilityReports.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listVulnerabilityReportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.VulnerabilityReport[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.VulnerabilityReport
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listVulnerabilityReports
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listVulnerabilityReports, request)
      );
      assert(
        (
          client.descriptors.page.listVulnerabilityReports
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listVulnerabilityReportsStream with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVulnerabilityReports.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listVulnerabilityReportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.osconfig.v1alpha.VulnerabilityReport[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.osconfig.v1alpha.VulnerabilityReport
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listVulnerabilityReports
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listVulnerabilityReports, request)
      );
      assert(
        (
          client.descriptors.page.listVulnerabilityReports
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVulnerabilityReports without error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()
        ),
      ];
      client.descriptors.page.listVulnerabilityReports.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.osconfig.v1alpha.IVulnerabilityReport[] =
        [];
      const iterable = client.listVulnerabilityReportsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVulnerabilityReports
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listVulnerabilityReports
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVulnerabilityReports with error', async () => {
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVulnerabilityReports.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listVulnerabilityReportsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.osconfig.v1alpha.IVulnerabilityReport[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVulnerabilityReports
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listVulnerabilityReports
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('instanceOSPoliciesCompliance', () => {
      const fakePath = '/rendered/path/instanceOSPoliciesCompliance';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        instance: 'instanceValue',
      };
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.instanceOSPoliciesCompliancePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.instanceOSPoliciesCompliancePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('instanceOSPoliciesCompliancePath', () => {
        const result = client.instanceOSPoliciesCompliancePath(
          'projectValue',
          'locationValue',
          'instanceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.instanceOSPoliciesCompliancePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromInstanceOSPoliciesComplianceName', () => {
        const result =
          client.matchProjectFromInstanceOSPoliciesComplianceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.instanceOSPoliciesCompliancePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromInstanceOSPoliciesComplianceName', () => {
        const result =
          client.matchLocationFromInstanceOSPoliciesComplianceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.instanceOSPoliciesCompliancePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromInstanceOSPoliciesComplianceName', () => {
        const result =
          client.matchInstanceFromInstanceOSPoliciesComplianceName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (
            client.pathTemplates.instanceOSPoliciesCompliancePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('inventory', () => {
      const fakePath = '/rendered/path/inventory';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        instance: 'instanceValue',
      };
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.inventoryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.inventoryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('inventoryPath', () => {
        const result = client.inventoryPath(
          'projectValue',
          'locationValue',
          'instanceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.inventoryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromInventoryName', () => {
        const result = client.matchProjectFromInventoryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.inventoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromInventoryName', () => {
        const result = client.matchLocationFromInventoryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.inventoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromInventoryName', () => {
        const result = client.matchInstanceFromInventoryName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.inventoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('oSPolicyAssignment', () => {
      const fakePath = '/rendered/path/oSPolicyAssignment';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        os_policy_assignment: 'osPolicyAssignmentValue',
      };
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.oSPolicyAssignmentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.oSPolicyAssignmentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('oSPolicyAssignmentPath', () => {
        const result = client.oSPolicyAssignmentPath(
          'projectValue',
          'locationValue',
          'osPolicyAssignmentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromOSPolicyAssignmentName', () => {
        const result = client.matchProjectFromOSPolicyAssignmentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOSPolicyAssignmentName', () => {
        const result = client.matchLocationFromOSPolicyAssignmentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchOsPolicyAssignmentFromOSPolicyAssignmentName', () => {
        const result =
          client.matchOsPolicyAssignmentFromOSPolicyAssignmentName(fakePath);
        assert.strictEqual(result, 'osPolicyAssignmentValue');
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('oSPolicyAssignmentReport', () => {
      const fakePath = '/rendered/path/oSPolicyAssignmentReport';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        instance: 'instanceValue',
        assignment: 'assignmentValue',
      };
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.oSPolicyAssignmentReportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.oSPolicyAssignmentReportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('oSPolicyAssignmentReportPath', () => {
        const result = client.oSPolicyAssignmentReportPath(
          'projectValue',
          'locationValue',
          'instanceValue',
          'assignmentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentReportPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromOSPolicyAssignmentReportName', () => {
        const result =
          client.matchProjectFromOSPolicyAssignmentReportName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOSPolicyAssignmentReportName', () => {
        const result =
          client.matchLocationFromOSPolicyAssignmentReportName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromOSPolicyAssignmentReportName', () => {
        const result =
          client.matchInstanceFromOSPolicyAssignmentReportName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssignmentFromOSPolicyAssignmentReportName', () => {
        const result =
          client.matchAssignmentFromOSPolicyAssignmentReportName(fakePath);
        assert.strictEqual(result, 'assignmentValue');
        assert(
          (
            client.pathTemplates.oSPolicyAssignmentReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('vulnerabilityReport', () => {
      const fakePath = '/rendered/path/vulnerabilityReport';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        instance: 'instanceValue',
      };
      const client =
        new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.vulnerabilityReportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.vulnerabilityReportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('vulnerabilityReportPath', () => {
        const result = client.vulnerabilityReportPath(
          'projectValue',
          'locationValue',
          'instanceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.vulnerabilityReportPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromVulnerabilityReportName', () => {
        const result = client.matchProjectFromVulnerabilityReportName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.vulnerabilityReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromVulnerabilityReportName', () => {
        const result =
          client.matchLocationFromVulnerabilityReportName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.vulnerabilityReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromVulnerabilityReportName', () => {
        const result =
          client.matchInstanceFromVulnerabilityReportName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (
            client.pathTemplates.vulnerabilityReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
