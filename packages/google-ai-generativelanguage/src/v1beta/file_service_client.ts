// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/file_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './file_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  An API for uploading and managing files.
 * @class
 * @memberof v1beta
 */
export class FileServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  fileServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of FileServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new FileServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof FileServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'generativelanguage.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      cachedContentPathTemplate: new this._gaxModule.PathTemplate(
        'cachedContents/{id}'
      ),
      chunkPathTemplate: new this._gaxModule.PathTemplate(
        'corpora/{corpus}/documents/{document}/chunks/{chunk}'
      ),
      corpusPathTemplate: new this._gaxModule.PathTemplate('corpora/{corpus}'),
      corpusPermissionPathTemplate: new this._gaxModule.PathTemplate(
        'corpora/{corpus}/permissions/{permission}'
      ),
      documentPathTemplate: new this._gaxModule.PathTemplate(
        'corpora/{corpus}/documents/{document}'
      ),
      filePathTemplate: new this._gaxModule.PathTemplate('files/{file}'),
      modelPathTemplate: new this._gaxModule.PathTemplate('models/{model}'),
      tunedModelPathTemplate: new this._gaxModule.PathTemplate(
        'tunedModels/{tuned_model}'
      ),
      tunedModelPermissionPathTemplate: new this._gaxModule.PathTemplate(
        'tunedModels/{tuned_model}/permissions/{permission}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listFiles: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'files'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.ai.generativelanguage.v1beta.FileService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.fileServiceStub) {
      return this.fileServiceStub;
    }

    // Put together the "service stub" for
    // google.ai.generativelanguage.v1beta.FileService.
    this.fileServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.ai.generativelanguage.v1beta.FileService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.ai.generativelanguage.v1beta.FileService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const fileServiceStubMethods = [
      'createFile',
      'listFiles',
      'getFile',
      'deleteFile',
    ];
    for (const methodName of fileServiceStubMethods) {
      const callPromise = this.fileServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.fileServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'generativelanguage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'generativelanguage.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a `File`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.ai.generativelanguage.v1beta.File} [request.file]
   *   Optional. Metadata for the file to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.ai.generativelanguage.v1beta.CreateFileResponse|CreateFileResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/file_service.create_file.js</caption>
   * region_tag:generativelanguage_v1beta_generated_FileService_CreateFile_async
   */
  createFile(
    request?: protos.google.ai.generativelanguage.v1beta.ICreateFileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.ai.generativelanguage.v1beta.ICreateFileResponse,
      protos.google.ai.generativelanguage.v1beta.ICreateFileRequest | undefined,
      {} | undefined,
    ]
  >;
  createFile(
    request: protos.google.ai.generativelanguage.v1beta.ICreateFileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.ai.generativelanguage.v1beta.ICreateFileResponse,
      | protos.google.ai.generativelanguage.v1beta.ICreateFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createFile(
    request: protos.google.ai.generativelanguage.v1beta.ICreateFileRequest,
    callback: Callback<
      protos.google.ai.generativelanguage.v1beta.ICreateFileResponse,
      | protos.google.ai.generativelanguage.v1beta.ICreateFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createFile(
    request?: protos.google.ai.generativelanguage.v1beta.ICreateFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.ai.generativelanguage.v1beta.ICreateFileResponse,
          | protos.google.ai.generativelanguage.v1beta.ICreateFileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.ai.generativelanguage.v1beta.ICreateFileResponse,
      | protos.google.ai.generativelanguage.v1beta.ICreateFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.ai.generativelanguage.v1beta.ICreateFileResponse,
      protos.google.ai.generativelanguage.v1beta.ICreateFileRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createFile(request, options, callback);
  }
  /**
   * Gets the metadata for the given `File`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the `File` to get.
   *   Example: `files/abc-123`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.ai.generativelanguage.v1beta.File|File}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/file_service.get_file.js</caption>
   * region_tag:generativelanguage_v1beta_generated_FileService_GetFile_async
   */
  getFile(
    request?: protos.google.ai.generativelanguage.v1beta.IGetFileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.ai.generativelanguage.v1beta.IFile,
      protos.google.ai.generativelanguage.v1beta.IGetFileRequest | undefined,
      {} | undefined,
    ]
  >;
  getFile(
    request: protos.google.ai.generativelanguage.v1beta.IGetFileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.ai.generativelanguage.v1beta.IFile,
      | protos.google.ai.generativelanguage.v1beta.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getFile(
    request: protos.google.ai.generativelanguage.v1beta.IGetFileRequest,
    callback: Callback<
      protos.google.ai.generativelanguage.v1beta.IFile,
      | protos.google.ai.generativelanguage.v1beta.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getFile(
    request?: protos.google.ai.generativelanguage.v1beta.IGetFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.ai.generativelanguage.v1beta.IFile,
          | protos.google.ai.generativelanguage.v1beta.IGetFileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.ai.generativelanguage.v1beta.IFile,
      | protos.google.ai.generativelanguage.v1beta.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.ai.generativelanguage.v1beta.IFile,
      protos.google.ai.generativelanguage.v1beta.IGetFileRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getFile(request, options, callback);
  }
  /**
   * Deletes the `File`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the `File` to delete.
   *   Example: `files/abc-123`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/file_service.delete_file.js</caption>
   * region_tag:generativelanguage_v1beta_generated_FileService_DeleteFile_async
   */
  deleteFile(
    request?: protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteFile(
    request: protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFile(
    request: protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFile(
    request?: protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.ai.generativelanguage.v1beta.IDeleteFileRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteFile(request, options, callback);
  }

  /**
   * Lists the metadata for `File`s owned by the requesting project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of `File`s to return per page.
   *   If unspecified, defaults to 10. Maximum `page_size` is 100.
   * @param {string} [request.pageToken]
   *   Optional. A page token from a previous `ListFiles` call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.ai.generativelanguage.v1beta.File|File}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listFilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listFiles(
    request?: protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.ai.generativelanguage.v1beta.IFile[],
      protos.google.ai.generativelanguage.v1beta.IListFilesRequest | null,
      protos.google.ai.generativelanguage.v1beta.IListFilesResponse,
    ]
  >;
  listFiles(
    request: protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
      | protos.google.ai.generativelanguage.v1beta.IListFilesResponse
      | null
      | undefined,
      protos.google.ai.generativelanguage.v1beta.IFile
    >
  ): void;
  listFiles(
    request: protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
    callback: PaginationCallback<
      protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
      | protos.google.ai.generativelanguage.v1beta.IListFilesResponse
      | null
      | undefined,
      protos.google.ai.generativelanguage.v1beta.IFile
    >
  ): void;
  listFiles(
    request?: protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
          | protos.google.ai.generativelanguage.v1beta.IListFilesResponse
          | null
          | undefined,
          protos.google.ai.generativelanguage.v1beta.IFile
        >,
    callback?: PaginationCallback<
      protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
      | protos.google.ai.generativelanguage.v1beta.IListFilesResponse
      | null
      | undefined,
      protos.google.ai.generativelanguage.v1beta.IFile
    >
  ): Promise<
    [
      protos.google.ai.generativelanguage.v1beta.IFile[],
      protos.google.ai.generativelanguage.v1beta.IListFilesRequest | null,
      protos.google.ai.generativelanguage.v1beta.IListFilesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listFiles(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of `File`s to return per page.
   *   If unspecified, defaults to 10. Maximum `page_size` is 100.
   * @param {string} [request.pageToken]
   *   Optional. A page token from a previous `ListFiles` call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.ai.generativelanguage.v1beta.File|File} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listFilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listFilesStream(
    request?: protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listFiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFiles.createStream(
      this.innerApiCalls.listFiles as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listFiles`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of `File`s to return per page.
   *   If unspecified, defaults to 10. Maximum `page_size` is 100.
   * @param {string} [request.pageToken]
   *   Optional. A page token from a previous `ListFiles` call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.ai.generativelanguage.v1beta.File|File}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/file_service.list_files.js</caption>
   * region_tag:generativelanguage_v1beta_generated_FileService_ListFiles_async
   */
  listFilesAsync(
    request?: protos.google.ai.generativelanguage.v1beta.IListFilesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.ai.generativelanguage.v1beta.IFile> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listFiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFiles.asyncIterate(
      this.innerApiCalls['listFiles'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.ai.generativelanguage.v1beta.IFile>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified cachedContent resource name string.
   *
   * @param {string} id
   * @returns {string} Resource name string.
   */
  cachedContentPath(id: string) {
    return this.pathTemplates.cachedContentPathTemplate.render({
      id: id,
    });
  }

  /**
   * Parse the id from CachedContent resource.
   *
   * @param {string} cachedContentName
   *   A fully-qualified path representing CachedContent resource.
   * @returns {string} A string representing the id.
   */
  matchIdFromCachedContentName(cachedContentName: string) {
    return this.pathTemplates.cachedContentPathTemplate.match(cachedContentName)
      .id;
  }

  /**
   * Return a fully-qualified chunk resource name string.
   *
   * @param {string} corpus
   * @param {string} document
   * @param {string} chunk
   * @returns {string} Resource name string.
   */
  chunkPath(corpus: string, document: string, chunk: string) {
    return this.pathTemplates.chunkPathTemplate.render({
      corpus: corpus,
      document: document,
      chunk: chunk,
    });
  }

  /**
   * Parse the corpus from Chunk resource.
   *
   * @param {string} chunkName
   *   A fully-qualified path representing Chunk resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromChunkName(chunkName: string) {
    return this.pathTemplates.chunkPathTemplate.match(chunkName).corpus;
  }

  /**
   * Parse the document from Chunk resource.
   *
   * @param {string} chunkName
   *   A fully-qualified path representing Chunk resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromChunkName(chunkName: string) {
    return this.pathTemplates.chunkPathTemplate.match(chunkName).document;
  }

  /**
   * Parse the chunk from Chunk resource.
   *
   * @param {string} chunkName
   *   A fully-qualified path representing Chunk resource.
   * @returns {string} A string representing the chunk.
   */
  matchChunkFromChunkName(chunkName: string) {
    return this.pathTemplates.chunkPathTemplate.match(chunkName).chunk;
  }

  /**
   * Return a fully-qualified corpus resource name string.
   *
   * @param {string} corpus
   * @returns {string} Resource name string.
   */
  corpusPath(corpus: string) {
    return this.pathTemplates.corpusPathTemplate.render({
      corpus: corpus,
    });
  }

  /**
   * Parse the corpus from Corpus resource.
   *
   * @param {string} corpusName
   *   A fully-qualified path representing Corpus resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromCorpusName(corpusName: string) {
    return this.pathTemplates.corpusPathTemplate.match(corpusName).corpus;
  }

  /**
   * Return a fully-qualified corpusPermission resource name string.
   *
   * @param {string} corpus
   * @param {string} permission
   * @returns {string} Resource name string.
   */
  corpusPermissionPath(corpus: string, permission: string) {
    return this.pathTemplates.corpusPermissionPathTemplate.render({
      corpus: corpus,
      permission: permission,
    });
  }

  /**
   * Parse the corpus from CorpusPermission resource.
   *
   * @param {string} corpusPermissionName
   *   A fully-qualified path representing corpus_permission resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromCorpusPermissionName(corpusPermissionName: string) {
    return this.pathTemplates.corpusPermissionPathTemplate.match(
      corpusPermissionName
    ).corpus;
  }

  /**
   * Parse the permission from CorpusPermission resource.
   *
   * @param {string} corpusPermissionName
   *   A fully-qualified path representing corpus_permission resource.
   * @returns {string} A string representing the permission.
   */
  matchPermissionFromCorpusPermissionName(corpusPermissionName: string) {
    return this.pathTemplates.corpusPermissionPathTemplate.match(
      corpusPermissionName
    ).permission;
  }

  /**
   * Return a fully-qualified document resource name string.
   *
   * @param {string} corpus
   * @param {string} document
   * @returns {string} Resource name string.
   */
  documentPath(corpus: string, document: string) {
    return this.pathTemplates.documentPathTemplate.render({
      corpus: corpus,
      document: document,
    });
  }

  /**
   * Parse the corpus from Document resource.
   *
   * @param {string} documentName
   *   A fully-qualified path representing Document resource.
   * @returns {string} A string representing the corpus.
   */
  matchCorpusFromDocumentName(documentName: string) {
    return this.pathTemplates.documentPathTemplate.match(documentName).corpus;
  }

  /**
   * Parse the document from Document resource.
   *
   * @param {string} documentName
   *   A fully-qualified path representing Document resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromDocumentName(documentName: string) {
    return this.pathTemplates.documentPathTemplate.match(documentName).document;
  }

  /**
   * Return a fully-qualified file resource name string.
   *
   * @param {string} file
   * @returns {string} Resource name string.
   */
  filePath(file: string) {
    return this.pathTemplates.filePathTemplate.render({
      file: file,
    });
  }

  /**
   * Parse the file from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the file.
   */
  matchFileFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).file;
  }

  /**
   * Return a fully-qualified model resource name string.
   *
   * @param {string} model
   * @returns {string} Resource name string.
   */
  modelPath(model: string) {
    return this.pathTemplates.modelPathTemplate.render({
      model: model,
    });
  }

  /**
   * Parse the model from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).model;
  }

  /**
   * Return a fully-qualified tunedModel resource name string.
   *
   * @param {string} tuned_model
   * @returns {string} Resource name string.
   */
  tunedModelPath(tunedModel: string) {
    return this.pathTemplates.tunedModelPathTemplate.render({
      tuned_model: tunedModel,
    });
  }

  /**
   * Parse the tuned_model from TunedModel resource.
   *
   * @param {string} tunedModelName
   *   A fully-qualified path representing TunedModel resource.
   * @returns {string} A string representing the tuned_model.
   */
  matchTunedModelFromTunedModelName(tunedModelName: string) {
    return this.pathTemplates.tunedModelPathTemplate.match(tunedModelName)
      .tuned_model;
  }

  /**
   * Return a fully-qualified tunedModelPermission resource name string.
   *
   * @param {string} tuned_model
   * @param {string} permission
   * @returns {string} Resource name string.
   */
  tunedModelPermissionPath(tunedModel: string, permission: string) {
    return this.pathTemplates.tunedModelPermissionPathTemplate.render({
      tuned_model: tunedModel,
      permission: permission,
    });
  }

  /**
   * Parse the tuned_model from TunedModelPermission resource.
   *
   * @param {string} tunedModelPermissionName
   *   A fully-qualified path representing tuned_model_permission resource.
   * @returns {string} A string representing the tuned_model.
   */
  matchTunedModelFromTunedModelPermissionName(
    tunedModelPermissionName: string
  ) {
    return this.pathTemplates.tunedModelPermissionPathTemplate.match(
      tunedModelPermissionName
    ).tuned_model;
  }

  /**
   * Parse the permission from TunedModelPermission resource.
   *
   * @param {string} tunedModelPermissionName
   *   A fully-qualified path representing tuned_model_permission resource.
   * @returns {string} A string representing the permission.
   */
  matchPermissionFromTunedModelPermissionName(
    tunedModelPermissionName: string
  ) {
    return this.pathTemplates.tunedModelPermissionPathTemplate.match(
      tunedModelPermissionName
    ).permission;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.fileServiceStub && !this._terminated) {
      return this.fileServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
