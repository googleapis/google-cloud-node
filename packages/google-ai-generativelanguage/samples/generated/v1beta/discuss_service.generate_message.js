// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(model, prompt) {
  // [START generativelanguage_v1beta_generated_DiscussService_GenerateMessage_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the model to use.
   *  Format: `name=models/{model}`.
   */
  // const model = 'abc123'
  /**
   *  Required. The structured textual input given to the model as a prompt.
   *  Given a
   *  prompt, the model will return what it predicts is the next message in the
   *  discussion.
   */
  // const prompt = {}
  /**
   *  Optional. Controls the randomness of the output.
   *  Values can range over `[0.0,1.0]`,
   *  inclusive. A value closer to `1.0` will produce responses that are more
   *  varied, while a value closer to `0.0` will typically result in
   *  less surprising responses from the model.
   */
  // const temperature = 1234
  /**
   *  Optional. The number of generated response messages to return.
   *  This value must be between
   *  `[1, 8]`, inclusive. If unset, this will default to `1`.
   */
  // const candidateCount = 1234
  /**
   *  Optional. The maximum cumulative probability of tokens to consider when
   *  sampling.
   *  The model uses combined Top-k and nucleus sampling.
   *  Nucleus sampling considers the smallest set of tokens whose probability
   *  sum is at least `top_p`.
   */
  // const topP = 1234
  /**
   *  Optional. The maximum number of tokens to consider when sampling.
   *  The model uses combined Top-k and nucleus sampling.
   *  Top-k sampling considers the set of `top_k` most probable tokens.
   */
  // const topK = 1234

  // Imports the Generativelanguage library
  const {DiscussServiceClient} = require('@google-ai/generativelanguage').v1beta;

  // Instantiates a client
  const generativelanguageClient = new DiscussServiceClient();

  async function callGenerateMessage() {
    // Construct request
    const request = {
      model,
      prompt,
    };

    // Run request
    const response = await generativelanguageClient.generateMessage(request);
    console.log(response);
  }

  callGenerateMessage();
  // [END generativelanguage_v1beta_generated_DiscussService_GenerateMessage_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
