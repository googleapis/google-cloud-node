// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as retrieverserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta.RetrieverServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        retrieverserviceModule.v1beta.RetrieverServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        retrieverserviceModule.v1beta.RetrieverServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = retrieverserviceModule.v1beta.RetrieverServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.retrieverServiceStub, undefined);
      await client.initialize();
      assert(client.retrieverServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.retrieverServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.retrieverServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('createCorpus', () => {
    it('invokes createCorpus without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateCorpusRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Corpus()
      );
      client.innerApiCalls.createCorpus = stubSimpleCall(expectedResponse);
      const [response] = await client.createCorpus(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes createCorpus without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateCorpusRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Corpus()
      );
      client.innerApiCalls.createCorpus =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCorpus(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.ICorpus | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes createCorpus with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateCorpusRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.createCorpus = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCorpus(request), expectedError);
    });

    it('invokes createCorpus with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateCorpusRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createCorpus(request), expectedError);
    });
  });

  describe('getCorpus', () => {
    it('invokes getCorpus without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Corpus()
      );
      client.innerApiCalls.getCorpus = stubSimpleCall(expectedResponse);
      const [response] = await client.getCorpus(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCorpus without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Corpus()
      );
      client.innerApiCalls.getCorpus =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCorpus(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.ICorpus | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCorpus with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCorpus = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getCorpus(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCorpus with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCorpus(request), expectedError);
    });
  });

  describe('updateCorpus', () => {
    it('invokes updateCorpus without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateCorpusRequest()
      );
      request.corpus ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateCorpusRequest',
        ['corpus', 'name']
      );
      request.corpus.name = defaultValue1;
      const expectedHeaderRequestParams = `corpus.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Corpus()
      );
      client.innerApiCalls.updateCorpus = stubSimpleCall(expectedResponse);
      const [response] = await client.updateCorpus(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCorpus without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateCorpusRequest()
      );
      request.corpus ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateCorpusRequest',
        ['corpus', 'name']
      );
      request.corpus.name = defaultValue1;
      const expectedHeaderRequestParams = `corpus.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Corpus()
      );
      client.innerApiCalls.updateCorpus =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCorpus(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.ICorpus | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCorpus with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateCorpusRequest()
      );
      request.corpus ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateCorpusRequest',
        ['corpus', 'name']
      );
      request.corpus.name = defaultValue1;
      const expectedHeaderRequestParams = `corpus.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCorpus = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateCorpus(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCorpus with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateCorpusRequest()
      );
      request.corpus ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateCorpusRequest',
        ['corpus', 'name']
      );
      request.corpus.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateCorpus(request), expectedError);
    });
  });

  describe('deleteCorpus', () => {
    it('invokes deleteCorpus without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteCorpus = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteCorpus(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCorpus without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteCorpus =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteCorpus(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCorpus with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCorpus = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteCorpus(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCorpus with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteCorpus(request), expectedError);
    });
  });

  describe('queryCorpus', () => {
    it('invokes queryCorpus without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.QueryCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryCorpusResponse()
      );
      client.innerApiCalls.queryCorpus = stubSimpleCall(expectedResponse);
      const [response] = await client.queryCorpus(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryCorpus without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.QueryCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryCorpusResponse()
      );
      client.innerApiCalls.queryCorpus =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.queryCorpus(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IQueryCorpusResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryCorpus with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.QueryCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.queryCorpus = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.queryCorpus(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.queryCorpus as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryCorpus as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryCorpus with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryCorpusRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.QueryCorpusRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.queryCorpus(request), expectedError);
    });
  });

  describe('createDocument', () => {
    it('invokes createDocument without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Document()
      );
      client.innerApiCalls.createDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.createDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Document()
      );
      client.innerApiCalls.createDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createDocument(request), expectedError);
    });
  });

  describe('getDocument', () => {
    it('invokes getDocument without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Document()
      );
      client.innerApiCalls.getDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.getDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Document()
      );
      client.innerApiCalls.getDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getDocument(request), expectedError);
    });
  });

  describe('updateDocument', () => {
    it('invokes updateDocument without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Document()
      );
      client.innerApiCalls.updateDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.updateDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Document()
      );
      client.innerApiCalls.updateDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateDocument(request), expectedError);
    });
  });

  describe('deleteDocument', () => {
    it('invokes deleteDocument without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteDocument(request), expectedError);
    });
  });

  describe('queryDocument', () => {
    it('invokes queryDocument without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.QueryDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryDocumentResponse()
      );
      client.innerApiCalls.queryDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.queryDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryDocument without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.QueryDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryDocumentResponse()
      );
      client.innerApiCalls.queryDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.queryDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IQueryDocumentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.queryDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryDocument with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.QueryDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.queryDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.queryDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.queryDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.queryDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes queryDocument with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.QueryDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.QueryDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.queryDocument(request), expectedError);
    });
  });

  describe('createChunk', () => {
    it('invokes createChunk without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CreateChunkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Chunk()
      );
      client.innerApiCalls.createChunk = stubSimpleCall(expectedResponse);
      const [response] = await client.createChunk(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChunk without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CreateChunkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Chunk()
      );
      client.innerApiCalls.createChunk =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createChunk(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IChunk | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChunk with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CreateChunkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createChunk = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createChunk(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChunk with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CreateChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CreateChunkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createChunk(request), expectedError);
    });
  });

  describe('batchCreateChunks', () => {
    it('invokes batchCreateChunks without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchCreateChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchCreateChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchCreateChunksResponse()
      );
      client.innerApiCalls.batchCreateChunks = stubSimpleCall(expectedResponse);
      const [response] = await client.batchCreateChunks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchCreateChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateChunks without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchCreateChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchCreateChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchCreateChunksResponse()
      );
      client.innerApiCalls.batchCreateChunks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchCreateChunks(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IBatchCreateChunksResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchCreateChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateChunks with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchCreateChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchCreateChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchCreateChunks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchCreateChunks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchCreateChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateChunks with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchCreateChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchCreateChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchCreateChunks(request), expectedError);
    });
  });

  describe('getChunk', () => {
    it('invokes getChunk without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetChunkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Chunk()
      );
      client.innerApiCalls.getChunk = stubSimpleCall(expectedResponse);
      const [response] = await client.getChunk(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChunk without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetChunkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Chunk()
      );
      client.innerApiCalls.getChunk =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getChunk(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IChunk | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChunk with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetChunkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getChunk = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getChunk(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChunk with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GetChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GetChunkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getChunk(request), expectedError);
    });
  });

  describe('updateChunk', () => {
    it('invokes updateChunk without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateChunkRequest()
      );
      request.chunk ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateChunkRequest',
        ['chunk', 'name']
      );
      request.chunk.name = defaultValue1;
      const expectedHeaderRequestParams = `chunk.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Chunk()
      );
      client.innerApiCalls.updateChunk = stubSimpleCall(expectedResponse);
      const [response] = await client.updateChunk(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChunk without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateChunkRequest()
      );
      request.chunk ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateChunkRequest',
        ['chunk', 'name']
      );
      request.chunk.name = defaultValue1;
      const expectedHeaderRequestParams = `chunk.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.Chunk()
      );
      client.innerApiCalls.updateChunk =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateChunk(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IChunk | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChunk with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateChunkRequest()
      );
      request.chunk ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateChunkRequest',
        ['chunk', 'name']
      );
      request.chunk.name = defaultValue1;
      const expectedHeaderRequestParams = `chunk.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateChunk = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateChunk(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChunk with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.UpdateChunkRequest()
      );
      request.chunk ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.UpdateChunkRequest',
        ['chunk', 'name']
      );
      request.chunk.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateChunk(request), expectedError);
    });
  });

  describe('batchUpdateChunks', () => {
    it('invokes batchUpdateChunks without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchUpdateChunksResponse()
      );
      client.innerApiCalls.batchUpdateChunks = stubSimpleCall(expectedResponse);
      const [response] = await client.batchUpdateChunks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchUpdateChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateChunks without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchUpdateChunksResponse()
      );
      client.innerApiCalls.batchUpdateChunks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchUpdateChunks(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IBatchUpdateChunksResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchUpdateChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateChunks with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchUpdateChunks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchUpdateChunks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchUpdateChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateChunks with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchUpdateChunks(request), expectedError);
    });
  });

  describe('deleteChunk', () => {
    it('invokes deleteChunk without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteChunkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteChunk = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteChunk(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChunk without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteChunkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteChunk =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteChunk(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChunk with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteChunkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteChunk = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteChunk(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteChunk as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChunk as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChunk with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.DeleteChunkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.DeleteChunkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteChunk(request), expectedError);
    });
  });

  describe('batchDeleteChunks', () => {
    it('invokes batchDeleteChunks without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.batchDeleteChunks = stubSimpleCall(expectedResponse);
      const [response] = await client.batchDeleteChunks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchDeleteChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteChunks without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.batchDeleteChunks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchDeleteChunks(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchDeleteChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteChunks with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchDeleteChunks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchDeleteChunks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchDeleteChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteChunks with closed client', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchDeleteChunks(request), expectedError);
    });
  });

  describe('listCorpora', () => {
    it('invokes listCorpora without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListCorporaRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
      ];
      client.innerApiCalls.listCorpora = stubSimpleCall(expectedResponse);
      const [response] = await client.listCorpora(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listCorpora without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListCorporaRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
      ];
      client.innerApiCalls.listCorpora =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCorpora(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.ICorpus[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listCorpora with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListCorporaRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listCorpora = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCorpora(request), expectedError);
    });

    it('invokes listCorporaStream without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListCorporaRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
      ];
      client.descriptors.page.listCorpora.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCorporaStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ai.generativelanguage.v1beta.Corpus[] =
          [];
        stream.on(
          'data',
          (response: protos.google.ai.generativelanguage.v1beta.Corpus) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCorpora.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCorpora, request)
      );
    });

    it('invokes listCorporaStream with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListCorporaRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listCorpora.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listCorporaStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ai.generativelanguage.v1beta.Corpus[] =
          [];
        stream.on(
          'data',
          (response: protos.google.ai.generativelanguage.v1beta.Corpus) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCorpora.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCorpora, request)
      );
    });

    it('uses async iteration with listCorpora without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListCorporaRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Corpus()
        ),
      ];
      client.descriptors.page.listCorpora.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.ai.generativelanguage.v1beta.ICorpus[] =
        [];
      const iterable = client.listCorporaAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listCorpora.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
    });

    it('uses async iteration with listCorpora with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListCorporaRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listCorpora.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listCorporaAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.ai.generativelanguage.v1beta.ICorpus[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listCorpora.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
    });
  });

  describe('listDocuments', () => {
    it('invokes listDocuments without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
      ];
      client.innerApiCalls.listDocuments = stubSimpleCall(expectedResponse);
      const [response] = await client.listDocuments(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocuments without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
      ];
      client.innerApiCalls.listDocuments =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDocuments(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.ai.generativelanguage.v1beta.IDocument[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocuments with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDocuments = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDocuments(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocumentsStream without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
      ];
      client.descriptors.page.listDocuments.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDocumentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ai.generativelanguage.v1beta.Document[] =
          [];
        stream.on(
          'data',
          (response: protos.google.ai.generativelanguage.v1beta.Document) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDocuments, request)
      );
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDocumentsStream with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDocuments.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDocumentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ai.generativelanguage.v1beta.Document[] =
          [];
        stream.on(
          'data',
          (response: protos.google.ai.generativelanguage.v1beta.Document) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDocuments, request)
      );
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDocuments without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Document()
        ),
      ];
      client.descriptors.page.listDocuments.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.ai.generativelanguage.v1beta.IDocument[] =
        [];
      const iterable = client.listDocumentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDocuments.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDocuments.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDocuments with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDocuments.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDocumentsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.ai.generativelanguage.v1beta.IDocument[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDocuments.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDocuments.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listChunks', () => {
    it('invokes listChunks without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
      ];
      client.innerApiCalls.listChunks = stubSimpleCall(expectedResponse);
      const [response] = await client.listChunks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChunks without error using callback', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
      ];
      client.innerApiCalls.listChunks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listChunks(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IChunk[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChunks with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listChunks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listChunks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listChunks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChunks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChunksStream without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
      ];
      client.descriptors.page.listChunks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listChunksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ai.generativelanguage.v1beta.Chunk[] =
          [];
        stream.on(
          'data',
          (response: protos.google.ai.generativelanguage.v1beta.Chunk) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listChunks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listChunks, request)
      );
      assert(
        (client.descriptors.page.listChunks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listChunksStream with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChunks.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listChunksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ai.generativelanguage.v1beta.Chunk[] =
          [];
        stream.on(
          'data',
          (response: protos.google.ai.generativelanguage.v1beta.Chunk) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listChunks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listChunks, request)
      );
      assert(
        (client.descriptors.page.listChunks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChunks without error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
        generateSampleMessage(
          new protos.google.ai.generativelanguage.v1beta.Chunk()
        ),
      ];
      client.descriptors.page.listChunks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.ai.generativelanguage.v1beta.IChunk[] = [];
      const iterable = client.listChunksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listChunks.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listChunks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChunks with error', async () => {
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.ListChunksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.ListChunksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChunks.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listChunksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.ai.generativelanguage.v1beta.IChunk[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listChunks.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listChunks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('chunk', () => {
      const fakePath = '/rendered/path/chunk';
      const expectedParameters = {
        corpus: 'corpusValue',
        document: 'documentValue',
        chunk: 'chunkValue',
      };
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.chunkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.chunkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('chunkPath', () => {
        const result = client.chunkPath(
          'corpusValue',
          'documentValue',
          'chunkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.chunkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromChunkName', () => {
        const result = client.matchCorpusFromChunkName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromChunkName', () => {
        const result = client.matchDocumentFromChunkName(fakePath);
        assert.strictEqual(result, 'documentValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchChunkFromChunkName', () => {
        const result = client.matchChunkFromChunkName(fakePath);
        assert.strictEqual(result, 'chunkValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('corpus', () => {
      const fakePath = '/rendered/path/corpus';
      const expectedParameters = {
        corpus: 'corpusValue',
      };
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.corpusPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.corpusPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('corpusPath', () => {
        const result = client.corpusPath('corpusValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.corpusPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromCorpusName', () => {
        const result = client.matchCorpusFromCorpusName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.corpusPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('corpusPermission', () => {
      const fakePath = '/rendered/path/corpusPermission';
      const expectedParameters = {
        corpus: 'corpusValue',
        permission: 'permissionValue',
      };
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.corpusPermissionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.corpusPermissionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('corpusPermissionPath', () => {
        const result = client.corpusPermissionPath(
          'corpusValue',
          'permissionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.corpusPermissionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromCorpusPermissionName', () => {
        const result = client.matchCorpusFromCorpusPermissionName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.corpusPermissionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPermissionFromCorpusPermissionName', () => {
        const result = client.matchPermissionFromCorpusPermissionName(fakePath);
        assert.strictEqual(result, 'permissionValue');
        assert(
          (client.pathTemplates.corpusPermissionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('document', () => {
      const fakePath = '/rendered/path/document';
      const expectedParameters = {
        corpus: 'corpusValue',
        document: 'documentValue',
      };
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.documentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.documentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('documentPath', () => {
        const result = client.documentPath('corpusValue', 'documentValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.documentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromDocumentName', () => {
        const result = client.matchCorpusFromDocumentName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromDocumentName', () => {
        const result = client.matchDocumentFromDocumentName(fakePath);
        assert.strictEqual(result, 'documentValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('model', () => {
      const fakePath = '/rendered/path/model';
      const expectedParameters = {
        model: 'modelValue',
      };
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.modelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelPath', () => {
        const result = client.modelPath('modelValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchModelFromModelName', () => {
        const result = client.matchModelFromModelName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tunedModel', () => {
      const fakePath = '/rendered/path/tunedModel';
      const expectedParameters = {
        tuned_model: 'tunedModelValue',
      };
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tunedModelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tunedModelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tunedModelPath', () => {
        const result = client.tunedModelPath('tunedModelValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tunedModelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTunedModelFromTunedModelName', () => {
        const result = client.matchTunedModelFromTunedModelName(fakePath);
        assert.strictEqual(result, 'tunedModelValue');
        assert(
          (client.pathTemplates.tunedModelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tunedModelPermission', () => {
      const fakePath = '/rendered/path/tunedModelPermission';
      const expectedParameters = {
        tuned_model: 'tunedModelValue',
        permission: 'permissionValue',
      };
      const client = new retrieverserviceModule.v1beta.RetrieverServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tunedModelPermissionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tunedModelPermissionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tunedModelPermissionPath', () => {
        const result = client.tunedModelPermissionPath(
          'tunedModelValue',
          'permissionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTunedModelFromTunedModelPermissionName', () => {
        const result =
          client.matchTunedModelFromTunedModelPermissionName(fakePath);
        assert.strictEqual(result, 'tunedModelValue');
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPermissionFromTunedModelPermissionName', () => {
        const result =
          client.matchPermissionFromTunedModelPermissionName(fakePath);
        assert.strictEqual(result, 'permissionValue');
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
