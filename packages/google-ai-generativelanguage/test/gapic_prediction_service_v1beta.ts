// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as predictionserviceModule from '../src';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta.PredictionServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new predictionserviceModule.v1beta.PredictionServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'generativelanguage.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new predictionserviceModule.v1beta.PredictionServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          predictionserviceModule.v1beta.PredictionServiceClient.servicePath;
        assert.strictEqual(servicePath, 'generativelanguage.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          predictionserviceModule.v1beta.PredictionServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'generativelanguage.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {universeDomain: 'example.com'}
      );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'generativelanguage.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {universe_domain: 'example.com'}
      );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'generativelanguage.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new predictionserviceModule.v1beta.PredictionServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'generativelanguage.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new predictionserviceModule.v1beta.PredictionServiceClient({
              universeDomain: 'configured.example.com',
            });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'generativelanguage.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new predictionserviceModule.v1beta.PredictionServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = predictionserviceModule.v1beta.PredictionServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new predictionserviceModule.v1beta.PredictionServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          fallback: true,
        }
      );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.predictionServiceStub, undefined);
      await client.initialize();
      assert(client.predictionServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize().catch(err => {
        throw err;
      });
      assert(client.predictionServiceStub);
      client
        .close()
        .then(() => {
          done();
        })
        .catch(err => {
          throw err;
        });
    });

    it('has close method for the non-initialized client', done => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.predictionServiceStub, undefined);
      client
        .close()
        .then(() => {
          done();
        })
        .catch(err => {
          throw err;
        });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('predict', () => {
    it('invokes predict without error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.PredictRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictResponse()
      );
      client.innerApiCalls.predict = stubSimpleCall(expectedResponse);
      const [response] = await client.predict(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.predict as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.predict as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes predict without error using callback', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.PredictRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictResponse()
      );
      client.innerApiCalls.predict =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.predict(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IPredictResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.predict as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.predict as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes predict with error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.PredictRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.predict = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.predict(request), expectedError);
      const actualRequest = (client.innerApiCalls.predict as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.predict as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes predict with closed client', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.PredictRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close().catch(err => {
        throw err;
      });
      await assert.rejects(client.predict(request), expectedError);
    });
  });

  describe('predictLongRunning', () => {
    it('invokes predictLongRunning without error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictLongRunningRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.PredictLongRunningRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.predictLongRunning =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.predictLongRunning(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.predictLongRunning as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.predictLongRunning as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes predictLongRunning without error using callback', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictLongRunningRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.PredictLongRunningRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1 ?? ''}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.predictLongRunning =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.predictLongRunning(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.ai.generativelanguage.v1beta.IPredictLongRunningResponse,
              protos.google.ai.generativelanguage.v1beta.IPredictLongRunningMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.ai.generativelanguage.v1beta.IPredictLongRunningResponse,
        protos.google.ai.generativelanguage.v1beta.IPredictLongRunningMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.predictLongRunning as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.predictLongRunning as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes predictLongRunning with call error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictLongRunningRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.PredictLongRunningRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.predictLongRunning = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.predictLongRunning(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.predictLongRunning as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.predictLongRunning as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes predictLongRunning with LRO error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.PredictLongRunningRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.PredictLongRunningRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1 ?? ''}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.predictLongRunning = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.predictLongRunning(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.predictLongRunning as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.predictLongRunning as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkPredictLongRunningProgress without error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkPredictLongRunningProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkPredictLongRunningProgress with error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkPredictLongRunningProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient
          .getOperation(
            request,
            undefined,
            (
              err?: Error | null,
              result?: operationsProtos.google.longrunning.Operation | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient
          .cancelOperation(
            request,
            undefined,
            (
              err?: Error | null,
              result?: protos.google.protobuf.Empty | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient
          .deleteOperation(
            request,
            undefined,
            (
              err?: Error | null,
              result?: protos.google.protobuf.Empty | null
            ) => {
              if (err) {
                reject(err);
              } else {
                resolve(result);
              }
            }
          )
          .catch(err => {
            throw err;
          });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.IOperation[] = [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.IOperation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('cachedContent', async () => {
      const fakePath = '/rendered/path/cachedContent';
      const expectedParameters = {
        id: 'idValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.cachedContentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cachedContentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cachedContentPath', () => {
        const result = client.cachedContentPath('idValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.cachedContentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchIdFromCachedContentName', () => {
        const result = client.matchIdFromCachedContentName(fakePath);
        assert.strictEqual(result, 'idValue');
        assert(
          (client.pathTemplates.cachedContentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('chunk', async () => {
      const fakePath = '/rendered/path/chunk';
      const expectedParameters = {
        corpus: 'corpusValue',
        document: 'documentValue',
        chunk: 'chunkValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.chunkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.chunkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('chunkPath', () => {
        const result = client.chunkPath(
          'corpusValue',
          'documentValue',
          'chunkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.chunkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromChunkName', () => {
        const result = client.matchCorpusFromChunkName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromChunkName', () => {
        const result = client.matchDocumentFromChunkName(fakePath);
        assert.strictEqual(result, 'documentValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchChunkFromChunkName', () => {
        const result = client.matchChunkFromChunkName(fakePath);
        assert.strictEqual(result, 'chunkValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('corpus', async () => {
      const fakePath = '/rendered/path/corpus';
      const expectedParameters = {
        corpus: 'corpusValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.corpusPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.corpusPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('corpusPath', () => {
        const result = client.corpusPath('corpusValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.corpusPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromCorpusName', () => {
        const result = client.matchCorpusFromCorpusName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.corpusPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('corpusPermission', async () => {
      const fakePath = '/rendered/path/corpusPermission';
      const expectedParameters = {
        corpus: 'corpusValue',
        permission: 'permissionValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.corpusPermissionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.corpusPermissionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('corpusPermissionPath', () => {
        const result = client.corpusPermissionPath(
          'corpusValue',
          'permissionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.corpusPermissionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromCorpusPermissionName', () => {
        const result = client.matchCorpusFromCorpusPermissionName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.corpusPermissionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPermissionFromCorpusPermissionName', () => {
        const result = client.matchPermissionFromCorpusPermissionName(fakePath);
        assert.strictEqual(result, 'permissionValue');
        assert(
          (client.pathTemplates.corpusPermissionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('document', async () => {
      const fakePath = '/rendered/path/document';
      const expectedParameters = {
        corpus: 'corpusValue',
        document: 'documentValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.documentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.documentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('documentPath', () => {
        const result = client.documentPath('corpusValue', 'documentValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.documentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromDocumentName', () => {
        const result = client.matchCorpusFromDocumentName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromDocumentName', () => {
        const result = client.matchDocumentFromDocumentName(fakePath);
        assert.strictEqual(result, 'documentValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('file', async () => {
      const fakePath = '/rendered/path/file';
      const expectedParameters = {
        file: 'fileValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.filePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.filePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('filePath', () => {
        const result = client.filePath('fileValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.filePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFileFromFileName', () => {
        const result = client.matchFileFromFileName(fakePath);
        assert.strictEqual(result, 'fileValue');
        assert(
          (client.pathTemplates.filePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('model', async () => {
      const fakePath = '/rendered/path/model';
      const expectedParameters = {
        model: 'modelValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.modelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelPath', () => {
        const result = client.modelPath('modelValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchModelFromModelName', () => {
        const result = client.matchModelFromModelName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tunedModel', async () => {
      const fakePath = '/rendered/path/tunedModel';
      const expectedParameters = {
        tuned_model: 'tunedModelValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.tunedModelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tunedModelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tunedModelPath', () => {
        const result = client.tunedModelPath('tunedModelValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tunedModelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTunedModelFromTunedModelName', () => {
        const result = client.matchTunedModelFromTunedModelName(fakePath);
        assert.strictEqual(result, 'tunedModelValue');
        assert(
          (client.pathTemplates.tunedModelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tunedModelPermission', async () => {
      const fakePath = '/rendered/path/tunedModelPermission';
      const expectedParameters = {
        tuned_model: 'tunedModelValue',
        permission: 'permissionValue',
      };
      const client = new predictionserviceModule.v1beta.PredictionServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      await client.initialize();
      client.pathTemplates.tunedModelPermissionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tunedModelPermissionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tunedModelPermissionPath', () => {
        const result = client.tunedModelPermissionPath(
          'tunedModelValue',
          'permissionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTunedModelFromTunedModelPermissionName', () => {
        const result =
          client.matchTunedModelFromTunedModelPermissionName(fakePath);
        assert.strictEqual(result, 'tunedModelValue');
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPermissionFromTunedModelPermissionName', () => {
        const result =
          client.matchPermissionFromTunedModelPermissionName(fakePath);
        assert.strictEqual(result, 'permissionValue');
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
