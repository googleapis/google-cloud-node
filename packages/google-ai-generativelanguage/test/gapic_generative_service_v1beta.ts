// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as generativeserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubServerStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // write something to the stream to trigger transformStub and send the response back to the client
  setImmediate(() => {
    mockStream.write({});
  });
  setImmediate(() => {
    mockStream.end();
  });
  return sinon.stub().returns(mockStream);
}

describe('v1beta.GenerativeServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new generativeserviceModule.v1beta.GenerativeServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'generativelanguage.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new generativeserviceModule.v1beta.GenerativeServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          generativeserviceModule.v1beta.GenerativeServiceClient.servicePath;
        assert.strictEqual(servicePath, 'generativelanguage.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          generativeserviceModule.v1beta.GenerativeServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'generativelanguage.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {universeDomain: 'example.com'}
      );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'generativelanguage.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {universe_domain: 'example.com'}
      );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'generativelanguage.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new generativeserviceModule.v1beta.GenerativeServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'generativelanguage.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new generativeserviceModule.v1beta.GenerativeServiceClient({
              universeDomain: 'configured.example.com',
            });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'generativelanguage.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new generativeserviceModule.v1beta.GenerativeServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = generativeserviceModule.v1beta.GenerativeServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new generativeserviceModule.v1beta.GenerativeServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          fallback: true,
        }
      );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.generativeServiceStub, undefined);
      await client.initialize();
      assert(client.generativeServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      assert(client.generativeServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.generativeServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('generateContent', () => {
    it('invokes generateContent without error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentResponse()
      );
      client.innerApiCalls.generateContent = stubSimpleCall(expectedResponse);
      const [response] = await client.generateContent(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateContent without error using callback', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentResponse()
      );
      client.innerApiCalls.generateContent =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateContent(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IGenerateContentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateContent with error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.generateContent = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.generateContent(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.generateContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateContent with closed client', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.generateContent(request), expectedError);
    });
  });

  describe('generateAnswer', () => {
    it('invokes generateAnswer without error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateAnswerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateAnswerRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateAnswerResponse()
      );
      client.innerApiCalls.generateAnswer = stubSimpleCall(expectedResponse);
      const [response] = await client.generateAnswer(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateAnswer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAnswer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAnswer without error using callback', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateAnswerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateAnswerRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateAnswerResponse()
      );
      client.innerApiCalls.generateAnswer =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateAnswer(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IGenerateAnswerResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateAnswer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAnswer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAnswer with error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateAnswerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateAnswerRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.generateAnswer = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.generateAnswer(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.generateAnswer as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAnswer as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAnswer with closed client', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateAnswerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateAnswerRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.generateAnswer(request), expectedError);
    });
  });

  describe('embedContent', () => {
    it('invokes embedContent without error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.EmbedContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.EmbedContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.EmbedContentResponse()
      );
      client.innerApiCalls.embedContent = stubSimpleCall(expectedResponse);
      const [response] = await client.embedContent(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.embedContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.embedContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes embedContent without error using callback', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.EmbedContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.EmbedContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.EmbedContentResponse()
      );
      client.innerApiCalls.embedContent =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.embedContent(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IEmbedContentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.embedContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.embedContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes embedContent with error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.EmbedContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.EmbedContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.embedContent = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.embedContent(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.embedContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.embedContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes embedContent with closed client', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.EmbedContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.EmbedContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.embedContent(request), expectedError);
    });
  });

  describe('batchEmbedContents', () => {
    it('invokes batchEmbedContents without error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchEmbedContentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchEmbedContentsRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchEmbedContentsResponse()
      );
      client.innerApiCalls.batchEmbedContents =
        stubSimpleCall(expectedResponse);
      const [response] = await client.batchEmbedContents(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchEmbedContents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchEmbedContents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchEmbedContents without error using callback', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchEmbedContentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchEmbedContentsRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchEmbedContentsResponse()
      );
      client.innerApiCalls.batchEmbedContents =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchEmbedContents(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.IBatchEmbedContentsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchEmbedContents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchEmbedContents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchEmbedContents with error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchEmbedContentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchEmbedContentsRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchEmbedContents = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchEmbedContents(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchEmbedContents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchEmbedContents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchEmbedContents with closed client', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.BatchEmbedContentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.BatchEmbedContentsRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchEmbedContents(request), expectedError);
    });
  });

  describe('countTokens', () => {
    it('invokes countTokens without error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CountTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CountTokensRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CountTokensResponse()
      );
      client.innerApiCalls.countTokens = stubSimpleCall(expectedResponse);
      const [response] = await client.countTokens(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.countTokens as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.countTokens as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes countTokens without error using callback', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CountTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CountTokensRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CountTokensResponse()
      );
      client.innerApiCalls.countTokens =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.countTokens(
          request,
          (
            err?: Error | null,
            result?: protos.google.ai.generativelanguage.v1beta.ICountTokensResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.countTokens as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.countTokens as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes countTokens with error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CountTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CountTokensRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.countTokens = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.countTokens(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.countTokens as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.countTokens as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes countTokens with closed client', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.CountTokensRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.CountTokensRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.countTokens(request), expectedError);
    });
  });

  describe('streamGenerateContent', () => {
    it('invokes streamGenerateContent without error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentResponse()
      );
      client.innerApiCalls.streamGenerateContent =
        stubServerStreamingCall(expectedResponse);
      const stream = client.streamGenerateContent(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.ai.generativelanguage.v1beta.GenerateContentResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.streamGenerateContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.streamGenerateContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes streamGenerateContent without error and gaxServerStreamingRetries enabled', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {gaxServerStreamingRetries: true}
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentResponse()
      );
      client.innerApiCalls.streamGenerateContent =
        stubServerStreamingCall(expectedResponse);
      const stream = client.streamGenerateContent(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.ai.generativelanguage.v1beta.GenerateContentResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.streamGenerateContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.streamGenerateContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes streamGenerateContent with error', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedHeaderRequestParams = `model=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.streamGenerateContent = stubServerStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.streamGenerateContent(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.ai.generativelanguage.v1beta.GenerateContentResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      const actualRequest = (
        client.innerApiCalls.streamGenerateContent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.streamGenerateContent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes streamGenerateContent with closed client', async () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ai.generativelanguage.v1beta.GenerateContentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ai.generativelanguage.v1beta.GenerateContentRequest',
        ['model']
      );
      request.model = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      const stream = client.streamGenerateContent(request, {
        retryRequestOptions: {noResponseRetries: 0},
      });
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.ai.generativelanguage.v1beta.GenerateContentResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
    });
    it('should create a client with gaxServerStreamingRetries enabled', () => {
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          gaxServerStreamingRetries: true,
        }
      );
      assert(client);
    });
  });

  describe('Path templates', () => {
    describe('chunk', () => {
      const fakePath = '/rendered/path/chunk';
      const expectedParameters = {
        corpus: 'corpusValue',
        document: 'documentValue',
        chunk: 'chunkValue',
      };
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.chunkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.chunkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('chunkPath', () => {
        const result = client.chunkPath(
          'corpusValue',
          'documentValue',
          'chunkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.chunkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromChunkName', () => {
        const result = client.matchCorpusFromChunkName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromChunkName', () => {
        const result = client.matchDocumentFromChunkName(fakePath);
        assert.strictEqual(result, 'documentValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchChunkFromChunkName', () => {
        const result = client.matchChunkFromChunkName(fakePath);
        assert.strictEqual(result, 'chunkValue');
        assert(
          (client.pathTemplates.chunkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('corpus', () => {
      const fakePath = '/rendered/path/corpus';
      const expectedParameters = {
        corpus: 'corpusValue',
      };
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.corpusPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.corpusPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('corpusPath', () => {
        const result = client.corpusPath('corpusValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.corpusPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromCorpusName', () => {
        const result = client.matchCorpusFromCorpusName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.corpusPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('corpusPermission', () => {
      const fakePath = '/rendered/path/corpusPermission';
      const expectedParameters = {
        corpus: 'corpusValue',
        permission: 'permissionValue',
      };
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.corpusPermissionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.corpusPermissionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('corpusPermissionPath', () => {
        const result = client.corpusPermissionPath(
          'corpusValue',
          'permissionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.corpusPermissionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromCorpusPermissionName', () => {
        const result = client.matchCorpusFromCorpusPermissionName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.corpusPermissionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPermissionFromCorpusPermissionName', () => {
        const result = client.matchPermissionFromCorpusPermissionName(fakePath);
        assert.strictEqual(result, 'permissionValue');
        assert(
          (client.pathTemplates.corpusPermissionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('document', () => {
      const fakePath = '/rendered/path/document';
      const expectedParameters = {
        corpus: 'corpusValue',
        document: 'documentValue',
      };
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.documentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.documentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('documentPath', () => {
        const result = client.documentPath('corpusValue', 'documentValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.documentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchCorpusFromDocumentName', () => {
        const result = client.matchCorpusFromDocumentName(fakePath);
        assert.strictEqual(result, 'corpusValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromDocumentName', () => {
        const result = client.matchDocumentFromDocumentName(fakePath);
        assert.strictEqual(result, 'documentValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('file', () => {
      const fakePath = '/rendered/path/file';
      const expectedParameters = {
        file: 'fileValue',
      };
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.filePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.filePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('filePath', () => {
        const result = client.filePath('fileValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.filePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFileFromFileName', () => {
        const result = client.matchFileFromFileName(fakePath);
        assert.strictEqual(result, 'fileValue');
        assert(
          (client.pathTemplates.filePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('model', () => {
      const fakePath = '/rendered/path/model';
      const expectedParameters = {
        model: 'modelValue',
      };
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.modelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelPath', () => {
        const result = client.modelPath('modelValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchModelFromModelName', () => {
        const result = client.matchModelFromModelName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tunedModel', () => {
      const fakePath = '/rendered/path/tunedModel';
      const expectedParameters = {
        tuned_model: 'tunedModelValue',
      };
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.tunedModelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tunedModelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tunedModelPath', () => {
        const result = client.tunedModelPath('tunedModelValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tunedModelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTunedModelFromTunedModelName', () => {
        const result = client.matchTunedModelFromTunedModelName(fakePath);
        assert.strictEqual(result, 'tunedModelValue');
        assert(
          (client.pathTemplates.tunedModelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tunedModelPermission', () => {
      const fakePath = '/rendered/path/tunedModelPermission';
      const expectedParameters = {
        tuned_model: 'tunedModelValue',
        permission: 'permissionValue',
      };
      const client = new generativeserviceModule.v1beta.GenerativeServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.tunedModelPermissionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tunedModelPermissionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tunedModelPermissionPath', () => {
        const result = client.tunedModelPermissionPath(
          'tunedModelValue',
          'permissionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTunedModelFromTunedModelPermissionName', () => {
        const result =
          client.matchTunedModelFromTunedModelPermissionName(fakePath);
        assert.strictEqual(result, 'tunedModelValue');
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPermissionFromTunedModelPermissionName', () => {
        const result =
          client.matchPermissionFromTunedModelPermissionName(fakePath);
        assert.strictEqual(result, 'permissionValue');
        assert(
          (
            client.pathTemplates.tunedModelPermissionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
