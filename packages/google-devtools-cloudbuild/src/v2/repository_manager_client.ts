// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/repository_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './repository_manager_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Manages connections to source code repositories.
 * @class
 * @memberof v2
 */
export class RepositoryManagerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  repositoryManagerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of RepositoryManagerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new RepositoryManagerClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof RepositoryManagerClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      connectionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/connections/{connection}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      repositoryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/connections/{connection}/repositories/{repository}'
      ),
      secretVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/secrets/{secret}/versions/{version}'
      ),
      servicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listConnections: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'connections'
      ),
      listRepositories: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'repositories'
      ),
      fetchLinkableRepositories: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'repositories'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v2/{resource=projects/*/locations/*/connections/*}:getIamPolicy',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v2/{resource=projects/*/locations/*/connections/*}:setIamPolicy',
          body: '*',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v2/{resource=projects/*/locations/*/connections/*}:testIamPermissions',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v2/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v2/{name=projects/*/locations/*/operations/*}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createConnectionResponse = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.Connection'
    ) as gax.protobuf.Type;
    const createConnectionMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateConnectionResponse = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.Connection'
    ) as gax.protobuf.Type;
    const updateConnectionMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteConnectionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteConnectionMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const createRepositoryResponse = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.Repository'
    ) as gax.protobuf.Type;
    const createRepositoryMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const batchCreateRepositoriesResponse = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.BatchCreateRepositoriesResponse'
    ) as gax.protobuf.Type;
    const batchCreateRepositoriesMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteRepositoryResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteRepositoryMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v2.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createConnectionResponse.decode.bind(createConnectionResponse),
        createConnectionMetadata.decode.bind(createConnectionMetadata)
      ),
      updateConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateConnectionResponse.decode.bind(updateConnectionResponse),
        updateConnectionMetadata.decode.bind(updateConnectionMetadata)
      ),
      deleteConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteConnectionResponse.decode.bind(deleteConnectionResponse),
        deleteConnectionMetadata.decode.bind(deleteConnectionMetadata)
      ),
      createRepository: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createRepositoryResponse.decode.bind(createRepositoryResponse),
        createRepositoryMetadata.decode.bind(createRepositoryMetadata)
      ),
      batchCreateRepositories: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchCreateRepositoriesResponse.decode.bind(
          batchCreateRepositoriesResponse
        ),
        batchCreateRepositoriesMetadata.decode.bind(
          batchCreateRepositoriesMetadata
        )
      ),
      deleteRepository: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRepositoryResponse.decode.bind(deleteRepositoryResponse),
        deleteRepositoryMetadata.decode.bind(deleteRepositoryMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.devtools.cloudbuild.v2.RepositoryManager',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.repositoryManagerStub) {
      return this.repositoryManagerStub;
    }

    // Put together the "service stub" for
    // google.devtools.cloudbuild.v2.RepositoryManager.
    this.repositoryManagerStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.devtools.cloudbuild.v2.RepositoryManager'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.cloudbuild.v2.RepositoryManager,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const repositoryManagerStubMethods = [
      'createConnection',
      'getConnection',
      'listConnections',
      'updateConnection',
      'deleteConnection',
      'createRepository',
      'batchCreateRepositories',
      'getRepository',
      'listRepositories',
      'deleteRepository',
      'fetchReadWriteToken',
      'fetchReadToken',
      'fetchLinkableRepositories',
      'fetchGitRefs',
    ];
    for (const methodName of repositoryManagerStubMethods) {
      const callPromise = this.repositoryManagerStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.repositoryManagerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'cloudbuild.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'cloudbuild.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Connection to retrieve.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.cloudbuild.v2.Connection|Connection}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.get_connection.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_GetConnection_async
   */
  getConnection(
    request?: protos.google.devtools.cloudbuild.v2.IGetConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IConnection,
      protos.google.devtools.cloudbuild.v2.IGetConnectionRequest | undefined,
      {} | undefined,
    ]
  >;
  getConnection(
    request: protos.google.devtools.cloudbuild.v2.IGetConnectionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IConnection,
      | protos.google.devtools.cloudbuild.v2.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnection(
    request: protos.google.devtools.cloudbuild.v2.IGetConnectionRequest,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IConnection,
      | protos.google.devtools.cloudbuild.v2.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnection(
    request?: protos.google.devtools.cloudbuild.v2.IGetConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.cloudbuild.v2.IConnection,
          | protos.google.devtools.cloudbuild.v2.IGetConnectionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.cloudbuild.v2.IConnection,
      | protos.google.devtools.cloudbuild.v2.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IConnection,
      protos.google.devtools.cloudbuild.v2.IGetConnectionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConnection(request, options, callback);
  }
  /**
   * Gets details of a single repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Repository to retrieve.
   *   Format: `projects/* /locations/* /connections/* /repositories/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.cloudbuild.v2.Repository|Repository}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.get_repository.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_GetRepository_async
   */
  getRepository(
    request?: protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IRepository,
      protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest | undefined,
      {} | undefined,
    ]
  >;
  getRepository(
    request: protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IRepository,
      | protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRepository(
    request: protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IRepository,
      | protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRepository(
    request?: protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.cloudbuild.v2.IRepository,
          | protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.cloudbuild.v2.IRepository,
      | protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IRepository,
      protos.google.devtools.cloudbuild.v2.IGetRepositoryRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRepository(request, options, callback);
  }
  /**
   * Fetches read/write token of a given repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.repository
   *   Required. The resource name of the repository in the format
   *   `projects/* /locations/* /connections/* /repositories/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.cloudbuild.v2.FetchReadWriteTokenResponse|FetchReadWriteTokenResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.fetch_read_write_token.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_FetchReadWriteToken_async
   */
  fetchReadWriteToken(
    request?: protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenResponse,
      (
        | protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  fetchReadWriteToken(
    request: protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchReadWriteToken(
    request: protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchReadWriteToken(
    request?: protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenResponse,
          | protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenResponse,
      (
        | protos.google.devtools.cloudbuild.v2.IFetchReadWriteTokenRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        repository: request.repository ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchReadWriteToken(request, options, callback);
  }
  /**
   * Fetches read token of a given repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.repository
   *   Required. The resource name of the repository in the format
   *   `projects/* /locations/* /connections/* /repositories/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.cloudbuild.v2.FetchReadTokenResponse|FetchReadTokenResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.fetch_read_token.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_FetchReadToken_async
   */
  fetchReadToken(
    request?: protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IFetchReadTokenResponse,
      protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest | undefined,
      {} | undefined,
    ]
  >;
  fetchReadToken(
    request: protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchReadTokenResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchReadToken(
    request: protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchReadTokenResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchReadToken(
    request?: protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.cloudbuild.v2.IFetchReadTokenResponse,
          | protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchReadTokenResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IFetchReadTokenResponse,
      protos.google.devtools.cloudbuild.v2.IFetchReadTokenRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        repository: request.repository ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchReadToken(request, options, callback);
  }
  /**
   * Fetch the list of branches or tags for a given repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.repository
   *   Required. The resource name of the repository in the format
   *   `projects/* /locations/* /connections/* /repositories/*`.
   * @param {google.devtools.cloudbuild.v2.FetchGitRefsRequest.RefType} request.refType
   *   Type of refs to fetch
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.cloudbuild.v2.FetchGitRefsResponse|FetchGitRefsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.fetch_git_refs.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_FetchGitRefs_async
   */
  fetchGitRefs(
    request?: protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IFetchGitRefsResponse,
      protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest | undefined,
      {} | undefined,
    ]
  >;
  fetchGitRefs(
    request: protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchGitRefsResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchGitRefs(
    request: protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest,
    callback: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchGitRefsResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchGitRefs(
    request?: protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.cloudbuild.v2.IFetchGitRefsResponse,
          | protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.cloudbuild.v2.IFetchGitRefsResponse,
      | protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IFetchGitRefsResponse,
      protos.google.devtools.cloudbuild.v2.IFetchGitRefsRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        repository: request.repository ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchGitRefs(request, options, callback);
  }

  /**
   * Creates a Connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Project and location where the connection will be created.
   *   Format: `projects/* /locations/*`.
   * @param {google.devtools.cloudbuild.v2.Connection} request.connection
   *   Required. The Connection to create.
   * @param {string} request.connectionId
   *   Required. The ID to use for the Connection, which will become the final
   *   component of the Connection's resource name. Names must be unique
   *   per-project per-location. Allows alphanumeric characters and any of
   *   -._~%!$&'()*+,;=@.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.create_connection.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_CreateConnection_async
   */
  createConnection(
    request?: protos.google.devtools.cloudbuild.v2.ICreateConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createConnection(
    request: protos.google.devtools.cloudbuild.v2.ICreateConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConnection(
    request: protos.google.devtools.cloudbuild.v2.ICreateConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConnection(
    request?: protos.google.devtools.cloudbuild.v2.ICreateConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.cloudbuild.v2.IConnection,
            protos.google.devtools.cloudbuild.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createConnection(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.create_connection.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_CreateConnection_async
   */
  async checkCreateConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.cloudbuild.v2.Connection,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.cloudbuild.v2.Connection,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >;
  }
  /**
   * Updates a single connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.cloudbuild.v2.Connection} request.connection
   *   Required. The Connection to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to be updated.
   * @param {boolean} request.allowMissing
   *   If set to true, and the connection is not found a new connection
   *   will be created. In this situation `update_mask` is ignored.
   *   The creation will succeed only if the input connection has all the
   *   necessary information (e.g a github_config with both  user_oauth_token and
   *   installation_id properties).
   * @param {string} request.etag
   *   The current etag of the connection.
   *   If an etag is provided and does not match the current etag of the
   *   connection, update will be blocked and an ABORTED error will be returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.update_connection.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_UpdateConnection_async
   */
  updateConnection(
    request?: protos.google.devtools.cloudbuild.v2.IUpdateConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateConnection(
    request: protos.google.devtools.cloudbuild.v2.IUpdateConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnection(
    request: protos.google.devtools.cloudbuild.v2.IUpdateConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnection(
    request?: protos.google.devtools.cloudbuild.v2.IUpdateConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.cloudbuild.v2.IConnection,
            protos.google.devtools.cloudbuild.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.cloudbuild.v2.IConnection,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'connection.name': request.connection!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateConnection(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.update_connection.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_UpdateConnection_async
   */
  async checkUpdateConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.cloudbuild.v2.Connection,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.cloudbuild.v2.Connection,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >;
  }
  /**
   * Deletes a single connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Connection to delete.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {string} request.etag
   *   The current etag of the connection.
   *   If an etag is provided and does not match the current etag of the
   *   connection, deletion will be blocked and an ABORTED error will be returned.
   * @param {boolean} request.validateOnly
   *   If set, validate the request, but do not actually post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.delete_connection.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_DeleteConnection_async
   */
  deleteConnection(
    request?: protos.google.devtools.cloudbuild.v2.IDeleteConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteConnection(
    request: protos.google.devtools.cloudbuild.v2.IDeleteConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnection(
    request: protos.google.devtools.cloudbuild.v2.IDeleteConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnection(
    request?: protos.google.devtools.cloudbuild.v2.IDeleteConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.cloudbuild.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteConnection(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.delete_connection.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_DeleteConnection_async
   */
  async checkDeleteConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >;
  }
  /**
   * Creates a Repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The connection to contain the repository. If the request is part
   *   of a BatchCreateRepositoriesRequest, this field should be empty or match
   *   the parent specified there.
   * @param {google.devtools.cloudbuild.v2.Repository} request.repository
   *   Required. The repository to create.
   * @param {string} request.repositoryId
   *   Required. The ID to use for the repository, which will become the final
   *   component of the repository's resource name. This ID should be unique in
   *   the connection. Allows alphanumeric characters and any of
   *   -._~%!$&'()*+,;=@.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.create_repository.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_CreateRepository_async
   */
  createRepository(
    request?: protos.google.devtools.cloudbuild.v2.ICreateRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.cloudbuild.v2.IRepository,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createRepository(
    request: protos.google.devtools.cloudbuild.v2.ICreateRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IRepository,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRepository(
    request: protos.google.devtools.cloudbuild.v2.ICreateRepositoryRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IRepository,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRepository(
    request?: protos.google.devtools.cloudbuild.v2.ICreateRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.cloudbuild.v2.IRepository,
            protos.google.devtools.cloudbuild.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IRepository,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.cloudbuild.v2.IRepository,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRepository(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createRepository()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.create_repository.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_CreateRepository_async
   */
  async checkCreateRepositoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.cloudbuild.v2.Repository,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createRepository,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.cloudbuild.v2.Repository,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >;
  }
  /**
   * Creates multiple repositories inside a connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The connection to contain all the repositories being created.
   *   Format: projects/* /locations/* /connections/*
   *   The parent field in the CreateRepositoryRequest messages
   *   must either be empty or match this field.
   * @param {number[]} request.requests
   *   Required. The request messages specifying the repositories to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.batch_create_repositories.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_BatchCreateRepositories_async
   */
  batchCreateRepositories(
    request?: protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesResponse,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  batchCreateRepositories(
    request: protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesResponse,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateRepositories(
    request: protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesResponse,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateRepositories(
    request?: protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesResponse,
            protos.google.devtools.cloudbuild.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesResponse,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.cloudbuild.v2.IBatchCreateRepositoriesResponse,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateRepositories(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `batchCreateRepositories()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.batch_create_repositories.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_BatchCreateRepositories_async
   */
  async checkBatchCreateRepositoriesProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.cloudbuild.v2.BatchCreateRepositoriesResponse,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.batchCreateRepositories,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.cloudbuild.v2.BatchCreateRepositoriesResponse,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >;
  }
  /**
   * Deletes a single repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Repository to delete.
   *   Format: `projects/* /locations/* /connections/* /repositories/*`.
   * @param {string} request.etag
   *   The current etag of the repository.
   *   If an etag is provided and does not match the current etag of the
   *   repository, deletion will be blocked and an ABORTED error will be returned.
   * @param {boolean} request.validateOnly
   *   If set, validate the request, but do not actually post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.delete_repository.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_DeleteRepository_async
   */
  deleteRepository(
    request?: protos.google.devtools.cloudbuild.v2.IDeleteRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteRepository(
    request: protos.google.devtools.cloudbuild.v2.IDeleteRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRepository(
    request: protos.google.devtools.cloudbuild.v2.IDeleteRepositoryRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRepository(
    request?: protos.google.devtools.cloudbuild.v2.IDeleteRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.cloudbuild.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRepository(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteRepository()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.delete_repository.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_DeleteRepository_async
   */
  async checkDeleteRepositoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteRepository,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.cloudbuild.v2.OperationMetadata
    >;
  }
  /**
   * Lists Connections in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of Connections.
   *   Format: `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list.
   * @param {string} request.pageToken
   *   Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.cloudbuild.v2.Connection|Connection}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listConnectionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listConnections(
    request?: protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IConnection[],
      protos.google.devtools.cloudbuild.v2.IListConnectionsRequest | null,
      protos.google.devtools.cloudbuild.v2.IListConnectionsResponse,
    ]
  >;
  listConnections(
    request: protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
      | protos.google.devtools.cloudbuild.v2.IListConnectionsResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IConnection
    >
  ): void;
  listConnections(
    request: protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
    callback: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
      | protos.google.devtools.cloudbuild.v2.IListConnectionsResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IConnection
    >
  ): void;
  listConnections(
    request?: protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
          | protos.google.devtools.cloudbuild.v2.IListConnectionsResponse
          | null
          | undefined,
          protos.google.devtools.cloudbuild.v2.IConnection
        >,
    callback?: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
      | protos.google.devtools.cloudbuild.v2.IListConnectionsResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IConnection
    >
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IConnection[],
      protos.google.devtools.cloudbuild.v2.IListConnectionsRequest | null,
      protos.google.devtools.cloudbuild.v2.IListConnectionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listConnections(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of Connections.
   *   Format: `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list.
   * @param {string} request.pageToken
   *   Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.cloudbuild.v2.Connection|Connection} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listConnectionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listConnectionsStream(
    request?: protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConnections'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConnections.createStream(
      this.innerApiCalls.listConnections as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listConnections`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of Connections.
   *   Format: `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list.
   * @param {string} request.pageToken
   *   Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.cloudbuild.v2.Connection|Connection}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.list_connections.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_ListConnections_async
   */
  listConnectionsAsync(
    request?: protos.google.devtools.cloudbuild.v2.IListConnectionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.cloudbuild.v2.IConnection> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConnections'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConnections.asyncIterate(
      this.innerApiCalls['listConnections'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.cloudbuild.v2.IConnection>;
  }
  /**
   * Lists Repositories in a given connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of Repositories.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list.
   * @param {string} request.pageToken
   *   Page start.
   * @param {string} request.filter
   *   A filter expression that filters resources listed in the response.
   *   Expressions must follow API improvement proposal
   *   [AIP-160](https://google.aip.dev/160). e.g.
   *   `remote_uri:"https://github.com*"`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.cloudbuild.v2.Repository|Repository}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRepositories(
    request?: protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IRepository[],
      protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest | null,
      protos.google.devtools.cloudbuild.v2.IListRepositoriesResponse,
    ]
  >;
  listRepositories(
    request: protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
      | protos.google.devtools.cloudbuild.v2.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IRepository
    >
  ): void;
  listRepositories(
    request: protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
    callback: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
      | protos.google.devtools.cloudbuild.v2.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IRepository
    >
  ): void;
  listRepositories(
    request?: protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
          | protos.google.devtools.cloudbuild.v2.IListRepositoriesResponse
          | null
          | undefined,
          protos.google.devtools.cloudbuild.v2.IRepository
        >,
    callback?: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
      | protos.google.devtools.cloudbuild.v2.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IRepository
    >
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IRepository[],
      protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest | null,
      protos.google.devtools.cloudbuild.v2.IListRepositoriesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRepositories(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of Repositories.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list.
   * @param {string} request.pageToken
   *   Page start.
   * @param {string} request.filter
   *   A filter expression that filters resources listed in the response.
   *   Expressions must follow API improvement proposal
   *   [AIP-160](https://google.aip.dev/160). e.g.
   *   `remote_uri:"https://github.com*"`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.cloudbuild.v2.Repository|Repository} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRepositoriesStream(
    request?: protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRepositories.createStream(
      this.innerApiCalls.listRepositories as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRepositories`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of Repositories.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list.
   * @param {string} request.pageToken
   *   Page start.
   * @param {string} request.filter
   *   A filter expression that filters resources listed in the response.
   *   Expressions must follow API improvement proposal
   *   [AIP-160](https://google.aip.dev/160). e.g.
   *   `remote_uri:"https://github.com*"`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.cloudbuild.v2.Repository|Repository}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.list_repositories.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_ListRepositories_async
   */
  listRepositoriesAsync(
    request?: protos.google.devtools.cloudbuild.v2.IListRepositoriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.cloudbuild.v2.IRepository> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRepositories.asyncIterate(
      this.innerApiCalls['listRepositories'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.cloudbuild.v2.IRepository>;
  }
  /**
   * FetchLinkableRepositories get repositories from SCM that are
   * accessible and could be added to the connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.connection
   *   Required. The name of the Connection.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list. Default to 20.
   * @param {string} request.pageToken
   *   Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.cloudbuild.v2.Repository|Repository}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `fetchLinkableRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  fetchLinkableRepositories(
    request?: protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IRepository[],
      protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest | null,
      protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesResponse,
    ]
  >;
  fetchLinkableRepositories(
    request: protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
      | protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IRepository
    >
  ): void;
  fetchLinkableRepositories(
    request: protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
    callback: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
      | protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IRepository
    >
  ): void;
  fetchLinkableRepositories(
    request?: protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
          | protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesResponse
          | null
          | undefined,
          protos.google.devtools.cloudbuild.v2.IRepository
        >,
    callback?: PaginationCallback<
      protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
      | protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.cloudbuild.v2.IRepository
    >
  ): Promise<
    [
      protos.google.devtools.cloudbuild.v2.IRepository[],
      protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest | null,
      protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        connection: request.connection ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchLinkableRepositories(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.connection
   *   Required. The name of the Connection.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list. Default to 20.
   * @param {string} request.pageToken
   *   Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.cloudbuild.v2.Repository|Repository} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `fetchLinkableRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  fetchLinkableRepositoriesStream(
    request?: protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        connection: request.connection ?? '',
      });
    const defaultCallSettings = this._defaults['fetchLinkableRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchLinkableRepositories.createStream(
      this.innerApiCalls.fetchLinkableRepositories as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `fetchLinkableRepositories`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.connection
   *   Required. The name of the Connection.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} request.pageSize
   *   Number of results to return in the list. Default to 20.
   * @param {string} request.pageToken
   *   Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.cloudbuild.v2.Repository|Repository}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/repository_manager.fetch_linkable_repositories.js</caption>
   * region_tag:cloudbuild_v2_generated_RepositoryManager_FetchLinkableRepositories_async
   */
  fetchLinkableRepositoriesAsync(
    request?: protos.google.devtools.cloudbuild.v2.IFetchLinkableRepositoriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.cloudbuild.v2.IRepository> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        connection: request.connection ?? '',
      });
    const defaultCallSettings = this._defaults['fetchLinkableRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchLinkableRepositories.asyncIterate(
      this.innerApiCalls['fetchLinkableRepositories'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.cloudbuild.v2.IRepository>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified connection resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} connection
   * @returns {string} Resource name string.
   */
  connectionPath(project: string, location: string, connection: string) {
    return this.pathTemplates.connectionPathTemplate.render({
      project: project,
      location: location,
      connection: connection,
    });
  }

  /**
   * Parse the project from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .project;
  }

  /**
   * Parse the location from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .location;
  }

  /**
   * Parse the connection from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the connection.
   */
  matchConnectionFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .connection;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified repository resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} connection
   * @param {string} repository
   * @returns {string} Resource name string.
   */
  repositoryPath(
    project: string,
    location: string,
    connection: string,
    repository: string
  ) {
    return this.pathTemplates.repositoryPathTemplate.render({
      project: project,
      location: location,
      connection: connection,
      repository: repository,
    });
  }

  /**
   * Parse the project from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .project;
  }

  /**
   * Parse the location from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .location;
  }

  /**
   * Parse the connection from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the connection.
   */
  matchConnectionFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .connection;
  }

  /**
   * Parse the repository from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .repository;
  }

  /**
   * Return a fully-qualified secretVersion resource name string.
   *
   * @param {string} project
   * @param {string} secret
   * @param {string} version
   * @returns {string} Resource name string.
   */
  secretVersionPath(project: string, secret: string, version: string) {
    return this.pathTemplates.secretVersionPathTemplate.render({
      project: project,
      secret: secret,
      version: version,
    });
  }

  /**
   * Parse the project from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
      .project;
  }

  /**
   * Parse the secret from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the secret.
   */
  matchSecretFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
      .secret;
  }

  /**
   * Parse the version from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
      .version;
  }

  /**
   * Return a fully-qualified service resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} namespace
   * @param {string} service
   * @returns {string} Resource name string.
   */
  servicePath(
    project: string,
    location: string,
    namespace: string,
    service: string
  ) {
    return this.pathTemplates.servicePathTemplate.render({
      project: project,
      location: location,
      namespace: namespace,
      service: service,
    });
  }

  /**
   * Parse the project from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).project;
  }

  /**
   * Parse the location from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).location;
  }

  /**
   * Parse the namespace from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the namespace.
   */
  matchNamespaceFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).namespace;
  }

  /**
   * Parse the service from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).service;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.repositoryManagerStub && !this._terminated) {
      return this.repositoryManagerStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
