// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/eventarc_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './eventarc_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Eventarc allows users to subscribe to various events that are provided by
 *  Google Cloud services and forward them to supported destinations.
 * @class
 * @memberof v1
 */
export class EventarcClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  eventarcStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of EventarcClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new EventarcClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof EventarcClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      channelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/channels/{channel}'
      ),
      channelConnectionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/channelConnections/{channel_connection}'
      ),
      googleChannelConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/googleChannelConfig'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      providerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/providers/{provider}'
      ),
      triggerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/triggers/{trigger}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTriggers: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'triggers'
      ),
      listChannels: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'channels'
      ),
      listProviders: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'providers'
      ),
      listChannelConnections: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'channelConnections'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/triggers/*}:getIamPolicy',
          additional_bindings: [
            {
              get: '/v1/{resource=projects/*/locations/*/channels/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/channelConnections/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/triggers/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/channels/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/channelConnections/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/triggers/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/channels/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/channelConnections/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createTriggerResponse = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.Trigger'
    ) as gax.protobuf.Type;
    const createTriggerMetadata = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateTriggerResponse = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.Trigger'
    ) as gax.protobuf.Type;
    const updateTriggerMetadata = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTriggerResponse = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.Trigger'
    ) as gax.protobuf.Type;
    const deleteTriggerMetadata = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createChannelResponse = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.Channel'
    ) as gax.protobuf.Type;
    const createChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateChannelResponse = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.Channel'
    ) as gax.protobuf.Type;
    const updateChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteChannelResponse = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.Channel'
    ) as gax.protobuf.Type;
    const deleteChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createChannelConnectionResponse = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.ChannelConnection'
    ) as gax.protobuf.Type;
    const createChannelConnectionMetadata = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteChannelConnectionResponse = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.ChannelConnection'
    ) as gax.protobuf.Type;
    const deleteChannelConnectionMetadata = protoFilesRoot.lookup(
      '.google.cloud.eventarc.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createTrigger: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createTriggerResponse.decode.bind(createTriggerResponse),
        createTriggerMetadata.decode.bind(createTriggerMetadata)
      ),
      updateTrigger: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateTriggerResponse.decode.bind(updateTriggerResponse),
        updateTriggerMetadata.decode.bind(updateTriggerMetadata)
      ),
      deleteTrigger: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTriggerResponse.decode.bind(deleteTriggerResponse),
        deleteTriggerMetadata.decode.bind(deleteTriggerMetadata)
      ),
      createChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createChannelResponse.decode.bind(createChannelResponse),
        createChannelMetadata.decode.bind(createChannelMetadata)
      ),
      updateChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateChannelResponse.decode.bind(updateChannelResponse),
        updateChannelMetadata.decode.bind(updateChannelMetadata)
      ),
      deleteChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteChannelResponse.decode.bind(deleteChannelResponse),
        deleteChannelMetadata.decode.bind(deleteChannelMetadata)
      ),
      createChannelConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createChannelConnectionResponse.decode.bind(
          createChannelConnectionResponse
        ),
        createChannelConnectionMetadata.decode.bind(
          createChannelConnectionMetadata
        )
      ),
      deleteChannelConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteChannelConnectionResponse.decode.bind(
          deleteChannelConnectionResponse
        ),
        deleteChannelConnectionMetadata.decode.bind(
          deleteChannelConnectionMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.eventarc.v1.Eventarc',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.eventarcStub) {
      return this.eventarcStub;
    }

    // Put together the "service stub" for
    // google.cloud.eventarc.v1.Eventarc.
    this.eventarcStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.eventarc.v1.Eventarc'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.eventarc.v1.Eventarc,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const eventarcStubMethods = [
      'getTrigger',
      'listTriggers',
      'createTrigger',
      'updateTrigger',
      'deleteTrigger',
      'getChannel',
      'listChannels',
      'createChannel',
      'updateChannel',
      'deleteChannel',
      'getProvider',
      'listProviders',
      'getChannelConnection',
      'listChannelConnections',
      'createChannelConnection',
      'deleteChannelConnection',
      'getGoogleChannelConfig',
      'updateGoogleChannelConfig',
    ];
    for (const methodName of eventarcStubMethods) {
      const callPromise = this.eventarcStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.eventarcStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'eventarc.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'eventarc.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Get a single trigger.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the trigger to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Trigger]{@link google.cloud.eventarc.v1.Trigger}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.get_trigger.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_GetTrigger_async
   */
  getTrigger(
    request?: protos.google.cloud.eventarc.v1.IGetTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.ITrigger,
      protos.google.cloud.eventarc.v1.IGetTriggerRequest | undefined,
      {} | undefined
    ]
  >;
  getTrigger(
    request: protos.google.cloud.eventarc.v1.IGetTriggerRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.eventarc.v1.ITrigger,
      protos.google.cloud.eventarc.v1.IGetTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTrigger(
    request: protos.google.cloud.eventarc.v1.IGetTriggerRequest,
    callback: Callback<
      protos.google.cloud.eventarc.v1.ITrigger,
      protos.google.cloud.eventarc.v1.IGetTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTrigger(
    request?: protos.google.cloud.eventarc.v1.IGetTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.eventarc.v1.ITrigger,
          protos.google.cloud.eventarc.v1.IGetTriggerRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.eventarc.v1.ITrigger,
      protos.google.cloud.eventarc.v1.IGetTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.ITrigger,
      protos.google.cloud.eventarc.v1.IGetTriggerRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTrigger(request, options, callback);
  }
  /**
   * Get a single Channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the channel to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Channel]{@link google.cloud.eventarc.v1.Channel}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.get_channel.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_GetChannel_async
   */
  getChannel(
    request?: protos.google.cloud.eventarc.v1.IGetChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IChannel,
      protos.google.cloud.eventarc.v1.IGetChannelRequest | undefined,
      {} | undefined
    ]
  >;
  getChannel(
    request: protos.google.cloud.eventarc.v1.IGetChannelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IChannel,
      protos.google.cloud.eventarc.v1.IGetChannelRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getChannel(
    request: protos.google.cloud.eventarc.v1.IGetChannelRequest,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IChannel,
      protos.google.cloud.eventarc.v1.IGetChannelRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getChannel(
    request?: protos.google.cloud.eventarc.v1.IGetChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.eventarc.v1.IChannel,
          protos.google.cloud.eventarc.v1.IGetChannelRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.eventarc.v1.IChannel,
      protos.google.cloud.eventarc.v1.IGetChannelRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IChannel,
      protos.google.cloud.eventarc.v1.IGetChannelRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getChannel(request, options, callback);
  }
  /**
   * Get a single Provider.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the provider to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Provider]{@link google.cloud.eventarc.v1.Provider}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.get_provider.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_GetProvider_async
   */
  getProvider(
    request?: protos.google.cloud.eventarc.v1.IGetProviderRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IProvider,
      protos.google.cloud.eventarc.v1.IGetProviderRequest | undefined,
      {} | undefined
    ]
  >;
  getProvider(
    request: protos.google.cloud.eventarc.v1.IGetProviderRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IProvider,
      protos.google.cloud.eventarc.v1.IGetProviderRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getProvider(
    request: protos.google.cloud.eventarc.v1.IGetProviderRequest,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IProvider,
      protos.google.cloud.eventarc.v1.IGetProviderRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getProvider(
    request?: protos.google.cloud.eventarc.v1.IGetProviderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.eventarc.v1.IProvider,
          | protos.google.cloud.eventarc.v1.IGetProviderRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.eventarc.v1.IProvider,
      protos.google.cloud.eventarc.v1.IGetProviderRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IProvider,
      protos.google.cloud.eventarc.v1.IGetProviderRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getProvider(request, options, callback);
  }
  /**
   * Get a single ChannelConnection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the channel connection to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ChannelConnection]{@link google.cloud.eventarc.v1.ChannelConnection}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.get_channel_connection.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_GetChannelConnection_async
   */
  getChannelConnection(
    request?: protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IChannelConnection,
      protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest | undefined,
      {} | undefined
    ]
  >;
  getChannelConnection(
    request: protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IChannelConnection,
      | protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getChannelConnection(
    request: protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IChannelConnection,
      | protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getChannelConnection(
    request?: protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.eventarc.v1.IChannelConnection,
          | protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.eventarc.v1.IChannelConnection,
      | protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IChannelConnection,
      protos.google.cloud.eventarc.v1.IGetChannelConnectionRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getChannelConnection(request, options, callback);
  }
  /**
   * Get a GoogleChannelConfig
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the config to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GoogleChannelConfig]{@link google.cloud.eventarc.v1.GoogleChannelConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.get_google_channel_config.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_GetGoogleChannelConfig_async
   */
  getGoogleChannelConfig(
    request?: protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      (
        | protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getGoogleChannelConfig(
    request: protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      | protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGoogleChannelConfig(
    request: protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      | protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGoogleChannelConfig(
    request?: protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
          | protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      | protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      (
        | protos.google.cloud.eventarc.v1.IGetGoogleChannelConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGoogleChannelConfig(
      request,
      options,
      callback
    );
  }
  /**
   * Update a single GoogleChannelConfig
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.eventarc.v1.GoogleChannelConfig} request.googleChannelConfig
   *   Required. The config to be updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to be updated; only fields explicitly provided are updated.
   *   If no field mask is provided, all provided fields in the request are
   *   updated. To update all fields, provide a field mask of "*".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GoogleChannelConfig]{@link google.cloud.eventarc.v1.GoogleChannelConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.update_google_channel_config.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_UpdateGoogleChannelConfig_async
   */
  updateGoogleChannelConfig(
    request?: protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      (
        | protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateGoogleChannelConfig(
    request: protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      | protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateGoogleChannelConfig(
    request: protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest,
    callback: Callback<
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      | protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateGoogleChannelConfig(
    request?: protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
          | protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      | protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IGoogleChannelConfig,
      (
        | protos.google.cloud.eventarc.v1.IUpdateGoogleChannelConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'google_channel_config.name': request.googleChannelConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateGoogleChannelConfig(
      request,
      options,
      callback
    );
  }

  /**
   * Create a new trigger in a particular project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection in which to add this trigger.
   * @param {google.cloud.eventarc.v1.Trigger} request.trigger
   *   Required. The trigger to create.
   * @param {string} request.triggerId
   *   Required. The user-provided ID to be assigned to the trigger.
   * @param {boolean} request.validateOnly
   *   Required. If set, validate the request and preview the review, but do not
   *   post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.create_trigger.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_CreateTrigger_async
   */
  createTrigger(
    request?: protos.google.cloud.eventarc.v1.ICreateTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createTrigger(
    request: protos.google.cloud.eventarc.v1.ICreateTriggerRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTrigger(
    request: protos.google.cloud.eventarc.v1.ICreateTriggerRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTrigger(
    request?: protos.google.cloud.eventarc.v1.ICreateTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.eventarc.v1.ITrigger,
            protos.google.cloud.eventarc.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTrigger(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createTrigger()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.create_trigger.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_CreateTrigger_async
   */
  async checkCreateTriggerProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.eventarc.v1.Trigger,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createTrigger,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.eventarc.v1.Trigger,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >;
  }
  /**
   * Update a single trigger.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.eventarc.v1.Trigger} request.trigger
   *   The trigger to be updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to be updated; only fields explicitly provided are updated.
   *   If no field mask is provided, all provided fields in the request are
   *   updated. To update all fields, provide a field mask of "*".
   * @param {boolean} request.allowMissing
   *   If set to true, and the trigger is not found, a new trigger will be
   *   created. In this situation, `update_mask` is ignored.
   * @param {boolean} request.validateOnly
   *   Required. If set, validate the request and preview the review, but do not
   *   post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.update_trigger.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_UpdateTrigger_async
   */
  updateTrigger(
    request?: protos.google.cloud.eventarc.v1.IUpdateTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateTrigger(
    request: protos.google.cloud.eventarc.v1.IUpdateTriggerRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTrigger(
    request: protos.google.cloud.eventarc.v1.IUpdateTriggerRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTrigger(
    request?: protos.google.cloud.eventarc.v1.IUpdateTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.eventarc.v1.ITrigger,
            protos.google.cloud.eventarc.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'trigger.name': request.trigger!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTrigger(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateTrigger()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.update_trigger.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_UpdateTrigger_async
   */
  async checkUpdateTriggerProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.eventarc.v1.Trigger,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateTrigger,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.eventarc.v1.Trigger,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >;
  }
  /**
   * Delete a single trigger.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the trigger to be deleted.
   * @param {string} request.etag
   *   If provided, the trigger will only be deleted if the etag matches the
   *   current etag on the resource.
   * @param {boolean} request.allowMissing
   *   If set to true, and the trigger is not found, the request will succeed
   *   but no action will be taken on the server.
   * @param {boolean} request.validateOnly
   *   Required. If set, validate the request and preview the review, but do not
   *   post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.delete_trigger.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_DeleteTrigger_async
   */
  deleteTrigger(
    request?: protos.google.cloud.eventarc.v1.IDeleteTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteTrigger(
    request: protos.google.cloud.eventarc.v1.IDeleteTriggerRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTrigger(
    request: protos.google.cloud.eventarc.v1.IDeleteTriggerRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTrigger(
    request?: protos.google.cloud.eventarc.v1.IDeleteTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.eventarc.v1.ITrigger,
            protos.google.cloud.eventarc.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTrigger(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteTrigger()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.delete_trigger.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_DeleteTrigger_async
   */
  async checkDeleteTriggerProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.eventarc.v1.Trigger,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTrigger,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.eventarc.v1.Trigger,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >;
  }
  /**
   * Create a new channel in a particular project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection in which to add this channel.
   * @param {google.cloud.eventarc.v1.Channel} request.channel
   *   Required. The channel to create.
   * @param {string} request.channelId
   *   Required. The user-provided ID to be assigned to the channel.
   * @param {boolean} request.validateOnly
   *   Required. If set, validate the request and preview the review, but do not
   *   post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.create_channel.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_CreateChannel_async
   */
  createChannel(
    request?: protos.google.cloud.eventarc.v1.ICreateChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createChannel(
    request: protos.google.cloud.eventarc.v1.ICreateChannelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createChannel(
    request: protos.google.cloud.eventarc.v1.ICreateChannelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createChannel(
    request?: protos.google.cloud.eventarc.v1.ICreateChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.eventarc.v1.IChannel,
            protos.google.cloud.eventarc.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createChannel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createChannel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.create_channel.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_CreateChannel_async
   */
  async checkCreateChannelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.eventarc.v1.Channel,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createChannel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.eventarc.v1.Channel,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >;
  }
  /**
   * Update a single channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.eventarc.v1.Channel} request.channel
   *   The channel to be updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to be updated; only fields explicitly provided are updated.
   *   If no field mask is provided, all provided fields in the request are
   *   updated. To update all fields, provide a field mask of "*".
   * @param {boolean} request.validateOnly
   *   Required. If set, validate the request and preview the review, but do not
   *   post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.update_channel.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_UpdateChannel_async
   */
  updateChannel(
    request?: protos.google.cloud.eventarc.v1.IUpdateChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateChannel(
    request: protos.google.cloud.eventarc.v1.IUpdateChannelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateChannel(
    request: protos.google.cloud.eventarc.v1.IUpdateChannelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateChannel(
    request?: protos.google.cloud.eventarc.v1.IUpdateChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.eventarc.v1.IChannel,
            protos.google.cloud.eventarc.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'channel.name': request.channel!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateChannel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateChannel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.update_channel.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_UpdateChannel_async
   */
  async checkUpdateChannelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.eventarc.v1.Channel,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateChannel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.eventarc.v1.Channel,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >;
  }
  /**
   * Delete a single channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the channel to be deleted.
   * @param {boolean} request.validateOnly
   *   Required. If set, validate the request and preview the review, but do not
   *   post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.delete_channel.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_DeleteChannel_async
   */
  deleteChannel(
    request?: protos.google.cloud.eventarc.v1.IDeleteChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteChannel(
    request: protos.google.cloud.eventarc.v1.IDeleteChannelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteChannel(
    request: protos.google.cloud.eventarc.v1.IDeleteChannelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteChannel(
    request?: protos.google.cloud.eventarc.v1.IDeleteChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.eventarc.v1.IChannel,
            protos.google.cloud.eventarc.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteChannel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteChannel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.delete_channel.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_DeleteChannel_async
   */
  async checkDeleteChannelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.eventarc.v1.Channel,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteChannel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.eventarc.v1.Channel,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >;
  }
  /**
   * Create a new ChannelConnection in a particular project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection in which to add this channel connection.
   * @param {google.cloud.eventarc.v1.ChannelConnection} request.channelConnection
   *   Required. Channel connection to create.
   * @param {string} request.channelConnectionId
   *   Required. The user-provided ID to be assigned to the channel connection.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.create_channel_connection.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_CreateChannelConnection_async
   */
  createChannelConnection(
    request?: protos.google.cloud.eventarc.v1.ICreateChannelConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createChannelConnection(
    request: protos.google.cloud.eventarc.v1.ICreateChannelConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createChannelConnection(
    request: protos.google.cloud.eventarc.v1.ICreateChannelConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createChannelConnection(
    request?: protos.google.cloud.eventarc.v1.ICreateChannelConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.eventarc.v1.IChannelConnection,
            protos.google.cloud.eventarc.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createChannelConnection(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createChannelConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.create_channel_connection.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_CreateChannelConnection_async
   */
  async checkCreateChannelConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.eventarc.v1.ChannelConnection,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createChannelConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.eventarc.v1.ChannelConnection,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >;
  }
  /**
   * Delete a single ChannelConnection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the channel connection to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.delete_channel_connection.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_DeleteChannelConnection_async
   */
  deleteChannelConnection(
    request?: protos.google.cloud.eventarc.v1.IDeleteChannelConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteChannelConnection(
    request: protos.google.cloud.eventarc.v1.IDeleteChannelConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteChannelConnection(
    request: protos.google.cloud.eventarc.v1.IDeleteChannelConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteChannelConnection(
    request?: protos.google.cloud.eventarc.v1.IDeleteChannelConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.eventarc.v1.IChannelConnection,
            protos.google.cloud.eventarc.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteChannelConnection(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteChannelConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.delete_channel_connection.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_DeleteChannelConnection_async
   */
  async checkDeleteChannelConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.eventarc.v1.ChannelConnection,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteChannelConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.eventarc.v1.ChannelConnection,
      protos.google.cloud.eventarc.v1.OperationMetadata
    >;
  }
  /**
   * List triggers.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection to list triggers on.
   * @param {number} request.pageSize
   *   The maximum number of triggers to return on each page.
   *
   *   Note: The service may send fewer.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListTriggers` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListTriggers` must match
   *   the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting order is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, trigger_id`.
   * @param {string} request.filter
   *   Filter field. Used to filter the Triggers to be listed. Possible filters
   *   are described in https://google.aip.dev/160. For example, using
   *   "?filter=destination:gke" would list only Triggers with a gke destination.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Trigger]{@link google.cloud.eventarc.v1.Trigger}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTriggersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTriggers(
    request?: protos.google.cloud.eventarc.v1.IListTriggersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.ITrigger[],
      protos.google.cloud.eventarc.v1.IListTriggersRequest | null,
      protos.google.cloud.eventarc.v1.IListTriggersResponse
    ]
  >;
  listTriggers(
    request: protos.google.cloud.eventarc.v1.IListTriggersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListTriggersRequest,
      protos.google.cloud.eventarc.v1.IListTriggersResponse | null | undefined,
      protos.google.cloud.eventarc.v1.ITrigger
    >
  ): void;
  listTriggers(
    request: protos.google.cloud.eventarc.v1.IListTriggersRequest,
    callback: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListTriggersRequest,
      protos.google.cloud.eventarc.v1.IListTriggersResponse | null | undefined,
      protos.google.cloud.eventarc.v1.ITrigger
    >
  ): void;
  listTriggers(
    request?: protos.google.cloud.eventarc.v1.IListTriggersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.eventarc.v1.IListTriggersRequest,
          | protos.google.cloud.eventarc.v1.IListTriggersResponse
          | null
          | undefined,
          protos.google.cloud.eventarc.v1.ITrigger
        >,
    callback?: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListTriggersRequest,
      protos.google.cloud.eventarc.v1.IListTriggersResponse | null | undefined,
      protos.google.cloud.eventarc.v1.ITrigger
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.ITrigger[],
      protos.google.cloud.eventarc.v1.IListTriggersRequest | null,
      protos.google.cloud.eventarc.v1.IListTriggersResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTriggers(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection to list triggers on.
   * @param {number} request.pageSize
   *   The maximum number of triggers to return on each page.
   *
   *   Note: The service may send fewer.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListTriggers` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListTriggers` must match
   *   the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting order is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, trigger_id`.
   * @param {string} request.filter
   *   Filter field. Used to filter the Triggers to be listed. Possible filters
   *   are described in https://google.aip.dev/160. For example, using
   *   "?filter=destination:gke" would list only Triggers with a gke destination.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Trigger]{@link google.cloud.eventarc.v1.Trigger} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTriggersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTriggersStream(
    request?: protos.google.cloud.eventarc.v1.IListTriggersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTriggers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTriggers.createStream(
      this.innerApiCalls.listTriggers as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTriggers`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection to list triggers on.
   * @param {number} request.pageSize
   *   The maximum number of triggers to return on each page.
   *
   *   Note: The service may send fewer.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListTriggers` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListTriggers` must match
   *   the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting order is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, trigger_id`.
   * @param {string} request.filter
   *   Filter field. Used to filter the Triggers to be listed. Possible filters
   *   are described in https://google.aip.dev/160. For example, using
   *   "?filter=destination:gke" would list only Triggers with a gke destination.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Trigger]{@link google.cloud.eventarc.v1.Trigger}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.list_triggers.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_ListTriggers_async
   */
  listTriggersAsync(
    request?: protos.google.cloud.eventarc.v1.IListTriggersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.eventarc.v1.ITrigger> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTriggers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTriggers.asyncIterate(
      this.innerApiCalls['listTriggers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.eventarc.v1.ITrigger>;
  }
  /**
   * List channels.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection to list channels on.
   * @param {number} request.pageSize
   *   The maximum number of channels to return on each page.
   *
   *   Note: The service may send fewer.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListChannels` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListChannels` must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting order is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, channel_id`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Channel]{@link google.cloud.eventarc.v1.Channel}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listChannelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listChannels(
    request?: protos.google.cloud.eventarc.v1.IListChannelsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IChannel[],
      protos.google.cloud.eventarc.v1.IListChannelsRequest | null,
      protos.google.cloud.eventarc.v1.IListChannelsResponse
    ]
  >;
  listChannels(
    request: protos.google.cloud.eventarc.v1.IListChannelsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListChannelsRequest,
      protos.google.cloud.eventarc.v1.IListChannelsResponse | null | undefined,
      protos.google.cloud.eventarc.v1.IChannel
    >
  ): void;
  listChannels(
    request: protos.google.cloud.eventarc.v1.IListChannelsRequest,
    callback: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListChannelsRequest,
      protos.google.cloud.eventarc.v1.IListChannelsResponse | null | undefined,
      protos.google.cloud.eventarc.v1.IChannel
    >
  ): void;
  listChannels(
    request?: protos.google.cloud.eventarc.v1.IListChannelsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.eventarc.v1.IListChannelsRequest,
          | protos.google.cloud.eventarc.v1.IListChannelsResponse
          | null
          | undefined,
          protos.google.cloud.eventarc.v1.IChannel
        >,
    callback?: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListChannelsRequest,
      protos.google.cloud.eventarc.v1.IListChannelsResponse | null | undefined,
      protos.google.cloud.eventarc.v1.IChannel
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IChannel[],
      protos.google.cloud.eventarc.v1.IListChannelsRequest | null,
      protos.google.cloud.eventarc.v1.IListChannelsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listChannels(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection to list channels on.
   * @param {number} request.pageSize
   *   The maximum number of channels to return on each page.
   *
   *   Note: The service may send fewer.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListChannels` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListChannels` must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting order is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, channel_id`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Channel]{@link google.cloud.eventarc.v1.Channel} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listChannelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listChannelsStream(
    request?: protos.google.cloud.eventarc.v1.IListChannelsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listChannels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listChannels.createStream(
      this.innerApiCalls.listChannels as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listChannels`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection to list channels on.
   * @param {number} request.pageSize
   *   The maximum number of channels to return on each page.
   *
   *   Note: The service may send fewer.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListChannels` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListChannels` must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting order is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, channel_id`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Channel]{@link google.cloud.eventarc.v1.Channel}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.list_channels.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_ListChannels_async
   */
  listChannelsAsync(
    request?: protos.google.cloud.eventarc.v1.IListChannelsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.eventarc.v1.IChannel> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listChannels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listChannels.asyncIterate(
      this.innerApiCalls['listChannels'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.eventarc.v1.IChannel>;
  }
  /**
   * List providers.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent of the provider to get.
   * @param {number} request.pageSize
   *   The maximum number of providers to return on each page.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListProviders` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListProviders` must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting oder is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, _id`.
   * @param {string} request.filter
   *   The filter field that the list request will filter on.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Provider]{@link google.cloud.eventarc.v1.Provider}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listProvidersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listProviders(
    request?: protos.google.cloud.eventarc.v1.IListProvidersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IProvider[],
      protos.google.cloud.eventarc.v1.IListProvidersRequest | null,
      protos.google.cloud.eventarc.v1.IListProvidersResponse
    ]
  >;
  listProviders(
    request: protos.google.cloud.eventarc.v1.IListProvidersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListProvidersRequest,
      protos.google.cloud.eventarc.v1.IListProvidersResponse | null | undefined,
      protos.google.cloud.eventarc.v1.IProvider
    >
  ): void;
  listProviders(
    request: protos.google.cloud.eventarc.v1.IListProvidersRequest,
    callback: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListProvidersRequest,
      protos.google.cloud.eventarc.v1.IListProvidersResponse | null | undefined,
      protos.google.cloud.eventarc.v1.IProvider
    >
  ): void;
  listProviders(
    request?: protos.google.cloud.eventarc.v1.IListProvidersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.eventarc.v1.IListProvidersRequest,
          | protos.google.cloud.eventarc.v1.IListProvidersResponse
          | null
          | undefined,
          protos.google.cloud.eventarc.v1.IProvider
        >,
    callback?: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListProvidersRequest,
      protos.google.cloud.eventarc.v1.IListProvidersResponse | null | undefined,
      protos.google.cloud.eventarc.v1.IProvider
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IProvider[],
      protos.google.cloud.eventarc.v1.IListProvidersRequest | null,
      protos.google.cloud.eventarc.v1.IListProvidersResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listProviders(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent of the provider to get.
   * @param {number} request.pageSize
   *   The maximum number of providers to return on each page.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListProviders` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListProviders` must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting oder is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, _id`.
   * @param {string} request.filter
   *   The filter field that the list request will filter on.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Provider]{@link google.cloud.eventarc.v1.Provider} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listProvidersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listProvidersStream(
    request?: protos.google.cloud.eventarc.v1.IListProvidersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listProviders'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listProviders.createStream(
      this.innerApiCalls.listProviders as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listProviders`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent of the provider to get.
   * @param {number} request.pageSize
   *   The maximum number of providers to return on each page.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListProviders` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListProviders` must
   *   match the call that provided the page token.
   * @param {string} request.orderBy
   *   The sorting order of the resources returned. Value should be a
   *   comma-separated list of fields. The default sorting oder is ascending. To
   *   specify descending order for a field, append a `desc` suffix; for example:
   *   `name desc, _id`.
   * @param {string} request.filter
   *   The filter field that the list request will filter on.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Provider]{@link google.cloud.eventarc.v1.Provider}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.list_providers.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_ListProviders_async
   */
  listProvidersAsync(
    request?: protos.google.cloud.eventarc.v1.IListProvidersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.eventarc.v1.IProvider> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listProviders'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listProviders.asyncIterate(
      this.innerApiCalls['listProviders'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.eventarc.v1.IProvider>;
  }
  /**
   * List channel connections.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection from which to list channel connections.
   * @param {number} request.pageSize
   *   The maximum number of channel connections to return on each page.
   *
   *   Note: The service may send fewer responses.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListChannelConnections` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListChannelConnetions`
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ChannelConnection]{@link google.cloud.eventarc.v1.ChannelConnection}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listChannelConnectionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listChannelConnections(
    request?: protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IChannelConnection[],
      protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest | null,
      protos.google.cloud.eventarc.v1.IListChannelConnectionsResponse
    ]
  >;
  listChannelConnections(
    request: protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
      | protos.google.cloud.eventarc.v1.IListChannelConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.eventarc.v1.IChannelConnection
    >
  ): void;
  listChannelConnections(
    request: protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
      | protos.google.cloud.eventarc.v1.IListChannelConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.eventarc.v1.IChannelConnection
    >
  ): void;
  listChannelConnections(
    request?: protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
          | protos.google.cloud.eventarc.v1.IListChannelConnectionsResponse
          | null
          | undefined,
          protos.google.cloud.eventarc.v1.IChannelConnection
        >,
    callback?: PaginationCallback<
      protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
      | protos.google.cloud.eventarc.v1.IListChannelConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.eventarc.v1.IChannelConnection
    >
  ): Promise<
    [
      protos.google.cloud.eventarc.v1.IChannelConnection[],
      protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest | null,
      protos.google.cloud.eventarc.v1.IListChannelConnectionsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listChannelConnections(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection from which to list channel connections.
   * @param {number} request.pageSize
   *   The maximum number of channel connections to return on each page.
   *
   *   Note: The service may send fewer responses.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListChannelConnections` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListChannelConnetions`
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ChannelConnection]{@link google.cloud.eventarc.v1.ChannelConnection} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listChannelConnectionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listChannelConnectionsStream(
    request?: protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listChannelConnections'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listChannelConnections.createStream(
      this.innerApiCalls.listChannelConnections as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listChannelConnections`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent collection from which to list channel connections.
   * @param {number} request.pageSize
   *   The maximum number of channel connections to return on each page.
   *
   *   Note: The service may send fewer responses.
   * @param {string} request.pageToken
   *   The page token; provide the value from the `next_page_token` field in a
   *   previous `ListChannelConnections` call to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListChannelConnetions`
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [ChannelConnection]{@link google.cloud.eventarc.v1.ChannelConnection}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/eventarc.list_channel_connections.js</caption>
   * region_tag:eventarc_v1_generated_Eventarc_ListChannelConnections_async
   */
  listChannelConnectionsAsync(
    request?: protos.google.cloud.eventarc.v1.IListChannelConnectionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.eventarc.v1.IChannelConnection> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listChannelConnections'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listChannelConnections.asyncIterate(
      this.innerApiCalls['listChannelConnections'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.eventarc.v1.IChannelConnection>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified channel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} channel
   * @returns {string} Resource name string.
   */
  channelPath(project: string, location: string, channel: string) {
    return this.pathTemplates.channelPathTemplate.render({
      project: project,
      location: location,
      channel: channel,
    });
  }

  /**
   * Parse the project from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).project;
  }

  /**
   * Parse the location from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).location;
  }

  /**
   * Parse the channel from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the channel.
   */
  matchChannelFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).channel;
  }

  /**
   * Return a fully-qualified channelConnection resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} channel_connection
   * @returns {string} Resource name string.
   */
  channelConnectionPath(
    project: string,
    location: string,
    channelConnection: string
  ) {
    return this.pathTemplates.channelConnectionPathTemplate.render({
      project: project,
      location: location,
      channel_connection: channelConnection,
    });
  }

  /**
   * Parse the project from ChannelConnection resource.
   *
   * @param {string} channelConnectionName
   *   A fully-qualified path representing ChannelConnection resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChannelConnectionName(channelConnectionName: string) {
    return this.pathTemplates.channelConnectionPathTemplate.match(
      channelConnectionName
    ).project;
  }

  /**
   * Parse the location from ChannelConnection resource.
   *
   * @param {string} channelConnectionName
   *   A fully-qualified path representing ChannelConnection resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChannelConnectionName(channelConnectionName: string) {
    return this.pathTemplates.channelConnectionPathTemplate.match(
      channelConnectionName
    ).location;
  }

  /**
   * Parse the channel_connection from ChannelConnection resource.
   *
   * @param {string} channelConnectionName
   *   A fully-qualified path representing ChannelConnection resource.
   * @returns {string} A string representing the channel_connection.
   */
  matchChannelConnectionFromChannelConnectionName(
    channelConnectionName: string
  ) {
    return this.pathTemplates.channelConnectionPathTemplate.match(
      channelConnectionName
    ).channel_connection;
  }

  /**
   * Return a fully-qualified googleChannelConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  googleChannelConfigPath(project: string, location: string) {
    return this.pathTemplates.googleChannelConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from GoogleChannelConfig resource.
   *
   * @param {string} googleChannelConfigName
   *   A fully-qualified path representing GoogleChannelConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGoogleChannelConfigName(googleChannelConfigName: string) {
    return this.pathTemplates.googleChannelConfigPathTemplate.match(
      googleChannelConfigName
    ).project;
  }

  /**
   * Parse the location from GoogleChannelConfig resource.
   *
   * @param {string} googleChannelConfigName
   *   A fully-qualified path representing GoogleChannelConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGoogleChannelConfigName(googleChannelConfigName: string) {
    return this.pathTemplates.googleChannelConfigPathTemplate.match(
      googleChannelConfigName
    ).location;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified provider resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} provider
   * @returns {string} Resource name string.
   */
  providerPath(project: string, location: string, provider: string) {
    return this.pathTemplates.providerPathTemplate.render({
      project: project,
      location: location,
      provider: provider,
    });
  }

  /**
   * Parse the project from Provider resource.
   *
   * @param {string} providerName
   *   A fully-qualified path representing Provider resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProviderName(providerName: string) {
    return this.pathTemplates.providerPathTemplate.match(providerName).project;
  }

  /**
   * Parse the location from Provider resource.
   *
   * @param {string} providerName
   *   A fully-qualified path representing Provider resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProviderName(providerName: string) {
    return this.pathTemplates.providerPathTemplate.match(providerName).location;
  }

  /**
   * Parse the provider from Provider resource.
   *
   * @param {string} providerName
   *   A fully-qualified path representing Provider resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromProviderName(providerName: string) {
    return this.pathTemplates.providerPathTemplate.match(providerName).provider;
  }

  /**
   * Return a fully-qualified trigger resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} trigger
   * @returns {string} Resource name string.
   */
  triggerPath(project: string, location: string, trigger: string) {
    return this.pathTemplates.triggerPathTemplate.render({
      project: project,
      location: location,
      trigger: trigger,
    });
  }

  /**
   * Parse the project from Trigger resource.
   *
   * @param {string} triggerName
   *   A fully-qualified path representing Trigger resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTriggerName(triggerName: string) {
    return this.pathTemplates.triggerPathTemplate.match(triggerName).project;
  }

  /**
   * Parse the location from Trigger resource.
   *
   * @param {string} triggerName
   *   A fully-qualified path representing Trigger resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTriggerName(triggerName: string) {
    return this.pathTemplates.triggerPathTemplate.match(triggerName).location;
  }

  /**
   * Parse the trigger from Trigger resource.
   *
   * @param {string} triggerName
   *   A fully-qualified path representing Trigger resource.
   * @returns {string} A string representing the trigger.
   */
  matchTriggerFromTriggerName(triggerName: string) {
    return this.pathTemplates.triggerPathTemplate.match(triggerName).trigger;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.eventarcStub && !this._terminated) {
      return this.eventarcStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
