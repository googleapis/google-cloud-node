// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as eventarcModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.EventarcClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = eventarcModule.v1.EventarcClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = eventarcModule.v1.EventarcClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = eventarcModule.v1.EventarcClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new eventarcModule.v1.EventarcClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new eventarcModule.v1.EventarcClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.eventarcStub, undefined);
      await client.initialize();
      assert(client.eventarcStub);
    });

    it('has close method for the initialized client', done => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.eventarcStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.eventarcStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getTrigger', () => {
    it('invokes getTrigger without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetTriggerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.Trigger()
      );
      client.innerApiCalls.getTrigger = stubSimpleCall(expectedResponse);
      const [response] = await client.getTrigger(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTrigger without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetTriggerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.Trigger()
      );
      client.innerApiCalls.getTrigger =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getTrigger(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.ITrigger | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTrigger with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetTriggerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getTrigger = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getTrigger(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTrigger with closed client', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetTriggerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getTrigger(request), expectedError);
    });
  });

  describe('getChannel', () => {
    it('invokes getChannel without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetChannelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.Channel()
      );
      client.innerApiCalls.getChannel = stubSimpleCall(expectedResponse);
      const [response] = await client.getChannel(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannel without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetChannelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.Channel()
      );
      client.innerApiCalls.getChannel =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getChannel(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.IChannel | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannel with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetChannelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getChannel = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getChannel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannel with closed client', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetChannelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getChannel(request), expectedError);
    });
  });

  describe('getProvider', () => {
    it('invokes getProvider without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetProviderRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetProviderRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.Provider()
      );
      client.innerApiCalls.getProvider = stubSimpleCall(expectedResponse);
      const [response] = await client.getProvider(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProvider without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetProviderRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetProviderRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.Provider()
      );
      client.innerApiCalls.getProvider =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getProvider(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.IProvider | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProvider with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetProviderRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetProviderRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getProvider = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getProvider(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProvider with closed client', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetProviderRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetProviderRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getProvider(request), expectedError);
    });
  });

  describe('getChannelConnection', () => {
    it('invokes getChannelConnection without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetChannelConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ChannelConnection()
      );
      client.innerApiCalls.getChannelConnection =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getChannelConnection(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelConnection without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetChannelConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ChannelConnection()
      );
      client.innerApiCalls.getChannelConnection =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getChannelConnection(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.IChannelConnection | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelConnection with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetChannelConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getChannelConnection = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getChannelConnection(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getChannelConnection with closed client', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetChannelConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getChannelConnection(request), expectedError);
    });
  });

  describe('getGoogleChannelConfig', () => {
    it('invokes getGoogleChannelConfig without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetGoogleChannelConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetGoogleChannelConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GoogleChannelConfig()
      );
      client.innerApiCalls.getGoogleChannelConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getGoogleChannelConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGoogleChannelConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGoogleChannelConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGoogleChannelConfig without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetGoogleChannelConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetGoogleChannelConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GoogleChannelConfig()
      );
      client.innerApiCalls.getGoogleChannelConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGoogleChannelConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.IGoogleChannelConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGoogleChannelConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGoogleChannelConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGoogleChannelConfig with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetGoogleChannelConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetGoogleChannelConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGoogleChannelConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getGoogleChannelConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getGoogleChannelConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGoogleChannelConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGoogleChannelConfig with closed client', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GetGoogleChannelConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.GetGoogleChannelConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getGoogleChannelConfig(request),
        expectedError
      );
    });
  });

  describe('updateGoogleChannelConfig', () => {
    it('invokes updateGoogleChannelConfig without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest()
      );
      request.googleChannelConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest',
        ['googleChannelConfig', 'name']
      );
      request.googleChannelConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `google_channel_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GoogleChannelConfig()
      );
      client.innerApiCalls.updateGoogleChannelConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateGoogleChannelConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGoogleChannelConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleChannelConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleChannelConfig without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest()
      );
      request.googleChannelConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest',
        ['googleChannelConfig', 'name']
      );
      request.googleChannelConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `google_channel_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.GoogleChannelConfig()
      );
      client.innerApiCalls.updateGoogleChannelConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateGoogleChannelConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.IGoogleChannelConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGoogleChannelConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleChannelConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleChannelConfig with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest()
      );
      request.googleChannelConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest',
        ['googleChannelConfig', 'name']
      );
      request.googleChannelConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `google_channel_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGoogleChannelConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateGoogleChannelConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateGoogleChannelConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleChannelConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleChannelConfig with closed client', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest()
      );
      request.googleChannelConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest',
        ['googleChannelConfig', 'name']
      );
      request.googleChannelConfig.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateGoogleChannelConfig(request),
        expectedError
      );
    });
  });

  describe('createTrigger', () => {
    it('invokes createTrigger without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateTriggerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createTrigger =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createTrigger(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTrigger without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateTriggerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createTrigger =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createTrigger(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.eventarc.v1.ITrigger,
              protos.google.cloud.eventarc.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTrigger with call error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateTriggerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTrigger = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createTrigger(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTrigger with LRO error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateTriggerRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTrigger = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createTrigger(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateTriggerProgress without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateTriggerProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateTriggerProgress with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateTriggerProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateTrigger', () => {
    it('invokes updateTrigger without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateTriggerRequest()
      );
      request.trigger ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateTriggerRequest',
        ['trigger', 'name']
      );
      request.trigger.name = defaultValue1;
      const expectedHeaderRequestParams = `trigger.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateTrigger =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateTrigger(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTrigger without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateTriggerRequest()
      );
      request.trigger ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateTriggerRequest',
        ['trigger', 'name']
      );
      request.trigger.name = defaultValue1;
      const expectedHeaderRequestParams = `trigger.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateTrigger =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateTrigger(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.eventarc.v1.ITrigger,
              protos.google.cloud.eventarc.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTrigger with call error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateTriggerRequest()
      );
      request.trigger ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateTriggerRequest',
        ['trigger', 'name']
      );
      request.trigger.name = defaultValue1;
      const expectedHeaderRequestParams = `trigger.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTrigger = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateTrigger(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTrigger with LRO error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateTriggerRequest()
      );
      request.trigger ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateTriggerRequest',
        ['trigger', 'name']
      );
      request.trigger.name = defaultValue1;
      const expectedHeaderRequestParams = `trigger.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTrigger = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateTrigger(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateTriggerProgress without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateTriggerProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateTriggerProgress with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateTriggerProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteTrigger', () => {
    it('invokes deleteTrigger without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteTriggerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteTrigger =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteTrigger(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTrigger without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteTriggerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteTrigger =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteTrigger(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.eventarc.v1.ITrigger,
              protos.google.cloud.eventarc.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.eventarc.v1.ITrigger,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTrigger with call error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteTriggerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTrigger = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteTrigger(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTrigger with LRO error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteTriggerRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteTriggerRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTrigger = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteTrigger(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteTrigger as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTrigger as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteTriggerProgress without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteTriggerProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteTriggerProgress with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteTriggerProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createChannel', () => {
    it('invokes createChannel without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateChannelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createChannel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createChannel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannel without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateChannelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createChannel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createChannel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.eventarc.v1.IChannel,
              protos.google.cloud.eventarc.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannel with call error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateChannelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createChannel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createChannel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannel with LRO error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateChannelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createChannel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createChannel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateChannelProgress without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateChannelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateChannelProgress with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateChannelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateChannel', () => {
    it('invokes updateChannel without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateChannelRequest()
      );
      request.channel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateChannelRequest',
        ['channel', 'name']
      );
      request.channel.name = defaultValue1;
      const expectedHeaderRequestParams = `channel.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateChannel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateChannel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannel without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateChannelRequest()
      );
      request.channel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateChannelRequest',
        ['channel', 'name']
      );
      request.channel.name = defaultValue1;
      const expectedHeaderRequestParams = `channel.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateChannel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateChannel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.eventarc.v1.IChannel,
              protos.google.cloud.eventarc.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannel with call error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateChannelRequest()
      );
      request.channel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateChannelRequest',
        ['channel', 'name']
      );
      request.channel.name = defaultValue1;
      const expectedHeaderRequestParams = `channel.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateChannel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateChannel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateChannel with LRO error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.UpdateChannelRequest()
      );
      request.channel ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.UpdateChannelRequest',
        ['channel', 'name']
      );
      request.channel.name = defaultValue1;
      const expectedHeaderRequestParams = `channel.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateChannel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateChannel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateChannelProgress without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateChannelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateChannelProgress with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateChannelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteChannel', () => {
    it('invokes deleteChannel without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteChannelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteChannel =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteChannel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannel without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteChannelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteChannel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteChannel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.eventarc.v1.IChannel,
              protos.google.cloud.eventarc.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.eventarc.v1.IChannel,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannel with call error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteChannelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteChannel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteChannel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannel with LRO error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteChannelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteChannelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteChannel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteChannel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteChannel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteChannelProgress without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteChannelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteChannelProgress with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteChannelProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createChannelConnection', () => {
    it('invokes createChannelConnection without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateChannelConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createChannelConnection =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createChannelConnection(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelConnection without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateChannelConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createChannelConnection =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createChannelConnection(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.eventarc.v1.IChannelConnection,
              protos.google.cloud.eventarc.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelConnection with call error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateChannelConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createChannelConnection = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createChannelConnection(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createChannelConnection with LRO error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.CreateChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.CreateChannelConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createChannelConnection = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createChannelConnection(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateChannelConnectionProgress without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateChannelConnectionProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateChannelConnectionProgress with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateChannelConnectionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteChannelConnection', () => {
    it('invokes deleteChannelConnection without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteChannelConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteChannelConnection =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteChannelConnection(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannelConnection without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteChannelConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteChannelConnection =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteChannelConnection(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.eventarc.v1.IChannelConnection,
              protos.google.cloud.eventarc.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.eventarc.v1.IChannelConnection,
        protos.google.cloud.eventarc.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannelConnection with call error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteChannelConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteChannelConnection = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteChannelConnection(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteChannelConnection with LRO error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.DeleteChannelConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.DeleteChannelConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteChannelConnection = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteChannelConnection(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteChannelConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteChannelConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteChannelConnectionProgress without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteChannelConnectionProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteChannelConnectionProgress with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteChannelConnectionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listTriggers', () => {
    it('invokes listTriggers without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListTriggersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListTriggersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
      ];
      client.innerApiCalls.listTriggers = stubSimpleCall(expectedResponse);
      const [response] = await client.listTriggers(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTriggers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTriggers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTriggers without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListTriggersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListTriggersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
      ];
      client.innerApiCalls.listTriggers =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTriggers(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.ITrigger[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTriggers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTriggers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTriggers with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListTriggersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListTriggersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTriggers = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listTriggers(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listTriggers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTriggers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTriggersStream without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListTriggersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListTriggersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
      ];
      client.descriptors.page.listTriggers.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTriggersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.eventarc.v1.Trigger[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.eventarc.v1.Trigger) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTriggers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTriggers, request)
      );
      assert(
        (client.descriptors.page.listTriggers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listTriggersStream with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListTriggersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListTriggersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTriggers.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listTriggersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.eventarc.v1.Trigger[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.eventarc.v1.Trigger) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listTriggers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTriggers, request)
      );
      assert(
        (client.descriptors.page.listTriggers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTriggers without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListTriggersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListTriggersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Trigger()),
      ];
      client.descriptors.page.listTriggers.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.eventarc.v1.ITrigger[] = [];
      const iterable = client.listTriggersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTriggers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTriggers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTriggers with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListTriggersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListTriggersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTriggers.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listTriggersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.eventarc.v1.ITrigger[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTriggers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTriggers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listChannels', () => {
    it('invokes listChannels without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
      ];
      client.innerApiCalls.listChannels = stubSimpleCall(expectedResponse);
      const [response] = await client.listChannels(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChannels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannels without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
      ];
      client.innerApiCalls.listChannels =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listChannels(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.IChannel[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChannels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannels with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listChannels = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listChannels(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listChannels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelsStream without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
      ];
      client.descriptors.page.listChannels.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listChannelsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.eventarc.v1.Channel[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.eventarc.v1.Channel) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listChannels.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listChannels, request)
      );
      assert(
        (client.descriptors.page.listChannels.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listChannelsStream with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChannels.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listChannelsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.eventarc.v1.Channel[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.eventarc.v1.Channel) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listChannels.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listChannels, request)
      );
      assert(
        (client.descriptors.page.listChannels.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChannels without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Channel()),
      ];
      client.descriptors.page.listChannels.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.eventarc.v1.IChannel[] = [];
      const iterable = client.listChannelsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listChannels.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listChannels.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChannels with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChannels.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listChannelsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.eventarc.v1.IChannel[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listChannels.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listChannels.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listProviders', () => {
    it('invokes listProviders without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
      ];
      client.innerApiCalls.listProviders = stubSimpleCall(expectedResponse);
      const [response] = await client.listProviders(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listProviders without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
      ];
      client.innerApiCalls.listProviders =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listProviders(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.IProvider[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listProviders with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listProviders = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listProviders(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listProvidersStream without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
      ];
      client.descriptors.page.listProviders.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listProvidersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.eventarc.v1.Provider[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.eventarc.v1.Provider) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listProviders.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listProviders, request)
      );
      assert(
        (client.descriptors.page.listProviders.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listProvidersStream with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listProviders.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listProvidersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.eventarc.v1.Provider[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.eventarc.v1.Provider) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listProviders.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listProviders, request)
      );
      assert(
        (client.descriptors.page.listProviders.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listProviders without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.eventarc.v1.Provider()),
      ];
      client.descriptors.page.listProviders.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.eventarc.v1.IProvider[] = [];
      const iterable = client.listProvidersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listProviders.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listProviders.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listProviders with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listProviders.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listProvidersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.eventarc.v1.IProvider[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listProviders.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listProviders.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listChannelConnections', () => {
    it('invokes listChannelConnections without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
      ];
      client.innerApiCalls.listChannelConnections =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listChannelConnections(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChannelConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelConnections without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
      ];
      client.innerApiCalls.listChannelConnections =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listChannelConnections(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.eventarc.v1.IChannelConnection[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listChannelConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelConnections with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listChannelConnections = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listChannelConnections(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listChannelConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listChannelConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listChannelConnectionsStream without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
      ];
      client.descriptors.page.listChannelConnections.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listChannelConnectionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.eventarc.v1.ChannelConnection[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.eventarc.v1.ChannelConnection) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listChannelConnections
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listChannelConnections, request)
      );
      assert(
        (
          client.descriptors.page.listChannelConnections
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listChannelConnectionsStream with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChannelConnections.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listChannelConnectionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.eventarc.v1.ChannelConnection[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.eventarc.v1.ChannelConnection) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listChannelConnections
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listChannelConnections, request)
      );
      assert(
        (
          client.descriptors.page.listChannelConnections
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChannelConnections without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
        generateSampleMessage(
          new protos.google.cloud.eventarc.v1.ChannelConnection()
        ),
      ];
      client.descriptors.page.listChannelConnections.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.eventarc.v1.IChannelConnection[] =
        [];
      const iterable = client.listChannelConnectionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listChannelConnections
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listChannelConnections
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listChannelConnections with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.eventarc.v1.ListChannelConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.eventarc.v1.ListChannelConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listChannelConnections.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listChannelConnectionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.eventarc.v1.IChannelConnection[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listChannelConnections
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listChannelConnections
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('channel', () => {
      const fakePath = '/rendered/path/channel';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        channel: 'channelValue',
      };
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.channelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.channelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('channelPath', () => {
        const result = client.channelPath(
          'projectValue',
          'locationValue',
          'channelValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.channelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromChannelName', () => {
        const result = client.matchProjectFromChannelName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.channelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromChannelName', () => {
        const result = client.matchLocationFromChannelName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.channelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchChannelFromChannelName', () => {
        const result = client.matchChannelFromChannelName(fakePath);
        assert.strictEqual(result, 'channelValue');
        assert(
          (client.pathTemplates.channelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('channelConnection', () => {
      const fakePath = '/rendered/path/channelConnection';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        channel_connection: 'channelConnectionValue',
      };
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.channelConnectionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.channelConnectionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('channelConnectionPath', () => {
        const result = client.channelConnectionPath(
          'projectValue',
          'locationValue',
          'channelConnectionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.channelConnectionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromChannelConnectionName', () => {
        const result = client.matchProjectFromChannelConnectionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.channelConnectionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromChannelConnectionName', () => {
        const result = client.matchLocationFromChannelConnectionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.channelConnectionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchChannelConnectionFromChannelConnectionName', () => {
        const result =
          client.matchChannelConnectionFromChannelConnectionName(fakePath);
        assert.strictEqual(result, 'channelConnectionValue');
        assert(
          (
            client.pathTemplates.channelConnectionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('googleChannelConfig', () => {
      const fakePath = '/rendered/path/googleChannelConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.googleChannelConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.googleChannelConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('googleChannelConfigPath', () => {
        const result = client.googleChannelConfigPath(
          'projectValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.googleChannelConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGoogleChannelConfigName', () => {
        const result = client.matchProjectFromGoogleChannelConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.googleChannelConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGoogleChannelConfigName', () => {
        const result =
          client.matchLocationFromGoogleChannelConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.googleChannelConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('provider', () => {
      const fakePath = '/rendered/path/provider';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        provider: 'providerValue',
      };
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.providerPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.providerPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('providerPath', () => {
        const result = client.providerPath(
          'projectValue',
          'locationValue',
          'providerValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.providerPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProviderName', () => {
        const result = client.matchProjectFromProviderName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.providerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProviderName', () => {
        const result = client.matchLocationFromProviderName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.providerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProviderFromProviderName', () => {
        const result = client.matchProviderFromProviderName(fakePath);
        assert.strictEqual(result, 'providerValue');
        assert(
          (client.pathTemplates.providerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('trigger', () => {
      const fakePath = '/rendered/path/trigger';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        trigger: 'triggerValue',
      };
      const client = new eventarcModule.v1.EventarcClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.triggerPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.triggerPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('triggerPath', () => {
        const result = client.triggerPath(
          'projectValue',
          'locationValue',
          'triggerValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.triggerPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTriggerName', () => {
        const result = client.matchProjectFromTriggerName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.triggerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTriggerName', () => {
        const result = client.matchLocationFromTriggerName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.triggerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTriggerFromTriggerName', () => {
        const result = client.matchTriggerFromTriggerName(fakePath);
        assert.strictEqual(result, 'triggerValue');
        assert(
          (client.pathTemplates.triggerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
