// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as conferencerecordsserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v2beta.ConferenceRecordsServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient();
      const servicePath = client.servicePath;
      assert.strictEqual(servicePath, 'meet.googleapis.com');
    });

    it('has apiEndpoint', () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'meet.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process !== 'undefined' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient
            .servicePath;
        assert.strictEqual(servicePath, 'meet.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient
            .apiEndpoint;
        assert.strictEqual(apiEndpoint, 'meet.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets servicePath according to universe domain camelCase', () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {universeDomain: 'example.com'}
        );
      const servicePath = client.servicePath;
      assert.strictEqual(servicePath, 'meet.example.com');
    });

    it('sets servicePath according to universe domain snakeCase', () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {universe_domain: 'example.com'}
        );
      const servicePath = client.servicePath;
      assert.strictEqual(servicePath, 'meet.example.com');
    });
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {universe_domain: 'example.com', universeDomain: 'example.net'}
        );
      });
    });

    it('has port', () => {
      const port =
        conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient
          .port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            fallback: true,
          }
        );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.conferenceRecordsServiceStub, undefined);
      await client.initialize();
      assert(client.conferenceRecordsServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      assert(client.conferenceRecordsServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.conferenceRecordsServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getConferenceRecord', () => {
    it('invokes getConferenceRecord without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetConferenceRecordRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetConferenceRecordRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ConferenceRecord()
      );
      client.innerApiCalls.getConferenceRecord =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getConferenceRecord(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConferenceRecord as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConferenceRecord as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConferenceRecord without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetConferenceRecordRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetConferenceRecordRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ConferenceRecord()
      );
      client.innerApiCalls.getConferenceRecord =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConferenceRecord(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.IConferenceRecord | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConferenceRecord as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConferenceRecord as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConferenceRecord with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetConferenceRecordRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetConferenceRecordRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConferenceRecord = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConferenceRecord(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConferenceRecord as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConferenceRecord as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConferenceRecord with closed client', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetConferenceRecordRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetConferenceRecordRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConferenceRecord(request), expectedError);
    });
  });

  describe('getParticipant', () => {
    it('invokes getParticipant without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetParticipantRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetParticipantRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.Participant()
      );
      client.innerApiCalls.getParticipant = stubSimpleCall(expectedResponse);
      const [response] = await client.getParticipant(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getParticipant as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getParticipant as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getParticipant without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetParticipantRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetParticipantRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.Participant()
      );
      client.innerApiCalls.getParticipant =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getParticipant(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.IParticipant | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getParticipant as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getParticipant as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getParticipant with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetParticipantRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetParticipantRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getParticipant = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getParticipant(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getParticipant as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getParticipant as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getParticipant with closed client', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetParticipantRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetParticipantRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getParticipant(request), expectedError);
    });
  });

  describe('getParticipantSession', () => {
    it('invokes getParticipantSession without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetParticipantSessionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetParticipantSessionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ParticipantSession()
      );
      client.innerApiCalls.getParticipantSession =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getParticipantSession(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getParticipantSession as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getParticipantSession as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getParticipantSession without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetParticipantSessionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetParticipantSessionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ParticipantSession()
      );
      client.innerApiCalls.getParticipantSession =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getParticipantSession(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.IParticipantSession | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getParticipantSession as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getParticipantSession as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getParticipantSession with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetParticipantSessionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetParticipantSessionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getParticipantSession = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getParticipantSession(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getParticipantSession as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getParticipantSession as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getParticipantSession with closed client', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetParticipantSessionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetParticipantSessionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getParticipantSession(request),
        expectedError
      );
    });
  });

  describe('getRecording', () => {
    it('invokes getRecording without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetRecordingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetRecordingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.Recording()
      );
      client.innerApiCalls.getRecording = stubSimpleCall(expectedResponse);
      const [response] = await client.getRecording(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRecording as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRecording as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRecording without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetRecordingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetRecordingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.Recording()
      );
      client.innerApiCalls.getRecording =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getRecording(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.IRecording | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRecording as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRecording as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRecording with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetRecordingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetRecordingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getRecording = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getRecording(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getRecording as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRecording as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRecording with closed client', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetRecordingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetRecordingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getRecording(request), expectedError);
    });
  });

  describe('getTranscript', () => {
    it('invokes getTranscript without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetTranscriptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetTranscriptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.Transcript()
      );
      client.innerApiCalls.getTranscript = stubSimpleCall(expectedResponse);
      const [response] = await client.getTranscript(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTranscript as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTranscript as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTranscript without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetTranscriptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetTranscriptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.Transcript()
      );
      client.innerApiCalls.getTranscript =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getTranscript(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.ITranscript | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTranscript as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTranscript as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTranscript with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetTranscriptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetTranscriptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getTranscript = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getTranscript(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getTranscript as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTranscript as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTranscript with closed client', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetTranscriptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetTranscriptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getTranscript(request), expectedError);
    });
  });

  describe('getTranscriptEntry', () => {
    it('invokes getTranscriptEntry without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetTranscriptEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetTranscriptEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.TranscriptEntry()
      );
      client.innerApiCalls.getTranscriptEntry =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getTranscriptEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTranscriptEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTranscriptEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTranscriptEntry without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetTranscriptEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetTranscriptEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.apps.meet.v2beta.TranscriptEntry()
      );
      client.innerApiCalls.getTranscriptEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getTranscriptEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.ITranscriptEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTranscriptEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTranscriptEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTranscriptEntry with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetTranscriptEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetTranscriptEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getTranscriptEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getTranscriptEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getTranscriptEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTranscriptEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTranscriptEntry with closed client', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.GetTranscriptEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.GetTranscriptEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getTranscriptEntry(request), expectedError);
    });
  });

  describe('listConferenceRecords', () => {
    it('invokes listConferenceRecords without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListConferenceRecordsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
      ];
      client.innerApiCalls.listConferenceRecords =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listConferenceRecords(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listConferenceRecords without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListConferenceRecordsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
      ];
      client.innerApiCalls.listConferenceRecords =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConferenceRecords(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.IConferenceRecord[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listConferenceRecords with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListConferenceRecordsRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listConferenceRecords = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listConferenceRecords(request),
        expectedError
      );
    });

    it('invokes listConferenceRecordsStream without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListConferenceRecordsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
      ];
      client.descriptors.page.listConferenceRecords.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConferenceRecordsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.ConferenceRecord[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.ConferenceRecord) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listConferenceRecords
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listConferenceRecords, request)
      );
    });

    it('invokes listConferenceRecordsStream with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListConferenceRecordsRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listConferenceRecords.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConferenceRecordsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.ConferenceRecord[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.ConferenceRecord) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listConferenceRecords
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listConferenceRecords, request)
      );
    });

    it('uses async iteration with listConferenceRecords without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListConferenceRecordsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ConferenceRecord()
        ),
      ];
      client.descriptors.page.listConferenceRecords.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.apps.meet.v2beta.IConferenceRecord[] = [];
      const iterable = client.listConferenceRecordsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConferenceRecords
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });

    it('uses async iteration with listConferenceRecords with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListConferenceRecordsRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listConferenceRecords.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConferenceRecordsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.apps.meet.v2beta.IConferenceRecord[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConferenceRecords
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('listParticipants', () => {
    it('invokes listParticipants without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
      ];
      client.innerApiCalls.listParticipants = stubSimpleCall(expectedResponse);
      const [response] = await client.listParticipants(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listParticipants as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listParticipants as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listParticipants without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
      ];
      client.innerApiCalls.listParticipants =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listParticipants(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.IParticipant[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listParticipants as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listParticipants as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listParticipants with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listParticipants = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listParticipants(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listParticipants as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listParticipants as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listParticipantsStream without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
      ];
      client.descriptors.page.listParticipants.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listParticipantsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.Participant[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.Participant) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listParticipants.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listParticipants, request)
      );
      assert(
        (client.descriptors.page.listParticipants.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listParticipantsStream with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listParticipants.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listParticipantsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.Participant[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.Participant) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listParticipants.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listParticipants, request)
      );
      assert(
        (client.descriptors.page.listParticipants.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listParticipants without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Participant()),
      ];
      client.descriptors.page.listParticipants.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.apps.meet.v2beta.IParticipant[] = [];
      const iterable = client.listParticipantsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listParticipants.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listParticipants.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listParticipants with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listParticipants.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listParticipantsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.apps.meet.v2beta.IParticipant[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listParticipants.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listParticipants.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listParticipantSessions', () => {
    it('invokes listParticipantSessions without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantSessionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantSessionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
      ];
      client.innerApiCalls.listParticipantSessions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listParticipantSessions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listParticipantSessions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listParticipantSessions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listParticipantSessions without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantSessionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantSessionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
      ];
      client.innerApiCalls.listParticipantSessions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listParticipantSessions(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.IParticipantSession[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listParticipantSessions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listParticipantSessions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listParticipantSessions with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantSessionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantSessionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listParticipantSessions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listParticipantSessions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listParticipantSessions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listParticipantSessions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listParticipantSessionsStream without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantSessionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantSessionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
      ];
      client.descriptors.page.listParticipantSessions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listParticipantSessionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.ParticipantSession[] =
          [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.ParticipantSession) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listParticipantSessions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listParticipantSessions, request)
      );
      assert(
        (
          client.descriptors.page.listParticipantSessions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listParticipantSessionsStream with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantSessionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantSessionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listParticipantSessions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listParticipantSessionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.ParticipantSession[] =
          [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.ParticipantSession) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listParticipantSessions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listParticipantSessions, request)
      );
      assert(
        (
          client.descriptors.page.listParticipantSessions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listParticipantSessions without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantSessionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantSessionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.ParticipantSession()
        ),
      ];
      client.descriptors.page.listParticipantSessions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.apps.meet.v2beta.IParticipantSession[] =
        [];
      const iterable = client.listParticipantSessionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listParticipantSessions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listParticipantSessions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listParticipantSessions with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListParticipantSessionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListParticipantSessionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listParticipantSessions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listParticipantSessionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.apps.meet.v2beta.IParticipantSession[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listParticipantSessions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listParticipantSessions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listRecordings', () => {
    it('invokes listRecordings without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListRecordingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListRecordingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
      ];
      client.innerApiCalls.listRecordings = stubSimpleCall(expectedResponse);
      const [response] = await client.listRecordings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRecordings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRecordings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRecordings without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListRecordingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListRecordingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
      ];
      client.innerApiCalls.listRecordings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRecordings(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.IRecording[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRecordings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRecordings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRecordings with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListRecordingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListRecordingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listRecordings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listRecordings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listRecordings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRecordings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRecordingsStream without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListRecordingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListRecordingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
      ];
      client.descriptors.page.listRecordings.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRecordingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.Recording[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.Recording) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listRecordings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRecordings, request)
      );
      assert(
        (client.descriptors.page.listRecordings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listRecordingsStream with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListRecordingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListRecordingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRecordings.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listRecordingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.Recording[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.Recording) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listRecordings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRecordings, request)
      );
      assert(
        (client.descriptors.page.listRecordings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listRecordings without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListRecordingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListRecordingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Recording()),
      ];
      client.descriptors.page.listRecordings.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.apps.meet.v2beta.IRecording[] = [];
      const iterable = client.listRecordingsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRecordings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listRecordings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listRecordings with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListRecordingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListRecordingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRecordings.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRecordingsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.apps.meet.v2beta.IRecording[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRecordings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listRecordings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listTranscripts', () => {
    it('invokes listTranscripts without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
      ];
      client.innerApiCalls.listTranscripts = stubSimpleCall(expectedResponse);
      const [response] = await client.listTranscripts(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTranscripts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTranscripts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTranscripts without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
      ];
      client.innerApiCalls.listTranscripts =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTranscripts(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.ITranscript[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTranscripts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTranscripts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTranscripts with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTranscripts = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listTranscripts(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listTranscripts as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTranscripts as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTranscriptsStream without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
      ];
      client.descriptors.page.listTranscripts.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTranscriptsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.Transcript[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.Transcript) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTranscripts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTranscripts, request)
      );
      assert(
        (client.descriptors.page.listTranscripts.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listTranscriptsStream with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTranscripts.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listTranscriptsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.Transcript[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.Transcript) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listTranscripts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTranscripts, request)
      );
      assert(
        (client.descriptors.page.listTranscripts.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listTranscripts without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
        generateSampleMessage(new protos.google.apps.meet.v2beta.Transcript()),
      ];
      client.descriptors.page.listTranscripts.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.apps.meet.v2beta.ITranscript[] = [];
      const iterable = client.listTranscriptsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTranscripts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTranscripts.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listTranscripts with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTranscripts.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listTranscriptsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.apps.meet.v2beta.ITranscript[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTranscripts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTranscripts.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listTranscriptEntries', () => {
    it('invokes listTranscriptEntries without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
      ];
      client.innerApiCalls.listTranscriptEntries =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listTranscriptEntries(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTranscriptEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTranscriptEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTranscriptEntries without error using callback', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
      ];
      client.innerApiCalls.listTranscriptEntries =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTranscriptEntries(
          request,
          (
            err?: Error | null,
            result?: protos.google.apps.meet.v2beta.ITranscriptEntry[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTranscriptEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTranscriptEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTranscriptEntries with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTranscriptEntries = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listTranscriptEntries(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listTranscriptEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTranscriptEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTranscriptEntriesStream without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
      ];
      client.descriptors.page.listTranscriptEntries.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTranscriptEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.TranscriptEntry[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.TranscriptEntry) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listTranscriptEntries
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listTranscriptEntries, request)
      );
      assert(
        (
          client.descriptors.page.listTranscriptEntries
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listTranscriptEntriesStream with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTranscriptEntries.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listTranscriptEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.apps.meet.v2beta.TranscriptEntry[] = [];
        stream.on(
          'data',
          (response: protos.google.apps.meet.v2beta.TranscriptEntry) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listTranscriptEntries
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listTranscriptEntries, request)
      );
      assert(
        (
          client.descriptors.page.listTranscriptEntries
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTranscriptEntries without error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
        generateSampleMessage(
          new protos.google.apps.meet.v2beta.TranscriptEntry()
        ),
      ];
      client.descriptors.page.listTranscriptEntries.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.apps.meet.v2beta.ITranscriptEntry[] = [];
      const iterable = client.listTranscriptEntriesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTranscriptEntries
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listTranscriptEntries
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTranscriptEntries with error', async () => {
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.apps.meet.v2beta.ListTranscriptEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.apps.meet.v2beta.ListTranscriptEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTranscriptEntries.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listTranscriptEntriesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.apps.meet.v2beta.ITranscriptEntry[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTranscriptEntries
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listTranscriptEntries
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('conferenceRecord', () => {
      const fakePath = '/rendered/path/conferenceRecord';
      const expectedParameters = {
        conference_record: 'conferenceRecordValue',
      };
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.conferenceRecordPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.conferenceRecordPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('conferenceRecordPath', () => {
        const result = client.conferenceRecordPath('conferenceRecordValue');
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.conferenceRecordPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchConferenceRecordFromConferenceRecordName', () => {
        const result =
          client.matchConferenceRecordFromConferenceRecordName(fakePath);
        assert.strictEqual(result, 'conferenceRecordValue');
        assert(
          (client.pathTemplates.conferenceRecordPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('participant', () => {
      const fakePath = '/rendered/path/participant';
      const expectedParameters = {
        conference_record: 'conferenceRecordValue',
        participant: 'participantValue',
      };
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.participantPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.participantPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('participantPath', () => {
        const result = client.participantPath(
          'conferenceRecordValue',
          'participantValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.participantPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchConferenceRecordFromParticipantName', () => {
        const result =
          client.matchConferenceRecordFromParticipantName(fakePath);
        assert.strictEqual(result, 'conferenceRecordValue');
        assert(
          (client.pathTemplates.participantPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchParticipantFromParticipantName', () => {
        const result = client.matchParticipantFromParticipantName(fakePath);
        assert.strictEqual(result, 'participantValue');
        assert(
          (client.pathTemplates.participantPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('participantSession', () => {
      const fakePath = '/rendered/path/participantSession';
      const expectedParameters = {
        conference_record: 'conferenceRecordValue',
        participant: 'participantValue',
        participant_session: 'participantSessionValue',
      };
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.participantSessionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.participantSessionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('participantSessionPath', () => {
        const result = client.participantSessionPath(
          'conferenceRecordValue',
          'participantValue',
          'participantSessionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.participantSessionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchConferenceRecordFromParticipantSessionName', () => {
        const result =
          client.matchConferenceRecordFromParticipantSessionName(fakePath);
        assert.strictEqual(result, 'conferenceRecordValue');
        assert(
          (
            client.pathTemplates.participantSessionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchParticipantFromParticipantSessionName', () => {
        const result =
          client.matchParticipantFromParticipantSessionName(fakePath);
        assert.strictEqual(result, 'participantValue');
        assert(
          (
            client.pathTemplates.participantSessionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchParticipantSessionFromParticipantSessionName', () => {
        const result =
          client.matchParticipantSessionFromParticipantSessionName(fakePath);
        assert.strictEqual(result, 'participantSessionValue');
        assert(
          (
            client.pathTemplates.participantSessionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('recording', () => {
      const fakePath = '/rendered/path/recording';
      const expectedParameters = {
        conference_record: 'conferenceRecordValue',
        recording: 'recordingValue',
      };
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.recordingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.recordingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('recordingPath', () => {
        const result = client.recordingPath(
          'conferenceRecordValue',
          'recordingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.recordingPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchConferenceRecordFromRecordingName', () => {
        const result = client.matchConferenceRecordFromRecordingName(fakePath);
        assert.strictEqual(result, 'conferenceRecordValue');
        assert(
          (client.pathTemplates.recordingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecordingFromRecordingName', () => {
        const result = client.matchRecordingFromRecordingName(fakePath);
        assert.strictEqual(result, 'recordingValue');
        assert(
          (client.pathTemplates.recordingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('space', () => {
      const fakePath = '/rendered/path/space';
      const expectedParameters = {
        space: 'spaceValue',
      };
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.spacePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.spacePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('spacePath', () => {
        const result = client.spacePath('spaceValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.spacePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchSpaceFromSpaceName', () => {
        const result = client.matchSpaceFromSpaceName(fakePath);
        assert.strictEqual(result, 'spaceValue');
        assert(
          (client.pathTemplates.spacePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('transcript', () => {
      const fakePath = '/rendered/path/transcript';
      const expectedParameters = {
        conference_record: 'conferenceRecordValue',
        transcript: 'transcriptValue',
      };
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.transcriptPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.transcriptPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('transcriptPath', () => {
        const result = client.transcriptPath(
          'conferenceRecordValue',
          'transcriptValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.transcriptPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchConferenceRecordFromTranscriptName', () => {
        const result = client.matchConferenceRecordFromTranscriptName(fakePath);
        assert.strictEqual(result, 'conferenceRecordValue');
        assert(
          (client.pathTemplates.transcriptPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTranscriptFromTranscriptName', () => {
        const result = client.matchTranscriptFromTranscriptName(fakePath);
        assert.strictEqual(result, 'transcriptValue');
        assert(
          (client.pathTemplates.transcriptPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('transcriptEntry', () => {
      const fakePath = '/rendered/path/transcriptEntry';
      const expectedParameters = {
        conference_record: 'conferenceRecordValue',
        transcript: 'transcriptValue',
        entry: 'entryValue',
      };
      const client =
        new conferencerecordsserviceModule.v2beta.ConferenceRecordsServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.transcriptEntryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.transcriptEntryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('transcriptEntryPath', () => {
        const result = client.transcriptEntryPath(
          'conferenceRecordValue',
          'transcriptValue',
          'entryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.transcriptEntryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchConferenceRecordFromTranscriptEntryName', () => {
        const result =
          client.matchConferenceRecordFromTranscriptEntryName(fakePath);
        assert.strictEqual(result, 'conferenceRecordValue');
        assert(
          (client.pathTemplates.transcriptEntryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTranscriptFromTranscriptEntryName', () => {
        const result = client.matchTranscriptFromTranscriptEntryName(fakePath);
        assert.strictEqual(result, 'transcriptValue');
        assert(
          (client.pathTemplates.transcriptEntryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryFromTranscriptEntryName', () => {
        const result = client.matchEntryFromTranscriptEntryName(fakePath);
        assert.strictEqual(result, 'entryValue');
        assert(
          (client.pathTemplates.transcriptEntryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
