// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v2beta/spaces_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './spaces_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  REST API for services dealing with spaces.
 * @class
 * @memberof v2beta
 */
export class SpacesServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  spacesServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SpacesServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SpacesServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SpacesServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'meet.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      conferenceRecordPathTemplate: new this._gaxModule.PathTemplate(
        'conferenceRecords/{conference_record}'
      ),
      memberPathTemplate: new this._gaxModule.PathTemplate(
        'spaces/{space}/members/{member}'
      ),
      participantPathTemplate: new this._gaxModule.PathTemplate(
        'conferenceRecords/{conference_record}/participants/{participant}'
      ),
      participantSessionPathTemplate: new this._gaxModule.PathTemplate(
        'conferenceRecords/{conference_record}/participants/{participant}/participantSessions/{participant_session}'
      ),
      recordingPathTemplate: new this._gaxModule.PathTemplate(
        'conferenceRecords/{conference_record}/recordings/{recording}'
      ),
      spacePathTemplate: new this._gaxModule.PathTemplate('spaces/{space}'),
      transcriptPathTemplate: new this._gaxModule.PathTemplate(
        'conferenceRecords/{conference_record}/transcripts/{transcript}'
      ),
      transcriptEntryPathTemplate: new this._gaxModule.PathTemplate(
        'conferenceRecords/{conference_record}/transcripts/{transcript}/entries/{entry}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listMembers: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'members'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.apps.meet.v2beta.SpacesService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.spacesServiceStub) {
      return this.spacesServiceStub;
    }

    // Put together the "service stub" for
    // google.apps.meet.v2beta.SpacesService.
    this.spacesServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.apps.meet.v2beta.SpacesService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.apps.meet.v2beta.SpacesService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const spacesServiceStubMethods = [
      'createSpace',
      'getSpace',
      'updateSpace',
      'connectActiveConference',
      'endActiveConference',
      'createMember',
      'getMember',
      'listMembers',
      'deleteMember',
    ];
    for (const methodName of spacesServiceStubMethods) {
      const callPromise = this.spacesServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.spacesServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'meet.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'meet.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/meetings.conference.media.audio.readonly',
      'https://www.googleapis.com/auth/meetings.conference.media.readonly',
      'https://www.googleapis.com/auth/meetings.conference.media.video.readonly',
      'https://www.googleapis.com/auth/meetings.space.created',
      'https://www.googleapis.com/auth/meetings.space.readonly',
      'https://www.googleapis.com/auth/meetings.space.settings',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a space.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.apps.meet.v2beta.Space} request.space
   *   Space to be created. As of May 2023, the input space can be empty. Later on
   *   the input space can be non-empty when space configuration is introduced.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.Space|Space}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.create_space.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_CreateSpace_async
   */
  createSpace(
    request?: protos.google.apps.meet.v2beta.ICreateSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.ICreateSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  createSpace(
    request: protos.google.apps.meet.v2beta.ICreateSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.ICreateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSpace(
    request: protos.google.apps.meet.v2beta.ICreateSpaceRequest,
    callback: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.ICreateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSpace(
    request?: protos.google.apps.meet.v2beta.ICreateSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.apps.meet.v2beta.ISpace,
          protos.google.apps.meet.v2beta.ICreateSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.ICreateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.ICreateSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createSpace(request, options, callback);
  }
  /**
   * Gets details about a meeting space.
   *
   * For an example, see [Get a meeting
   * space](https://developers.google.com/meet/api/guides/meeting-spaces#get-meeting-space).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the space.
   *
   *   Format: `spaces/{space}` or `spaces/{meetingCode}`.
   *
   *   `{space}` is the resource identifier for the space. It's a unique,
   *   server-generated ID and is case sensitive. For example, `jQCFfuBOdN5z`.
   *
   *   `{meetingCode}` is an alias for the space. It's a typeable, unique
   *   character string and is non-case sensitive. For example, `abc-mnop-xyz`.
   *   The maximum length is 128 characters.
   *
   *   A `meetingCode` shouldn't be stored long term as it can become
   *   dissociated from a meeting space and can be reused for different meeting
   *   spaces in the future. Generally, a `meetingCode` expires 365 days after
   *   last use. For more information, see [Learn about meeting codes in Google
   *   Meet](https://support.google.com/meet/answer/10710509).
   *
   *   For more information, see [How Meet identifies a meeting
   *   space](https://developers.google.com/meet/api/guides/meeting-spaces#identify-meeting-space).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.Space|Space}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.get_space.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_GetSpace_async
   */
  getSpace(
    request?: protos.google.apps.meet.v2beta.IGetSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IGetSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  getSpace(
    request: protos.google.apps.meet.v2beta.IGetSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IGetSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSpace(
    request: protos.google.apps.meet.v2beta.IGetSpaceRequest,
    callback: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IGetSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSpace(
    request?: protos.google.apps.meet.v2beta.IGetSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.apps.meet.v2beta.ISpace,
          protos.google.apps.meet.v2beta.IGetSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IGetSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IGetSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSpace(request, options, callback);
  }
  /**
   * Updates details about a meeting space.
   *
   * For an example, see [Update a meeting
   * space](https://developers.google.com/meet/api/guides/meeting-spaces#update-meeting-space).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.apps.meet.v2beta.Space} request.space
   *   Required. Space to be updated.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask used to specify the fields to be updated in the space.
   *   If update_mask isn't provided(not set, set with empty paths, or only has ""
   *   as paths), it defaults to update all fields provided with values in the
   *   request.
   *   Using "*" as update_mask will update all fields, including deleting fields
   *   not set in the request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.Space|Space}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.update_space.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_UpdateSpace_async
   */
  updateSpace(
    request?: protos.google.apps.meet.v2beta.IUpdateSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IUpdateSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  updateSpace(
    request: protos.google.apps.meet.v2beta.IUpdateSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IUpdateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSpace(
    request: protos.google.apps.meet.v2beta.IUpdateSpaceRequest,
    callback: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IUpdateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSpace(
    request?: protos.google.apps.meet.v2beta.IUpdateSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.apps.meet.v2beta.ISpace,
          protos.google.apps.meet.v2beta.IUpdateSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IUpdateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.apps.meet.v2beta.ISpace,
      protos.google.apps.meet.v2beta.IUpdateSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'space.name': request.space!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSpace(request, options, callback);
  }
  /**
   * [Developer Preview](https://developers.google.com/workspace/preview):
   * Broker a WebRTC connection to the active conference of a space.
   *
   * On success, clients must use the resulting SDP (Session Description
   * Protocol) answer to establish a WebRTC connection. Once connected,
   * additional functionality is available across WebRTC data channels.
   *
   * See [Meet Media API
   * overview](https://developers.google.com/meet/media-api/guides/overview) for
   * more details about this connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the space.
   *   Format: spaces/{spaceId}
   * @param {string} request.offer
   *   Required. WebRTC SDP (Session Description Protocol) offer from the client.
   *
   *   The format is defined by [RFC
   *   8866](https://www.rfc-editor.org/rfc/rfc8866) with mandatory keys defined
   *   by [RFC 8829](https://www.rfc-editor.org/rfc/rfc8829). This is the standard
   *   SDP format generated by a peer connection's createOffer() and
   *   createAnswer() methods.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.ConnectActiveConferenceResponse|ConnectActiveConferenceResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.connect_active_conference.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_ConnectActiveConference_async
   */
  connectActiveConference(
    request?: protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.apps.meet.v2beta.IConnectActiveConferenceResponse,
      (
        | protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  connectActiveConference(
    request: protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.apps.meet.v2beta.IConnectActiveConferenceResponse,
      | protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  connectActiveConference(
    request: protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest,
    callback: Callback<
      protos.google.apps.meet.v2beta.IConnectActiveConferenceResponse,
      | protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  connectActiveConference(
    request?: protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.apps.meet.v2beta.IConnectActiveConferenceResponse,
          | protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.apps.meet.v2beta.IConnectActiveConferenceResponse,
      | protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.apps.meet.v2beta.IConnectActiveConferenceResponse,
      (
        | protos.google.apps.meet.v2beta.IConnectActiveConferenceRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.connectActiveConference(
      request,
      options,
      callback
    );
  }
  /**
   * Ends an active conference (if there's one).
   *
   * For an example, see [End active
   * conference](https://developers.google.com/meet/api/guides/meeting-spaces#end-active-conference).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the space.
   *
   *   Format: `spaces/{space}`.
   *
   *   `{space}` is the resource identifier for the space. It's a unique,
   *   server-generated ID and is case sensitive. For example, `jQCFfuBOdN5z`.
   *
   *   For more information, see [How Meet identifies a meeting
   *   space](https://developers.google.com/meet/api/guides/meeting-spaces#identify-meeting-space).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.end_active_conference.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_EndActiveConference_async
   */
  endActiveConference(
    request?: protos.google.apps.meet.v2beta.IEndActiveConferenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.apps.meet.v2beta.IEndActiveConferenceRequest | undefined,
      {} | undefined,
    ]
  >;
  endActiveConference(
    request: protos.google.apps.meet.v2beta.IEndActiveConferenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.apps.meet.v2beta.IEndActiveConferenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  endActiveConference(
    request: protos.google.apps.meet.v2beta.IEndActiveConferenceRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.apps.meet.v2beta.IEndActiveConferenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  endActiveConference(
    request?: protos.google.apps.meet.v2beta.IEndActiveConferenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.apps.meet.v2beta.IEndActiveConferenceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.apps.meet.v2beta.IEndActiveConferenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.apps.meet.v2beta.IEndActiveConferenceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.endActiveConference(request, options, callback);
  }
  /**
   * [Developer Preview](https://developers.google.com/workspace/preview):
   * Create a member.
   *
   * This API supports the `fields` parameter in
   * [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
   * When the `fields` parameter is omitted, this API response will default to
   * "name,email,role,user".
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format: spaces/{space}
   * @param {google.apps.meet.v2beta.Member} request.member
   *   Required. The member to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.Member|Member}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.create_member.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_CreateMember_async
   */
  createMember(
    request?: protos.google.apps.meet.v2beta.ICreateMemberRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.ICreateMemberRequest | undefined,
      {} | undefined,
    ]
  >;
  createMember(
    request: protos.google.apps.meet.v2beta.ICreateMemberRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.ICreateMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMember(
    request: protos.google.apps.meet.v2beta.ICreateMemberRequest,
    callback: Callback<
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.ICreateMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMember(
    request?: protos.google.apps.meet.v2beta.ICreateMemberRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.apps.meet.v2beta.IMember,
          | protos.google.apps.meet.v2beta.ICreateMemberRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.ICreateMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.ICreateMemberRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createMember(request, options, callback);
  }
  /**
   * [Developer Preview](https://developers.google.com/workspace/preview):
   * Get a member.
   *
   * This API supports the `fields` parameter in
   * [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
   * When the `fields` parameter is omitted, this API response will default to
   * "name,email,role,user".
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format: “spaces/{space}/members/{member}”
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.Member|Member}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.get_member.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_GetMember_async
   */
  getMember(
    request?: protos.google.apps.meet.v2beta.IGetMemberRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.IGetMemberRequest | undefined,
      {} | undefined,
    ]
  >;
  getMember(
    request: protos.google.apps.meet.v2beta.IGetMemberRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.IGetMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getMember(
    request: protos.google.apps.meet.v2beta.IGetMemberRequest,
    callback: Callback<
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.IGetMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getMember(
    request?: protos.google.apps.meet.v2beta.IGetMemberRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.apps.meet.v2beta.IMember,
          protos.google.apps.meet.v2beta.IGetMemberRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.IGetMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.apps.meet.v2beta.IMember,
      protos.google.apps.meet.v2beta.IGetMemberRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMember(request, options, callback);
  }
  /**
   * [Developer Preview](https://developers.google.com/workspace/preview):
   * Delete the member who was previously assigned roles in the space.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format: “spaces/{space}/members/{member}”
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.delete_member.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_DeleteMember_async
   */
  deleteMember(
    request?: protos.google.apps.meet.v2beta.IDeleteMemberRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.apps.meet.v2beta.IDeleteMemberRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteMember(
    request: protos.google.apps.meet.v2beta.IDeleteMemberRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.apps.meet.v2beta.IDeleteMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMember(
    request: protos.google.apps.meet.v2beta.IDeleteMemberRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.apps.meet.v2beta.IDeleteMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMember(
    request?: protos.google.apps.meet.v2beta.IDeleteMemberRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.apps.meet.v2beta.IDeleteMemberRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.apps.meet.v2beta.IDeleteMemberRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.apps.meet.v2beta.IDeleteMemberRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteMember(request, options, callback);
  }

  /**
   * [Developer Preview](https://developers.google.com/workspace/preview):
   * List members.
   *
   * This API supports the `fields` parameter in
   * [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
   * When the `fields` parameter is omitted this API response will default to
   * "name,email,role,user".
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format: spaces/{space}
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of members to return. The service might return
   *   fewer than this value. If unspecified, at most 25 members are returned. The
   *   maximum value is 100; values above 100 are coerced to 100. Maximum might
   *   change in the future.
   * @param {string} [request.pageToken]
   *   Optional. Page token returned from previous List Call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.apps.meet.v2beta.Member|Member}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMembersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMembers(
    request?: protos.google.apps.meet.v2beta.IListMembersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.apps.meet.v2beta.IMember[],
      protos.google.apps.meet.v2beta.IListMembersRequest | null,
      protos.google.apps.meet.v2beta.IListMembersResponse,
    ]
  >;
  listMembers(
    request: protos.google.apps.meet.v2beta.IListMembersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.apps.meet.v2beta.IListMembersRequest,
      protos.google.apps.meet.v2beta.IListMembersResponse | null | undefined,
      protos.google.apps.meet.v2beta.IMember
    >
  ): void;
  listMembers(
    request: protos.google.apps.meet.v2beta.IListMembersRequest,
    callback: PaginationCallback<
      protos.google.apps.meet.v2beta.IListMembersRequest,
      protos.google.apps.meet.v2beta.IListMembersResponse | null | undefined,
      protos.google.apps.meet.v2beta.IMember
    >
  ): void;
  listMembers(
    request?: protos.google.apps.meet.v2beta.IListMembersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.apps.meet.v2beta.IListMembersRequest,
          | protos.google.apps.meet.v2beta.IListMembersResponse
          | null
          | undefined,
          protos.google.apps.meet.v2beta.IMember
        >,
    callback?: PaginationCallback<
      protos.google.apps.meet.v2beta.IListMembersRequest,
      protos.google.apps.meet.v2beta.IListMembersResponse | null | undefined,
      protos.google.apps.meet.v2beta.IMember
    >
  ): Promise<
    [
      protos.google.apps.meet.v2beta.IMember[],
      protos.google.apps.meet.v2beta.IListMembersRequest | null,
      protos.google.apps.meet.v2beta.IListMembersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMembers(request, options, callback);
  }

  /**
   * Equivalent to `listMembers`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format: spaces/{space}
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of members to return. The service might return
   *   fewer than this value. If unspecified, at most 25 members are returned. The
   *   maximum value is 100; values above 100 are coerced to 100. Maximum might
   *   change in the future.
   * @param {string} [request.pageToken]
   *   Optional. Page token returned from previous List Call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.apps.meet.v2beta.Member|Member} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMembersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMembersStream(
    request?: protos.google.apps.meet.v2beta.IListMembersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMembers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMembers.createStream(
      this.innerApiCalls.listMembers as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMembers`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format: spaces/{space}
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of members to return. The service might return
   *   fewer than this value. If unspecified, at most 25 members are returned. The
   *   maximum value is 100; values above 100 are coerced to 100. Maximum might
   *   change in the future.
   * @param {string} [request.pageToken]
   *   Optional. Page token returned from previous List Call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.apps.meet.v2beta.Member|Member}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta/spaces_service.list_members.js</caption>
   * region_tag:meet_v2beta_generated_SpacesService_ListMembers_async
   */
  listMembersAsync(
    request?: protos.google.apps.meet.v2beta.IListMembersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.apps.meet.v2beta.IMember> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMembers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMembers.asyncIterate(
      this.innerApiCalls['listMembers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.apps.meet.v2beta.IMember>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified conferenceRecord resource name string.
   *
   * @param {string} conference_record
   * @returns {string} Resource name string.
   */
  conferenceRecordPath(conferenceRecord: string) {
    return this.pathTemplates.conferenceRecordPathTemplate.render({
      conference_record: conferenceRecord,
    });
  }

  /**
   * Parse the conference_record from ConferenceRecord resource.
   *
   * @param {string} conferenceRecordName
   *   A fully-qualified path representing ConferenceRecord resource.
   * @returns {string} A string representing the conference_record.
   */
  matchConferenceRecordFromConferenceRecordName(conferenceRecordName: string) {
    return this.pathTemplates.conferenceRecordPathTemplate.match(
      conferenceRecordName
    ).conference_record;
  }

  /**
   * Return a fully-qualified member resource name string.
   *
   * @param {string} space
   * @param {string} member
   * @returns {string} Resource name string.
   */
  memberPath(space: string, member: string) {
    return this.pathTemplates.memberPathTemplate.render({
      space: space,
      member: member,
    });
  }

  /**
   * Parse the space from Member resource.
   *
   * @param {string} memberName
   *   A fully-qualified path representing Member resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromMemberName(memberName: string) {
    return this.pathTemplates.memberPathTemplate.match(memberName).space;
  }

  /**
   * Parse the member from Member resource.
   *
   * @param {string} memberName
   *   A fully-qualified path representing Member resource.
   * @returns {string} A string representing the member.
   */
  matchMemberFromMemberName(memberName: string) {
    return this.pathTemplates.memberPathTemplate.match(memberName).member;
  }

  /**
   * Return a fully-qualified participant resource name string.
   *
   * @param {string} conference_record
   * @param {string} participant
   * @returns {string} Resource name string.
   */
  participantPath(conferenceRecord: string, participant: string) {
    return this.pathTemplates.participantPathTemplate.render({
      conference_record: conferenceRecord,
      participant: participant,
    });
  }

  /**
   * Parse the conference_record from Participant resource.
   *
   * @param {string} participantName
   *   A fully-qualified path representing Participant resource.
   * @returns {string} A string representing the conference_record.
   */
  matchConferenceRecordFromParticipantName(participantName: string) {
    return this.pathTemplates.participantPathTemplate.match(participantName)
      .conference_record;
  }

  /**
   * Parse the participant from Participant resource.
   *
   * @param {string} participantName
   *   A fully-qualified path representing Participant resource.
   * @returns {string} A string representing the participant.
   */
  matchParticipantFromParticipantName(participantName: string) {
    return this.pathTemplates.participantPathTemplate.match(participantName)
      .participant;
  }

  /**
   * Return a fully-qualified participantSession resource name string.
   *
   * @param {string} conference_record
   * @param {string} participant
   * @param {string} participant_session
   * @returns {string} Resource name string.
   */
  participantSessionPath(
    conferenceRecord: string,
    participant: string,
    participantSession: string
  ) {
    return this.pathTemplates.participantSessionPathTemplate.render({
      conference_record: conferenceRecord,
      participant: participant,
      participant_session: participantSession,
    });
  }

  /**
   * Parse the conference_record from ParticipantSession resource.
   *
   * @param {string} participantSessionName
   *   A fully-qualified path representing ParticipantSession resource.
   * @returns {string} A string representing the conference_record.
   */
  matchConferenceRecordFromParticipantSessionName(
    participantSessionName: string
  ) {
    return this.pathTemplates.participantSessionPathTemplate.match(
      participantSessionName
    ).conference_record;
  }

  /**
   * Parse the participant from ParticipantSession resource.
   *
   * @param {string} participantSessionName
   *   A fully-qualified path representing ParticipantSession resource.
   * @returns {string} A string representing the participant.
   */
  matchParticipantFromParticipantSessionName(participantSessionName: string) {
    return this.pathTemplates.participantSessionPathTemplate.match(
      participantSessionName
    ).participant;
  }

  /**
   * Parse the participant_session from ParticipantSession resource.
   *
   * @param {string} participantSessionName
   *   A fully-qualified path representing ParticipantSession resource.
   * @returns {string} A string representing the participant_session.
   */
  matchParticipantSessionFromParticipantSessionName(
    participantSessionName: string
  ) {
    return this.pathTemplates.participantSessionPathTemplate.match(
      participantSessionName
    ).participant_session;
  }

  /**
   * Return a fully-qualified recording resource name string.
   *
   * @param {string} conference_record
   * @param {string} recording
   * @returns {string} Resource name string.
   */
  recordingPath(conferenceRecord: string, recording: string) {
    return this.pathTemplates.recordingPathTemplate.render({
      conference_record: conferenceRecord,
      recording: recording,
    });
  }

  /**
   * Parse the conference_record from Recording resource.
   *
   * @param {string} recordingName
   *   A fully-qualified path representing Recording resource.
   * @returns {string} A string representing the conference_record.
   */
  matchConferenceRecordFromRecordingName(recordingName: string) {
    return this.pathTemplates.recordingPathTemplate.match(recordingName)
      .conference_record;
  }

  /**
   * Parse the recording from Recording resource.
   *
   * @param {string} recordingName
   *   A fully-qualified path representing Recording resource.
   * @returns {string} A string representing the recording.
   */
  matchRecordingFromRecordingName(recordingName: string) {
    return this.pathTemplates.recordingPathTemplate.match(recordingName)
      .recording;
  }

  /**
   * Return a fully-qualified space resource name string.
   *
   * @param {string} space
   * @returns {string} Resource name string.
   */
  spacePath(space: string) {
    return this.pathTemplates.spacePathTemplate.render({
      space: space,
    });
  }

  /**
   * Parse the space from Space resource.
   *
   * @param {string} spaceName
   *   A fully-qualified path representing Space resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromSpaceName(spaceName: string) {
    return this.pathTemplates.spacePathTemplate.match(spaceName).space;
  }

  /**
   * Return a fully-qualified transcript resource name string.
   *
   * @param {string} conference_record
   * @param {string} transcript
   * @returns {string} Resource name string.
   */
  transcriptPath(conferenceRecord: string, transcript: string) {
    return this.pathTemplates.transcriptPathTemplate.render({
      conference_record: conferenceRecord,
      transcript: transcript,
    });
  }

  /**
   * Parse the conference_record from Transcript resource.
   *
   * @param {string} transcriptName
   *   A fully-qualified path representing Transcript resource.
   * @returns {string} A string representing the conference_record.
   */
  matchConferenceRecordFromTranscriptName(transcriptName: string) {
    return this.pathTemplates.transcriptPathTemplate.match(transcriptName)
      .conference_record;
  }

  /**
   * Parse the transcript from Transcript resource.
   *
   * @param {string} transcriptName
   *   A fully-qualified path representing Transcript resource.
   * @returns {string} A string representing the transcript.
   */
  matchTranscriptFromTranscriptName(transcriptName: string) {
    return this.pathTemplates.transcriptPathTemplate.match(transcriptName)
      .transcript;
  }

  /**
   * Return a fully-qualified transcriptEntry resource name string.
   *
   * @param {string} conference_record
   * @param {string} transcript
   * @param {string} entry
   * @returns {string} Resource name string.
   */
  transcriptEntryPath(
    conferenceRecord: string,
    transcript: string,
    entry: string
  ) {
    return this.pathTemplates.transcriptEntryPathTemplate.render({
      conference_record: conferenceRecord,
      transcript: transcript,
      entry: entry,
    });
  }

  /**
   * Parse the conference_record from TranscriptEntry resource.
   *
   * @param {string} transcriptEntryName
   *   A fully-qualified path representing TranscriptEntry resource.
   * @returns {string} A string representing the conference_record.
   */
  matchConferenceRecordFromTranscriptEntryName(transcriptEntryName: string) {
    return this.pathTemplates.transcriptEntryPathTemplate.match(
      transcriptEntryName
    ).conference_record;
  }

  /**
   * Parse the transcript from TranscriptEntry resource.
   *
   * @param {string} transcriptEntryName
   *   A fully-qualified path representing TranscriptEntry resource.
   * @returns {string} A string representing the transcript.
   */
  matchTranscriptFromTranscriptEntryName(transcriptEntryName: string) {
    return this.pathTemplates.transcriptEntryPathTemplate.match(
      transcriptEntryName
    ).transcript;
  }

  /**
   * Parse the entry from TranscriptEntry resource.
   *
   * @param {string} transcriptEntryName
   *   A fully-qualified path representing TranscriptEntry resource.
   * @returns {string} A string representing the entry.
   */
  matchEntryFromTranscriptEntryName(transcriptEntryName: string) {
    return this.pathTemplates.transcriptEntryPathTemplate.match(
      transcriptEntryName
    ).entry;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.spacesServiceStub && !this._terminated) {
      return this.spacesServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
