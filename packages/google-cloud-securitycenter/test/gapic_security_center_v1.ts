// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as securitycenterModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.SecurityCenterClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        securitycenterModule.v1.SecurityCenterClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        securitycenterModule.v1.SecurityCenterClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = securitycenterModule.v1.SecurityCenterClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new securitycenterModule.v1.SecurityCenterClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.securityCenterStub, undefined);
      await client.initialize();
      assert(client.securityCenterStub);
    });

    it('has close method for the initialized client', done => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.securityCenterStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.securityCenterStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('createSource', () => {
    it('invokes createSource without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateSourceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Source()
      );
      client.innerApiCalls.createSource = stubSimpleCall(expectedResponse);
      const [response] = await client.createSource(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSource without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateSourceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Source()
      );
      client.innerApiCalls.createSource =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createSource(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.ISource | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSource with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateSourceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createSource = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createSource(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSource with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateSourceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createSource(request), expectedError);
    });
  });

  describe('createFinding', () => {
    it('invokes createFinding without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateFindingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateFindingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Finding()
      );
      client.innerApiCalls.createFinding = stubSimpleCall(expectedResponse);
      const [response] = await client.createFinding(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createFinding as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFinding as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFinding without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateFindingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateFindingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Finding()
      );
      client.innerApiCalls.createFinding =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createFinding(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IFinding | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createFinding as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFinding as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFinding with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateFindingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateFindingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createFinding = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createFinding(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createFinding as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFinding as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFinding with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateFindingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateFindingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createFinding(request), expectedError);
    });
  });

  describe('createMuteConfig', () => {
    it('invokes createMuteConfig without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateMuteConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.MuteConfig()
      );
      client.innerApiCalls.createMuteConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.createMuteConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMuteConfig without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateMuteConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.MuteConfig()
      );
      client.innerApiCalls.createMuteConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createMuteConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IMuteConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMuteConfig with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateMuteConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMuteConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createMuteConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMuteConfig with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateMuteConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createMuteConfig(request), expectedError);
    });
  });

  describe('createNotificationConfig', () => {
    it('invokes createNotificationConfig without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateNotificationConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.NotificationConfig()
      );
      client.innerApiCalls.createNotificationConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createNotificationConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNotificationConfig without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateNotificationConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.NotificationConfig()
      );
      client.innerApiCalls.createNotificationConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createNotificationConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.INotificationConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNotificationConfig with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateNotificationConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createNotificationConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createNotificationConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createNotificationConfig with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateNotificationConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createNotificationConfig(request),
        expectedError
      );
    });
  });

  describe('deleteMuteConfig', () => {
    it('invokes deleteMuteConfig without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteMuteConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteMuteConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteMuteConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMuteConfig without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteMuteConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteMuteConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteMuteConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMuteConfig with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteMuteConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteMuteConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteMuteConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMuteConfig with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteMuteConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteMuteConfig(request), expectedError);
    });
  });

  describe('deleteNotificationConfig', () => {
    it('invokes deleteNotificationConfig without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteNotificationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteNotificationConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteNotificationConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteNotificationConfig without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteNotificationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteNotificationConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteNotificationConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteNotificationConfig with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteNotificationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteNotificationConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteNotificationConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteNotificationConfig with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteNotificationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteNotificationConfig(request),
        expectedError
      );
    });
  });

  describe('getBigQueryExport', () => {
    it('invokes getBigQueryExport without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetBigQueryExportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BigQueryExport()
      );
      client.innerApiCalls.getBigQueryExport = stubSimpleCall(expectedResponse);
      const [response] = await client.getBigQueryExport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBigQueryExport without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetBigQueryExportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BigQueryExport()
      );
      client.innerApiCalls.getBigQueryExport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getBigQueryExport(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IBigQueryExport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBigQueryExport with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetBigQueryExportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getBigQueryExport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getBigQueryExport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBigQueryExport with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetBigQueryExportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getBigQueryExport(request), expectedError);
    });
  });

  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getIamPolicy(request), expectedError);
    });
  });

  describe('getMuteConfig', () => {
    it('invokes getMuteConfig without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetMuteConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.MuteConfig()
      );
      client.innerApiCalls.getMuteConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.getMuteConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMuteConfig without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetMuteConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.MuteConfig()
      );
      client.innerApiCalls.getMuteConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getMuteConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IMuteConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMuteConfig with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetMuteConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getMuteConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getMuteConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMuteConfig with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetMuteConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetMuteConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getMuteConfig(request), expectedError);
    });
  });

  describe('getNotificationConfig', () => {
    it('invokes getNotificationConfig without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetNotificationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.NotificationConfig()
      );
      client.innerApiCalls.getNotificationConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getNotificationConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNotificationConfig without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetNotificationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.NotificationConfig()
      );
      client.innerApiCalls.getNotificationConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getNotificationConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.INotificationConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNotificationConfig with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetNotificationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getNotificationConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getNotificationConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNotificationConfig with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetNotificationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetNotificationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getNotificationConfig(request),
        expectedError
      );
    });
  });

  describe('getOrganizationSettings', () => {
    it('invokes getOrganizationSettings without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetOrganizationSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetOrganizationSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.OrganizationSettings()
      );
      client.innerApiCalls.getOrganizationSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getOrganizationSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getOrganizationSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOrganizationSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOrganizationSettings without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetOrganizationSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetOrganizationSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.OrganizationSettings()
      );
      client.innerApiCalls.getOrganizationSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getOrganizationSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IOrganizationSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getOrganizationSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOrganizationSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOrganizationSettings with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetOrganizationSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetOrganizationSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getOrganizationSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getOrganizationSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getOrganizationSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOrganizationSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOrganizationSettings with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetOrganizationSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetOrganizationSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getOrganizationSettings(request),
        expectedError
      );
    });
  });

  describe('getSource', () => {
    it('invokes getSource without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Source()
      );
      client.innerApiCalls.getSource = stubSimpleCall(expectedResponse);
      const [response] = await client.getSource(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSource without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Source()
      );
      client.innerApiCalls.getSource =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSource(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.ISource | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSource with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getSource = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getSource(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSource with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GetSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GetSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getSource(request), expectedError);
    });
  });

  describe('setFindingState', () => {
    it('invokes setFindingState without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SetFindingStateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.SetFindingStateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Finding()
      );
      client.innerApiCalls.setFindingState = stubSimpleCall(expectedResponse);
      const [response] = await client.setFindingState(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setFindingState as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setFindingState as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setFindingState without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SetFindingStateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.SetFindingStateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Finding()
      );
      client.innerApiCalls.setFindingState =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setFindingState(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IFinding | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setFindingState as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setFindingState as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setFindingState with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SetFindingStateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.SetFindingStateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.setFindingState = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.setFindingState(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.setFindingState as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setFindingState as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setFindingState with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SetFindingStateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.SetFindingStateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.setFindingState(request), expectedError);
    });
  });

  describe('setMute', () => {
    it('invokes setMute without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SetMuteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.SetMuteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Finding()
      );
      client.innerApiCalls.setMute = stubSimpleCall(expectedResponse);
      const [response] = await client.setMute(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.setMute as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setMute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setMute without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SetMuteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.SetMuteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Finding()
      );
      client.innerApiCalls.setMute =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setMute(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IFinding | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.setMute as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setMute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setMute with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SetMuteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.SetMuteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.setMute = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.setMute(request), expectedError);
      const actualRequest = (client.innerApiCalls.setMute as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setMute as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setMute with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SetMuteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.SetMuteRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.setMute(request), expectedError);
    });
  });

  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.setIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.setIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.setIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.setIamPolicy(request), expectedError);
    });
  });

  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.testIamPermissions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.ITestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.testIamPermissions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.testIamPermissions(request), expectedError);
    });
  });

  describe('updateExternalSystem', () => {
    it('invokes updateExternalSystem without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateExternalSystemRequest()
      );
      request.externalSystem ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateExternalSystemRequest',
        ['externalSystem', 'name']
      );
      request.externalSystem.name = defaultValue1;
      const expectedHeaderRequestParams = `external_system.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ExternalSystem()
      );
      client.innerApiCalls.updateExternalSystem =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateExternalSystem(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateExternalSystem as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateExternalSystem as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateExternalSystem without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateExternalSystemRequest()
      );
      request.externalSystem ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateExternalSystemRequest',
        ['externalSystem', 'name']
      );
      request.externalSystem.name = defaultValue1;
      const expectedHeaderRequestParams = `external_system.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ExternalSystem()
      );
      client.innerApiCalls.updateExternalSystem =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateExternalSystem(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IExternalSystem | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateExternalSystem as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateExternalSystem as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateExternalSystem with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateExternalSystemRequest()
      );
      request.externalSystem ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateExternalSystemRequest',
        ['externalSystem', 'name']
      );
      request.externalSystem.name = defaultValue1;
      const expectedHeaderRequestParams = `external_system.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateExternalSystem = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateExternalSystem(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateExternalSystem as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateExternalSystem as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateExternalSystem with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateExternalSystemRequest()
      );
      request.externalSystem ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateExternalSystemRequest',
        ['externalSystem', 'name']
      );
      request.externalSystem.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateExternalSystem(request), expectedError);
    });
  });

  describe('updateFinding', () => {
    it('invokes updateFinding without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateFindingRequest()
      );
      request.finding ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateFindingRequest',
        ['finding', 'name']
      );
      request.finding.name = defaultValue1;
      const expectedHeaderRequestParams = `finding.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Finding()
      );
      client.innerApiCalls.updateFinding = stubSimpleCall(expectedResponse);
      const [response] = await client.updateFinding(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateFinding as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateFinding as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateFinding without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateFindingRequest()
      );
      request.finding ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateFindingRequest',
        ['finding', 'name']
      );
      request.finding.name = defaultValue1;
      const expectedHeaderRequestParams = `finding.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Finding()
      );
      client.innerApiCalls.updateFinding =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateFinding(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IFinding | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateFinding as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateFinding as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateFinding with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateFindingRequest()
      );
      request.finding ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateFindingRequest',
        ['finding', 'name']
      );
      request.finding.name = defaultValue1;
      const expectedHeaderRequestParams = `finding.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateFinding = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateFinding(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateFinding as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateFinding as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateFinding with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateFindingRequest()
      );
      request.finding ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateFindingRequest',
        ['finding', 'name']
      );
      request.finding.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateFinding(request), expectedError);
    });
  });

  describe('updateMuteConfig', () => {
    it('invokes updateMuteConfig without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateMuteConfigRequest()
      );
      request.muteConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateMuteConfigRequest',
        ['muteConfig', 'name']
      );
      request.muteConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `mute_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.MuteConfig()
      );
      client.innerApiCalls.updateMuteConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.updateMuteConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMuteConfig without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateMuteConfigRequest()
      );
      request.muteConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateMuteConfigRequest',
        ['muteConfig', 'name']
      );
      request.muteConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `mute_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.MuteConfig()
      );
      client.innerApiCalls.updateMuteConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateMuteConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IMuteConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMuteConfig with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateMuteConfigRequest()
      );
      request.muteConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateMuteConfigRequest',
        ['muteConfig', 'name']
      );
      request.muteConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `mute_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateMuteConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateMuteConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateMuteConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMuteConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMuteConfig with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateMuteConfigRequest()
      );
      request.muteConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateMuteConfigRequest',
        ['muteConfig', 'name']
      );
      request.muteConfig.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateMuteConfig(request), expectedError);
    });
  });

  describe('updateNotificationConfig', () => {
    it('invokes updateNotificationConfig without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateNotificationConfigRequest()
      );
      request.notificationConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateNotificationConfigRequest',
        ['notificationConfig', 'name']
      );
      request.notificationConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `notification_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.NotificationConfig()
      );
      client.innerApiCalls.updateNotificationConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateNotificationConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNotificationConfig without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateNotificationConfigRequest()
      );
      request.notificationConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateNotificationConfigRequest',
        ['notificationConfig', 'name']
      );
      request.notificationConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `notification_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.NotificationConfig()
      );
      client.innerApiCalls.updateNotificationConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateNotificationConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.INotificationConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNotificationConfig with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateNotificationConfigRequest()
      );
      request.notificationConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateNotificationConfigRequest',
        ['notificationConfig', 'name']
      );
      request.notificationConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `notification_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateNotificationConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateNotificationConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateNotificationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNotificationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNotificationConfig with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateNotificationConfigRequest()
      );
      request.notificationConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateNotificationConfigRequest',
        ['notificationConfig', 'name']
      );
      request.notificationConfig.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateNotificationConfig(request),
        expectedError
      );
    });
  });

  describe('updateOrganizationSettings', () => {
    it('invokes updateOrganizationSettings without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateOrganizationSettingsRequest()
      );
      request.organizationSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateOrganizationSettingsRequest',
        ['organizationSettings', 'name']
      );
      request.organizationSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `organization_settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.OrganizationSettings()
      );
      client.innerApiCalls.updateOrganizationSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateOrganizationSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateOrganizationSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateOrganizationSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateOrganizationSettings without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateOrganizationSettingsRequest()
      );
      request.organizationSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateOrganizationSettingsRequest',
        ['organizationSettings', 'name']
      );
      request.organizationSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `organization_settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.OrganizationSettings()
      );
      client.innerApiCalls.updateOrganizationSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateOrganizationSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IOrganizationSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateOrganizationSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateOrganizationSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateOrganizationSettings with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateOrganizationSettingsRequest()
      );
      request.organizationSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateOrganizationSettingsRequest',
        ['organizationSettings', 'name']
      );
      request.organizationSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `organization_settings.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateOrganizationSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateOrganizationSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateOrganizationSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateOrganizationSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateOrganizationSettings with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateOrganizationSettingsRequest()
      );
      request.organizationSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateOrganizationSettingsRequest',
        ['organizationSettings', 'name']
      );
      request.organizationSettings.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateOrganizationSettings(request),
        expectedError
      );
    });
  });

  describe('updateSource', () => {
    it('invokes updateSource without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateSourceRequest()
      );
      request.source ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateSourceRequest',
        ['source', 'name']
      );
      request.source.name = defaultValue1;
      const expectedHeaderRequestParams = `source.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Source()
      );
      client.innerApiCalls.updateSource = stubSimpleCall(expectedResponse);
      const [response] = await client.updateSource(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSource without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateSourceRequest()
      );
      request.source ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateSourceRequest',
        ['source', 'name']
      );
      request.source.name = defaultValue1;
      const expectedHeaderRequestParams = `source.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.Source()
      );
      client.innerApiCalls.updateSource =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateSource(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.ISource | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSource with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateSourceRequest()
      );
      request.source ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateSourceRequest',
        ['source', 'name']
      );
      request.source.name = defaultValue1;
      const expectedHeaderRequestParams = `source.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSource = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateSource(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSource with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateSourceRequest()
      );
      request.source ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateSourceRequest',
        ['source', 'name']
      );
      request.source.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateSource(request), expectedError);
    });
  });

  describe('updateSecurityMarks', () => {
    it('invokes updateSecurityMarks without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateSecurityMarksRequest()
      );
      request.securityMarks ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateSecurityMarksRequest',
        ['securityMarks', 'name']
      );
      request.securityMarks.name = defaultValue1;
      const expectedHeaderRequestParams = `security_marks.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SecurityMarks()
      );
      client.innerApiCalls.updateSecurityMarks =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateSecurityMarks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSecurityMarks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSecurityMarks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSecurityMarks without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateSecurityMarksRequest()
      );
      request.securityMarks ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateSecurityMarksRequest',
        ['securityMarks', 'name']
      );
      request.securityMarks.name = defaultValue1;
      const expectedHeaderRequestParams = `security_marks.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.SecurityMarks()
      );
      client.innerApiCalls.updateSecurityMarks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateSecurityMarks(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.ISecurityMarks | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSecurityMarks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSecurityMarks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSecurityMarks with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateSecurityMarksRequest()
      );
      request.securityMarks ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateSecurityMarksRequest',
        ['securityMarks', 'name']
      );
      request.securityMarks.name = defaultValue1;
      const expectedHeaderRequestParams = `security_marks.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSecurityMarks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateSecurityMarks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateSecurityMarks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSecurityMarks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSecurityMarks with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateSecurityMarksRequest()
      );
      request.securityMarks ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateSecurityMarksRequest',
        ['securityMarks', 'name']
      );
      request.securityMarks.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateSecurityMarks(request), expectedError);
    });
  });

  describe('createBigQueryExport', () => {
    it('invokes createBigQueryExport without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateBigQueryExportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BigQueryExport()
      );
      client.innerApiCalls.createBigQueryExport =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createBigQueryExport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBigQueryExport without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateBigQueryExportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BigQueryExport()
      );
      client.innerApiCalls.createBigQueryExport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createBigQueryExport(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IBigQueryExport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBigQueryExport with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateBigQueryExportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBigQueryExport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createBigQueryExport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBigQueryExport with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.CreateBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.CreateBigQueryExportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createBigQueryExport(request), expectedError);
    });
  });

  describe('deleteBigQueryExport', () => {
    it('invokes deleteBigQueryExport without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteBigQueryExportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteBigQueryExport =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteBigQueryExport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBigQueryExport without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteBigQueryExportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteBigQueryExport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteBigQueryExport(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBigQueryExport with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteBigQueryExportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBigQueryExport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteBigQueryExport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBigQueryExport with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.DeleteBigQueryExportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.DeleteBigQueryExportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteBigQueryExport(request), expectedError);
    });
  });

  describe('updateBigQueryExport', () => {
    it('invokes updateBigQueryExport without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateBigQueryExportRequest()
      );
      request.bigQueryExport ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateBigQueryExportRequest',
        ['bigQueryExport', 'name']
      );
      request.bigQueryExport.name = defaultValue1;
      const expectedHeaderRequestParams = `big_query_export.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BigQueryExport()
      );
      client.innerApiCalls.updateBigQueryExport =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateBigQueryExport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBigQueryExport without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateBigQueryExportRequest()
      );
      request.bigQueryExport ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateBigQueryExportRequest',
        ['bigQueryExport', 'name']
      );
      request.bigQueryExport.name = defaultValue1;
      const expectedHeaderRequestParams = `big_query_export.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BigQueryExport()
      );
      client.innerApiCalls.updateBigQueryExport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateBigQueryExport(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IBigQueryExport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBigQueryExport with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateBigQueryExportRequest()
      );
      request.bigQueryExport ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateBigQueryExportRequest',
        ['bigQueryExport', 'name']
      );
      request.bigQueryExport.name = defaultValue1;
      const expectedHeaderRequestParams = `big_query_export.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBigQueryExport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateBigQueryExport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBigQueryExport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBigQueryExport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBigQueryExport with closed client', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.UpdateBigQueryExportRequest()
      );
      request.bigQueryExport ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.UpdateBigQueryExportRequest',
        ['bigQueryExport', 'name']
      );
      request.bigQueryExport.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateBigQueryExport(request), expectedError);
    });
  });

  describe('bulkMuteFindings', () => {
    it('invokes bulkMuteFindings without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BulkMuteFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.BulkMuteFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkMuteFindings =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.bulkMuteFindings(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkMuteFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkMuteFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkMuteFindings without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BulkMuteFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.BulkMuteFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.bulkMuteFindings =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.bulkMuteFindings(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.securitycenter.v1.IBulkMuteFindingsResponse,
              protos.google.protobuf.IEmpty
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.securitycenter.v1.IBulkMuteFindingsResponse,
        protos.google.protobuf.IEmpty
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.bulkMuteFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkMuteFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkMuteFindings with call error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BulkMuteFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.BulkMuteFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkMuteFindings = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.bulkMuteFindings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.bulkMuteFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkMuteFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes bulkMuteFindings with LRO error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.BulkMuteFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.BulkMuteFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.bulkMuteFindings = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.bulkMuteFindings(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.bulkMuteFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.bulkMuteFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBulkMuteFindingsProgress without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkBulkMuteFindingsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBulkMuteFindingsProgress with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBulkMuteFindingsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('runAssetDiscovery', () => {
    it('invokes runAssetDiscovery without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.RunAssetDiscoveryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.RunAssetDiscoveryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.runAssetDiscovery =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.runAssetDiscovery(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runAssetDiscovery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runAssetDiscovery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runAssetDiscovery without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.RunAssetDiscoveryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.RunAssetDiscoveryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.runAssetDiscovery =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.runAssetDiscovery(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.securitycenter.v1.IRunAssetDiscoveryResponse,
              protos.google.protobuf.IEmpty
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.securitycenter.v1.IRunAssetDiscoveryResponse,
        protos.google.protobuf.IEmpty
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runAssetDiscovery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runAssetDiscovery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runAssetDiscovery with call error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.RunAssetDiscoveryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.RunAssetDiscoveryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.runAssetDiscovery = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.runAssetDiscovery(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.runAssetDiscovery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runAssetDiscovery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runAssetDiscovery with LRO error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.RunAssetDiscoveryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.RunAssetDiscoveryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.runAssetDiscovery = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.runAssetDiscovery(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.runAssetDiscovery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runAssetDiscovery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRunAssetDiscoveryProgress without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRunAssetDiscoveryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRunAssetDiscoveryProgress with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkRunAssetDiscoveryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('groupAssets', () => {
    it('invokes groupAssets without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
      ];
      client.innerApiCalls.groupAssets = stubSimpleCall(expectedResponse);
      const [response] = await client.groupAssets(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.groupAssets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.groupAssets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes groupAssets without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
      ];
      client.innerApiCalls.groupAssets =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.groupAssets(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IGroupResult[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.groupAssets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.groupAssets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes groupAssets with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.groupAssets = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.groupAssets(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.groupAssets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.groupAssets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes groupAssetsStream without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
      ];
      client.descriptors.page.groupAssets.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.groupAssetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.GroupResult[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.GroupResult) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.groupAssets.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.groupAssets, request)
      );
      assert(
        (client.descriptors.page.groupAssets.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes groupAssetsStream with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.groupAssets.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.groupAssetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.GroupResult[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.GroupResult) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.groupAssets.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.groupAssets, request)
      );
      assert(
        (client.descriptors.page.groupAssets.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with groupAssets without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
      ];
      client.descriptors.page.groupAssets.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycenter.v1.IGroupResult[] =
        [];
      const iterable = client.groupAssetsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.groupAssets.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.groupAssets.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with groupAssets with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.groupAssets.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.groupAssetsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycenter.v1.IGroupResult[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.groupAssets.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.groupAssets.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('groupFindings', () => {
    it('invokes groupFindings without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
      ];
      client.innerApiCalls.groupFindings = stubSimpleCall(expectedResponse);
      const [response] = await client.groupFindings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.groupFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.groupFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes groupFindings without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
      ];
      client.innerApiCalls.groupFindings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.groupFindings(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IGroupResult[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.groupFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.groupFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes groupFindings with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.groupFindings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.groupFindings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.groupFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.groupFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes groupFindingsStream without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
      ];
      client.descriptors.page.groupFindings.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.groupFindingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.GroupResult[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.GroupResult) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.groupFindings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.groupFindings, request)
      );
      assert(
        (client.descriptors.page.groupFindings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes groupFindingsStream with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.groupFindings.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.groupFindingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.GroupResult[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.GroupResult) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.groupFindings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.groupFindings, request)
      );
      assert(
        (client.descriptors.page.groupFindings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with groupFindings without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.GroupResult()
        ),
      ];
      client.descriptors.page.groupFindings.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycenter.v1.IGroupResult[] =
        [];
      const iterable = client.groupFindingsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.groupFindings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.groupFindings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with groupFindings with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.GroupFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.GroupFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.groupFindings.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.groupFindingsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycenter.v1.IGroupResult[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.groupFindings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.groupFindings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAssets', () => {
    it('invokes listAssets without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
      ];
      client.innerApiCalls.listAssets = stubSimpleCall(expectedResponse);
      const [response] = await client.listAssets(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAssets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAssets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAssets without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
      ];
      client.innerApiCalls.listAssets =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAssets(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycenter.v1.ListAssetsResponse.IListAssetsResult[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAssets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAssets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAssets with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAssets = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAssets(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAssets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAssets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAssetsStream without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
      ];
      client.descriptors.page.listAssets.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAssetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAssets.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAssets, request)
      );
      assert(
        (client.descriptors.page.listAssets.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAssetsStream with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAssets.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listAssetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAssets.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAssets, request)
      );
      assert(
        (client.descriptors.page.listAssets.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAssets without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListAssetsResponse.ListAssetsResult()
        ),
      ];
      client.descriptors.page.listAssets.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycenter.v1.ListAssetsResponse.IListAssetsResult[] =
        [];
      const iterable = client.listAssetsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listAssets.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAssets.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAssets with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListAssetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListAssetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAssets.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listAssetsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycenter.v1.ListAssetsResponse.IListAssetsResult[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listAssets.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAssets.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listFindings', () => {
    it('invokes listFindings without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
      ];
      client.innerApiCalls.listFindings = stubSimpleCall(expectedResponse);
      const [response] = await client.listFindings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFindings without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
      ];
      client.innerApiCalls.listFindings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listFindings(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycenter.v1.ListFindingsResponse.IListFindingsResult[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFindings with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listFindings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listFindings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listFindings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFindings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFindingsStream without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
      ];
      client.descriptors.page.listFindings.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listFindingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listFindings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFindings, request)
      );
      assert(
        (client.descriptors.page.listFindings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listFindingsStream with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listFindings.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listFindingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listFindings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFindings, request)
      );
      assert(
        (client.descriptors.page.listFindings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listFindings without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.ListFindingsResponse.ListFindingsResult()
        ),
      ];
      client.descriptors.page.listFindings.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycenter.v1.ListFindingsResponse.IListFindingsResult[] =
        [];
      const iterable = client.listFindingsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listFindings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listFindings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listFindings with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListFindingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListFindingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listFindings.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listFindingsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycenter.v1.ListFindingsResponse.IListFindingsResult[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listFindings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listFindings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listMuteConfigs', () => {
    it('invokes listMuteConfigs without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListMuteConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListMuteConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
      ];
      client.innerApiCalls.listMuteConfigs = stubSimpleCall(expectedResponse);
      const [response] = await client.listMuteConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMuteConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMuteConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMuteConfigs without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListMuteConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListMuteConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
      ];
      client.innerApiCalls.listMuteConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listMuteConfigs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.IMuteConfig[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMuteConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMuteConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMuteConfigs with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListMuteConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListMuteConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listMuteConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listMuteConfigs(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listMuteConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMuteConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMuteConfigsStream without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListMuteConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListMuteConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
      ];
      client.descriptors.page.listMuteConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listMuteConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.MuteConfig[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.MuteConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listMuteConfigs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMuteConfigs, request)
      );
      assert(
        (client.descriptors.page.listMuteConfigs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listMuteConfigsStream with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListMuteConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListMuteConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMuteConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listMuteConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.MuteConfig[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.MuteConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listMuteConfigs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMuteConfigs, request)
      );
      assert(
        (client.descriptors.page.listMuteConfigs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMuteConfigs without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListMuteConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListMuteConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.MuteConfig()
        ),
      ];
      client.descriptors.page.listMuteConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycenter.v1.IMuteConfig[] = [];
      const iterable = client.listMuteConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMuteConfigs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMuteConfigs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMuteConfigs with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListMuteConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListMuteConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMuteConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listMuteConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycenter.v1.IMuteConfig[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMuteConfigs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMuteConfigs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listNotificationConfigs', () => {
    it('invokes listNotificationConfigs without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListNotificationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListNotificationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
      ];
      client.innerApiCalls.listNotificationConfigs =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listNotificationConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNotificationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNotificationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNotificationConfigs without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListNotificationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListNotificationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
      ];
      client.innerApiCalls.listNotificationConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listNotificationConfigs(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycenter.v1.INotificationConfig[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNotificationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNotificationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNotificationConfigs with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListNotificationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListNotificationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listNotificationConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listNotificationConfigs(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listNotificationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNotificationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNotificationConfigsStream without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListNotificationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListNotificationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
      ];
      client.descriptors.page.listNotificationConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listNotificationConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.NotificationConfig[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycenter.v1.NotificationConfig
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listNotificationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listNotificationConfigs, request)
      );
      assert(
        (
          client.descriptors.page.listNotificationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listNotificationConfigsStream with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListNotificationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListNotificationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNotificationConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listNotificationConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.NotificationConfig[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycenter.v1.NotificationConfig
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listNotificationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listNotificationConfigs, request)
      );
      assert(
        (
          client.descriptors.page.listNotificationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNotificationConfigs without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListNotificationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListNotificationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.NotificationConfig()
        ),
      ];
      client.descriptors.page.listNotificationConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycenter.v1.INotificationConfig[] =
        [];
      const iterable = client.listNotificationConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNotificationConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listNotificationConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNotificationConfigs with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListNotificationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListNotificationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNotificationConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listNotificationConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycenter.v1.INotificationConfig[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNotificationConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listNotificationConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listSources', () => {
    it('invokes listSources without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
      ];
      client.innerApiCalls.listSources = stubSimpleCall(expectedResponse);
      const [response] = await client.listSources(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSources without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
      ];
      client.innerApiCalls.listSources =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSources(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycenter.v1.ISource[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSources with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listSources = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSources(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSourcesStream without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
      ];
      client.descriptors.page.listSources.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSourcesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.Source[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.Source) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSources.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSources, request)
      );
      assert(
        (client.descriptors.page.listSources.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listSourcesStream with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSources.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listSourcesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.Source[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.Source) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSources.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSources, request)
      );
      assert(
        (client.descriptors.page.listSources.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSources without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.Source()
        ),
      ];
      client.descriptors.page.listSources.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycenter.v1.ISource[] = [];
      const iterable = client.listSourcesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listSources.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSources.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSources with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSources.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listSourcesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycenter.v1.ISource[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listSources.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSources.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listBigQueryExports', () => {
    it('invokes listBigQueryExports without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListBigQueryExportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListBigQueryExportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
      ];
      client.innerApiCalls.listBigQueryExports =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listBigQueryExports(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBigQueryExports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBigQueryExports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBigQueryExports without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListBigQueryExportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListBigQueryExportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
      ];
      client.innerApiCalls.listBigQueryExports =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listBigQueryExports(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycenter.v1.IBigQueryExport[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBigQueryExports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBigQueryExports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBigQueryExports with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListBigQueryExportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListBigQueryExportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listBigQueryExports = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listBigQueryExports(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listBigQueryExports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBigQueryExports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBigQueryExportsStream without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListBigQueryExportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListBigQueryExportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
      ];
      client.descriptors.page.listBigQueryExports.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listBigQueryExportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.BigQueryExport[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.BigQueryExport) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listBigQueryExports.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBigQueryExports, request)
      );
      assert(
        (client.descriptors.page.listBigQueryExports.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listBigQueryExportsStream with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListBigQueryExportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListBigQueryExportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBigQueryExports.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listBigQueryExportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycenter.v1.BigQueryExport[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.securitycenter.v1.BigQueryExport) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listBigQueryExports.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBigQueryExports, request)
      );
      assert(
        (client.descriptors.page.listBigQueryExports.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBigQueryExports without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListBigQueryExportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListBigQueryExportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycenter.v1.BigQueryExport()
        ),
      ];
      client.descriptors.page.listBigQueryExports.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycenter.v1.IBigQueryExport[] =
        [];
      const iterable = client.listBigQueryExportsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listBigQueryExports.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBigQueryExports.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBigQueryExports with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycenter.v1.ListBigQueryExportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycenter.v1.ListBigQueryExportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBigQueryExports.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listBigQueryExportsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycenter.v1.IBigQueryExport[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listBigQueryExports.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBigQueryExports.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('folderAsset', () => {
      const fakePath = '/rendered/path/folderAsset';
      const expectedParameters = {
        folder: 'folderValue',
        asset: 'assetValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderAssetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderAssetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderAssetPath', () => {
        const result = client.folderAssetPath('folderValue', 'assetValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.folderAssetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderAssetName', () => {
        const result = client.matchFolderFromFolderAssetName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (client.pathTemplates.folderAssetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromFolderAssetName', () => {
        const result = client.matchAssetFromFolderAssetName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (client.pathTemplates.folderAssetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderAssetSecurityMarks', () => {
      const fakePath = '/rendered/path/folderAssetSecurityMarks';
      const expectedParameters = {
        folder: 'folderValue',
        asset: 'assetValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderAssetSecurityMarksPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderAssetSecurityMarksPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderAssetSecurityMarksPath', () => {
        const result = client.folderAssetSecurityMarksPath(
          'folderValue',
          'assetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderAssetSecurityMarksPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderAssetSecurityMarksName', () => {
        const result =
          client.matchFolderFromFolderAssetSecurityMarksName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderAssetSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromFolderAssetSecurityMarksName', () => {
        const result =
          client.matchAssetFromFolderAssetSecurityMarksName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (
            client.pathTemplates.folderAssetSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderExport', () => {
      const fakePath = '/rendered/path/folderExport';
      const expectedParameters = {
        folder: 'folderValue',
        export: 'exportValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderExportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderExportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderExportPath', () => {
        const result = client.folderExportPath('folderValue', 'exportValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.folderExportPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderExportName', () => {
        const result = client.matchFolderFromFolderExportName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (client.pathTemplates.folderExportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExportFromFolderExportName', () => {
        const result = client.matchExportFromFolderExportName(fakePath);
        assert.strictEqual(result, 'exportValue');
        assert(
          (client.pathTemplates.folderExportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderMuteConfig', () => {
      const fakePath = '/rendered/path/folderMuteConfig';
      const expectedParameters = {
        folder: 'folderValue',
        mute_config: 'muteConfigValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderMuteConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderMuteConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderMuteConfigPath', () => {
        const result = client.folderMuteConfigPath(
          'folderValue',
          'muteConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderMuteConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderMuteConfigName', () => {
        const result = client.matchFolderFromFolderMuteConfigName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (client.pathTemplates.folderMuteConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMuteConfigFromFolderMuteConfigName', () => {
        const result = client.matchMuteConfigFromFolderMuteConfigName(fakePath);
        assert.strictEqual(result, 'muteConfigValue');
        assert(
          (client.pathTemplates.folderMuteConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderNotificationConfig', () => {
      const fakePath = '/rendered/path/folderNotificationConfig';
      const expectedParameters = {
        folder: 'folderValue',
        notification_config: 'notificationConfigValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderNotificationConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderNotificationConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderNotificationConfigPath', () => {
        const result = client.folderNotificationConfigPath(
          'folderValue',
          'notificationConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderNotificationConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderNotificationConfigName', () => {
        const result =
          client.matchFolderFromFolderNotificationConfigName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderNotificationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNotificationConfigFromFolderNotificationConfigName', () => {
        const result =
          client.matchNotificationConfigFromFolderNotificationConfigName(
            fakePath
          );
        assert.strictEqual(result, 'notificationConfigValue');
        assert(
          (
            client.pathTemplates.folderNotificationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderSource', () => {
      const fakePath = '/rendered/path/folderSource';
      const expectedParameters = {
        folder: 'folderValue',
        source: 'sourceValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderSourcePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderSourcePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderSourcePath', () => {
        const result = client.folderSourcePath('folderValue', 'sourceValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.folderSourcePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderSourceName', () => {
        const result = client.matchFolderFromFolderSourceName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (client.pathTemplates.folderSourcePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromFolderSourceName', () => {
        const result = client.matchSourceFromFolderSourceName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (client.pathTemplates.folderSourcePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderSourceFinding', () => {
      const fakePath = '/rendered/path/folderSourceFinding';
      const expectedParameters = {
        folder: 'folderValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderSourceFindingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderSourceFindingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderSourceFindingPath', () => {
        const result = client.folderSourceFindingPath(
          'folderValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderSourceFindingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderSourceFindingName', () => {
        const result = client.matchFolderFromFolderSourceFindingName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromFolderSourceFindingName', () => {
        const result = client.matchSourceFromFolderSourceFindingName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromFolderSourceFindingName', () => {
        const result = client.matchFindingFromFolderSourceFindingName(fakePath);
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderSourceFindingExternalsystem', () => {
      const fakePath = '/rendered/path/folderSourceFindingExternalsystem';
      const expectedParameters = {
        folder: 'folderValue',
        source: 'sourceValue',
        finding: 'findingValue',
        externalsystem: 'externalsystemValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderSourceFindingExternalsystemPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.folderSourceFindingExternalsystemPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('folderSourceFindingExternalsystemPath', () => {
        const result = client.folderSourceFindingExternalsystemPath(
          'folderValue',
          'sourceValue',
          'findingValue',
          'externalsystemValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderSourceFindingExternalsystemPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderSourceFindingExternalsystemName', () => {
        const result =
          client.matchFolderFromFolderSourceFindingExternalsystemName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromFolderSourceFindingExternalsystemName', () => {
        const result =
          client.matchSourceFromFolderSourceFindingExternalsystemName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromFolderSourceFindingExternalsystemName', () => {
        const result =
          client.matchFindingFromFolderSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExternalsystemFromFolderSourceFindingExternalsystemName', () => {
        const result =
          client.matchExternalsystemFromFolderSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'externalsystemValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderSourceFindingSecurityMarks', () => {
      const fakePath = '/rendered/path/folderSourceFindingSecurityMarks';
      const expectedParameters = {
        folder: 'folderValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderSourceFindingSecurityMarksPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.folderSourceFindingSecurityMarksPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('folderSourceFindingSecurityMarksPath', () => {
        const result = client.folderSourceFindingSecurityMarksPath(
          'folderValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderSourceFindingSecurityMarksPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderSourceFindingSecurityMarksName', () => {
        const result =
          client.matchFolderFromFolderSourceFindingSecurityMarksName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromFolderSourceFindingSecurityMarksName', () => {
        const result =
          client.matchSourceFromFolderSourceFindingSecurityMarksName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromFolderSourceFindingSecurityMarksName', () => {
        const result =
          client.matchFindingFromFolderSourceFindingSecurityMarksName(fakePath);
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organization', () => {
      const fakePath = '/rendered/path/organization';
      const expectedParameters = {
        organization: 'organizationValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationPath', () => {
        const result = client.organizationPath('organizationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.organizationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationName', () => {
        const result = client.matchOrganizationFromOrganizationName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (client.pathTemplates.organizationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationAsset', () => {
      const fakePath = '/rendered/path/organizationAsset';
      const expectedParameters = {
        organization: 'organizationValue',
        asset: 'assetValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationAssetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationAssetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationAssetPath', () => {
        const result = client.organizationAssetPath(
          'organizationValue',
          'assetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationAssetPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationAssetName', () => {
        const result =
          client.matchOrganizationFromOrganizationAssetName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationAssetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromOrganizationAssetName', () => {
        const result = client.matchAssetFromOrganizationAssetName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (
            client.pathTemplates.organizationAssetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationAssetSecurityMarks', () => {
      const fakePath = '/rendered/path/organizationAssetSecurityMarks';
      const expectedParameters = {
        organization: 'organizationValue',
        asset: 'assetValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationAssetSecurityMarksPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationAssetSecurityMarksPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationAssetSecurityMarksPath', () => {
        const result = client.organizationAssetSecurityMarksPath(
          'organizationValue',
          'assetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationAssetSecurityMarksPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationAssetSecurityMarksName', () => {
        const result =
          client.matchOrganizationFromOrganizationAssetSecurityMarksName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationAssetSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromOrganizationAssetSecurityMarksName', () => {
        const result =
          client.matchAssetFromOrganizationAssetSecurityMarksName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (
            client.pathTemplates.organizationAssetSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationExport', () => {
      const fakePath = '/rendered/path/organizationExport';
      const expectedParameters = {
        organization: 'organizationValue',
        export: 'exportValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationExportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationExportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationExportPath', () => {
        const result = client.organizationExportPath(
          'organizationValue',
          'exportValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationExportPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationExportName', () => {
        const result =
          client.matchOrganizationFromOrganizationExportName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationExportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExportFromOrganizationExportName', () => {
        const result = client.matchExportFromOrganizationExportName(fakePath);
        assert.strictEqual(result, 'exportValue');
        assert(
          (
            client.pathTemplates.organizationExportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationMuteConfig', () => {
      const fakePath = '/rendered/path/organizationMuteConfig';
      const expectedParameters = {
        organization: 'organizationValue',
        mute_config: 'muteConfigValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationMuteConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationMuteConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationMuteConfigPath', () => {
        const result = client.organizationMuteConfigPath(
          'organizationValue',
          'muteConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationMuteConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationMuteConfigName', () => {
        const result =
          client.matchOrganizationFromOrganizationMuteConfigName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationMuteConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMuteConfigFromOrganizationMuteConfigName', () => {
        const result =
          client.matchMuteConfigFromOrganizationMuteConfigName(fakePath);
        assert.strictEqual(result, 'muteConfigValue');
        assert(
          (
            client.pathTemplates.organizationMuteConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationNotificationConfig', () => {
      const fakePath = '/rendered/path/organizationNotificationConfig';
      const expectedParameters = {
        organization: 'organizationValue',
        notification_config: 'notificationConfigValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationNotificationConfigPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationNotificationConfigPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationNotificationConfigPath', () => {
        const result = client.organizationNotificationConfigPath(
          'organizationValue',
          'notificationConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationNotificationConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationNotificationConfigName', () => {
        const result =
          client.matchOrganizationFromOrganizationNotificationConfigName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationNotificationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNotificationConfigFromOrganizationNotificationConfigName', () => {
        const result =
          client.matchNotificationConfigFromOrganizationNotificationConfigName(
            fakePath
          );
        assert.strictEqual(result, 'notificationConfigValue');
        assert(
          (
            client.pathTemplates.organizationNotificationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationSettings', () => {
      const fakePath = '/rendered/path/organizationSettings';
      const expectedParameters = {
        organization: 'organizationValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationSettingsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationSettingsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationSettingsPath', () => {
        const result = client.organizationSettingsPath('organizationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationSettingsPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationSettingsName', () => {
        const result =
          client.matchOrganizationFromOrganizationSettingsName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationSettingsPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationSource', () => {
      const fakePath = '/rendered/path/organizationSource';
      const expectedParameters = {
        organization: 'organizationValue',
        source: 'sourceValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationSourcePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationSourcePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationSourcePath', () => {
        const result = client.organizationSourcePath(
          'organizationValue',
          'sourceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationSourcePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationSourceName', () => {
        const result =
          client.matchOrganizationFromOrganizationSourceName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationSourcePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromOrganizationSourceName', () => {
        const result = client.matchSourceFromOrganizationSourceName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.organizationSourcePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationSourceFinding', () => {
      const fakePath = '/rendered/path/organizationSourceFinding';
      const expectedParameters = {
        organization: 'organizationValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationSourceFindingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationSourceFindingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationSourceFindingPath', () => {
        const result = client.organizationSourceFindingPath(
          'organizationValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationSourceFindingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationSourceFindingName', () => {
        const result =
          client.matchOrganizationFromOrganizationSourceFindingName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromOrganizationSourceFindingName', () => {
        const result =
          client.matchSourceFromOrganizationSourceFindingName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.organizationSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromOrganizationSourceFindingName', () => {
        const result =
          client.matchFindingFromOrganizationSourceFindingName(fakePath);
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.organizationSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationSourceFindingExternalsystem', () => {
      const fakePath = '/rendered/path/organizationSourceFindingExternalsystem';
      const expectedParameters = {
        organization: 'organizationValue',
        source: 'sourceValue',
        finding: 'findingValue',
        externalsystem: 'externalsystemValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationSourceFindingExternalsystemPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationSourceFindingExternalsystemPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationSourceFindingExternalsystemPath', () => {
        const result = client.organizationSourceFindingExternalsystemPath(
          'organizationValue',
          'sourceValue',
          'findingValue',
          'externalsystemValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingExternalsystemPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationSourceFindingExternalsystemName', () => {
        const result =
          client.matchOrganizationFromOrganizationSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromOrganizationSourceFindingExternalsystemName', () => {
        const result =
          client.matchSourceFromOrganizationSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromOrganizationSourceFindingExternalsystemName', () => {
        const result =
          client.matchFindingFromOrganizationSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExternalsystemFromOrganizationSourceFindingExternalsystemName', () => {
        const result =
          client.matchExternalsystemFromOrganizationSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'externalsystemValue');
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationSourceFindingSecurityMarks', () => {
      const fakePath = '/rendered/path/organizationSourceFindingSecurityMarks';
      const expectedParameters = {
        organization: 'organizationValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationSourceFindingSecurityMarksPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationSourceFindingSecurityMarksPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationSourceFindingSecurityMarksPath', () => {
        const result = client.organizationSourceFindingSecurityMarksPath(
          'organizationValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingSecurityMarksPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationSourceFindingSecurityMarksName', () => {
        const result =
          client.matchOrganizationFromOrganizationSourceFindingSecurityMarksName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromOrganizationSourceFindingSecurityMarksName', () => {
        const result =
          client.matchSourceFromOrganizationSourceFindingSecurityMarksName(
            fakePath
          );
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromOrganizationSourceFindingSecurityMarksName', () => {
        const result =
          client.matchFindingFromOrganizationSourceFindingSecurityMarksName(
            fakePath
          );
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates
              .organizationSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectAsset', () => {
      const fakePath = '/rendered/path/projectAsset';
      const expectedParameters = {
        project: 'projectValue',
        asset: 'assetValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectAssetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectAssetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectAssetPath', () => {
        const result = client.projectAssetPath('projectValue', 'assetValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectAssetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectAssetName', () => {
        const result = client.matchProjectFromProjectAssetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectAssetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromProjectAssetName', () => {
        const result = client.matchAssetFromProjectAssetName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (client.pathTemplates.projectAssetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectAssetSecurityMarks', () => {
      const fakePath = '/rendered/path/projectAssetSecurityMarks';
      const expectedParameters = {
        project: 'projectValue',
        asset: 'assetValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectAssetSecurityMarksPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectAssetSecurityMarksPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectAssetSecurityMarksPath', () => {
        const result = client.projectAssetSecurityMarksPath(
          'projectValue',
          'assetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectAssetSecurityMarksPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectAssetSecurityMarksName', () => {
        const result =
          client.matchProjectFromProjectAssetSecurityMarksName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectAssetSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromProjectAssetSecurityMarksName', () => {
        const result =
          client.matchAssetFromProjectAssetSecurityMarksName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (
            client.pathTemplates.projectAssetSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectExport', () => {
      const fakePath = '/rendered/path/projectExport';
      const expectedParameters = {
        project: 'projectValue',
        export: 'exportValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectExportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectExportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectExportPath', () => {
        const result = client.projectExportPath('projectValue', 'exportValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectExportPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectExportName', () => {
        const result = client.matchProjectFromProjectExportName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectExportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExportFromProjectExportName', () => {
        const result = client.matchExportFromProjectExportName(fakePath);
        assert.strictEqual(result, 'exportValue');
        assert(
          (client.pathTemplates.projectExportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectMuteConfig', () => {
      const fakePath = '/rendered/path/projectMuteConfig';
      const expectedParameters = {
        project: 'projectValue',
        mute_config: 'muteConfigValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectMuteConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectMuteConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectMuteConfigPath', () => {
        const result = client.projectMuteConfigPath(
          'projectValue',
          'muteConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectMuteConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectMuteConfigName', () => {
        const result = client.matchProjectFromProjectMuteConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectMuteConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMuteConfigFromProjectMuteConfigName', () => {
        const result =
          client.matchMuteConfigFromProjectMuteConfigName(fakePath);
        assert.strictEqual(result, 'muteConfigValue');
        assert(
          (
            client.pathTemplates.projectMuteConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectNotificationConfig', () => {
      const fakePath = '/rendered/path/projectNotificationConfig';
      const expectedParameters = {
        project: 'projectValue',
        notification_config: 'notificationConfigValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectNotificationConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectNotificationConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectNotificationConfigPath', () => {
        const result = client.projectNotificationConfigPath(
          'projectValue',
          'notificationConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectNotificationConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectNotificationConfigName', () => {
        const result =
          client.matchProjectFromProjectNotificationConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectNotificationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNotificationConfigFromProjectNotificationConfigName', () => {
        const result =
          client.matchNotificationConfigFromProjectNotificationConfigName(
            fakePath
          );
        assert.strictEqual(result, 'notificationConfigValue');
        assert(
          (
            client.pathTemplates.projectNotificationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectSource', () => {
      const fakePath = '/rendered/path/projectSource';
      const expectedParameters = {
        project: 'projectValue',
        source: 'sourceValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectSourcePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectSourcePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectSourcePath', () => {
        const result = client.projectSourcePath('projectValue', 'sourceValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectSourcePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectSourceName', () => {
        const result = client.matchProjectFromProjectSourceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectSourcePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromProjectSourceName', () => {
        const result = client.matchSourceFromProjectSourceName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (client.pathTemplates.projectSourcePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectSourceFinding', () => {
      const fakePath = '/rendered/path/projectSourceFinding';
      const expectedParameters = {
        project: 'projectValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectSourceFindingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectSourceFindingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectSourceFindingPath', () => {
        const result = client.projectSourceFindingPath(
          'projectValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectSourceFindingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectSourceFindingName', () => {
        const result =
          client.matchProjectFromProjectSourceFindingName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromProjectSourceFindingName', () => {
        const result = client.matchSourceFromProjectSourceFindingName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromProjectSourceFindingName', () => {
        const result =
          client.matchFindingFromProjectSourceFindingName(fakePath);
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectSourceFindingExternalsystem', () => {
      const fakePath = '/rendered/path/projectSourceFindingExternalsystem';
      const expectedParameters = {
        project: 'projectValue',
        source: 'sourceValue',
        finding: 'findingValue',
        externalsystem: 'externalsystemValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectSourceFindingExternalsystemPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectSourceFindingExternalsystemPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectSourceFindingExternalsystemPath', () => {
        const result = client.projectSourceFindingExternalsystemPath(
          'projectValue',
          'sourceValue',
          'findingValue',
          'externalsystemValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectSourceFindingExternalsystemPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectSourceFindingExternalsystemName', () => {
        const result =
          client.matchProjectFromProjectSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromProjectSourceFindingExternalsystemName', () => {
        const result =
          client.matchSourceFromProjectSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromProjectSourceFindingExternalsystemName', () => {
        const result =
          client.matchFindingFromProjectSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExternalsystemFromProjectSourceFindingExternalsystemName', () => {
        const result =
          client.matchExternalsystemFromProjectSourceFindingExternalsystemName(
            fakePath
          );
        assert.strictEqual(result, 'externalsystemValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingExternalsystemPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectSourceFindingSecurityMarks', () => {
      const fakePath = '/rendered/path/projectSourceFindingSecurityMarks';
      const expectedParameters = {
        project: 'projectValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client = new securitycenterModule.v1.SecurityCenterClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectSourceFindingSecurityMarksPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectSourceFindingSecurityMarksPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectSourceFindingSecurityMarksPath', () => {
        const result = client.projectSourceFindingSecurityMarksPath(
          'projectValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectSourceFindingSecurityMarksPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectSourceFindingSecurityMarksName', () => {
        const result =
          client.matchProjectFromProjectSourceFindingSecurityMarksName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromProjectSourceFindingSecurityMarksName', () => {
        const result =
          client.matchSourceFromProjectSourceFindingSecurityMarksName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromProjectSourceFindingSecurityMarksName', () => {
        const result =
          client.matchFindingFromProjectSourceFindingSecurityMarksName(
            fakePath
          );
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingSecurityMarksPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
