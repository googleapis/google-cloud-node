// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(location, query) {
  // [START apihub_v1_generated_ApiHub_SearchResources_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the location which will be of the type
   *  `projects/{project_id}/locations/{location_id}`. This field is used to
   *  identify the instance of API-Hub in which resources should be searched.
   */
  // const location = 'abc123'
  /**
   *  Required. The free text search query. This query can contain keywords which
   *  could be related to any detail of the API-Hub resources such display names,
   *  descriptions, attributes etc.
   */
  // const query = 'abc123'
  /**
   *  Optional. An expression that filters the list of search results.
   *  A filter expression consists of a field name, a comparison operator,
   *  and a value for filtering. The value must be a string, a number, or a
   *  boolean. The comparison operator must be `=`. Filters are not case
   *  sensitive.
   *  The following field names are eligible for filtering:
   *     * `resource_type` - The type of resource in the search results.
   *     Must be one of the following: `Api`, `ApiOperation`, `Deployment`,
   *     `Definition`, `Spec` or `Version`. This field can only be specified once
   *     in the filter.
   *  Here are is an example:
   *    * `resource_type = Api` - The resource_type is _Api_.
   */
  // const filter = 'abc123'
  /**
   *  Optional. The maximum number of search results to return. The service may
   *  return fewer than this value. If unspecified at most 10 search results will
   *  be returned. If value is negative then `INVALID_ARGUMENT` error is
   *  returned. The maximum value is 25; values above 25 will be coerced to 25.
   *  While paginating, you can specify a new page size parameter for each page
   *  of search results to be listed.
   */
  // const pageSize = 1234
  /**
   *  Optional. A page token, received from a previous
   *  SearchResources SearchResources 
   *  call. Specify this parameter to retrieve the next page of transactions.
   *  When paginating, you must specify the `page_token` parameter and all the
   *  other parameters except
   *  page_size google.cloud.apihub.v1.SearchResourcesRequest.page_size 
   *  should be specified with the same value which was used in the previous
   *  call. If the other fields are set with a different value than the previous
   *  call then `INVALID_ARGUMENT` error is returned.
   */
  // const pageToken = 'abc123'

  // Imports the Apihub library
  const {ApiHubClient} = require('@google-cloud/apihub').v1;

  // Instantiates a client
  const apihubClient = new ApiHubClient();

  async function callSearchResources() {
    // Construct request
    const request = {
      location,
      query,
    };

    // Run request
    const iterable = apihubClient.searchResourcesAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callSearchResources();
  // [END apihub_v1_generated_ApiHub_SearchResources_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
