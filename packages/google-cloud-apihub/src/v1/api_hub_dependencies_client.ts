// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/api_hub_dependencies_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './api_hub_dependencies_client_config.json';
const version = require('../../../package.json').version;

/**
 *  This service provides methods for various operations related to a
 *  {@link protos.google.cloud.apihub.v1.Dependency|Dependency} in the API hub.
 * @class
 * @memberof v1
 */
export class ApiHubDependenciesClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  apiHubDependenciesStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ApiHubDependenciesClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ApiHubDependenciesClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ApiHubDependenciesClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'apihub.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    // Implicitly enable HTTP transport for the APIs that use REST as transport (e.g. Google Cloud Compute).
    if (!opts) {
      opts = {fallback: true};
    } else {
      opts.fallback = opts.fallback ?? true;
    }
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      apiPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}'
      ),
      apiHubInstancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apiHubInstances/{api_hub_instance}'
      ),
      apiOperationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/operations/{operation}'
      ),
      attributePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/attributes/{attribute}'
      ),
      definitionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/definitions/{definition}'
      ),
      dependencyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dependencies/{dependency}'
      ),
      deploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deployments/{deployment}'
      ),
      externalApiPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/externalApis/{external_api}'
      ),
      hostProjectRegistrationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hostProjectRegistrations/{host_project_registration}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      pluginPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/plugins/{plugin}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      runtimeProjectAttachmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/runtimeProjectAttachments/{runtime_project_attachment}'
      ),
      specPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}'
      ),
      styleGuidePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/plugins/{plugin}/styleGuide'
      ),
      versionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/apis/{api}/versions/{version}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDependencies: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'dependencies'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.apihub.v1.ApiHubDependencies',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.apiHubDependenciesStub) {
      return this.apiHubDependenciesStub;
    }

    // Put together the "service stub" for
    // google.cloud.apihub.v1.ApiHubDependencies.
    this.apiHubDependenciesStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.apihub.v1.ApiHubDependencies'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.apihub.v1.ApiHubDependencies,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const apiHubDependenciesStubMethods = [
      'createDependency',
      'getDependency',
      'updateDependency',
      'deleteDependency',
      'listDependencies',
    ];
    for (const methodName of apiHubDependenciesStubMethods) {
      const callPromise = this.apiHubDependenciesStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.apiHubDependenciesStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'apihub.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'apihub.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Create a dependency between two entities in the API hub.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource for the dependency resource.
   *   Format: `projects/{project}/locations/{location}`
   * @param {string} [request.dependencyId]
   *   Optional. The ID to use for the dependency resource, which will become the
   *   final component of the dependency's resource name. This field is optional.
   *   * If provided, the same will be used. The service will throw an error if
   *   duplicate id is provided by the client.
   *   * If not provided, a system generated id will be used.
   *
   *   This value should be 4-500 characters, and valid characters
   *   are `{@link protos.A-Z|a-z}[0-9]-_`.
   * @param {google.cloud.apihub.v1.Dependency} request.dependency
   *   Required. The dependency resource to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.apihub.v1.Dependency|Dependency}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_hub_dependencies.create_dependency.js</caption>
   * region_tag:apihub_v1_generated_ApiHubDependencies_CreateDependency_async
   */
  createDependency(
    request?: protos.google.cloud.apihub.v1.ICreateDependencyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.ICreateDependencyRequest | undefined,
      {} | undefined,
    ]
  >;
  createDependency(
    request: protos.google.cloud.apihub.v1.ICreateDependencyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.ICreateDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDependency(
    request: protos.google.cloud.apihub.v1.ICreateDependencyRequest,
    callback: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.ICreateDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDependency(
    request?: protos.google.cloud.apihub.v1.ICreateDependencyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.apihub.v1.IDependency,
          | protos.google.cloud.apihub.v1.ICreateDependencyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.ICreateDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.ICreateDependencyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDependency(request, options, callback);
  }
  /**
   * Get details about a dependency resource in the API hub.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the dependency resource to retrieve.
   *   Format: `projects/{project}/locations/{location}/dependencies/{dependency}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.apihub.v1.Dependency|Dependency}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_hub_dependencies.get_dependency.js</caption>
   * region_tag:apihub_v1_generated_ApiHubDependencies_GetDependency_async
   */
  getDependency(
    request?: protos.google.cloud.apihub.v1.IGetDependencyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IGetDependencyRequest | undefined,
      {} | undefined,
    ]
  >;
  getDependency(
    request: protos.google.cloud.apihub.v1.IGetDependencyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IGetDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDependency(
    request: protos.google.cloud.apihub.v1.IGetDependencyRequest,
    callback: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IGetDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDependency(
    request?: protos.google.cloud.apihub.v1.IGetDependencyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.apihub.v1.IDependency,
          | protos.google.cloud.apihub.v1.IGetDependencyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IGetDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IGetDependencyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDependency(request, options, callback);
  }
  /**
   * Update a dependency based on the
   * {@link protos.google.cloud.apihub.v1.UpdateDependencyRequest.update_mask|update_mask}
   * provided in the request.
   *
   * The following fields in the {@link protos.google.cloud.apihub.v1.Dependency|dependency}
   * can be updated:
   * * {@link protos.google.cloud.apihub.v1.Dependency.description|description}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.apihub.v1.Dependency} request.dependency
   *   Required. The dependency resource to update.
   *
   *   The dependency's `name` field is used to identify the dependency to update.
   *   Format: `projects/{project}/locations/{location}/dependencies/{dependency}`
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The list of fields to update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.apihub.v1.Dependency|Dependency}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_hub_dependencies.update_dependency.js</caption>
   * region_tag:apihub_v1_generated_ApiHubDependencies_UpdateDependency_async
   */
  updateDependency(
    request?: protos.google.cloud.apihub.v1.IUpdateDependencyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IUpdateDependencyRequest | undefined,
      {} | undefined,
    ]
  >;
  updateDependency(
    request: protos.google.cloud.apihub.v1.IUpdateDependencyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IUpdateDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDependency(
    request: protos.google.cloud.apihub.v1.IUpdateDependencyRequest,
    callback: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IUpdateDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDependency(
    request?: protos.google.cloud.apihub.v1.IUpdateDependencyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.apihub.v1.IDependency,
          | protos.google.cloud.apihub.v1.IUpdateDependencyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IUpdateDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.apihub.v1.IDependency,
      protos.google.cloud.apihub.v1.IUpdateDependencyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'dependency.name': request.dependency!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateDependency(request, options, callback);
  }
  /**
   * Delete the dependency resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the dependency resource to delete.
   *   Format: `projects/{project}/locations/{location}/dependencies/{dependency}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_hub_dependencies.delete_dependency.js</caption>
   * region_tag:apihub_v1_generated_ApiHubDependencies_DeleteDependency_async
   */
  deleteDependency(
    request?: protos.google.cloud.apihub.v1.IDeleteDependencyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.apihub.v1.IDeleteDependencyRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteDependency(
    request: protos.google.cloud.apihub.v1.IDeleteDependencyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.apihub.v1.IDeleteDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDependency(
    request: protos.google.cloud.apihub.v1.IDeleteDependencyRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.apihub.v1.IDeleteDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDependency(
    request?: protos.google.cloud.apihub.v1.IDeleteDependencyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.apihub.v1.IDeleteDependencyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.apihub.v1.IDeleteDependencyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.apihub.v1.IDeleteDependencyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteDependency(request, options, callback);
  }

  /**
   * List dependencies based on the provided filter and pagination parameters.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns this collection of dependency resources.
   *   Format: `projects/{project}/locations/{location}`
   * @param {string} [request.filter]
   *   Optional. An expression that filters the list of Dependencies.
   *
   *   A filter expression consists of a field name, a comparison operator, and
   *   a value for filtering. The value must be a string. Allowed comparison
   *   operator is `=`. Filters are not case sensitive.
   *
   *   The following fields in the `Dependency` are eligible for filtering:
   *
   *     * `consumer.operation_resource_name` - The operation resource name for
   *     the consumer entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `consumer.external_api_resource_name` - The external api resource name
   *     for the consumer entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `supplier.operation_resource_name` - The operation resource name for
   *     the supplier entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `supplier.external_api_resource_name` - The external api resource name
   *     for the supplier entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *
   *   Expressions are combined with either `AND` logic operator or `OR` logical
   *   operator but not both of them together i.e. only one of the `AND` or `OR`
   *   operator can be used throughout the filter string and both the operators
   *   cannot be used together. No other logical operators are supported. At most
   *   three filter fields are allowed in the filter string and if provided
   *   more than that then `INVALID_ARGUMENT` error is returned by the API.
   *
   *   For example, `consumer.operation_resource_name =
   *   \"projects/p1/locations/global/apis/a1/versions/v1/operations/o1\" OR
   *   supplier.operation_resource_name =
   *   \"projects/p1/locations/global/apis/a1/versions/v1/operations/o1\"` - The
   *   dependencies with either consumer or supplier operation resource name as
   *   _projects/p1/locations/global/apis/a1/versions/v1/operations/o1_.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of dependency resources to return. The service
   *   may return fewer than this value. If unspecified, at most 50 dependencies
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListDependencies` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListDependencies` must
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.apihub.v1.Dependency|Dependency}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDependenciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDependencies(
    request?: protos.google.cloud.apihub.v1.IListDependenciesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.apihub.v1.IDependency[],
      protos.google.cloud.apihub.v1.IListDependenciesRequest | null,
      protos.google.cloud.apihub.v1.IListDependenciesResponse,
    ]
  >;
  listDependencies(
    request: protos.google.cloud.apihub.v1.IListDependenciesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.apihub.v1.IListDependenciesRequest,
      | protos.google.cloud.apihub.v1.IListDependenciesResponse
      | null
      | undefined,
      protos.google.cloud.apihub.v1.IDependency
    >
  ): void;
  listDependencies(
    request: protos.google.cloud.apihub.v1.IListDependenciesRequest,
    callback: PaginationCallback<
      protos.google.cloud.apihub.v1.IListDependenciesRequest,
      | protos.google.cloud.apihub.v1.IListDependenciesResponse
      | null
      | undefined,
      protos.google.cloud.apihub.v1.IDependency
    >
  ): void;
  listDependencies(
    request?: protos.google.cloud.apihub.v1.IListDependenciesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.apihub.v1.IListDependenciesRequest,
          | protos.google.cloud.apihub.v1.IListDependenciesResponse
          | null
          | undefined,
          protos.google.cloud.apihub.v1.IDependency
        >,
    callback?: PaginationCallback<
      protos.google.cloud.apihub.v1.IListDependenciesRequest,
      | protos.google.cloud.apihub.v1.IListDependenciesResponse
      | null
      | undefined,
      protos.google.cloud.apihub.v1.IDependency
    >
  ): Promise<
    [
      protos.google.cloud.apihub.v1.IDependency[],
      protos.google.cloud.apihub.v1.IListDependenciesRequest | null,
      protos.google.cloud.apihub.v1.IListDependenciesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDependencies(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns this collection of dependency resources.
   *   Format: `projects/{project}/locations/{location}`
   * @param {string} [request.filter]
   *   Optional. An expression that filters the list of Dependencies.
   *
   *   A filter expression consists of a field name, a comparison operator, and
   *   a value for filtering. The value must be a string. Allowed comparison
   *   operator is `=`. Filters are not case sensitive.
   *
   *   The following fields in the `Dependency` are eligible for filtering:
   *
   *     * `consumer.operation_resource_name` - The operation resource name for
   *     the consumer entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `consumer.external_api_resource_name` - The external api resource name
   *     for the consumer entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `supplier.operation_resource_name` - The operation resource name for
   *     the supplier entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `supplier.external_api_resource_name` - The external api resource name
   *     for the supplier entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *
   *   Expressions are combined with either `AND` logic operator or `OR` logical
   *   operator but not both of them together i.e. only one of the `AND` or `OR`
   *   operator can be used throughout the filter string and both the operators
   *   cannot be used together. No other logical operators are supported. At most
   *   three filter fields are allowed in the filter string and if provided
   *   more than that then `INVALID_ARGUMENT` error is returned by the API.
   *
   *   For example, `consumer.operation_resource_name =
   *   \"projects/p1/locations/global/apis/a1/versions/v1/operations/o1\" OR
   *   supplier.operation_resource_name =
   *   \"projects/p1/locations/global/apis/a1/versions/v1/operations/o1\"` - The
   *   dependencies with either consumer or supplier operation resource name as
   *   _projects/p1/locations/global/apis/a1/versions/v1/operations/o1_.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of dependency resources to return. The service
   *   may return fewer than this value. If unspecified, at most 50 dependencies
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListDependencies` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListDependencies` must
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.apihub.v1.Dependency|Dependency} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDependenciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDependenciesStream(
    request?: protos.google.cloud.apihub.v1.IListDependenciesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDependencies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDependencies.createStream(
      this.innerApiCalls.listDependencies as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDependencies`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns this collection of dependency resources.
   *   Format: `projects/{project}/locations/{location}`
   * @param {string} [request.filter]
   *   Optional. An expression that filters the list of Dependencies.
   *
   *   A filter expression consists of a field name, a comparison operator, and
   *   a value for filtering. The value must be a string. Allowed comparison
   *   operator is `=`. Filters are not case sensitive.
   *
   *   The following fields in the `Dependency` are eligible for filtering:
   *
   *     * `consumer.operation_resource_name` - The operation resource name for
   *     the consumer entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `consumer.external_api_resource_name` - The external api resource name
   *     for the consumer entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `supplier.operation_resource_name` - The operation resource name for
   *     the supplier entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *     * `supplier.external_api_resource_name` - The external api resource name
   *     for the supplier entity involved in a dependency. Allowed comparison
   *     operators: `=`.
   *
   *   Expressions are combined with either `AND` logic operator or `OR` logical
   *   operator but not both of them together i.e. only one of the `AND` or `OR`
   *   operator can be used throughout the filter string and both the operators
   *   cannot be used together. No other logical operators are supported. At most
   *   three filter fields are allowed in the filter string and if provided
   *   more than that then `INVALID_ARGUMENT` error is returned by the API.
   *
   *   For example, `consumer.operation_resource_name =
   *   \"projects/p1/locations/global/apis/a1/versions/v1/operations/o1\" OR
   *   supplier.operation_resource_name =
   *   \"projects/p1/locations/global/apis/a1/versions/v1/operations/o1\"` - The
   *   dependencies with either consumer or supplier operation resource name as
   *   _projects/p1/locations/global/apis/a1/versions/v1/operations/o1_.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of dependency resources to return. The service
   *   may return fewer than this value. If unspecified, at most 50 dependencies
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListDependencies` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListDependencies` must
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.apihub.v1.Dependency|Dependency}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/api_hub_dependencies.list_dependencies.js</caption>
   * region_tag:apihub_v1_generated_ApiHubDependencies_ListDependencies_async
   */
  listDependenciesAsync(
    request?: protos.google.cloud.apihub.v1.IListDependenciesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.apihub.v1.IDependency> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDependencies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDependencies.asyncIterate(
      this.innerApiCalls['listDependencies'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.apihub.v1.IDependency>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified api resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @returns {string} Resource name string.
   */
  apiPath(project: string, location: string, api: string) {
    return this.pathTemplates.apiPathTemplate.render({
      project: project,
      location: location,
      api: api,
    });
  }

  /**
   * Parse the project from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).project;
  }

  /**
   * Parse the location from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).location;
  }

  /**
   * Parse the api from Api resource.
   *
   * @param {string} apiName
   *   A fully-qualified path representing Api resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiName(apiName: string) {
    return this.pathTemplates.apiPathTemplate.match(apiName).api;
  }

  /**
   * Return a fully-qualified apiHubInstance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api_hub_instance
   * @returns {string} Resource name string.
   */
  apiHubInstancePath(
    project: string,
    location: string,
    apiHubInstance: string
  ) {
    return this.pathTemplates.apiHubInstancePathTemplate.render({
      project: project,
      location: location,
      api_hub_instance: apiHubInstance,
    });
  }

  /**
   * Parse the project from ApiHubInstance resource.
   *
   * @param {string} apiHubInstanceName
   *   A fully-qualified path representing ApiHubInstance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiHubInstanceName(apiHubInstanceName: string) {
    return this.pathTemplates.apiHubInstancePathTemplate.match(
      apiHubInstanceName
    ).project;
  }

  /**
   * Parse the location from ApiHubInstance resource.
   *
   * @param {string} apiHubInstanceName
   *   A fully-qualified path representing ApiHubInstance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiHubInstanceName(apiHubInstanceName: string) {
    return this.pathTemplates.apiHubInstancePathTemplate.match(
      apiHubInstanceName
    ).location;
  }

  /**
   * Parse the api_hub_instance from ApiHubInstance resource.
   *
   * @param {string} apiHubInstanceName
   *   A fully-qualified path representing ApiHubInstance resource.
   * @returns {string} A string representing the api_hub_instance.
   */
  matchApiHubInstanceFromApiHubInstanceName(apiHubInstanceName: string) {
    return this.pathTemplates.apiHubInstancePathTemplate.match(
      apiHubInstanceName
    ).api_hub_instance;
  }

  /**
   * Return a fully-qualified apiOperation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} operation
   * @returns {string} Resource name string.
   */
  apiOperationPath(
    project: string,
    location: string,
    api: string,
    version: string,
    operation: string
  ) {
    return this.pathTemplates.apiOperationPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      operation: operation,
    });
  }

  /**
   * Parse the project from ApiOperation resource.
   *
   * @param {string} apiOperationName
   *   A fully-qualified path representing ApiOperation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromApiOperationName(apiOperationName: string) {
    return this.pathTemplates.apiOperationPathTemplate.match(apiOperationName)
      .project;
  }

  /**
   * Parse the location from ApiOperation resource.
   *
   * @param {string} apiOperationName
   *   A fully-qualified path representing ApiOperation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromApiOperationName(apiOperationName: string) {
    return this.pathTemplates.apiOperationPathTemplate.match(apiOperationName)
      .location;
  }

  /**
   * Parse the api from ApiOperation resource.
   *
   * @param {string} apiOperationName
   *   A fully-qualified path representing ApiOperation resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromApiOperationName(apiOperationName: string) {
    return this.pathTemplates.apiOperationPathTemplate.match(apiOperationName)
      .api;
  }

  /**
   * Parse the version from ApiOperation resource.
   *
   * @param {string} apiOperationName
   *   A fully-qualified path representing ApiOperation resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromApiOperationName(apiOperationName: string) {
    return this.pathTemplates.apiOperationPathTemplate.match(apiOperationName)
      .version;
  }

  /**
   * Parse the operation from ApiOperation resource.
   *
   * @param {string} apiOperationName
   *   A fully-qualified path representing ApiOperation resource.
   * @returns {string} A string representing the operation.
   */
  matchOperationFromApiOperationName(apiOperationName: string) {
    return this.pathTemplates.apiOperationPathTemplate.match(apiOperationName)
      .operation;
  }

  /**
   * Return a fully-qualified attribute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} attribute
   * @returns {string} Resource name string.
   */
  attributePath(project: string, location: string, attribute: string) {
    return this.pathTemplates.attributePathTemplate.render({
      project: project,
      location: location,
      attribute: attribute,
    });
  }

  /**
   * Parse the project from Attribute resource.
   *
   * @param {string} attributeName
   *   A fully-qualified path representing Attribute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAttributeName(attributeName: string) {
    return this.pathTemplates.attributePathTemplate.match(attributeName)
      .project;
  }

  /**
   * Parse the location from Attribute resource.
   *
   * @param {string} attributeName
   *   A fully-qualified path representing Attribute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAttributeName(attributeName: string) {
    return this.pathTemplates.attributePathTemplate.match(attributeName)
      .location;
  }

  /**
   * Parse the attribute from Attribute resource.
   *
   * @param {string} attributeName
   *   A fully-qualified path representing Attribute resource.
   * @returns {string} A string representing the attribute.
   */
  matchAttributeFromAttributeName(attributeName: string) {
    return this.pathTemplates.attributePathTemplate.match(attributeName)
      .attribute;
  }

  /**
   * Return a fully-qualified definition resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} definition
   * @returns {string} Resource name string.
   */
  definitionPath(
    project: string,
    location: string,
    api: string,
    version: string,
    definition: string
  ) {
    return this.pathTemplates.definitionPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      definition: definition,
    });
  }

  /**
   * Parse the project from Definition resource.
   *
   * @param {string} definitionName
   *   A fully-qualified path representing Definition resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDefinitionName(definitionName: string) {
    return this.pathTemplates.definitionPathTemplate.match(definitionName)
      .project;
  }

  /**
   * Parse the location from Definition resource.
   *
   * @param {string} definitionName
   *   A fully-qualified path representing Definition resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDefinitionName(definitionName: string) {
    return this.pathTemplates.definitionPathTemplate.match(definitionName)
      .location;
  }

  /**
   * Parse the api from Definition resource.
   *
   * @param {string} definitionName
   *   A fully-qualified path representing Definition resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromDefinitionName(definitionName: string) {
    return this.pathTemplates.definitionPathTemplate.match(definitionName).api;
  }

  /**
   * Parse the version from Definition resource.
   *
   * @param {string} definitionName
   *   A fully-qualified path representing Definition resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromDefinitionName(definitionName: string) {
    return this.pathTemplates.definitionPathTemplate.match(definitionName)
      .version;
  }

  /**
   * Parse the definition from Definition resource.
   *
   * @param {string} definitionName
   *   A fully-qualified path representing Definition resource.
   * @returns {string} A string representing the definition.
   */
  matchDefinitionFromDefinitionName(definitionName: string) {
    return this.pathTemplates.definitionPathTemplate.match(definitionName)
      .definition;
  }

  /**
   * Return a fully-qualified dependency resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dependency
   * @returns {string} Resource name string.
   */
  dependencyPath(project: string, location: string, dependency: string) {
    return this.pathTemplates.dependencyPathTemplate.render({
      project: project,
      location: location,
      dependency: dependency,
    });
  }

  /**
   * Parse the project from Dependency resource.
   *
   * @param {string} dependencyName
   *   A fully-qualified path representing Dependency resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDependencyName(dependencyName: string) {
    return this.pathTemplates.dependencyPathTemplate.match(dependencyName)
      .project;
  }

  /**
   * Parse the location from Dependency resource.
   *
   * @param {string} dependencyName
   *   A fully-qualified path representing Dependency resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDependencyName(dependencyName: string) {
    return this.pathTemplates.dependencyPathTemplate.match(dependencyName)
      .location;
  }

  /**
   * Parse the dependency from Dependency resource.
   *
   * @param {string} dependencyName
   *   A fully-qualified path representing Dependency resource.
   * @returns {string} A string representing the dependency.
   */
  matchDependencyFromDependencyName(dependencyName: string) {
    return this.pathTemplates.dependencyPathTemplate.match(dependencyName)
      .dependency;
  }

  /**
   * Return a fully-qualified deployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment
   * @returns {string} Resource name string.
   */
  deploymentPath(project: string, location: string, deployment: string) {
    return this.pathTemplates.deploymentPathTemplate.render({
      project: project,
      location: location,
      deployment: deployment,
    });
  }

  /**
   * Parse the project from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .project;
  }

  /**
   * Parse the location from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .location;
  }

  /**
   * Parse the deployment from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .deployment;
  }

  /**
   * Return a fully-qualified externalApi resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} external_api
   * @returns {string} Resource name string.
   */
  externalApiPath(project: string, location: string, externalApi: string) {
    return this.pathTemplates.externalApiPathTemplate.render({
      project: project,
      location: location,
      external_api: externalApi,
    });
  }

  /**
   * Parse the project from ExternalApi resource.
   *
   * @param {string} externalApiName
   *   A fully-qualified path representing ExternalApi resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExternalApiName(externalApiName: string) {
    return this.pathTemplates.externalApiPathTemplate.match(externalApiName)
      .project;
  }

  /**
   * Parse the location from ExternalApi resource.
   *
   * @param {string} externalApiName
   *   A fully-qualified path representing ExternalApi resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExternalApiName(externalApiName: string) {
    return this.pathTemplates.externalApiPathTemplate.match(externalApiName)
      .location;
  }

  /**
   * Parse the external_api from ExternalApi resource.
   *
   * @param {string} externalApiName
   *   A fully-qualified path representing ExternalApi resource.
   * @returns {string} A string representing the external_api.
   */
  matchExternalApiFromExternalApiName(externalApiName: string) {
    return this.pathTemplates.externalApiPathTemplate.match(externalApiName)
      .external_api;
  }

  /**
   * Return a fully-qualified hostProjectRegistration resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} host_project_registration
   * @returns {string} Resource name string.
   */
  hostProjectRegistrationPath(
    project: string,
    location: string,
    hostProjectRegistration: string
  ) {
    return this.pathTemplates.hostProjectRegistrationPathTemplate.render({
      project: project,
      location: location,
      host_project_registration: hostProjectRegistration,
    });
  }

  /**
   * Parse the project from HostProjectRegistration resource.
   *
   * @param {string} hostProjectRegistrationName
   *   A fully-qualified path representing HostProjectRegistration resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHostProjectRegistrationName(
    hostProjectRegistrationName: string
  ) {
    return this.pathTemplates.hostProjectRegistrationPathTemplate.match(
      hostProjectRegistrationName
    ).project;
  }

  /**
   * Parse the location from HostProjectRegistration resource.
   *
   * @param {string} hostProjectRegistrationName
   *   A fully-qualified path representing HostProjectRegistration resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHostProjectRegistrationName(
    hostProjectRegistrationName: string
  ) {
    return this.pathTemplates.hostProjectRegistrationPathTemplate.match(
      hostProjectRegistrationName
    ).location;
  }

  /**
   * Parse the host_project_registration from HostProjectRegistration resource.
   *
   * @param {string} hostProjectRegistrationName
   *   A fully-qualified path representing HostProjectRegistration resource.
   * @returns {string} A string representing the host_project_registration.
   */
  matchHostProjectRegistrationFromHostProjectRegistrationName(
    hostProjectRegistrationName: string
  ) {
    return this.pathTemplates.hostProjectRegistrationPathTemplate.match(
      hostProjectRegistrationName
    ).host_project_registration;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified plugin resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} plugin
   * @returns {string} Resource name string.
   */
  pluginPath(project: string, location: string, plugin: string) {
    return this.pathTemplates.pluginPathTemplate.render({
      project: project,
      location: location,
      plugin: plugin,
    });
  }

  /**
   * Parse the project from Plugin resource.
   *
   * @param {string} pluginName
   *   A fully-qualified path representing Plugin resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPluginName(pluginName: string) {
    return this.pathTemplates.pluginPathTemplate.match(pluginName).project;
  }

  /**
   * Parse the location from Plugin resource.
   *
   * @param {string} pluginName
   *   A fully-qualified path representing Plugin resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPluginName(pluginName: string) {
    return this.pathTemplates.pluginPathTemplate.match(pluginName).location;
  }

  /**
   * Parse the plugin from Plugin resource.
   *
   * @param {string} pluginName
   *   A fully-qualified path representing Plugin resource.
   * @returns {string} A string representing the plugin.
   */
  matchPluginFromPluginName(pluginName: string) {
    return this.pathTemplates.pluginPathTemplate.match(pluginName).plugin;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified runtimeProjectAttachment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} runtime_project_attachment
   * @returns {string} Resource name string.
   */
  runtimeProjectAttachmentPath(
    project: string,
    location: string,
    runtimeProjectAttachment: string
  ) {
    return this.pathTemplates.runtimeProjectAttachmentPathTemplate.render({
      project: project,
      location: location,
      runtime_project_attachment: runtimeProjectAttachment,
    });
  }

  /**
   * Parse the project from RuntimeProjectAttachment resource.
   *
   * @param {string} runtimeProjectAttachmentName
   *   A fully-qualified path representing RuntimeProjectAttachment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRuntimeProjectAttachmentName(
    runtimeProjectAttachmentName: string
  ) {
    return this.pathTemplates.runtimeProjectAttachmentPathTemplate.match(
      runtimeProjectAttachmentName
    ).project;
  }

  /**
   * Parse the location from RuntimeProjectAttachment resource.
   *
   * @param {string} runtimeProjectAttachmentName
   *   A fully-qualified path representing RuntimeProjectAttachment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRuntimeProjectAttachmentName(
    runtimeProjectAttachmentName: string
  ) {
    return this.pathTemplates.runtimeProjectAttachmentPathTemplate.match(
      runtimeProjectAttachmentName
    ).location;
  }

  /**
   * Parse the runtime_project_attachment from RuntimeProjectAttachment resource.
   *
   * @param {string} runtimeProjectAttachmentName
   *   A fully-qualified path representing RuntimeProjectAttachment resource.
   * @returns {string} A string representing the runtime_project_attachment.
   */
  matchRuntimeProjectAttachmentFromRuntimeProjectAttachmentName(
    runtimeProjectAttachmentName: string
  ) {
    return this.pathTemplates.runtimeProjectAttachmentPathTemplate.match(
      runtimeProjectAttachmentName
    ).runtime_project_attachment;
  }

  /**
   * Return a fully-qualified spec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @param {string} spec
   * @returns {string} Resource name string.
   */
  specPath(
    project: string,
    location: string,
    api: string,
    version: string,
    spec: string
  ) {
    return this.pathTemplates.specPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
      spec: spec,
    });
  }

  /**
   * Parse the project from Spec resource.
   *
   * @param {string} specName
   *   A fully-qualified path representing Spec resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSpecName(specName: string) {
    return this.pathTemplates.specPathTemplate.match(specName).project;
  }

  /**
   * Parse the location from Spec resource.
   *
   * @param {string} specName
   *   A fully-qualified path representing Spec resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSpecName(specName: string) {
    return this.pathTemplates.specPathTemplate.match(specName).location;
  }

  /**
   * Parse the api from Spec resource.
   *
   * @param {string} specName
   *   A fully-qualified path representing Spec resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromSpecName(specName: string) {
    return this.pathTemplates.specPathTemplate.match(specName).api;
  }

  /**
   * Parse the version from Spec resource.
   *
   * @param {string} specName
   *   A fully-qualified path representing Spec resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromSpecName(specName: string) {
    return this.pathTemplates.specPathTemplate.match(specName).version;
  }

  /**
   * Parse the spec from Spec resource.
   *
   * @param {string} specName
   *   A fully-qualified path representing Spec resource.
   * @returns {string} A string representing the spec.
   */
  matchSpecFromSpecName(specName: string) {
    return this.pathTemplates.specPathTemplate.match(specName).spec;
  }

  /**
   * Return a fully-qualified styleGuide resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} plugin
   * @returns {string} Resource name string.
   */
  styleGuidePath(project: string, location: string, plugin: string) {
    return this.pathTemplates.styleGuidePathTemplate.render({
      project: project,
      location: location,
      plugin: plugin,
    });
  }

  /**
   * Parse the project from StyleGuide resource.
   *
   * @param {string} styleGuideName
   *   A fully-qualified path representing StyleGuide resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStyleGuideName(styleGuideName: string) {
    return this.pathTemplates.styleGuidePathTemplate.match(styleGuideName)
      .project;
  }

  /**
   * Parse the location from StyleGuide resource.
   *
   * @param {string} styleGuideName
   *   A fully-qualified path representing StyleGuide resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStyleGuideName(styleGuideName: string) {
    return this.pathTemplates.styleGuidePathTemplate.match(styleGuideName)
      .location;
  }

  /**
   * Parse the plugin from StyleGuide resource.
   *
   * @param {string} styleGuideName
   *   A fully-qualified path representing StyleGuide resource.
   * @returns {string} A string representing the plugin.
   */
  matchPluginFromStyleGuideName(styleGuideName: string) {
    return this.pathTemplates.styleGuidePathTemplate.match(styleGuideName)
      .plugin;
  }

  /**
   * Return a fully-qualified version resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} api
   * @param {string} version
   * @returns {string} Resource name string.
   */
  versionPath(project: string, location: string, api: string, version: string) {
    return this.pathTemplates.versionPathTemplate.render({
      project: project,
      location: location,
      api: api,
      version: version,
    });
  }

  /**
   * Parse the project from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).project;
  }

  /**
   * Parse the location from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).location;
  }

  /**
   * Parse the api from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the api.
   */
  matchApiFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).api;
  }

  /**
   * Parse the version from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).version;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.apiHubDependenciesStub && !this._terminated) {
      return this.apiHubDependenciesStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
