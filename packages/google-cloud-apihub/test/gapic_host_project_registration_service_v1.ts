// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it, beforeEach, afterEach} from 'mocha';
import * as hostprojectregistrationserviceModule from '../src';

import {PassThrough} from 'stream';

import {GoogleAuth, protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.HostProjectRegistrationServiceClient', () => {
  let googleAuth: GoogleAuth;
  beforeEach(() => {
    googleAuth = {
      getClient: sinon.stub().resolves({
        getRequestHeaders: sinon
          .stub()
          .resolves({Authorization: 'Bearer SOME_TOKEN'}),
      }),
    } as unknown as GoogleAuth;
  });
  afterEach(() => {
    sinon.restore();
  });
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'apihub.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          hostprojectregistrationserviceModule.v1
            .HostProjectRegistrationServiceClient.servicePath;
        assert.strictEqual(servicePath, 'apihub.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          hostprojectregistrationserviceModule.v1
            .HostProjectRegistrationServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'apihub.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {universeDomain: 'example.com'}
        );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'apihub.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {universe_domain: 'example.com'}
        );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'apihub.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'apihub.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
              {universeDomain: 'configured.example.com'}
            );
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'apihub.configured.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {universe_domain: 'example.com', universeDomain: 'example.net'}
        );
      });
    });

    it('has port', () => {
      const port =
        hostprojectregistrationserviceModule.v1
          .HostProjectRegistrationServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            fallback: true,
          }
        );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.hostProjectRegistrationServiceStub, undefined);
      await client.initialize();
      assert(client.hostProjectRegistrationServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      assert(client.hostProjectRegistrationServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.hostProjectRegistrationServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('createHostProjectRegistration', () => {
    it('invokes createHostProjectRegistration without error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.CreateHostProjectRegistrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.CreateHostProjectRegistrationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apihub.v1.HostProjectRegistration()
      );
      client.innerApiCalls.createHostProjectRegistration =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createHostProjectRegistration(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createHostProjectRegistration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createHostProjectRegistration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createHostProjectRegistration without error using callback', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.CreateHostProjectRegistrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.CreateHostProjectRegistrationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apihub.v1.HostProjectRegistration()
      );
      client.innerApiCalls.createHostProjectRegistration =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createHostProjectRegistration(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apihub.v1.IHostProjectRegistration | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createHostProjectRegistration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createHostProjectRegistration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createHostProjectRegistration with error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.CreateHostProjectRegistrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.CreateHostProjectRegistrationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createHostProjectRegistration = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createHostProjectRegistration(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createHostProjectRegistration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createHostProjectRegistration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createHostProjectRegistration with closed client', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.CreateHostProjectRegistrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.CreateHostProjectRegistrationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createHostProjectRegistration(request),
        expectedError
      );
    });
  });

  describe('getHostProjectRegistration', () => {
    it('invokes getHostProjectRegistration without error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.GetHostProjectRegistrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.GetHostProjectRegistrationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apihub.v1.HostProjectRegistration()
      );
      client.innerApiCalls.getHostProjectRegistration =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getHostProjectRegistration(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getHostProjectRegistration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getHostProjectRegistration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getHostProjectRegistration without error using callback', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.GetHostProjectRegistrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.GetHostProjectRegistrationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.apihub.v1.HostProjectRegistration()
      );
      client.innerApiCalls.getHostProjectRegistration =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getHostProjectRegistration(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.apihub.v1.IHostProjectRegistration | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getHostProjectRegistration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getHostProjectRegistration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getHostProjectRegistration with error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.GetHostProjectRegistrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.GetHostProjectRegistrationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getHostProjectRegistration = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getHostProjectRegistration(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getHostProjectRegistration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getHostProjectRegistration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getHostProjectRegistration with closed client', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.GetHostProjectRegistrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.GetHostProjectRegistrationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getHostProjectRegistration(request),
        expectedError
      );
    });
  });

  describe('listHostProjectRegistrations', () => {
    it('invokes listHostProjectRegistrations without error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
      ];
      client.innerApiCalls.listHostProjectRegistrations =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listHostProjectRegistrations(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listHostProjectRegistrations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listHostProjectRegistrations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listHostProjectRegistrations without error using callback', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
      ];
      client.innerApiCalls.listHostProjectRegistrations =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listHostProjectRegistrations(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.apihub.v1.IHostProjectRegistration[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listHostProjectRegistrations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listHostProjectRegistrations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listHostProjectRegistrations with error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listHostProjectRegistrations = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listHostProjectRegistrations(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listHostProjectRegistrations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listHostProjectRegistrations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listHostProjectRegistrationsStream without error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
      ];
      client.descriptors.page.listHostProjectRegistrations.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listHostProjectRegistrationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apihub.v1.HostProjectRegistration[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.apihub.v1.HostProjectRegistration) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listHostProjectRegistrations
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listHostProjectRegistrations,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listHostProjectRegistrations
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listHostProjectRegistrationsStream with error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listHostProjectRegistrations.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listHostProjectRegistrationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.apihub.v1.HostProjectRegistration[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.apihub.v1.HostProjectRegistration) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listHostProjectRegistrations
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listHostProjectRegistrations,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listHostProjectRegistrations
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listHostProjectRegistrations without error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
        generateSampleMessage(
          new protos.google.cloud.apihub.v1.HostProjectRegistration()
        ),
      ];
      client.descriptors.page.listHostProjectRegistrations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.apihub.v1.IHostProjectRegistration[] =
        [];
      const iterable = client.listHostProjectRegistrationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listHostProjectRegistrations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listHostProjectRegistrations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listHostProjectRegistrations with error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.apihub.v1.ListHostProjectRegistrationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listHostProjectRegistrations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listHostProjectRegistrationsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.apihub.v1.IHostProjectRegistration[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listHostProjectRegistrations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listHostProjectRegistrations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            auth: googleAuth,
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('api', () => {
      const fakePath = '/rendered/path/api';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        api: 'apiValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.apiPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.apiPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('apiPath', () => {
        const result = client.apiPath(
          'projectValue',
          'locationValue',
          'apiValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.apiPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromApiName', () => {
        const result = client.matchProjectFromApiName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.apiPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromApiName', () => {
        const result = client.matchLocationFromApiName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.apiPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiFromApiName', () => {
        const result = client.matchApiFromApiName(fakePath);
        assert.strictEqual(result, 'apiValue');
        assert(
          (client.pathTemplates.apiPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('apiHubInstance', () => {
      const fakePath = '/rendered/path/apiHubInstance';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        api_hub_instance: 'apiHubInstanceValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.apiHubInstancePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.apiHubInstancePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('apiHubInstancePath', () => {
        const result = client.apiHubInstancePath(
          'projectValue',
          'locationValue',
          'apiHubInstanceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.apiHubInstancePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromApiHubInstanceName', () => {
        const result = client.matchProjectFromApiHubInstanceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.apiHubInstancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromApiHubInstanceName', () => {
        const result = client.matchLocationFromApiHubInstanceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.apiHubInstancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiHubInstanceFromApiHubInstanceName', () => {
        const result =
          client.matchApiHubInstanceFromApiHubInstanceName(fakePath);
        assert.strictEqual(result, 'apiHubInstanceValue');
        assert(
          (client.pathTemplates.apiHubInstancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('apiOperation', () => {
      const fakePath = '/rendered/path/apiOperation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        api: 'apiValue',
        version: 'versionValue',
        operation: 'operationValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.apiOperationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.apiOperationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('apiOperationPath', () => {
        const result = client.apiOperationPath(
          'projectValue',
          'locationValue',
          'apiValue',
          'versionValue',
          'operationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.apiOperationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromApiOperationName', () => {
        const result = client.matchProjectFromApiOperationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.apiOperationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromApiOperationName', () => {
        const result = client.matchLocationFromApiOperationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.apiOperationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiFromApiOperationName', () => {
        const result = client.matchApiFromApiOperationName(fakePath);
        assert.strictEqual(result, 'apiValue');
        assert(
          (client.pathTemplates.apiOperationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVersionFromApiOperationName', () => {
        const result = client.matchVersionFromApiOperationName(fakePath);
        assert.strictEqual(result, 'versionValue');
        assert(
          (client.pathTemplates.apiOperationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchOperationFromApiOperationName', () => {
        const result = client.matchOperationFromApiOperationName(fakePath);
        assert.strictEqual(result, 'operationValue');
        assert(
          (client.pathTemplates.apiOperationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('attribute', () => {
      const fakePath = '/rendered/path/attribute';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        attribute: 'attributeValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.attributePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.attributePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('attributePath', () => {
        const result = client.attributePath(
          'projectValue',
          'locationValue',
          'attributeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.attributePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAttributeName', () => {
        const result = client.matchProjectFromAttributeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.attributePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAttributeName', () => {
        const result = client.matchLocationFromAttributeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.attributePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAttributeFromAttributeName', () => {
        const result = client.matchAttributeFromAttributeName(fakePath);
        assert.strictEqual(result, 'attributeValue');
        assert(
          (client.pathTemplates.attributePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('definition', () => {
      const fakePath = '/rendered/path/definition';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        api: 'apiValue',
        version: 'versionValue',
        definition: 'definitionValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.definitionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.definitionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('definitionPath', () => {
        const result = client.definitionPath(
          'projectValue',
          'locationValue',
          'apiValue',
          'versionValue',
          'definitionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.definitionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDefinitionName', () => {
        const result = client.matchProjectFromDefinitionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.definitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDefinitionName', () => {
        const result = client.matchLocationFromDefinitionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.definitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiFromDefinitionName', () => {
        const result = client.matchApiFromDefinitionName(fakePath);
        assert.strictEqual(result, 'apiValue');
        assert(
          (client.pathTemplates.definitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVersionFromDefinitionName', () => {
        const result = client.matchVersionFromDefinitionName(fakePath);
        assert.strictEqual(result, 'versionValue');
        assert(
          (client.pathTemplates.definitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDefinitionFromDefinitionName', () => {
        const result = client.matchDefinitionFromDefinitionName(fakePath);
        assert.strictEqual(result, 'definitionValue');
        assert(
          (client.pathTemplates.definitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dependency', () => {
      const fakePath = '/rendered/path/dependency';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dependency: 'dependencyValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.dependencyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dependencyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dependencyPath', () => {
        const result = client.dependencyPath(
          'projectValue',
          'locationValue',
          'dependencyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dependencyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDependencyName', () => {
        const result = client.matchProjectFromDependencyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dependencyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDependencyName', () => {
        const result = client.matchLocationFromDependencyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dependencyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDependencyFromDependencyName', () => {
        const result = client.matchDependencyFromDependencyName(fakePath);
        assert.strictEqual(result, 'dependencyValue');
        assert(
          (client.pathTemplates.dependencyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('deployment', () => {
      const fakePath = '/rendered/path/deployment';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        deployment: 'deploymentValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.deploymentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.deploymentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('deploymentPath', () => {
        const result = client.deploymentPath(
          'projectValue',
          'locationValue',
          'deploymentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.deploymentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDeploymentName', () => {
        const result = client.matchProjectFromDeploymentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.deploymentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDeploymentName', () => {
        const result = client.matchLocationFromDeploymentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.deploymentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDeploymentFromDeploymentName', () => {
        const result = client.matchDeploymentFromDeploymentName(fakePath);
        assert.strictEqual(result, 'deploymentValue');
        assert(
          (client.pathTemplates.deploymentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('externalApi', () => {
      const fakePath = '/rendered/path/externalApi';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        external_api: 'externalApiValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.externalApiPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.externalApiPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('externalApiPath', () => {
        const result = client.externalApiPath(
          'projectValue',
          'locationValue',
          'externalApiValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.externalApiPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromExternalApiName', () => {
        const result = client.matchProjectFromExternalApiName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.externalApiPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromExternalApiName', () => {
        const result = client.matchLocationFromExternalApiName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.externalApiPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExternalApiFromExternalApiName', () => {
        const result = client.matchExternalApiFromExternalApiName(fakePath);
        assert.strictEqual(result, 'externalApiValue');
        assert(
          (client.pathTemplates.externalApiPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('hostProjectRegistration', () => {
      const fakePath = '/rendered/path/hostProjectRegistration';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        host_project_registration: 'hostProjectRegistrationValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.hostProjectRegistrationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.hostProjectRegistrationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('hostProjectRegistrationPath', () => {
        const result = client.hostProjectRegistrationPath(
          'projectValue',
          'locationValue',
          'hostProjectRegistrationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.hostProjectRegistrationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromHostProjectRegistrationName', () => {
        const result =
          client.matchProjectFromHostProjectRegistrationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.hostProjectRegistrationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromHostProjectRegistrationName', () => {
        const result =
          client.matchLocationFromHostProjectRegistrationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.hostProjectRegistrationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHostProjectRegistrationFromHostProjectRegistrationName', () => {
        const result =
          client.matchHostProjectRegistrationFromHostProjectRegistrationName(
            fakePath
          );
        assert.strictEqual(result, 'hostProjectRegistrationValue');
        assert(
          (
            client.pathTemplates.hostProjectRegistrationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('plugin', () => {
      const fakePath = '/rendered/path/plugin';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        plugin: 'pluginValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.pluginPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.pluginPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('pluginPath', () => {
        const result = client.pluginPath(
          'projectValue',
          'locationValue',
          'pluginValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.pluginPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPluginName', () => {
        const result = client.matchProjectFromPluginName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.pluginPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPluginName', () => {
        const result = client.matchLocationFromPluginName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.pluginPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPluginFromPluginName', () => {
        const result = client.matchPluginFromPluginName(fakePath);
        assert.strictEqual(result, 'pluginValue');
        assert(
          (client.pathTemplates.pluginPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('runtimeProjectAttachment', () => {
      const fakePath = '/rendered/path/runtimeProjectAttachment';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        runtime_project_attachment: 'runtimeProjectAttachmentValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.runtimeProjectAttachmentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.runtimeProjectAttachmentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('runtimeProjectAttachmentPath', () => {
        const result = client.runtimeProjectAttachmentPath(
          'projectValue',
          'locationValue',
          'runtimeProjectAttachmentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.runtimeProjectAttachmentPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRuntimeProjectAttachmentName', () => {
        const result =
          client.matchProjectFromRuntimeProjectAttachmentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.runtimeProjectAttachmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromRuntimeProjectAttachmentName', () => {
        const result =
          client.matchLocationFromRuntimeProjectAttachmentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.runtimeProjectAttachmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRuntimeProjectAttachmentFromRuntimeProjectAttachmentName', () => {
        const result =
          client.matchRuntimeProjectAttachmentFromRuntimeProjectAttachmentName(
            fakePath
          );
        assert.strictEqual(result, 'runtimeProjectAttachmentValue');
        assert(
          (
            client.pathTemplates.runtimeProjectAttachmentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('spec', () => {
      const fakePath = '/rendered/path/spec';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        api: 'apiValue',
        version: 'versionValue',
        spec: 'specValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.specPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.specPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('specPath', () => {
        const result = client.specPath(
          'projectValue',
          'locationValue',
          'apiValue',
          'versionValue',
          'specValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.specPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSpecName', () => {
        const result = client.matchProjectFromSpecName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.specPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSpecName', () => {
        const result = client.matchLocationFromSpecName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.specPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiFromSpecName', () => {
        const result = client.matchApiFromSpecName(fakePath);
        assert.strictEqual(result, 'apiValue');
        assert(
          (client.pathTemplates.specPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVersionFromSpecName', () => {
        const result = client.matchVersionFromSpecName(fakePath);
        assert.strictEqual(result, 'versionValue');
        assert(
          (client.pathTemplates.specPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSpecFromSpecName', () => {
        const result = client.matchSpecFromSpecName(fakePath);
        assert.strictEqual(result, 'specValue');
        assert(
          (client.pathTemplates.specPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('styleGuide', () => {
      const fakePath = '/rendered/path/styleGuide';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        plugin: 'pluginValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.styleGuidePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.styleGuidePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('styleGuidePath', () => {
        const result = client.styleGuidePath(
          'projectValue',
          'locationValue',
          'pluginValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.styleGuidePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromStyleGuideName', () => {
        const result = client.matchProjectFromStyleGuideName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.styleGuidePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromStyleGuideName', () => {
        const result = client.matchLocationFromStyleGuideName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.styleGuidePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPluginFromStyleGuideName', () => {
        const result = client.matchPluginFromStyleGuideName(fakePath);
        assert.strictEqual(result, 'pluginValue');
        assert(
          (client.pathTemplates.styleGuidePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('version', () => {
      const fakePath = '/rendered/path/version';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        api: 'apiValue',
        version: 'versionValue',
      };
      const client =
        new hostprojectregistrationserviceModule.v1.HostProjectRegistrationServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.versionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.versionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('versionPath', () => {
        const result = client.versionPath(
          'projectValue',
          'locationValue',
          'apiValue',
          'versionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.versionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromVersionName', () => {
        const result = client.matchProjectFromVersionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromVersionName', () => {
        const result = client.matchLocationFromVersionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchApiFromVersionName', () => {
        const result = client.matchApiFromVersionName(fakePath);
        assert.strictEqual(result, 'apiValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVersionFromVersionName', () => {
        const result = client.matchVersionFromVersionName(fakePath);
        assert.strictEqual(result, 'versionValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
