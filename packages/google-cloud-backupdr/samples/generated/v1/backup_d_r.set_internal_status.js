// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(dataSource, value, backupConfigState) {
  // [START backupdr_v1_generated_BackupDR_SetInternalStatus_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the instance, in the format
   *  'projects/* /locations/* /backupVaults/* /dataSources/'.
   */
  // const dataSource = 'abc123'
  /**
   *  Required. The value required for this method to work.  This field must be
   *  the 32-byte SHA256 hash of the DataSourceID.  The DataSourceID used here is
   *  only the final piece of the fully qualified resource path for this
   *  DataSource (i.e. the part after '.../dataSources/'). This field exists to
   *  make this method difficult to call since it is intended for use only by
   *  Backup Appliances.
   */
  // const value = Buffer.from('string')
  /**
   *  Required. Output only. The new BackupConfigState to set for the DataSource.
   */
  // const backupConfigState = {}
  /**
   *  Optional. An optional request ID to identify requests. Specify a unique
   *  request ID so that if you must retry your request, the server will know to
   *  ignore the request if it has already been completed. The server will
   *  guarantee that for at least 60 minutes after the first request. The request
   *  ID must be a valid UUID with the exception that zero UUID is not supported
   *  (00000000-0000-0000-0000-000000000000).
   */
  // const requestId = 'abc123'

  // Imports the Backupdr library
  const {BackupDRClient} = require('@google-cloud/backupdr').v1;

  // Instantiates a client
  const backupdrClient = new BackupDRClient();

  async function callSetInternalStatus() {
    // Construct request
    const request = {
      dataSource,
      value,
      backupConfigState,
    };

    // Run request
    const [operation] = await backupdrClient.setInternalStatus(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callSetInternalStatus();
  // [END backupdr_v1_generated_BackupDR_SetInternalStatus_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
